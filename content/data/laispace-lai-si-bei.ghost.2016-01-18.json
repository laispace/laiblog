{"meta":{"exported_on":1453134563700,"version":"003"},"data":{"posts":[{"id":453,"uuid":"4d7f1f35-14af-43fa-a9f2-f9cf39b0b02c","title":"GIT 常用命令","slug":"git","markdown":"\r\nHEAD指向的版本就是当前版本\r\n\r\n\r\n- log 记录\r\n\r\n        # 查 看提交历史\r\n        $ git log\r\n        \r\n        # log --graph 查看分支合并图\r\n        $ git log --graph\r\n        \r\n- reflog 命令历史\r\n\r\n        # 记录命令的操作历史\r\n        $ git reflog        \r\n        \r\n- reset 回退\r\n\r\n        # 回退到上一个版本\r\n        $ git reset --hard HEAD^\r\n        \r\n        # 回退到上两个版本\r\n        $ git reset --hard HEAD^^\r\n        \r\n        # 回退到上48个版本\r\n        $ git reset --hard HEAD~48\r\n\r\n        # 回退到以 id 为 3628164 的版本\r\n        $ git reset --hard 3628164  \r\n        \r\n- remote 远程\r\n\r\n        # remote add 添加远程仓库             \r\n        $ git remote add origin git@server-name:username/repoName.git\r\n\r\n        # remote -v 查看远程仓库\r\n        $ git remote -v \r\n        \r\n- push 推送到远程\r\n        \r\n        # 将本地的主分支推送到远程\r\n        $ git push -u origin master\r\n        \r\n\r\n- pull 从远程拉取\r\n    \r\n        $ git pull\r\n\r\n- clone 从远程克隆\r\n\r\n        $ git clone git@server-name:username/repoName.git\r\n    \r\n    \r\n- branch 分支     \r\n\r\n        # 查看当前分支\r\n        $ git branch\r\n        \r\n        # branch filename 创建分支\r\n        $ git branch testBranch\r\n        \r\n        # branch -d 删除分支        \r\n        # 合并成功后，删除 testBranch 分支\r\n        $ git branch -d testBranch \r\n        \r\n        # 若合并失败，则手动解决冲突后，执行\r\n        $ git add conflictedFile.md \r\n        $ git commit -m \"conflict fixed\"    \r\n        \r\n        # - branch --set-upstream 关联本地与远程分支\r\n        # 建立本地分支与远程分支的关联，名字最好一致！\r\n        $ git branch --set-upstream branch-name origin/branch-name； \r\n                \r\n- checkout 切换\r\n\r\n        # checkout -b 创建并切换分支\r\n        # 创建一个名为 testBranch 的分支，-b 表示创建并切换\r\n        $ git checkout -b testBranch\r\n        # -b 表示创建并切换，相当于：\r\n        # git branch testBranch\r\n        # git checkout testBranch\r\n\r\n        # checkout -- 撤销\r\n        # 把 README.md 在工作区的修改全部撤销(回到最近一次git commit或git add时的状态)\r\n        $ git checkout -- README.md \r\n        \r\n                \r\n        # checkout filename 切换分支        \r\n        # 切换回主分支\r\n        $ git checkout master\r\n        \r\n- merge 合并分支\r\n        \r\n        # 将 testBranch 分支的内容合并到主分支\r\n        $ git merge testBranch\r\n\r\n- tag 标签\r\n\r\n        # 创建标签\r\n        $ git tag v2.0\r\n\r\n        # 查看所有标签\r\n        $ git tag\r\n        \r\n        # 查看特定标签信息\r\n        $ git show v2.0\r\n        \r\n        # 删除标签\r\n        $ git tag -d v2.0\r\n        \r\n        # 创建的标签都只存储在本地\r\n        # 手动推送标签到远程\r\n        $ git push origin v2.0\r\n        \r\n        # 手动推送所有标签到远程\r\n        $ git push origin --tags\r\n        \r\n- 自定义配置\r\n\r\n        # 配置别名，如 st 表示 status，co 表示 checkout，ci 表示commit，br 表示 branch\r\n        $ git config --global alias.st status   \r\n        $ git config --global alias.co checkout\r\n        $ git config --global alias.ci commit\r\n        $ git config --global alias.br branch\r\n    \r\n        \r\n\r\n- 忽略文件被git追踪：\r\n\r\n项目根目录下创建.gitignore文件后将需要忽略的文件写入即可。\r\n\r\n除自己新建手写这个文件外，可在[这里](https://github.com/github/gitignore)看到配置好的 .gitignore       \r\n\r\n\r\n\r\n- fork 别人的项目后更新代码的方法\r\n\r\n1. 举个例子，需要 fork 这个项目 https://github.com/tarobjtu/WebFundamentals.git\r\n\r\n2. 点击 fork, 就会复制一份代码到自己的 repo https://github.com/laispace/WebFundamentals.git\r\n\r\n3. 本地 clone 自己 repo 中的这个项目\r\n\r\n    $ git clone https://github.com/laispace/WebFundamentals.git\r\n\r\n4. 添加自己的远程仓库\r\n    \r\n    $ cd WebFundamentals\r\n    $ git remote add laispace https://github.com/laispace/WebFundamentals.git\r\n\r\n5. 修改代码后进行 push\r\n\r\n    $ git add --all\r\n    $ git commit -m 'edit some files'\r\n    $ git push\r\n\r\n这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？\r\n\r\n6. 添加源项目的远程仓库\r\n\r\n    $ git remote add tarobjtu https://github.com/tarobjtu/WebFundamentals.git\r\n    // 这时候可以看到有两个源了\r\n    $ git remote  \r\n    // laispace\r\n    // tarobjtu\r\n\r\n7. 拉取源仓库的代码到本地\r\n    \r\n    $ git fetch tarobjtu\r\n\r\n8. 合并源仓库的 master 分支代码到本地\r\n\r\n    $ git merge tarobjtu/master\r\n\r\n9. 提交代码到我们自己的仓库\r\n\r\n    $ git add --all\r\n    $ git commit -m '合并源仓库代码'\r\n    $ git push\r\n\r\n\r\n# 删除提交记录的办法\r\ngit reset --hard HEAD~2 # 取消之前的两次提交\r\ngit push origin HEAD --force # 强制提交到，删除之前的数据\r\n\r\n### 参考资料\r\n\r\n1. [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)                  \r\n        \r\n        \r\n        \r\n","html":"<p>HEAD指向的版本就是当前版本</p>\n\n<ul>\n<li><p>log 记录</p>\n\n<pre><code># 查 看提交历史\n$ git log\n\n\n# log --graph 查看分支合并图\n$ git log --graph\n</code></pre></li>\n<li><p>reflog 命令历史</p>\n\n<pre><code># 记录命令的操作历史\n$ git reflog        \n</code></pre></li>\n<li><p>reset 回退</p>\n\n<pre><code># 回退到上一个版本\n$ git reset --hard HEAD^\n\n\n# 回退到上两个版本\n$ git reset --hard HEAD^^\n\n\n# 回退到上48个版本\n$ git reset --hard HEAD~48\n\n\n# 回退到以 id 为 3628164 的版本\n$ git reset --hard 3628164  \n</code></pre></li>\n<li><p>remote 远程</p>\n\n<pre><code># remote add 添加远程仓库             \n$ git remote add origin git@server-name:username/repoName.git\n\n\n# remote -v 查看远程仓库\n$ git remote -v \n</code></pre></li>\n<li><p>push 推送到远程</p>\n\n<pre><code># 将本地的主分支推送到远程\n$ git push -u origin master\n</code></pre></li>\n<li><p>pull 从远程拉取</p>\n\n<pre><code>$ git pull\n</code></pre></li>\n<li><p>clone 从远程克隆</p>\n\n<pre><code>$ git clone git@server-name:username/repoName.git\n</code></pre></li>\n<li><p>branch 分支     </p>\n\n<pre><code># 查看当前分支\n$ git branch\n\n\n# branch filename 创建分支\n$ git branch testBranch\n\n\n# branch -d 删除分支        \n# 合并成功后，删除 testBranch 分支\n$ git branch -d testBranch \n\n\n# 若合并失败，则手动解决冲突后，执行\n$ git add conflictedFile.md \n$ git commit -m \"conflict fixed\"    \n\n\n# - branch --set-upstream 关联本地与远程分支\n# 建立本地分支与远程分支的关联，名字最好一致！\n$ git branch --set-upstream branch-name origin/branch-name； \n</code></pre></li>\n<li><p>checkout 切换</p>\n\n<pre><code># checkout -b 创建并切换分支\n# 创建一个名为 testBranch 的分支，-b 表示创建并切换\n$ git checkout -b testBranch\n# -b 表示创建并切换，相当于：\n# git branch testBranch\n# git checkout testBranch\n\n\n# checkout -- 撤销\n# 把 README.md 在工作区的修改全部撤销(回到最近一次git commit或git add时的状态)\n$ git checkout -- README.md \n\n\n# checkout filename 切换分支        \n# 切换回主分支\n$ git checkout master\n</code></pre></li>\n<li><p>merge 合并分支</p>\n\n<pre><code># 将 testBranch 分支的内容合并到主分支\n$ git merge testBranch\n</code></pre></li>\n<li><p>tag 标签</p>\n\n<pre><code># 创建标签\n$ git tag v2.0\n\n\n# 查看所有标签\n$ git tag\n\n\n# 查看特定标签信息\n$ git show v2.0\n\n\n# 删除标签\n$ git tag -d v2.0\n\n\n# 创建的标签都只存储在本地\n# 手动推送标签到远程\n$ git push origin v2.0\n\n\n# 手动推送所有标签到远程\n$ git push origin --tags\n</code></pre></li>\n<li><p>自定义配置</p>\n\n<pre><code># 配置别名，如 st 表示 status，co 表示 checkout，ci 表示commit，br 表示 branch\n$ git config --global alias.st status   \n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n</code></pre></li>\n<li><p>忽略文件被git追踪：</p></li>\n</ul>\n\n<p>项目根目录下创建.gitignore文件后将需要忽略的文件写入即可。</p>\n\n<p>除自己新建手写这个文件外，可在<a href=\"https://github.com/github/gitignore\">这里</a>看到配置好的 .gitignore       </p>\n\n<ul>\n<li><p>fork 别人的项目后更新代码的方法</p></li>\n<li><p>举个例子，需要 fork 这个项目 <a href=\"https://github.com/tarobjtu/WebFundamentals.git\">https://github.com/tarobjtu/WebFundamentals.git</a></p></li>\n<li><p>点击 fork, 就会复制一份代码到自己的 repo <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>本地 clone 自己 repo 中的这个项目</p>\n\n<p>$ git clone <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>添加自己的远程仓库</p>\n\n<p>$ cd WebFundamentals\n$ git remote add laispace <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>修改代码后进行 push</p>\n\n<p>$ git add --all\n$ git commit -m 'edit some files'\n$ git push</p></li>\n</ul>\n\n<p>这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？</p>\n\n<ol>\n<li><p>添加源项目的远程仓库</p>\n\n<p>$ git remote add tarobjtu <a href=\"https://github.com/tarobjtu/WebFundamentals.git\">https://github.com/tarobjtu/WebFundamentals.git</a>\n// 这时候可以看到有两个源了\n$ git remote <br />\n// laispace\n// tarobjtu</p></li>\n<li><p>拉取源仓库的代码到本地</p>\n\n<p>$ git fetch tarobjtu</p></li>\n<li><p>合并源仓库的 master 分支代码到本地</p>\n\n<p>$ git merge tarobjtu/master</p></li>\n<li><p>提交代码到我们自己的仓库</p>\n\n<p>$ git add --all\n$ git commit -m '合并源仓库代码'\n$ git push</p></li>\n</ol>\n\n<h1 id=\"\">删除提交记录的办法</h1>\n\n<p>git reset --hard HEAD~2 # 取消之前的两次提交 <br />\ngit push origin HEAD --force # 强制提交到，删除之前的数据</p>\n\n<h3 id=\"\">参考资料</h3>\n\n<ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a>                  </li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400237669000,"created_by":1,"updated_at":1400237669000,"updated_by":1,"published_at":1400237669000,"published_by":1},{"id":454,"uuid":"67e08c22-c281-4a56-99aa-50b64d10b3ca","title":"Node 常用模块","slug":"nodejs","markdown":"\n> 持续更新\n\n\n未整理：\n\nconmander https://www.npmjs.com/package/commander\n\npassport passport-local http://passportjs.org/ \n\n# 官方模块\n- util http://nodejs.org/api/util.html\n- events http://nodejs.org/api/events.html\n- path http://nodejs.org/api/path.html\n- crypto http://nodejs.org/api/crypto.html\n- http  \n\n# 工具模块        \n\n- [utility](https://www.npmjs.com/package/utility) \n提供了常用工具：\n\n\t```\n\tvar util = require('utility');\n\tutil.md5('赖小赖');\n\tutil.md5('赖小赖', 'base64');\n```\n       \n- [eventproxy](https://www.npmjs.com/package/eventproxy)\n控制并发\n\n- [async](https://www.npmjs.com/package/async)\n控制并发\n\n- [findit](https://www.npmjs.com/package/findit)\n遍历目录\n\n- [formidable](https://github.com/felixge/node-formidable)\n文件上传\n\n# 测试模块\n- [mocha](http://mochajs.org/)\n测试框架 \n\n- [should.js](https://github.com/tj/should.js)\n断言库\n\n- [chai.js](http://chaijs.com/)\n断言库\n\n- [expect.js](https://github.com/Automattic/expect.js)\n断言库\n\n# 部署平台\n- [heroku](https://www.heroku.com/)\n\n# grunt 模块\n- [grunt-nodemon]\n\n- [postcss](https://github.com/postcss/autoprefixer)\n后处理 css\n\n# 编译相关\n- [babel-node](https://babeljs.io/docs/usage/cli/#babel-node) \n将 ES6 编译 \n\n\n\n各种乱七八糟的指令备忘\n```\n\"scripts\": {\n    \"start\": \"babel-node server.js\",\n    \"watch\": \"nodemon --exec babel-node -- server.js\"\n  }\n```","html":"<blockquote>\n  <p>持续更新</p>\n</blockquote>\n\n<p>未整理：</p>\n\n<p>conmander <a href=\"https://www.npmjs.com/package/commander\">https://www.npmjs.com/package/commander</a></p>\n\n<p>passport passport-local <a href=\"http://passportjs.org/\">http://passportjs.org/</a> </p>\n\n<h1 id=\"\">官方模块</h1>\n\n<ul>\n<li>util <a href=\"http://nodejs.org/api/util.html\">http://nodejs.org/api/util.html</a></li>\n<li>events <a href=\"http://nodejs.org/api/events.html\">http://nodejs.org/api/events.html</a></li>\n<li>path <a href=\"http://nodejs.org/api/path.html\">http://nodejs.org/api/path.html</a></li>\n<li>crypto <a href=\"http://nodejs.org/api/crypto.html\">http://nodejs.org/api/crypto.html</a></li>\n<li>http  </li>\n</ul>\n\n<h1 id=\"\">工具模块</h1>\n\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/utility\">utility</a> \n提供了常用工具：</p>\n\n<p>```\nvar util = require('utility');\nutil.md5('赖小赖');\nutil.md5('赖小赖', 'base64');</p></li>\n</ul>\n\n<pre><code>- [eventproxy](https://www.npmjs.com/package/eventproxy)\n控制并发\n\n- [async](https://www.npmjs.com/package/async)\n控制并发\n\n- [findit](https://www.npmjs.com/package/findit)\n遍历目录\n\n- [formidable](https://github.com/felixge/node-formidable)\n文件上传\n\n# 测试模块\n- [mocha](http://mochajs.org/)\n测试框架 \n\n- [should.js](https://github.com/tj/should.js)\n断言库\n\n- [chai.js](http://chaijs.com/)\n断言库\n\n- [expect.js](https://github.com/Automattic/expect.js)\n断言库\n\n# 部署平台\n- [heroku](https://www.heroku.com/)\n\n# grunt 模块\n- [grunt-nodemon]\n\n- [postcss](https://github.com/postcss/autoprefixer)\n后处理 css\n\n# 编译相关\n- [babel-node](https://babeljs.io/docs/usage/cli/#babel-node) \n将 ES6 编译 \n\n\n\n各种乱七八糟的指令备忘\n</code></pre>\n\n<p>\"scripts\": {\n    \"start\": \"babel-node server.js\",\n    \"watch\": \"nodemon --exec babel-node -- server.js\"\n  }\n```</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420109669000,"created_by":1,"updated_at":1440298652766,"updated_by":1,"published_at":1420109669000,"published_by":1},{"id":455,"uuid":"f51f4a9e-e3bc-4c3e-b0a7-779897bb9b6f","title":"设置 git/npm/bower/gem 镜像或代理的方法","slug":"set-proxy","markdown":"\r\n\r\n有时候我们在某些环境下(比如墙内或公司内网)可能不能正常使用 git/npm/bower/gem 等各种工具, 解决办法有:\r\n\r\n- 切换镜像\r\n- 使用代理\r\n- 召唤五姑娘\r\n\r\n不同工具设置的语法略有偏颇, 总结如下.\r\n\r\n# 使用镜像\r\n\r\n其中, npm/bower/gem 等如果可以通过切换镜像来解决的话, 则不用设置代理.\r\n\r\n不知道有哪些镜像资源, 则 Google 之. 以下的 < registry url > 指的就是镜像的 url, 比如 http://registry.npm.taobao.org/\r\n\r\n## npm \r\n\r\n设置全局使用指定的镜像:\r\n\r\n    $ npm config set registry < registry url >\r\n\r\n或者在安装时才指定:\r\n\r\n    $ npm install --registry < registry url >\r\n\r\n当然, 每次都要输入那么长串的 registry url 的话, 实在太麻烦, 可以使用 nrm 这个模块来切换镜像:\r\n    \r\n    // 全局安装\r\n    $ npm install -g nrm\r\n    // 查看有哪些镜像\r\n    $ nrm ls\r\n    // 对比各个镜像的访问速度\r\n    $ nrm test\r\n    // 使用淘宝的镜像\r\n    $ nrm use taobao\r\n\r\n## gem\r\n\r\n    $ gem source -r <registry url>    \r\n\r\ngem 除了使用镜像以外, 还可以直接到官网下载需要的包, 然后在本地安装,\r\n比如我们要安装 sass, 先[到这里](https://rubygems.org/gems/sass) 把 sass 下载到本地, 然后在本地安装:\r\n\r\n    // 注意这里的 sass.gem 是下载到本地的包名\r\n    $ gem install --local sass.gem\r\n\r\n\r\n# 使用代理\r\n\r\n镜像不能用, 那就使用代理吧.\r\n\r\n假定公司提供的代理为 http://proxy.mysite.com:8080\r\n\r\n## 给命令行统一设置代理\r\n\r\n- windows \r\n\r\n    $ set http_proxy=http://proxy.mysite.com:8080\r\n    \r\n    // 如果有要求用户名密码则输入: \r\n    $ set http_proxy_user=< username >\r\n    $ set http_proxy_pass=< password >\r\n    \r\n若不想每次都手动设置, 则可以设置到系统的环境变量中\r\n    \r\n    右击计算机–>属性–>高级–>环境变量–>系统变量，设置系统变量\r\n\r\n- mac \r\n    \r\n    $ sudo networksetup -setwebproxy \"Ethernet\" http://proxy.mysite.com 8000\r\n\r\n## git\r\n\r\n设置:\r\n    \r\n    $ git config --global http.proxy http://proxy.mysite.com:8080\r\n\r\n取消: \r\n    \r\n    $ git config --global --unset http.proxy\r\n\r\n## npm\r\n\r\n设置:\r\n    \r\n    $ npm config set proxy=http://proxy.mysite.com:8080\r\n\r\n取消: \r\n\r\n    $ npm config delete proxy\r\n\r\n## bower\r\n\r\n设置:\r\n    \r\n    修改 .bowerrc 文件(如无则新增):\r\n\r\n        {\r\n          \"proxy\": \"http://proxy.mysite.com:8080\",\r\n          \"https-proxy\": \"http://proxy.mysite.com:8080\"\r\n        }\r\n    \r\n\r\n取消: \r\n    \r\n    删除 .bowerrc 里对应的配置即可\r\n\r\n## gem\r\n\r\n比如我们要安装 sass\r\n\r\n设置:\r\n\r\n安装时加上 --http-proxy 参数    \r\n\r\n   $ gem install --http-proxy http://proxy.mysite.com:8080 sass\r\n\r\n取消: \r\n\r\n安装时不加上 --http-proxy 参数    \r\n\r\n    $ gem install --http-proxy http://proxy.tencent.com:8080 sass\r\n\r\n\r\n# 召唤五姑娘\r\n\r\n不能使用镜像, 又不能使用代理, 一般这个时候我们都会先哭一下, 然后选择离开这个行业, 去卖烧饼或者红薯什么的.\r\n\r\n如果还对生活有希望的话, 那就使用我们勤劳的右手:\r\n    \r\n    在外网中, 下载好需要的东东, 拷贝到受限的机子中...\r\n\r\n\r\n","html":"<p>有时候我们在某些环境下(比如墙内或公司内网)可能不能正常使用 git/npm/bower/gem 等各种工具, 解决办法有:</p>\n\n<ul>\n<li>切换镜像</li>\n<li>使用代理</li>\n<li>召唤五姑娘</li>\n</ul>\n\n<p>不同工具设置的语法略有偏颇, 总结如下.</p>\n\n<h1 id=\"\">使用镜像</h1>\n\n<p>其中, npm/bower/gem 等如果可以通过切换镜像来解决的话, 则不用设置代理.</p>\n\n<p>不知道有哪些镜像资源, 则 Google 之. 以下的 &lt; registry url > 指的就是镜像的 url, 比如 <a href=\"http://registry.npm.taobao.org/\">http://registry.npm.taobao.org/</a></p>\n\n<h2 id=\"npm\">npm</h2>\n\n<p>设置全局使用指定的镜像:</p>\n\n<pre><code>$ npm config set registry &lt; registry url &gt;\n</code></pre>\n\n<p>或者在安装时才指定:</p>\n\n<pre><code>$ npm install --registry &lt; registry url &gt;\n</code></pre>\n\n<p>当然, 每次都要输入那么长串的 registry url 的话, 实在太麻烦, 可以使用 nrm 这个模块来切换镜像:</p>\n\n<pre><code>// 全局安装\n$ npm install -g nrm\n// 查看有哪些镜像\n$ nrm ls\n// 对比各个镜像的访问速度\n$ nrm test\n// 使用淘宝的镜像\n$ nrm use taobao\n</code></pre>\n\n<h2 id=\"gem\">gem</h2>\n\n<pre><code>$ gem source -r &lt;registry url&gt;    \n</code></pre>\n\n<p>gem 除了使用镜像以外, 还可以直接到官网下载需要的包, 然后在本地安装, <br />\n比如我们要安装 sass, 先<a href=\"https://rubygems.org/gems/sass\">到这里</a> 把 sass 下载到本地, 然后在本地安装:</p>\n\n<pre><code>// 注意这里的 sass.gem 是下载到本地的包名\n$ gem install --local sass.gem\n</code></pre>\n\n<h1 id=\"\">使用代理</h1>\n\n<p>镜像不能用, 那就使用代理吧.</p>\n\n<p>假定公司提供的代理为 <a href=\"http://proxy.mysite.com:8080\">http://proxy.mysite.com:8080</a></p>\n\n<h2 id=\"\">给命令行统一设置代理</h2>\n\n<ul>\n<li><p>windows </p>\n\n<p>$ set http_proxy=<a href=\"http://proxy.mysite.com:8080\">http://proxy.mysite.com:8080</a></p>\n\n<p>// 如果有要求用户名密码则输入: \n$ set http<em>proxy</em>user=&lt; username >\n$ set http<em>proxy</em>pass=&lt; password ></p></li>\n</ul>\n\n<p>若不想每次都手动设置, 则可以设置到系统的环境变量中</p>\n\n<pre><code>右击计算机–&gt;属性–&gt;高级–&gt;环境变量–&gt;系统变量，设置系统变量\n</code></pre>\n\n<ul>\n<li><p>mac </p>\n\n<p>$ sudo networksetup -setwebproxy \"Ethernet\" <a href=\"http://proxy.mysite.com\">http://proxy.mysite.com</a> 8000</p></li>\n</ul>\n\n<h2 id=\"git\">git</h2>\n\n<p>设置:</p>\n\n<pre><code>$ git config --global http.proxy http://proxy.mysite.com:8080\n</code></pre>\n\n<p>取消: </p>\n\n<pre><code>$ git config --global --unset http.proxy\n</code></pre>\n\n<h2 id=\"npm\">npm</h2>\n\n<p>设置:</p>\n\n<pre><code>$ npm config set proxy=http://proxy.mysite.com:8080\n</code></pre>\n\n<p>取消: </p>\n\n<pre><code>$ npm config delete proxy\n</code></pre>\n\n<h2 id=\"bower\">bower</h2>\n\n<p>设置:</p>\n\n<pre><code>修改 .bowerrc 文件(如无则新增):\n\n    {\n      \"proxy\": \"http://proxy.mysite.com:8080\",\n      \"https-proxy\": \"http://proxy.mysite.com:8080\"\n    }\n</code></pre>\n\n<p>取消: </p>\n\n<pre><code>删除 .bowerrc 里对应的配置即可\n</code></pre>\n\n<h2 id=\"gem\">gem</h2>\n\n<p>比如我们要安装 sass</p>\n\n<p>设置:</p>\n\n<p>安装时加上 --http-proxy 参数    </p>\n\n<p>$ gem install --http-proxy <a href=\"http://proxy.mysite.com:8080\">http://proxy.mysite.com:8080</a> sass</p>\n\n<p>取消: </p>\n\n<p>安装时不加上 --http-proxy 参数    </p>\n\n<pre><code>$ gem install --http-proxy http://proxy.tencent.com:8080 sass\n</code></pre>\n\n<h1 id=\"\">召唤五姑娘</h1>\n\n<p>不能使用镜像, 又不能使用代理, 一般这个时候我们都会先哭一下, 然后选择离开这个行业, 去卖烧饼或者红薯什么的.</p>\n\n<p>如果还对生活有希望的话, 那就使用我们勤劳的右手:</p>\n\n<pre><code>在外网中, 下载好需要的东东, 拷贝到受限的机子中...\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400237669000,"created_by":1,"updated_at":1400237669000,"updated_by":1,"published_at":1400237669000,"published_by":1},{"id":456,"uuid":"7da3a290-fd23-496c-8a66-fc3927dd51b3","title":"SVG 学习笔记","slug":"leran-svg","markdown":"\n# SVG入门学习\n    \n    + stroke 描边\n    + stroke-width 描边粗细\n    + stroke-linecap 描边端点样式, 可为 butt, round, square, inherit\n    + stroke-linejoin 描边转角样式, 可为 miter, round, bevel, inherit\n    + stroke-miterlimit 描边相交的样式, 默认为4\n    + stroke-dasharray 描边为虚线\n    + stroke-dashoffset 虚线的起始偏移\n    + stroke-opacity 表示描边透明度。默认是1\n    + 除了 stroke 表示描边外, fill 表示填充\n\n实现 SVG 路径的动画效果的原理:\n    设置 stroke-dasharray 足够大, 比如 2000\n    使用 CSS3 动画设置 stroke-dashoffset 从最大转化到最小, 比如从 2000 到 0 \n    例子: http://jsfiddle.net/laiqs2011/3ysrtmn5/1/\n\n用 JS 获取 path 的实际长度:\n\n        var path = document.querySelector('.path');\n        var length = path.getTotalLength();\n\n快速入门后, 总结 SVG 原理就是:\n\n- 画点成线 \n- 连线成面\n- 动态改变一些属性的值, 进而形成动画\n\n难点: 一个面有无数条线, 一条线有无数个点(特别是曲线),怎么去画出优雅的点和线?\n\n接下来就深入学习下原生的 `svg` 提供了哪些能力.\n\n# SVG深入学习\n\n- SVG 即可伸缩的矢量图形, 不随放大而失真\n\n- Content-Type 为 \"image/svg+xml\"\n\n- 默认单位为 px, 可为 em, ex, px, pt, pc, cm, mm, in\n\n- svg 根元素的写法:\n\n注意这里有两个命名空间要写对.\n\n    <svg  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n\n- svg 嵌套\n\n嵌套的 svg 定位将相对于父级 svg\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <svg x=\"10\">\n        <rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n            style=\"stroke:#ff0000; fill: #0000ff\"/>\n      </svg>\n      <svg x=\"200\">\n        <rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n            style=\"stroke:#009900; fill: #00cc00\"/>\n      </svg>\n    </svg>\n\n- g 标签, 即 group 组标签\n    \n上面的 svg 嵌套, 可以做整体偏移(move), 但不能做整体旋转(transform), 而把多个 svg 属性通过 `g` 标签组合到一起, 当作一个集合处理, 就可以做到:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        \n        <g>\n          <line x1=\"10\" y1=\"10\" x2=\"85\" y2=\"10\"\n              style=\"stroke: #006600;\"/>\n\n          <rect x=\"10\" y=\"20\" height=\"50\" width=\"75\"\n              style=\"stroke: #006600; fill: #006600\"/>\n\n          <text x=\"10\" y=\"90\" style=\"stroke: #660000; fill: #660000\">\n            Text grouped with shapes</text>\n        </g>\n\n    </svg>\n\n接着我们只需要旋转 g 元素就可以实现组合中所有的元素旋转:\n    \n    g {\n        transform: rotate(45deg);\n    }\n\n\n注意只能旋转 `g` 而不能旋转 `svg`\n\n此外, `g` 中设置的属性, 将会被继承:\n    \n    <g style=\"stroke: #0000ff; stroke-width: 4px; fill: #ff0000\">\n        <rect    x=\"10\"  y=\"10\" width=\"100\" height=\"50\" />\n        <circle cx=\"150\" cy=\"35\" r=\"25\" />\n        <circle cx=\"250\" cy=\"35\" r=\"25\"\n               style=\"stroke: #009900; fill: #00ff00;\"/>\n    </g>\n\n需要注意的是, `g` 标签并没有 `x` 和 `y` 属性.\n\n为了移动 `g` 可以使用 CSS3 的方法:\n    \n    g {\n        transform: translateX(50%);\n    }\n\n或者再加一层 `svg` 标签将 `g` 包起来:\n\n    <svg x=\"100\">\n        <g style=\"stroke: #0000ff; stroke-width: 4px; fill: #ff0000\">\n            <rect    x=\"10\"  y=\"10\" width=\"100\" height=\"50\" />\n            <circle cx=\"150\" cy=\"35\" r=\"25\" />\n            <circle cx=\"250\" cy=\"35\" r=\"25\"\n                   style=\"stroke: #009900; fill: #00ff00;\"/>\n        </g>\n    </svg>\n    \n\n- rect 标签\n\n画一个矩形:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n            style=\"stroke:#006600; fill: #00cc00\"/>\n    </svg>\n\n`x` 和 `y` 指定矩形左上角所在的位置.\n`width` 和 `height` 指定矩形的宽高.\n`style` 中的 `stroke` 指定描边颜色, `fill` 指定填充颜色.\n\n\n画一个带圆角的矩形:\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <rect x=\"10\" y=\"10\" height=\"50\" width=\"50\"\n              rx=\"5\" ry=\"5\"\n              style=\"stroke:#006600; fill: #00cc00\"/>\n        <rect x=\"70\" y=\"10\" height=\"50\" width=\"50\"\n              rx=\"10\" ry=\"10\"\n              style=\"stroke:#006600; fill: #00cc00\"/>\n        <rect x=\"130\" y=\"10\" height=\"50\" width=\"50\"\n              rx=\"15\" ry=\"15\"\n              style=\"stroke:#006600; fill: #00cc00\"/>\n    </svg>\n\n`rx` 和 `ry` 指定水平和垂直方向的圆滑度.\n\n\n使用 `stroke` 指定了描边颜色, 使用 `stroke-width` 指定描边粗细:\n\n    <rect x=\"20\" y=\"20\" width=\"100\" height=\"100\"\n          style=\"stroke: #009900;\n                 stroke-width: 3;\n                 fill: none;\n          \"\n    />\n\n使用 `fill` 指定了填充颜色, 使用 `fill-opacity` 指定填充透明度:\n\n    <rect x=\"50\" y=\"50\" width=\"100\" height=\"100\"\n          style=\"stroke: #000099;\n             fill: #3333ff;\n             fill-opacity: 0.5;\n            \"\n    />\n\n使用 `stroke-dasharray` 指定虚线间隙:\n    \n    <rect x=\"20\" y=\"20\" width=\"100\" height=\"100\"\n          style=\"stroke: #009900;\n                 stroke-width: 3;\n                 stroke-dasharray: 10 5;\n                 fill: none;\n                \"\n    />    \n\n其中 `10` 表示每个虚线条的长度, `5` 表示虚线条之间的间隔.\n\n\n- circle 标签\n\n画一个圆形:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <circle cx=\"40\" cy=\"40\" r=\"24\" style=\"stroke:#006600; fill:#00cc00\"/>\n    </svg>\n\n其中, `cx` 和 `cy` 指定圆心所在的位置, `r` 指定圆的半径.\n\n同时. `circle` 也有 `fill`/`stroke`/ 等属性:\n    \n    <circle cx=\"40\" cy=\"40\" r=\"24\"\n        style=\"stroke:#006600;\n               stroke-width: 3;\n               stroke-dasharray: 10 5;\n               fill:#00cc00;\n               fill-opacity: 0.5;\n        \"\n    />\n\n- ellipse 标签\n\n画一个椭圆形:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <ellipse cx=\"40\" cy=\"40\" rx=\"30\" ry=\"15\"\n               style=\"stroke:#006600; fill:#00cc00\"/>\n    </svg>\n\n其中, `cx` 和 `cy` 指定圆心, `rx` 和 `ry` 指定长短半径.\n\n同时. `ellipse` 也有 `fill`/`stroke`/ 等属性. \n\n- line 标签\n\n画几条线段:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <line x1=\"0\"  y1=\"10\" x2=\"0\"   y2=\"100\" style=\"stroke:#006600;\"/>\n        <line x1=\"10\" y1=\"10\" x2=\"100\" y2=\"100\" style=\"stroke:#006600;\"/>\n        <line x1=\"20\" y1=\"10\" x2=\"100\" y2=\"50\"  style=\"stroke:#006600;\"/>\n        <line x1=\"30\" y1=\"10\" x2=\"110\" y2=\"10\"  style=\"stroke:#006600;\"/>\n    </svg>\n\n其中, `x1` 和 `y1` 指定起点所在位置, `x2` 和 `y2` 指定终点所在位置, `stroke` 指定线条颜色.\n\n- polyline 标签\n\n画多个点, 然后连成线, 线连成面:\n\n画三个点, 连成三角形:\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <polyline points=\"0,0  30,0  15,30\"\n            style=\"stroke:#006600;\"/>\n    </svg>\n\n默认的 `fill` 填充颜色为黑色, 重新修改填充和描边:\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <polyline points=\"0,0  30,0  15,30\"\n            style=\"stroke:#006600; stroke-width: 2;\n                   fill: #33cc33;\"/>\n    </svg>\n\n注意, 第一个点(10,2)与第二个点(30,0)连线, 第二个点与第三个点(15,30)连线了, 但第三个点并未与第一个点连线, 所以正确闭合图形的方法是, 起点和终点坐标一致:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <polyline points=\"0,0  30,0  15,30  0,0\"\n            style=\"stroke:#006600; stroke-width: 2;\n                   fill: #33cc33;\"/>\n    </svg>\n\n\n- polygon 标签\n\n画一个多边形.\n\n画一个三角形:\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <polygon points=\"10,0  60,0  35,50\"\n             style=\"stroke:#660000; fill:#cc3333;\"/>\n    </svg>\n\n注意这里用 `polygon` 后, 使用三个坐标点就画出了一个三角形, 而使用`polyline` 则需要四个坐标点.\n\n画一个八边形:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <polygon points=\"50,5   100,5  125,30  125,80 100,105\n                       50,105  25,80  25, 30\"\n              style=\"stroke:#660000; fill:#cc3333; stroke-width: 3;\"/>\n    </svg>\n\n\n- path 标签\n\n画路径:\n    \n    <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <path d=\"M50,50\n                 A30,30 0 0,1 35,20\n                 L100,100\n                 M110,110\n                 L100,0\"\n              style=\"stroke:#660000; fill:none;\"/>    \n    </svg>\n\n其中,`d` 表示 draw 指定绘画属性, `M` 表示 move 即移动, 'A' 表示 Arc 即画一个弧线, `L` 表示  line 即画一条线.\n\n这里使用了两个 `M`, 第二个 `M` 指定了新起点开始画线, 所以两个线条并不连续.\n\n注意这里使用到指令字母都是大写(M,A,L), 表示使用绝对坐标; 若使用小写(m,a,l)则表示使用相对坐标.举个例子:\n\n `L` 与 `l` 都是连线的指令, 但大写的 `L` 指定绝对坐标, 小写的 `l` 指定相对坐标. 举个例子, 若画线的起点为 (50, 50):\n\n    'L100,100' 指定连线 (50,50) 与 (100,100)\n    'l100,100' 指定连线 (50,50) 与 (150,150)\n\n`A` 表示 Arc 画一个弧线:\n    \n    <path d=\"M40,20  A30,30 0 0,0 70,70\"\n        style=\"stroke: #cccc00; stroke-width:2; fill:none;\"/>\n\n`Q` 表示 Quadratic 画一个二次方程曲线:\n\n    <path d=\"M50,50 Q50,100 100,100\" \n          style=\"stroke: #006666; fill:none;\"/> \n\n`C` 表示 Cubic 画一个三次方程曲线:\n    \n    <path d=\"M50,50 C75,80 125,20 150,50\"\n          style=\"stroke: #006666; fill:none;\"/> \n\n\n画完后, 若想闭合路径, 可以使用 `Z` 指令:\n    \n    <path d=\"M50,50 L100,50 L100,100 Z\"\n        style=\"stroke: #006666; fill:none;\"/>\n\n\n- maker 标签\n\n**未完待续...** http://tutorials.jenkov.com/svg/marker-element.html\n\n## 总结\n\n## 发现\n\nSVG 介绍 \nhttp://jakearchibald.com/2013/animated-line-drawing-svg/\nhttp://css-tricks.com/svg-line-animation-works/\n\nSVG 教程\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\nhttp://tutorials.jenkov.com/svg/index.html\n\nSVG 在线生成工具 \nhttp://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\n\nSVG 库\nhttp://raphaeljs.com/\nhttp://www.svgjs.com/\nhttp://snapsvg.io/\n\n云端编程, 超赞!\nhttps://c9.io/\n\n## TODO \n翻译 http://24ways.org/2013/animating-vectors-with-svg/\n使用 D3 来操作 SVG","html":"<h1 id=\"svg\">SVG入门学习</h1>\n\n<pre><code>+ stroke 描边\n+ stroke-width 描边粗细\n+ stroke-linecap 描边端点样式, 可为 butt, round, square, inherit\n+ stroke-linejoin 描边转角样式, 可为 miter, round, bevel, inherit\n+ stroke-miterlimit 描边相交的样式, 默认为4\n+ stroke-dasharray 描边为虚线\n+ stroke-dashoffset 虚线的起始偏移\n+ stroke-opacity 表示描边透明度。默认是1\n+ 除了 stroke 表示描边外, fill 表示填充\n</code></pre>\n\n<p>实现 SVG 路径的动画效果的原理:\n    设置 stroke-dasharray 足够大, 比如 2000\n    使用 CSS3 动画设置 stroke-dashoffset 从最大转化到最小, 比如从 2000 到 0 \n    例子: <a href=\"http://jsfiddle.net/laiqs2011/3ysrtmn5/1/\">http://jsfiddle.net/laiqs2011/3ysrtmn5/1/</a></p>\n\n<p>用 JS 获取 path 的实际长度:</p>\n\n<pre><code>    var path = document.querySelector('.path');\n    var length = path.getTotalLength();\n</code></pre>\n\n<p>快速入门后, 总结 SVG 原理就是:</p>\n\n<ul>\n<li>画点成线 </li>\n<li>连线成面</li>\n<li>动态改变一些属性的值, 进而形成动画</li>\n</ul>\n\n<p>难点: 一个面有无数条线, 一条线有无数个点(特别是曲线),怎么去画出优雅的点和线?</p>\n\n<p>接下来就深入学习下原生的 <code>svg</code> 提供了哪些能力.</p>\n\n<h1 id=\"svg\">SVG深入学习</h1>\n\n<ul>\n<li><p>SVG 即可伸缩的矢量图形, 不随放大而失真</p></li>\n<li><p>Content-Type 为 \"image/svg+xml\"</p></li>\n<li><p>默认单位为 px, 可为 em, ex, px, pt, pc, cm, mm, in</p></li>\n<li><p>svg 根元素的写法:</p></li>\n</ul>\n\n<p>注意这里有两个命名空间要写对.</p>\n\n<pre><code>&lt;svg  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n</code></pre>\n\n<ul>\n<li>svg 嵌套</li>\n</ul>\n\n<p>嵌套的 svg 定位将相对于父级 svg</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n  &lt;svg x=\"10\"&gt;\n    &lt;rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n        style=\"stroke:#ff0000; fill: #0000ff\"/&gt;\n  &lt;/svg&gt;\n  &lt;svg x=\"200\"&gt;\n    &lt;rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n        style=\"stroke:#009900; fill: #00cc00\"/&gt;\n  &lt;/svg&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<ul>\n<li>g 标签, 即 group 组标签</li>\n</ul>\n\n<p>上面的 svg 嵌套, 可以做整体偏移(move), 但不能做整体旋转(transform), 而把多个 svg 属性通过 <code>g</code> 标签组合到一起, 当作一个集合处理, 就可以做到:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n\n    &lt;g&gt;\n      &lt;line x1=\"10\" y1=\"10\" x2=\"85\" y2=\"10\"\n          style=\"stroke: #006600;\"/&gt;\n\n      &lt;rect x=\"10\" y=\"20\" height=\"50\" width=\"75\"\n          style=\"stroke: #006600; fill: #006600\"/&gt;\n\n      &lt;text x=\"10\" y=\"90\" style=\"stroke: #660000; fill: #660000\"&gt;\n        Text grouped with shapes&lt;/text&gt;\n    &lt;/g&gt;\n\n&lt;/svg&gt;\n</code></pre>\n\n<p>接着我们只需要旋转 g 元素就可以实现组合中所有的元素旋转:</p>\n\n<pre><code>g {\n    transform: rotate(45deg);\n}\n</code></pre>\n\n<p>注意只能旋转 <code>g</code> 而不能旋转 <code>svg</code></p>\n\n<p>此外, <code>g</code> 中设置的属性, 将会被继承:</p>\n\n<pre><code>&lt;g style=\"stroke: #0000ff; stroke-width: 4px; fill: #ff0000\"&gt;\n    &lt;rect    x=\"10\"  y=\"10\" width=\"100\" height=\"50\" /&gt;\n    &lt;circle cx=\"150\" cy=\"35\" r=\"25\" /&gt;\n    &lt;circle cx=\"250\" cy=\"35\" r=\"25\"\n           style=\"stroke: #009900; fill: #00ff00;\"/&gt;\n&lt;/g&gt;\n</code></pre>\n\n<p>需要注意的是, <code>g</code> 标签并没有 <code>x</code> 和 <code>y</code> 属性.</p>\n\n<p>为了移动 <code>g</code> 可以使用 CSS3 的方法:</p>\n\n<pre><code>g {\n    transform: translateX(50%);\n}\n</code></pre>\n\n<p>或者再加一层 <code>svg</code> 标签将 <code>g</code> 包起来:</p>\n\n<pre><code>&lt;svg x=\"100\"&gt;\n    &lt;g style=\"stroke: #0000ff; stroke-width: 4px; fill: #ff0000\"&gt;\n        &lt;rect    x=\"10\"  y=\"10\" width=\"100\" height=\"50\" /&gt;\n        &lt;circle cx=\"150\" cy=\"35\" r=\"25\" /&gt;\n        &lt;circle cx=\"250\" cy=\"35\" r=\"25\"\n               style=\"stroke: #009900; fill: #00ff00;\"/&gt;\n    &lt;/g&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<ul>\n<li>rect 标签</li>\n</ul>\n\n<p>画一个矩形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;rect x=\"10\" y=\"10\" height=\"100\" width=\"100\"\n        style=\"stroke:#006600; fill: #00cc00\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p><code>x</code> 和 <code>y</code> 指定矩形左上角所在的位置.\n<code>width</code> 和 <code>height</code> 指定矩形的宽高.\n<code>style</code> 中的 <code>stroke</code> 指定描边颜色, <code>fill</code> 指定填充颜色.</p>\n\n<p>画一个带圆角的矩形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;rect x=\"10\" y=\"10\" height=\"50\" width=\"50\"\n          rx=\"5\" ry=\"5\"\n          style=\"stroke:#006600; fill: #00cc00\"/&gt;\n    &lt;rect x=\"70\" y=\"10\" height=\"50\" width=\"50\"\n          rx=\"10\" ry=\"10\"\n          style=\"stroke:#006600; fill: #00cc00\"/&gt;\n    &lt;rect x=\"130\" y=\"10\" height=\"50\" width=\"50\"\n          rx=\"15\" ry=\"15\"\n          style=\"stroke:#006600; fill: #00cc00\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p><code>rx</code> 和 <code>ry</code> 指定水平和垂直方向的圆滑度.</p>\n\n<p>使用 <code>stroke</code> 指定了描边颜色, 使用 <code>stroke-width</code> 指定描边粗细:</p>\n\n<pre><code>&lt;rect x=\"20\" y=\"20\" width=\"100\" height=\"100\"\n      style=\"stroke: #009900;\n             stroke-width: 3;\n             fill: none;\n      \"\n/&gt;\n</code></pre>\n\n<p>使用 <code>fill</code> 指定了填充颜色, 使用 <code>fill-opacity</code> 指定填充透明度:</p>\n\n<pre><code>&lt;rect x=\"50\" y=\"50\" width=\"100\" height=\"100\"\n      style=\"stroke: #000099;\n         fill: #3333ff;\n         fill-opacity: 0.5;\n        \"\n/&gt;\n</code></pre>\n\n<p>使用 <code>stroke-dasharray</code> 指定虚线间隙:</p>\n\n<pre><code>&lt;rect x=\"20\" y=\"20\" width=\"100\" height=\"100\"\n      style=\"stroke: #009900;\n             stroke-width: 3;\n             stroke-dasharray: 10 5;\n             fill: none;\n            \"\n/&gt;    \n</code></pre>\n\n<p>其中 <code>10</code> 表示每个虚线条的长度, <code>5</code> 表示虚线条之间的间隔.</p>\n\n<ul>\n<li>circle 标签</li>\n</ul>\n\n<p>画一个圆形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;circle cx=\"40\" cy=\"40\" r=\"24\" style=\"stroke:#006600; fill:#00cc00\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>其中, <code>cx</code> 和 <code>cy</code> 指定圆心所在的位置, <code>r</code> 指定圆的半径.</p>\n\n<p>同时. <code>circle</code> 也有 <code>fill</code>/<code>stroke</code>/ 等属性:</p>\n\n<pre><code>&lt;circle cx=\"40\" cy=\"40\" r=\"24\"\n    style=\"stroke:#006600;\n           stroke-width: 3;\n           stroke-dasharray: 10 5;\n           fill:#00cc00;\n           fill-opacity: 0.5;\n    \"\n/&gt;\n</code></pre>\n\n<ul>\n<li>ellipse 标签</li>\n</ul>\n\n<p>画一个椭圆形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n  &lt;ellipse cx=\"40\" cy=\"40\" rx=\"30\" ry=\"15\"\n           style=\"stroke:#006600; fill:#00cc00\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>其中, <code>cx</code> 和 <code>cy</code> 指定圆心, <code>rx</code> 和 <code>ry</code> 指定长短半径.</p>\n\n<p>同时. <code>ellipse</code> 也有 <code>fill</code>/<code>stroke</code>/ 等属性. </p>\n\n<ul>\n<li>line 标签</li>\n</ul>\n\n<p>画几条线段:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;line x1=\"0\"  y1=\"10\" x2=\"0\"   y2=\"100\" style=\"stroke:#006600;\"/&gt;\n    &lt;line x1=\"10\" y1=\"10\" x2=\"100\" y2=\"100\" style=\"stroke:#006600;\"/&gt;\n    &lt;line x1=\"20\" y1=\"10\" x2=\"100\" y2=\"50\"  style=\"stroke:#006600;\"/&gt;\n    &lt;line x1=\"30\" y1=\"10\" x2=\"110\" y2=\"10\"  style=\"stroke:#006600;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>其中, <code>x1</code> 和 <code>y1</code> 指定起点所在位置, <code>x2</code> 和 <code>y2</code> 指定终点所在位置, <code>stroke</code> 指定线条颜色.</p>\n\n<ul>\n<li>polyline 标签</li>\n</ul>\n\n<p>画多个点, 然后连成线, 线连成面:</p>\n\n<p>画三个点, 连成三角形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;polyline points=\"0,0  30,0  15,30\"\n        style=\"stroke:#006600;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>默认的 <code>fill</code> 填充颜色为黑色, 重新修改填充和描边:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;polyline points=\"0,0  30,0  15,30\"\n        style=\"stroke:#006600; stroke-width: 2;\n               fill: #33cc33;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>注意, 第一个点(10,2)与第二个点(30,0)连线, 第二个点与第三个点(15,30)连线了, 但第三个点并未与第一个点连线, 所以正确闭合图形的方法是, 起点和终点坐标一致:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;polyline points=\"0,0  30,0  15,30  0,0\"\n        style=\"stroke:#006600; stroke-width: 2;\n               fill: #33cc33;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<ul>\n<li>polygon 标签</li>\n</ul>\n\n<p>画一个多边形.</p>\n\n<p>画一个三角形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n  &lt;polygon points=\"10,0  60,0  35,50\"\n         style=\"stroke:#660000; fill:#cc3333;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>注意这里用 <code>polygon</code> 后, 使用三个坐标点就画出了一个三角形, 而使用<code>polyline</code> 则需要四个坐标点.</p>\n\n<p>画一个八边形:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n  &lt;polygon points=\"50,5   100,5  125,30  125,80 100,105\n                   50,105  25,80  25, 30\"\n          style=\"stroke:#660000; fill:#cc3333; stroke-width: 3;\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<ul>\n<li>path 标签</li>\n</ul>\n\n<p>画路径:</p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;path d=\"M50,50\n             A30,30 0 0,1 35,20\n             L100,100\n             M110,110\n             L100,0\"\n          style=\"stroke:#660000; fill:none;\"/&gt;    \n&lt;/svg&gt;\n</code></pre>\n\n<p>其中,<code>d</code> 表示 draw 指定绘画属性, <code>M</code> 表示 move 即移动, 'A' 表示 Arc 即画一个弧线, <code>L</code> 表示  line 即画一条线.</p>\n\n<p>这里使用了两个 <code>M</code>, 第二个 <code>M</code> 指定了新起点开始画线, 所以两个线条并不连续.</p>\n\n<p>注意这里使用到指令字母都是大写(M,A,L), 表示使用绝对坐标; 若使用小写(m,a,l)则表示使用相对坐标.举个例子:</p>\n\n<p><code>L</code> 与 <code>l</code> 都是连线的指令, 但大写的 <code>L</code> 指定绝对坐标, 小写的 <code>l</code> 指定相对坐标. 举个例子, 若画线的起点为 (50, 50):</p>\n\n<pre><code>'L100,100' 指定连线 (50,50) 与 (100,100)\n'l100,100' 指定连线 (50,50) 与 (150,150)\n</code></pre>\n\n<p><code>A</code> 表示 Arc 画一个弧线:</p>\n\n<pre><code>&lt;path d=\"M40,20  A30,30 0 0,0 70,70\"\n    style=\"stroke: #cccc00; stroke-width:2; fill:none;\"/&gt;\n</code></pre>\n\n<p><code>Q</code> 表示 Quadratic 画一个二次方程曲线:</p>\n\n<pre><code>&lt;path d=\"M50,50 Q50,100 100,100\" \n      style=\"stroke: #006666; fill:none;\"/&gt; \n</code></pre>\n\n<p><code>C</code> 表示 Cubic 画一个三次方程曲线:</p>\n\n<pre><code>&lt;path d=\"M50,50 C75,80 125,20 150,50\"\n      style=\"stroke: #006666; fill:none;\"/&gt; \n</code></pre>\n\n<p>画完后, 若想闭合路径, 可以使用 <code>Z</code> 指令:</p>\n\n<pre><code>&lt;path d=\"M50,50 L100,50 L100,100 Z\"\n    style=\"stroke: #006666; fill:none;\"/&gt;\n</code></pre>\n\n<ul>\n<li>maker 标签</li>\n</ul>\n\n<p><strong>未完待续...</strong> <a href=\"http://tutorials.jenkov.com/svg/marker-element.html\">http://tutorials.jenkov.com/svg/marker-element.html</a></p>\n\n<h2 id=\"\">总结</h2>\n\n<h2 id=\"\">发现</h2>\n\n<p>SVG 介绍 <br />\n<a href=\"http://jakearchibald.com/2013/animated-line-drawing-svg/\">http://jakearchibald.com/2013/animated-line-drawing-svg/</a> <br />\n<a href=\"http://css-tricks.com/svg-line-animation-works/\">http://css-tricks.com/svg-line-animation-works/</a></p>\n\n<p>SVG 教程 <br />\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\">https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial</a> <br />\n<a href=\"http://tutorials.jenkov.com/svg/index.html\">http://tutorials.jenkov.com/svg/index.html</a></p>\n\n<p>SVG 在线生成工具 <br />\n<a href=\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\">http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html</a></p>\n\n<p>SVG 库 <br />\n<a href=\"http://raphaeljs.com/\">http://raphaeljs.com/</a> <br />\n<a href=\"http://www.svgjs.com/\">http://www.svgjs.com/</a> <br />\n<a href=\"http://snapsvg.io/\">http://snapsvg.io/</a></p>\n\n<p>云端编程, 超赞!\n<a href=\"https://c9.io/\">https://c9.io/</a></p>\n\n<h2 id=\"todo\">TODO</h2>\n\n<p>翻译 <a href=\"http://24ways.org/2013/animating-vectors-with-svg/\">http://24ways.org/2013/animating-vectors-with-svg/</a>\n使用 D3 来操作 SVG</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420023269000,"created_by":1,"updated_at":1420023269000,"updated_by":1,"published_at":1420023269000,"published_by":1},{"id":457,"uuid":"e03a55c3-863e-4a43-868a-e83e2f82c8d5","title":"SVN 常用命令","slug":"leran-svn","markdown":"\r\n\r\n        //svn up/cleanup/co/st/diff/ci/sw/merge/info\r\n        \r\n        // help 帮助\r\n        svn help\r\n        svn help ci\r\n        \r\n        // checkout 复制到本地\r\n        svn checkout URL\r\n        // 简写\r\n        svn co URL\r\n        \r\n        // add 添加文件\r\n        svn add FILE\r\n        // rm 删除文件/目录\r\n        svn rm FILE\r\n        \r\n        // commit 提交\r\n        svn commit -m 'first commit'\r\n        // 简写\r\n        svn ci\r\n        \r\n        // update 更新到某个版本\r\n        svn update -r m URL\r\n        // 简写\r\n        svn up\r\n        \r\n        // status 查看文件或目录状态\r\n        // 不显示子目录状态\r\n        svn status URL\r\n        // 显示子目录状态\r\n        svn status -v URL\r\n        // 简写 \r\n        svn st\r\n        \r\n        // log 查看当前工作副本\r\n        svn log\r\n        \r\n        // delete 删除文件\r\n        svn delete URL -m 'delete a file'\r\n        \r\n        // info 查看日志\r\n        svn info URL\r\n        \r\n        // diff 对比差异\r\n        // 被修改文件与基础版本对比\r\n        svn diff \r\n        // 与最新版本对比\r\n        svn diff -r head\r\n        // 版本 m 与版本 n 对比\r\n        svn diff -r m:n URL\r\n        // 简写 \r\n        svn di\r\n        \r\n        // merge 将版本 m 和版本 n 合并\r\n        svn merge -r m:n URL\r\n        \r\n        // switch 切换到某一个版本\r\n        svn switch URL\r\n        \r\n        // cleanup 回到一个稳定的状态\r\n        svn cleanup\r\n\r\n- SVN 小记\r\n    \r\n    创建分支:\r\n\r\n    svn copy http://mysvn.laispace.com/myproj/trunk http://mysvn.laispace.com/myproj/branches/xiaolai -m '创建一个名为 xiaolai 的分支'\r\n\r\n    拉取代码:\r\n\r\n    svn checkout http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    在分支上编写代码后, svn commit 后, 切换到主干目录, 进行合并\r\n\r\n    svn merge http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    合并完后, 查看已合并信息:\r\n\r\n    svn mergeinfo http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    合并完后, 查看未合并信息:\r\n\r\n    svn merginfo http://mysvn.laispace.com/myproj/branches/xiaolai --show-revs eligible\r\n\r\n\r\n- SVN 分支 branch 与标记 tag 的区别\r\n    \r\n    分支用于在并行开发，这里的并行是指和trunk(主分支)的并行。\r\n    而tag是用来做一个里程碑（milestone），不管是不是release，都是一个可用的版本。\r\n\r\n\r\n\r\n\r\n![](http://lailife.u.qiniudn.com/xiaolai.jpg)","html":"<pre><code>    //svn up/cleanup/co/st/diff/ci/sw/merge/info\n\n    // help 帮助\n    svn help\n    svn help ci\n\n    // checkout 复制到本地\n    svn checkout URL\n    // 简写\n    svn co URL\n\n    // add 添加文件\n    svn add FILE\n    // rm 删除文件/目录\n    svn rm FILE\n\n    // commit 提交\n    svn commit -m 'first commit'\n    // 简写\n    svn ci\n\n    // update 更新到某个版本\n    svn update -r m URL\n    // 简写\n    svn up\n\n    // status 查看文件或目录状态\n    // 不显示子目录状态\n    svn status URL\n    // 显示子目录状态\n    svn status -v URL\n    // 简写 \n    svn st\n\n    // log 查看当前工作副本\n    svn log\n\n    // delete 删除文件\n    svn delete URL -m 'delete a file'\n\n    // info 查看日志\n    svn info URL\n\n    // diff 对比差异\n    // 被修改文件与基础版本对比\n    svn diff \n    // 与最新版本对比\n    svn diff -r head\n    // 版本 m 与版本 n 对比\n    svn diff -r m:n URL\n    // 简写 \n    svn di\n\n    // merge 将版本 m 和版本 n 合并\n    svn merge -r m:n URL\n\n    // switch 切换到某一个版本\n    svn switch URL\n\n    // cleanup 回到一个稳定的状态\n    svn cleanup\n</code></pre>\n\n<ul>\n<li><p>SVN 小记</p>\n\n<p>创建分支:</p>\n\n<p>svn copy <a href=\"http://mysvn.laispace.com/myproj/trunk\">http://mysvn.laispace.com/myproj/trunk</a> <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\">http://mysvn.laispace.com/myproj/branches/xiaolai</a> -m '创建一个名为 xiaolai 的分支'</p>\n\n<p>拉取代码:</p>\n\n<p>svn checkout <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n\n<p>在分支上编写代码后, svn commit 后, 切换到主干目录, 进行合并</p>\n\n<p>svn merge <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n\n<p>合并完后, 查看已合并信息:</p>\n\n<p>svn mergeinfo <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n\n<p>合并完后, 查看未合并信息:</p>\n\n<p>svn merginfo <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\">http://mysvn.laispace.com/myproj/branches/xiaolai</a> --show-revs eligible</p></li>\n<li><p>SVN 分支 branch 与标记 tag 的区别</p>\n\n<p>分支用于在并行开发，这里的并行是指和trunk(主分支)的并行。\n而tag是用来做一个里程碑（milestone），不管是不是release，都是一个可用的版本。</p></li>\n</ul>\n\n<p><img src=\"http://lailife.u.qiniudn.com/xiaolai.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400237669000,"created_by":1,"updated_at":1400237669000,"updated_by":1,"published_at":1400237669000,"published_by":1},{"id":459,"uuid":"1cffd769-10f8-4b98-9eaa-b6b448842deb","title":"移动 Web 开发","slug":"mobile-web-developement","markdown":"\r\n\r\n# 坑总结\r\n\r\n- iOS 和 Android 中滚动元素的选择不同\r\n\r\n在 Android 中, 滚动元素必须设置为 window   \r\n    var $scroller = $.os.ios?$('#scroller-wrapper'):$(window);\r\n    // 滚动到顶部\r\n    $scroller.scrollTop(0);\r\n\r\n# 调试技巧\r\n\r\n-  使用Fiddler 快速 bugfix 的办法\r\n\r\n线上出一个小问题时, 定位到具体某一个文件比如 online.js\r\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\r\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~\r\n\r\n- 调试 iOS 端真机环境页面\r\n\r\n用 Chrome 模拟器并不能百分百模拟真机.\r\n\r\n用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.\r\n\r\n用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \r\n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.\r\n\r\n想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.\r\n\r\n用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.\r\n","html":"<h1 id=\"\">坑总结</h1>\n\n<ul>\n<li>iOS 和 Android 中滚动元素的选择不同</li>\n</ul>\n\n<p>在 Android 中, 滚动元素必须设置为 window <br />\n    var $scroller = $.os.ios?$('#scroller-wrapper'):$(window);\n    // 滚动到顶部\n    $scroller.scrollTop(0);</p>\n\n<h1 id=\"\">调试技巧</h1>\n\n<ul>\n<li>使用Fiddler 快速 bugfix 的办法</li>\n</ul>\n\n<p>线上出一个小问题时, 定位到具体某一个文件比如 online.js\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~</p>\n\n<ul>\n<li>调试 iOS 端真机环境页面</li>\n</ul>\n\n<p>用 Chrome 模拟器并不能百分百模拟真机.</p>\n\n<p>用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.</p>\n\n<p>用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.</p>\n\n<p>想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.</p>\n\n<p>用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1418900069000,"created_by":1,"updated_at":1418900069000,"updated_by":1,"published_at":1418900069000,"published_by":1},{"id":460,"uuid":"dcc250ea-c76e-4f8f-9605-b3d5a96a2efa","title":"2012-10-24-改变光标的样式","slug":"2012-10-24-gai-bian-guang-biao-de-yang-shi","markdown":"\n\n<div> 今天查阅资料学习怎样改变光标的样式，制作一些炫丽的光标效果。\n<div>     第一种方法：改变光标样式的方法无非就是利用第三方控件或者利用CSS样式。</div>\n<div>     1.查阅相关属性：</div>\n<table style=\"color: #000000; font-family: Arial, Helvetica, sans-serif; font-size: 14px; line-height: 26px; background-color: #ffffff; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"border: 1pt solid black; padding: 0cm 5.4pt; width: 213.05pt; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">默认</span></td>\n<td style=\"border-top-color: black; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-top-width: 1pt; border-top-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">default</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">文字/编辑</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">text</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">自动</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">auto</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">手形</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">pointer, hand(hand</span><span style=\"font-size: 10pt;\">是IE专有)</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">可移动对象</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">move</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">不允许</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">not-allowed</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">无法释放</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">no-drop</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">等待/沙漏</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">wait</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">帮助</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">help</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">十字准星</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">crosshair</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向上改变大小(North)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">n-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向下改变大小(South)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">s_resize </span><span style=\"font-size: 10pt;\">与n-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左改变大小(West)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">w-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右改变大小(East)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">e-resize </span><span style=\"font-size: 10pt;\">与w-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左上改变大小（NorthWest）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">nw-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左下改变大小（SouthWest）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">sw-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右上改变大小（NorthEast）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">ne-resize </span><span style=\"font-size: 10pt;\">与sw-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右下改变大小（SouthEast）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">se-resize </span><span style=\"font-size: 10pt;\">与nw-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">**自定义光标**</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\">\n<div>**<span style=\"font-size: 10pt;\">url('</span><span style=\"font-size: 10pt;\">光标地址')</span>**</div></td>\n</tr>\n</tbody>\n</table>\n2\\. 测试表中所有的属性\n<div>![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(1).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(2).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(3).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(4).png)\n<div></div>\n<div>详细见[Demo-cursor.html](http://www.laispace.com/xiaospace/demo/2012-10-24/cursor.html \"Demo-用CSS改变光标样式\")</div>\n<div>第二种方法：<span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">利用第三方控件的方法</span></div>\n<div>     <span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">将以下代码加到网页文件的&lt;head&gt;&lt;/head&gt;之间：</span></div>\n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">var Loaded=false;var Flag=false;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>\n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script src='http://files.cometsystems.com/javascript/lc2000.js' </span><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>\n<div><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;if(Loaded&amp;&amp;Flag)TheCometCursor('cd_electric',0,626);&lt;/script&gt;</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    修改后，浏览此网页的时候浏览器会弹出一个“安全设置警告”，点击“是”，系统自动安装控件，鼠标就可以按照你的需要显示了。</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选择需要的鼠标样式：登陆网站</span><span style=\"text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff; color: #0099cc;\">[http://www.cometzone.com](http://www.cometzone.com/) （</span><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">14个大类4000多种鼠标，制作精美，点击相应的鼠标图片就可预览到不同的效果。）</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选中鼠标后，点击网页左边导航的“GET CURSOR CODE”链接，转到下一页，再点击“Select Code”按钮，按钮下这个多行文本框里面的内容就是上面提供的代码，只是代码中TheCometCursor('cd_electric',0,626)部分不同，显示的鼠标状态也不同.</span>\n\n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>\n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>\n</div>\n</div>\n</div>","html":"<div> 今天查阅资料学习怎样改变光标的样式，制作一些炫丽的光标效果。  \n<div>     第一种方法：改变光标样式的方法无非就是利用第三方控件或者利用CSS样式。</div>  \n<div>     1.查阅相关属性：</div>  \n<table style=\"color: #000000; font-family: Arial, Helvetica, sans-serif; font-size: 14px; line-height: 26px; background-color: #ffffff; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">  \n<tbody>  \n<tr>  \n<td style=\"border: 1pt solid black; padding: 0cm 5.4pt; width: 213.05pt; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">默认</span></td>  \n<td style=\"border-top-color: black; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-top-width: 1pt; border-top-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">default</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">文字/编辑</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">text</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">自动</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">auto</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">手形</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">pointer, hand(hand</span><span style=\"font-size: 10pt;\">是IE专有)</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">可移动对象</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">move</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">不允许</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">not-allowed</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">无法释放</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">no-drop</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">等待/沙漏</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">wait</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">帮助</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">help</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">十字准星</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">crosshair</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向上改变大小(North)</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">n-resize</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向下改变大小(South)</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">s_resize </span><span style=\"font-size: 10pt;\">与n-resize效果相同</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左改变大小(West)</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">w-resize</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右改变大小(East)</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">e-resize </span><span style=\"font-size: 10pt;\">与w-resize效果相同</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左上改变大小（NorthWest）</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">nw-resize</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左下改变大小（SouthWest）</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">sw-resize</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右上改变大小（NorthEast）</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">ne-resize </span><span style=\"font-size: 10pt;\">与sw-resize效果相同</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右下改变大小（SouthEast）</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">se-resize </span><span style=\"font-size: 10pt;\">与nw-resize效果相同</span></td>  \n</tr>  \n<tr>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">**自定义光标**</span></td>  \n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\">  \n<div>**<span style=\"font-size: 10pt;\">url('</span><span style=\"font-size: 10pt;\">光标地址')</span>**</div></td>  \n</tr>  \n</tbody>  \n</table>  \n2\\. 测试表中所有的属性  \n<div>![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(1).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(2).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(3).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(4).png)  \n<div></div>  \n<div>详细见[Demo-cursor.html](http://www.laispace.com/xiaospace/demo/2012-10-24/cursor.html \"Demo-用CSS改变光标样式\")</div>  \n<div>第二种方法：<span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">利用第三方控件的方法</span></div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">将以下代码加到网页文件的&lt;head&gt;&lt;/head&gt;之间：</span></div>  \n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">var Loaded=false;var Flag=false;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>  \n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script src='<a href=\"http://files.cometsystems.com/javascript/lc2000.js\">http://files.cometsystems.com/javascript/lc2000.js</a>' </span><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>  \n<div><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;if(Loaded&amp;&amp;Flag)TheCometCursor('cd_electric',0,626);&lt;/script&gt;</span>  \n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    修改后，浏览此网页的时候浏览器会弹出一个“安全设置警告”，点击“是”，系统自动安装控件，鼠标就可以按照你的需要显示了。</span>  \n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选择需要的鼠标样式：登陆网站</span><span style=\"text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff; color: #0099cc;\">[http://www.cometzone.com](http://www.cometzone.com/) （</span><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">14个大类4000多种鼠标，制作精美，点击相应的鼠标图片就可预览到不同的效果。）</span>  \n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选中鼠标后，点击网页左边导航的“GET CURSOR CODE”链接，转到下一页，再点击“Select Code”按钮，按钮下这个多行文本框里面的内容就是上面提供的代码，只是代码中TheCometCursor('cd_electric',0,626)部分不同，显示的鼠标状态也不同.</span>\n\n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>  \n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>  \n</div>  \n\n<p></div> <br />\n</div></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351129592000,"created_by":1,"updated_at":1351129592000,"updated_by":1,"published_at":1351129592000,"published_by":1},{"id":461,"uuid":"6db6ccaf-1427-4cfc-824a-76e3f7746fcf","title":"2012-10-25-几个小练习","slug":"2012-10-25-ji-ge-xiao-lian-xi","markdown":"\n\n郁闷死了，刚打好字浏览器就突然崩溃，就不再重新写了，直接上Demo。\n\n1.[模拟投票](http://www.laispace.com/xiaospace/demo/2012-10-25/vote.html \"模拟投票\")\n\n&nbsp;\n\n2.[改变选中文字的样式](http://www.laispace.com/xiaospace/demo/2012-10-25/changeSelectedWord.html \"改变选中文字的样式\")\n\n&nbsp;\n\n3.[改变提示信息的样式](http://www.laispace.com/xiaospace/demo/2012-10-25/changetitle.html \"改变提示信息title的样式\")\n\n&nbsp;\n\n4.[鼠标悬浮放大图片](http://www.laispace.com/xiaospace/demo/2012-10-25/magnifypictures.html \"鼠标悬浮放大图片预览\")\n\n&nbsp;\n\n5.[可编辑的表格](http://www.laispace.com/xiaospace/demo/2012-10-25/editableTable.html \"可编辑的表格\")","html":"<p>郁闷死了，刚打好字浏览器就突然崩溃，就不再重新写了，直接上Demo。</p>\n\n<p>1.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/vote.html\" title=\"模拟投票\">模拟投票</a></p>\n\n<p>&nbsp;</p>\n\n<p>2.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/changeSelectedWord.html\" title=\"改变选中文字的样式\">改变选中文字的样式</a></p>\n\n<p>&nbsp;</p>\n\n<p>3.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/changetitle.html\" title=\"改变提示信息title的样式\">改变提示信息的样式</a></p>\n\n<p>&nbsp;</p>\n\n<p>4.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/magnifypictures.html\" title=\"鼠标悬浮放大图片预览\">鼠标悬浮放大图片</a></p>\n\n<p>&nbsp;</p>\n\n<p>5.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/editableTable.html\" title=\"可编辑的表格\">可编辑的表格</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351210828000,"created_by":1,"updated_at":1351210828000,"updated_by":1,"published_at":1351210828000,"published_by":1},{"id":462,"uuid":"431bcbbd-5c7c-4873-9c11-657ad792bf49","title":"2012-10-26-下拉菜单和标签页效果","slug":"2012-10-26-xia-la-cai-dan-he-biao-qian-ye-xiao-guo","markdown":"\n\n实现了简单的功能，CSS还未优化。\n\n1.纵向和横向下拉菜单，[demo/2012-10-26/1.html](http://www.laispace.com/xiaospace/demo/2012-10-26/1.html \"下拉菜单\")\n\n是个二级菜单，多级菜单原理相同，按需要再制作。\n\n2.标签页效果，[demo/2012-10-26/2.html](http://www.laispace.com/xiaospace/demo/2012-10-26/2.html \"标签页效果\")\n\n看似简单，但细节倒是不少。\n\n&nbsp;\n\n目前学习jquery还很吃力，但一定得坚持多做练习！","html":"<p>实现了简单的功能，CSS还未优化。</p>\n\n<p>1.纵向和横向下拉菜单，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-26/1.html\" title=\"下拉菜单\">demo/2012-10-26/1.html</a></p>\n\n<p>是个二级菜单，多级菜单原理相同，按需要再制作。</p>\n\n<p>2.标签页效果，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-26/2.html\" title=\"标签页效果\">demo/2012-10-26/2.html</a></p>\n\n<p>看似简单，但细节倒是不少。</p>\n\n<p>&nbsp;</p>\n\n<p>目前学习jquery还很吃力，但一定得坚持多做练习！</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351299343000,"created_by":1,"updated_at":1351299343000,"updated_by":1,"published_at":1351299343000,"published_by":1},{"id":463,"uuid":"f0974673-45e4-47a4-a821-3006b8a06cb2","title":"2012-10-29-光标悬浮时其他区域变暗","slug":"2012-10-29-guang-biao-xuan-fu-shi-qi-ta-qu-yu-bian-an","markdown":"\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png \"2012-10-30_005636\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png)\n\n光标悬浮时显示figcaption图片说明，并将其余图片变暗，[demo](http://www.laispace.com/xiaospace/demo/2012-10-29/1.html)","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png\" alt=\"\" title=\"2012-10-30_005636\" /></a></p>\n\n<p>光标悬浮时显示figcaption图片说明，并将其余图片变暗，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-29/1.html\">demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351559189000,"created_by":1,"updated_at":1351559189000,"updated_by":1,"published_at":1351559189000,"published_by":1},{"id":464,"uuid":"98fea610-0147-4643-9236-1b41644c8d48","title":"2012-10-30-CSS3写动态进度条","slug":"2012-10-30-css3xie-dong-tai-jin-du-tiao","markdown":"\n\n1.进度条效果\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836-300x199.png \"2012-10-31_010836\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836.png)\n\n在一个div内包含空的span元素，通过CSS3来控制这个属性的背景以及宽度，就写出了进度条的效果，页面加载时进度条滚动使用的新属性animation并自定义了关键帧，[demo](http://www.laispace.com/xiaospace/demo/2012-10-30/1.html)\n\n&nbsp;\n\n2.chrome云语音输入\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png \"2012-10-31_010923\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png)\n\n只能在webkit内核的浏览器中使用，貌似是使用了谷歌的云语音功能，但是语音识别效果并不理想额，[demo](http://www.laispace.com/xiaospace/demo/2012-10-30/2.html)","html":"<p>1.进度条效果</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836.png\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836-300x199.png\" alt=\"\" title=\"2012-10-31_010836\" /></a></p>\n\n<p>在一个div内包含空的span元素，通过CSS3来控制这个属性的背景以及宽度，就写出了进度条的效果，页面加载时进度条滚动使用的新属性animation并自定义了关键帧，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-30/1.html\">demo</a></p>\n\n<p>&nbsp;</p>\n\n<p>2.chrome云语音输入</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png\" alt=\"\" title=\"2012-10-31_010923\" /></a></p>\n\n<p>只能在webkit内核的浏览器中使用，貌似是使用了谷歌的云语音功能，但是语音识别效果并不理想额，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-30/2.html\">demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351645992000,"created_by":1,"updated_at":1351645992000,"updated_by":1,"published_at":1351645992000,"published_by":1},{"id":465,"uuid":"0b189c82-9ab7-4437-8868-7353f4f64c41","title":"2012-10-31-动态划出窗口信息","slug":"2012-10-31-dong-tai-hua-chu-chuang-kou-xin-xi","markdown":"\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png \"2012-11-01_002252\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png)\n\n放在个人主页上，点击LaiXiaoLai后滑出窗口，显示个人信息，滑出窗口右下角的【收起】，收回窗口，可在这个窗口上放大量信息，并且因为预加载，打开时一般已经加载完毕，[demo](http://www.laispace.com/xiaospace/demo/2012-10-31/1.html)","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png\" alt=\"\" title=\"2012-11-01_002252\" /></a></p>\n\n<p>放在个人主页上，点击LaiXiaoLai后滑出窗口，显示个人信息，滑出窗口右下角的【收起】，收回窗口，可在这个窗口上放大量信息，并且因为预加载，打开时一般已经加载完毕，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-31/1.html\">demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351729574000,"created_by":1,"updated_at":1351729574000,"updated_by":1,"published_at":1351729574000,"published_by":1},{"id":466,"uuid":"dd28da4f-f3dd-4bb3-87bc-e928de438f57","title":"2012-11-03-网页中间弹出文本框","slug":"2012-11-03-wang-ye-zhong-jian-dan-chu-wen-ben-kuang","markdown":"\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723-300x194.jpg \"2012-11-04_002723\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723.jpg)\n\n&nbsp;\n\n核心代码是：\n\n$(\"#button\").click(function(){\nvar curwidth = document.body.scrollWidth;//获得当前屏幕可见部分的宽和高\nvar curheight = document.body.scrollHeight;//思考用了哪种高宽！\nvar tipswidth = $(\".tips\").width(); //获得通知栏的宽和高\nvar tipsheight = $(\".tips\").height();\nvar left = (curwidth - tipswidth) / 2 ; //计算通知栏应在的位置\nvar top = (curheight - tipsheight) / 2 ;\n$(\".tips\").css(\"left\",left);\n$(\".tips\").css(\"top\",top);\n\n$(\".tips\").fadeTo(4000,1).delay(5000).fadeTo(3000,0);\n});\n});\n\n&nbsp;\n\n各种宽度高度，不一一allert加上草稿纸上多加画画，还真搞不懂分不清：\n\n网页可见区域宽： document.body.clientWidth\n网页可见区域高： document.body.clientHeight\n网页可见区域宽： document.body.offsetWidth (包括边线的宽)\n网页可见区域高： document.body.offsetHeight (包括边线的高)\n网页正文全文宽： document.body.scrollWidth\n网页正文全文高： document.body.scrollHeight\n网页被卷去的高： document.body.scrollTop\n网页被卷去的左： document.body.scrollLeft\n网页正文部分上： window.screenTop\n网页正文部分左： window.screenLeft\n屏幕分辨率的高： window.screen.height\n屏幕分辨率的宽： window.screen.width\n屏幕可用工作区高度： window.screen.availHeight\n屏幕可用工作区宽度： window.screen.availWidth\n\nCSS3很强大，能做出很炫的效果。\n\n点击按钮就可以弹出像信封的提示框，见[Demo](http://www.laispace.com/xiaospace/demo/2012-11-03/1.html).\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723-300x194.jpg\" alt=\"\" title=\"2012-11-04_002723\" /></a></p>\n\n<p>&nbsp;</p>\n\n<p>核心代码是：</p>\n\n<p>$(\"#button\").click(function(){\nvar curwidth = document.body.scrollWidth;//获得当前屏幕可见部分的宽和高 <br />\nvar curheight = document.body.scrollHeight;//思考用了哪种高宽！ <br />\nvar tipswidth = $(\".tips\").width(); //获得通知栏的宽和高 <br />\nvar tipsheight = $(\".tips\").height(); <br />\nvar left = (curwidth - tipswidth) / 2 ; //计算通知栏应在的位置 <br />\nvar top = (curheight - tipsheight) / 2 ; <br />\n$(\".tips\").css(\"left\",left);\n$(\".tips\").css(\"top\",top);</p>\n\n<p>$(\".tips\").fadeTo(4000,1).delay(5000).fadeTo(3000,0);\n});\n});</p>\n\n<p>&nbsp;</p>\n\n<p>各种宽度高度，不一一allert加上草稿纸上多加画画，还真搞不懂分不清：</p>\n\n<p>网页可见区域宽： document.body.clientWidth\n网页可见区域高： document.body.clientHeight\n网页可见区域宽： document.body.offsetWidth (包括边线的宽)\n网页可见区域高： document.body.offsetHeight (包括边线的高)\n网页正文全文宽： document.body.scrollWidth\n网页正文全文高： document.body.scrollHeight\n网页被卷去的高： document.body.scrollTop\n网页被卷去的左： document.body.scrollLeft\n网页正文部分上： window.screenTop\n网页正文部分左： window.screenLeft\n屏幕分辨率的高： window.screen.height\n屏幕分辨率的宽： window.screen.width\n屏幕可用工作区高度： window.screen.availHeight\n屏幕可用工作区宽度： window.screen.availWidth</p>\n\n<p>CSS3很强大，能做出很炫的效果。</p>\n\n<p>点击按钮就可以弹出像信封的提示框，见<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-03/1.html\">Demo</a>.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351989379000,"created_by":1,"updated_at":1351989379000,"updated_by":1,"published_at":1351989379000,"published_by":1},{"id":467,"uuid":"1f60365a-0043-41b9-9e0d-bde54e6fa7c7","title":"2012-11-05-瀑布流效果","slug":"2012-11-05-pu-bu-liu-xiao-guo","markdown":"\n\n瀑布流是众多流行网站使用的一种技术，有几种方法实现。\n\n方法1：[等宽高块浮动](http://www.laispace.com/xiaospace/demo/2012-11-05/1.html)\n\n&nbsp;\n\n方法2：[等宽列浮动](http://www.laispace.com/xiaospace/demo/2012-11-05/2.html)\n\n&nbsp;\n\n方法3：[CSS3定义](http://www.laispace.com/xiaospace/demo/2012-11-05/3.html)\n\n&nbsp;\n\n方法4：[绝对定位](http://www.laispace.com/xiaospace/demo/2012-11-05/4.html)\n\n&nbsp;\n\nCSS3[瀑布流效果](http://www.laispace.com/xiaospace/demo/2012-11-05/5.html)\n\n&nbsp;\n\n来自[http://blogread.cn/it/article.php?id=4337&amp;f=sa](http://blogread.cn/it/article.php?id=4337&amp;f=sa)\n\n[http://blogread.cn/it/article.php?id=5804](http://blogread.cn/it/article.php?id=5804)","html":"<p>瀑布流是众多流行网站使用的一种技术，有几种方法实现。</p>\n\n<p>方法1：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/1.html\">等宽高块浮动</a></p>\n\n<p>&nbsp;</p>\n\n<p>方法2：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/2.html\">等宽列浮动</a></p>\n\n<p>&nbsp;</p>\n\n<p>方法3：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/3.html\">CSS3定义</a></p>\n\n<p>&nbsp;</p>\n\n<p>方法4：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/4.html\">绝对定位</a></p>\n\n<p>&nbsp;</p>\n\n<p>CSS3<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/5.html\">瀑布流效果</a></p>\n\n<p>&nbsp;</p>\n\n<p>来自<a href=\"http://blogread.cn/it/article.php?id=4337&amp;f=sa\">http://blogread.cn/it/article.php?id=4337&amp;f=sa</a></p>\n\n<p><a href=\"http://blogread.cn/it/article.php?id=5804\">http://blogread.cn/it/article.php?id=5804</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1352158848000,"created_by":1,"updated_at":1352158848000,"updated_by":1,"published_at":1352158848000,"published_by":1},{"id":468,"uuid":"644e36a1-e749-4597-ac34-8666bc8fb8a5","title":"2012-11-06-仿Win8界面","slug":"2012-11-06-fang-win8jie-mian","markdown":"\n\n喜欢win8的界面风格-简约。[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545-300x192.jpg \"2012-11-06_233545\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545.jpg)\n\n自己照着图片写了个简单的仿页面，代码不是最好的，但效果还是不错的，[demo](http://www.laispace.com/xiaospace/demo/2012-11-06/1.html)\n\n&nbsp;\n\n一个网友推荐了一个写好的[仿页面](http://win8dh.com/)，有时间再好好琢磨学习吧。","html":"<p>喜欢win8的界面风格-简约。<a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545-300x192.jpg\" alt=\"\" title=\"2012-11-06_233545\" /></a></p>\n\n<p>自己照着图片写了个简单的仿页面，代码不是最好的，但效果还是不错的，<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-06/1.html\">demo</a></p>\n\n<p>&nbsp;</p>\n\n<p>一个网友推荐了一个写好的<a href=\"http://win8dh.com/\">仿页面</a>，有时间再好好琢磨学习吧。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1352245537000,"created_by":1,"updated_at":1352245537000,"updated_by":1,"published_at":1352245537000,"published_by":1},{"id":469,"uuid":"be99debc-1de4-46e8-85d2-1969ec7c46da","title":"2012-11-11-CSS3几个新属性的测试","slug":"2012-11-11-css3ji-ge-xin-shu-xing-de-ce-shi","markdown":"\n\nCSS3中过渡、圆角、阴影等的测试，只在chrome下测试，没写其他浏览器下的Hack代码。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357-279x300.jpg \"2012-11-11_220357\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357.jpg)\n<div> 核心代码：</div>\n<div>\n\n.ease{\n-webkit-transition:all 4s ease;\n}\n\n.ease-in{\n-webkit-transition:all 4s ease-in;\n}\n\n.ease-out{\n-webkit-transition:all 4s ease-out;\n}\n\n.ease-in-out{\n-webkit-transition:all 4s ease-in-out;\n}\n\n.linear{\n-webkit-transition:all 4s linear;\n}\n\n#trs:hover .trs{\nmargin-left: 400px;/*向右偏移*/\n-webkit-transform:rotate(25deg);/*旋转*/\ncolor:red;/*更换字体颜色*/\nfont-size: 1.5em;/*更换字体大小*/\nbackground:-webkit-gradient(linear, left bottom, left top,color-stop(0, #b6ebf7), color-stop(0.80, #fff));/*背景平滑过渡*/\nborder-radius: 25px;/*增加圆角*/\n}\n\n&nbsp;\n\n[demo](http://www.laispace.com/xiaospace/demo/2012-11-11/1.html)\n\n</div>","html":"<p>CSS3中过渡、圆角、阴影等的测试，只在chrome下测试，没写其他浏览器下的Hack代码。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357-279x300.jpg\" alt=\"\" title=\"2012-11-11_220357\" /></a></p>\n\n<div> 核心代码：</div>  \n<div>\n\n.ease{\n-webkit-transition:all 4s ease;\n}\n\n.ease-in{\n-webkit-transition:all 4s ease-in;\n}\n\n.ease-out{\n-webkit-transition:all 4s ease-out;\n}\n\n.ease-in-out{\n-webkit-transition:all 4s ease-in-out;\n}\n\n.linear{\n-webkit-transition:all 4s linear;\n}\n\n#trs:hover .trs{\nmargin-left: 400px;/*向右偏移*/  \n-webkit-transform:rotate(25deg);/*旋转*/\ncolor:red;/*更换字体颜色*/  \nfont-size: 1.5em;/*更换字体大小*/  \nbackground:-webkit-gradient(linear, left bottom, left top,color-stop(0, #b6ebf7), color-stop(0.80, #fff));/*背景平滑过渡*/  \nborder-radius: 25px;/*增加圆角*/  \n}\n\n&nbsp;\n\n[demo](http://www.laispace.com/xiaospace/demo/2012-11-11/1.html)\n\n</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1352672047000,"created_by":1,"updated_at":1352672047000,"updated_by":1,"published_at":1352672047000,"published_by":1},{"id":470,"uuid":"58eb2458-aab1-47bd-873b-0b3371c825b1","title":"2012-11-12-CSS剪贴图像的几种方法","slug":"2012-11-12-cssjian-tie-tu-xiang-de-ji-chong-fang-fa","markdown":"\n\n在不改变原来图片大小的情况下，剪切有几个方法（每种方法都要把img包在一个元素内来定位）：\n\n1.用margin给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\noverflow: hidden;/*设置溢出隐藏*/\n}\nimg#usemargin{\nmargin:-40px -40px -40px -40px;\n}\n&lt;/style&gt;\n\n[demo1](http://www.laispace.com/xiaospace/demo/2012-11-12/1.html)\n\n2.用absolute给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\noverflow: hidden;/*设置溢出隐藏,必需*/\nposition: relative;/*必需！*/\n}\nimg#useabsolute{\nposition:absolute;/*必需！*/\ntop:-40px;\nright:-50px;\n}\n&lt;/style&gt;\n\n[demo2](http://www.laispace.com/xiaospace/demo/2012-11-12/2.html)\n\n3.用clip给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\n\nposition: relative;/*必需！*/\n}\nimg#useclip{\nposition:absolute;/*必需！*/\nclip: rect(20px 225px 200px 55px);\n\n}\nimg#withoutclip{\nopacity:0.4;\n}\n&lt;/style&gt;\n\n[demo3](http://www.laispace.com/xiaospace/demo/2012-11-12/3.html)\n\n4.用clip给背景切图\n\n&lt;style&gt;\n\ndiv{\nfloat:left;\nmargin-right: 20px;\n}\ndiv#noclip{\nbackground:url(2.jpg) no-repeat;\nwidth:400px;\nheight:300px;\nopacity:0.5;\n\n}\ndiv#clip{\nbackground:url(2.jpg);\nwidth:400px;\nheight:300px;\ntext-align: center;\nline-height: 130px;\nborder:1px solid white;\nopacity:1;\n/*使用clip的条件是position:absolute，父元素则为position:relative*/\nposition: absolute;\nclip:rect(50px 250px 150px 50px);\n/*注意，在IE8以及其以下的版本，在使用clip属性时需要注意语法：clip (top,right,bottom,left);*/\n}\n\n&lt;/style&gt;\n\n[demo4](http://www.laispace.com/xiaospace/demo/2012-11-12/4.html)\n\n&nbsp;\n\n&nbsp;\n\n5.显然，最好用的就是clip方法了","html":"<p>在不改变原来图片大小的情况下，剪切有几个方法（每种方法都要把img包在一个元素内来定位）：</p>\n\n<p>1.用margin给img切图</p>\n\n<p>&lt;style&gt;\np{ <br />\nwidth:400px; <br />\nheight:300px; <br />\nmargin-right:20px; <br />\nborder: 5px lightblue solid; <br />\nfloat: left; <br />\noverflow: hidden;/<em>设置溢出隐藏</em>/ <br />\n}\nimg#usemargin{ <br />\nmargin:-40px -40px -40px -40px; <br />\n}\n&lt;/style&gt;</p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/1.html\">demo1</a></p>\n\n<p>2.用absolute给img切图</p>\n\n<p>&lt;style&gt;\np{ <br />\nwidth:400px; <br />\nheight:300px; <br />\nmargin-right:20px; <br />\nborder: 5px lightblue solid; <br />\nfloat: left; <br />\noverflow: hidden;/<em>设置溢出隐藏,必需</em>/ <br />\nposition: relative;/<em>必需！</em>/ <br />\n}\nimg#useabsolute{ <br />\nposition:absolute;/<em>必需！</em>/ <br />\ntop:-40px; <br />\nright:-50px; <br />\n}\n&lt;/style&gt;</p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/2.html\">demo2</a></p>\n\n<p>3.用clip给img切图</p>\n\n<p>&lt;style&gt;\np{ <br />\nwidth:400px; <br />\nheight:300px; <br />\nmargin-right:20px; <br />\nborder: 5px lightblue solid; <br />\nfloat: left;</p>\n\n<p>position: relative;/<em>必需！</em>/ <br />\n}\nimg#useclip{ <br />\nposition:absolute;/<em>必需！</em>/ <br />\nclip: rect(20px 225px 200px 55px);</p>\n\n<p>}\nimg#withoutclip{ <br />\nopacity:0.4; <br />\n}\n&lt;/style&gt;</p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/3.html\">demo3</a></p>\n\n<p>4.用clip给背景切图</p>\n\n<p>&lt;style&gt;</p>\n\n<p>div{ <br />\nfloat:left; <br />\nmargin-right: 20px; <br />\n}\ndiv#noclip{ <br />\nbackground:url(2.jpg) no-repeat; <br />\nwidth:400px; <br />\nheight:300px; <br />\nopacity:0.5;</p>\n\n<p>}\ndiv#clip{ <br />\nbackground:url(2.jpg); <br />\nwidth:400px; <br />\nheight:300px; <br />\ntext-align: center; <br />\nline-height: 130px; <br />\nborder:1px solid white; <br />\nopacity:1; <br />\n/<em>使用clip的条件是position:absolute，父元素则为position:relative</em>/\nposition: absolute; <br />\nclip:rect(50px 250px 150px 50px); <br />\n/<em>注意，在IE8以及其以下的版本，在使用clip属性时需要注意语法：clip (top,right,bottom,left);</em>/\n}</p>\n\n<p>&lt;/style&gt;</p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/4.html\">demo4</a></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>5.显然，最好用的就是clip方法了</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1352761724000,"created_by":1,"updated_at":1352761724000,"updated_by":1,"published_at":1352761724000,"published_by":1},{"id":471,"uuid":"18d4f42b-d0ca-4196-a6ba-1a632f34a853","title":"2012-11-13-网页div浮动布局CSS3属性尝试","slug":"2012-11-13-wang-ye-divfu-dong-bu-ju-css3shu-xing-chang-shi","markdown":"\n\n闲来没事，动手用float来布局网页，使用了不少CSS3的新属性，效果挺不错的。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118-300x196.jpg \"2012-11-14_010118\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118.jpg)\n\n没有好好花时间去做Hack，就先这样吧，[demo](http://www.laispace.com/xiaospace/demo/2012-11-13/1.html)","html":"<p>闲来没事，动手用float来布局网页，使用了不少CSS3的新属性，效果挺不错的。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118-300x196.jpg\" alt=\"\" title=\"2012-11-14_010118\" /></a></p>\n\n<p>没有好好花时间去做Hack，就先这样吧，<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-13/1.html\">demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1352855426000,"created_by":1,"updated_at":1352855426000,"updated_by":1,"published_at":1352855426000,"published_by":1},{"id":472,"uuid":"765c9e1a-0ab2-42db-9cbe-14e1451c90f8","title":"2012-12-仿学校官网主页","slug":"2012-12-fang-xue-xiao-guan-wang-zhu-ye","markdown":"\n\n仿SCUT主页，没有精细到每一个px，目的是练习布局。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg \"2012-12-23_210612\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg)\n\n其中下拉菜单用纯CSS写的，还尝试用了Sprite图片，写起来还很生疏，需要多加练习。\n\n代码没有优化，因为赶着复习期末考试了，就先放着吧，上[demo](http://www.laispace.com/xiaospace/demo/2012-12-SCUT_index/)","html":"<p>仿SCUT主页，没有精细到每一个px，目的是练习布局。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg\" alt=\"\" title=\"2012-12-23_210612\" /></a></p>\n\n<p>其中下拉菜单用纯CSS写的，还尝试用了Sprite图片，写起来还很生疏，需要多加练习。</p>\n\n<p>代码没有优化，因为赶着复习期末考试了，就先放着吧，上<a href=\"http://www.laispace.com/xiaospace/demo/2012-12-SCUT_index/\">demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356297044000,"created_by":1,"updated_at":1356297044000,"updated_by":1,"published_at":1356297044000,"published_by":1},{"id":473,"uuid":"7a4be0ea-4bd1-4327-9732-e1b6701ffee3","title":"2012-12-新练习","slug":"2012-12-xin-lian-xi","markdown":"\n\n最近比较忙，没有坚持每日一练了，但是看了不少书，理论知识长了不少发现写起东西来也比较顺畅了，以后写练习以月为一个单位汇总吧。\n\n1.纯CSS3或JQ实现文本框动态下拉，[demo](http://www.laispace.com/xiaospace/demo/2012-12/%E7%BA%AFCSS3%E5%92%8CJQ%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%8A%A8%E6%80%81%E4%B8%8B%E6%8B%89%20-%20%E5%89%AF%E6%9C%AC.html)\n\n2.写了个小页面，用来记录我的IDP计划，[demo](http://www.laispace.com/xiaospace/demo/2012-12/idp.html)\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg \"2012-12-05_232639\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg)","html":"<p>最近比较忙，没有坚持每日一练了，但是看了不少书，理论知识长了不少发现写起东西来也比较顺畅了，以后写练习以月为一个单位汇总吧。</p>\n\n<p>1.纯CSS3或JQ实现文本框动态下拉，<a href=\"http://www.laispace.com/xiaospace/demo/2012-12/%E7%BA%AFCSS3%E5%92%8CJQ%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%8A%A8%E6%80%81%E4%B8%8B%E6%8B%89%20-%20%E5%89%AF%E6%9C%AC.html\">demo</a></p>\n\n<p>2.写了个小页面，用来记录我的IDP计划，<a href=\"http://www.laispace.com/xiaospace/demo/2012-12/idp.html\">demo</a></p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg\" alt=\"\" title=\"2012-12-05_232639\" /></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1354750119000,"created_by":1,"updated_at":1354750119000,"updated_by":1,"published_at":1354750119000,"published_by":1},{"id":474,"uuid":"6fe5e118-9108-484f-a6d4-175a2bf78412","title":"2012文教夏令营","slug":"2012wen-jiao-xia-ling-ying","markdown":"\n\n**<span style=\"font-family: 宋体;\">   营会终于告一段落了，翻看了自七月以来的所有工作备忘、邮件。此时回顾，文教你又锻炼了我。回想电话联络学生的场景、营会四天三夜的每个细节，以及我坚持在写的营会日记，突然感觉自己矫情了。</span>****<span style=\"font-family: 宋体;\">   </span>**\n<div align=\"left\">**<span style=\"font-family: 宋体;\">   早上整理了自己的日记、你们的反馈、你们的留言条、我们的照片，然后，就不想说然后了。</span>**</div>\n<div align=\"left\">**有太多的话要说，但打死我也不承认我是多情的 - - ！**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">不说太多，留给自己慢慢体会。</span>**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">   以下，是你们留给我的宝贵财富，感谢文教，更感谢你们！</span>**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">别忘了来华工找四两哥喝汤啊！！！！！\n</span>**</div>\n<div align=\"left\">** **</div>\n<div align=\"left\"></div>\n<div align=\"left\">**<span style=\"font-family: 宋体; font-size: small;\">Part1 文教版</span>**</div>\n<div align=\"left\"><span style=\"font-family: 宋体; font-size: small;\">\n</span></div>\n<div align=\"left\">\n\n念雯\n\n世界很大，我想要的很少。文教，谢谢！\n\n&nbsp;\n\n清燕\n\n文教的成员，I love you ！\n\n&nbsp;\n\n宝新\n\n文教好！也祝越办越好！\n\n&nbsp;\n\n&nbsp;\n\n嘉奇\n\n因文教而聚，因友谊而欢，因信仰而别。\n\n&nbsp;\n\n海青\n\n希望文教越来越好！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加文教，开心！愿文教的爱能绵延不绝。这次很Happpy!真的！\n\n&nbsp;\n\n&nbsp;\n\n智韬\n\n我还会再回来的！\n\n&nbsp;\n\n念祖\n\n希望文教带领更多的人往前冲冲冲！\n\n&nbsp;\n\n你们辛苦啦，谢谢你们！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加集体活动就是文教了。忘不了，很开心！\n\n&nbsp;\n\n我爱文教！\n\n&nbsp;\n\n深深祝愿，一切安好！\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n静周\n\n拍了很多照片留念，我成人路上的珍贵纪念。经历了一些事情，才会慢慢成长。谢谢文教，辛苦了喵，师兄师姐们！\n\n&nbsp;\n\n婷婷\n\n我的很多第一次尝试在文教，所以在文教我成长了自己。感谢文教给了我机会，也为我自己能抓住机会而鼓掌。与文教的缘分，待续......\n\n&nbsp;\n\n&nbsp;\n\n清燕\n\n那是一种最真诚的交流，一种心与心之间的交流，只可意会不可言传。睡觉时有种叫 “幸福” 的暖流在我心中流动。\n\n&nbsp;\n\n慧敏\n\n我却收获了欢笑，感受到了文教大家庭的温暖。非常感谢这次营会，真的！\n\n&nbsp;\n\n大勇\n\n那一刻，我感觉彻底放开了自我，不再有腼腆和不自信的束缚，我的前面不再是巨石，我感觉到了友情，感觉到了自己突破的见证，感觉到了表现自己的欲望......\n\n这次文教夏令营，在这种轻松愉快的氛围，在大家的热情鼓励和帮助下，我终于慢慢走出自己的阴影，释放自我。\n\n&nbsp;\n\n育广\n\n因为文教而聚在了一起，大家毫无嫌隙地、毫无顾忌地玩在一起，那一个个场景，实在令人难忘。\n\n&nbsp;\n\n碧莲\n\nI know everyone !\n\nI see everyone !\n\nI hear everyone !\n\nI feel everyone !\n\nI love everyone !\n\n&nbsp;\n\n&nbsp;\n\n蒋清\n\n总之总之，参加文教我不会后悔，收获到的如江水般我无法说完。我很喜欢文教，能够加入我觉得意义不在单纯的奖学、助学金。文教传承的感恩、友谊我是真的明白、体会。\n\n&nbsp;\n\n&nbsp;\n\n钊漩\n\n在这次营会中，我结识了很多朋友。我想如果没有参加这个营会，我与他们可能永远没有交集。能够认识他们，我感到非常高兴。\n\n&nbsp;\n\n刘艳\n\n对小赖学长说过，面对未知，人总会有一种莫名的恐惧感。我很害怕那些无法由自己掌控的未来，但文教却告诉我：未知并不可怕，可怕的是那颗将自己尘封的心。我会慢慢学会成长，学会面对，为生活加油喝彩。\n\n&nbsp;\n\n&nbsp;\n\n淼锋\n\n美好的时光总是容易让人怀念，不过还好我拍下了很多照片，记住了每一个开心的笑脸。\n\n很爱过去的充满欢笑的这几天。\n\n&nbsp;\n\n&nbsp;\n\n凤媚\n\n文教给我的总体印象是很好的，因为她是由很多有心人组织的大家庭，而且她不仅可以在物质上帮助需要的人，更多的是从精神上鼓励他们，使得学生们能首先从心理上战胜自己，超越自己。而且文教让我们明白了 “心连心” 的重要性，做事不能太功利，有时也要做一些无回报的活动，因为都需要我一份爱心。\n\n&nbsp;\n\n&nbsp;\n\n海青\n\n希望师兄师姐们都要好好的，永远幸福，forever love!!\n\n&nbsp;\n\n&nbsp;\n\n维业\n\n我相信，相信文教会壮大，会越来越好。每一次举办都会让文教越来越强，我也相信文教的精神、爱会永远传承。没有过不去的坎，有了爱，世界会更加美好。\n\n&nbsp;\n\n&nbsp;\n\n佳慧\n\n文教真心能做到这样，非常不容易，她让一群不甚熟悉的人High得手舞足蹈，还有谁有这个魔力？\n\n文教给予我们的有物质的，更重要的，在于精神。无形之中，她已经播下了许许多多的种子。\n\n&nbsp;\n\n&nbsp;\n\n思征\n\n营会越办越好！\n\n&nbsp;\n\n清菊\n\n其实还有很多想说的话，但我更想让它们留在我的内心，永远，永远。\n\n念祖\n\n希望时光能停留，可惜，天下没有不散的宴席。\n\n&nbsp;\n\n翠芬\n\n从师兄师姐身上学到了很多正能量的东西，这使我个人也坚定了一些梦想。当然最大的收获就是认识了好多朋友 ······\n\n总之呢，真的非常喜欢这个活动。\n\n&nbsp;\n\n宝珠\n\n我喜欢这个大家庭，我想成为其中一员。\n\n&nbsp;\n\n海珠\n\n只有融入他们，才会真正地感受到温暖。\n\n&nbsp;\n\n&nbsp;\n\n杨州\n\n留下太多难以言表的记忆。\n\n</div>\n<div align=\"left\">欢迎在评论中补充哦O(∩_∩)O~</div>\n<div align=\"left\"></div>\n<div align=\"left\"><!--more--></div>\n<div align=\"left\">\n<div align=\"left\">\n<div>\n\n&nbsp;\n\n**Part2 小赖版**\n\n</div>\n<div>\n\n&nbsp;\n\n小赖  小赖！\n\n&nbsp;\n\n</div>\n<div>清声学长，我超喜欢你上次的学习分享，我学到很多。</div>\n<div>\n\n昨天我听了其他学姐学长说大学里并没有想象中那么好，很多事都会改变。\n\n但我依旧相信梦想，我会坚持自己的信仰。\n\n以后有什么困难，我都会麻烦你哦！\n\n这次营会，我不是不高兴而是在思考我今后的路。4次营会让我印象最深的就是你说的话！\n\n好吧，我们还会见面的。我希望下次见到你，你可以多笑笑，烦恼怕什么，活得开心才最重要。（嘉奇）\n\n&nbsp;\n\n小赖，有活动就Call me!（智韬）\n\n&nbsp;\n\n小赖哥，你讲话好有哲理啊，好多都很受用呢~祝你天天开心！（艳萍）\n\n&nbsp;\n\n小赖哥，很谢谢你的帮忙。说实话，你说的特别多话，让我很受益，我不知道怎么表达。但，这份特殊的爱，一直在心中。（蒋清）\n\n&nbsp;\n\n小赖学长，你这人很好！很健谈，又有组织能力！不过我觉得你不要在乎别人说你是否严肃，毕竟一个人的气质是天生的，那才是你的真性情！我们都要加油哦！（海青）\n\n&nbsp;\n\n呵呵，学长加油！营会办得越来越出色了！（思征）\n\n&nbsp;\n\n清声小赖子，居然忘了我是大麻人...太桑心了...我都还记得你是小留的。你好厉害，会变得更棒。潜力股哦...（玲志）\n\n&nbsp;\n\n赖小赖，你有才华，有能力，对有些情况有你独特的见解！\n\n两个字，“不错”！\n\n真是后生可 wei 啊,哈哈...（清燕）\n\n&nbsp;\n\n清声，小赖，师兄，同乡：很开心，很高兴，可以再见到你，再次成为朋友。你要加油，好好加油，祝福你。（婷婷）\n\n&nbsp;\n\n呼呼，赖小赖，好久不见了捏，莫名的感动啊！头发长了好帅啊！太有哲理的讲话，我喜欢！继续Open继续Smile，大学继续加油！（嘉宸）\n\n&nbsp;\n\n小赖，别再忘记点我名了！！！（宝珠）\n\n&nbsp;\n\n小赖学长，其实你也没有那么沉重啦。就是感觉你好像有点累。记得不要皱眉哦。开心哈！\n\n&nbsp;\n\n小赖，你经历好丰富，希望有机会能一睹你的风采！不要忘了我（菊珍）\n\n&nbsp;\n\n小赖，你辛苦了！我也要谢谢你，你让我明白了做人要有责任。\n\n&nbsp;\n\n清声，看你收那么多!真的不想再写给你！不过。你真的成熟又稳重，成长很多！以后想你自己跟我们讲你的成长故事！（反正我没听过）（小安妮）\n\n&nbsp;\n\n清声，哈哈，好像也叫你“声声”。这次，好样！（佳慧）\n\n&nbsp;\n\n小赖兄，你的主持很好，人是更好！你教会了我们很多。期待下次的见面。（家威）\n\n&nbsp;\n\n愿你有个灿烂的前程，获得幸福。\n\n&nbsp;\n\n小赖哥，我好爱你，嫁给我吧！我会一生一世守护你（大勇你这是恶心我嘛 - -！）\n\n&nbsp;\n\n小赖，真的好喜欢你啊！每次来文教你都会给我一些不同的感悟，崇拜你耶！喜欢你的那句话：有趣必有舍，有舍必有得。（习翔）\n\n&nbsp;\n\n看看！看看！看看！我又给你写了，因为你赖小赖哥于我意义不同，不常是因为你帮了我，而且在精神与一些做人的道理上，我学到了超多。\n\n&nbsp;\n\n小赖学长，To be honest，这次活动你组织的很不错。有机会把这些经验传授给我。\n\n&nbsp;\n\n不够自信，太严肃的赖小赖。此次，连我都觉得后面办的不错，就真的挺不错的了。以后，还有机会可以见面。期待...感谢...此次我学会了很多。（海珠）\n\n&nbsp;\n\n弟弟啊，恕我看到你的真人后，叫不出口“弟弟啊”。至于原因，你懂的...（姐姐？）\n\n&nbsp;\n\n清声，说实话，你真的很优秀，而且比我最初见你时又更成熟些了。加油O(∩_∩)O希望你以后能更加快乐、开心，做个阳光男孩。用于面对困境，是强者的表现。你是真正的强者。（叶茜）\n\n&nbsp;\n\n小赖哥，天降大任于斯人也。相信自己，未来会更好的，笑口常开哦！（维业）\n\n&nbsp;\n\n清声学长，我特别崇拜你。这次营会让我懂得一些道理，我希望今后你还是一样坚持自己的信仰。还有，虽然惨两天，但你的高度负责让我感动，但有些事要分给别人做，不要全揽给自己。虽然我也是这样，不过我在改咯！要相信自己，相信别人！\n\n&nbsp;\n\n笑起来的酒窝很好看\n\n&nbsp;\n\n小赖，谢谢。你是好人。（刘艳）\n\n</div>\n<div></div>\n<div>**好吧，我承认，我很爱你们。**</div>\n<div>**但是，我打死也不说我很多情O(∩_∩)O~**</div>\n<div>**谢谢文教给我的这笔财富。**</div>\n</div>\n<div></div>\n</div>\n<div></div>\n<address><span style=\"color: #3366ff;\">**[<span style=\"color: #3366ff;\">点击观看2012文教梅州营会纪念视频</span>](http://http://v.youku.com/v_show/id_XNDM4MTA5MDY0.html?f=17856494 \"CCPS梅州营会纪念\")**</span></address>","html":"<p><strong><span style=\"font-family: 宋体;\">   营会终于告一段落了，翻看了自七月以来的所有工作备忘、邮件。此时回顾，文教你又锻炼了我。回想电话联络学生的场景、营会四天三夜的每个细节，以及我坚持在写的营会日记，突然感觉自己矫情了。</span><em>*</strong><span style=\"font-family: 宋体;\">   </span></em>*</p>\n\n<div align=\"left\">**<span style=\"font-family: 宋体;\">   早上整理了自己的日记、你们的反馈、你们的留言条、我们的照片，然后，就不想说然后了。</span>**</div>  \n<div align=\"left\">**有太多的话要说，但打死我也不承认我是多情的 - - ！**</div>  \n<div align=\"left\">**<span style=\"font-family: 宋体;\">不说太多，留给自己慢慢体会。</span>**</div>  \n<div align=\"left\">**<span style=\"font-family: 宋体;\">   以下，是你们留给我的宝贵财富，感谢文教，更感谢你们！</span>**</div>  \n<div align=\"left\">**<span style=\"font-family: 宋体;\">别忘了来华工找四两哥喝汤啊！！！！！  \n</span>**</div>  \n<div align=\"left\">** **</div>  \n<div align=\"left\"></div>  \n<div align=\"left\">**<span style=\"font-family: 宋体; font-size: small;\">Part1 文教版</span>**</div>  \n<div align=\"left\"><span style=\"font-family: 宋体; font-size: small;\">  \n</span></div>  \n<div align=\"left\">\n\n念雯\n\n世界很大，我想要的很少。文教，谢谢！\n\n&nbsp;\n\n清燕\n\n文教的成员，I love you ！\n\n&nbsp;\n\n宝新\n\n文教好！也祝越办越好！\n\n&nbsp;\n\n&nbsp;\n\n嘉奇\n\n因文教而聚，因友谊而欢，因信仰而别。\n\n&nbsp;\n\n海青\n\n希望文教越来越好！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加文教，开心！愿文教的爱能绵延不绝。这次很Happpy!真的！\n\n&nbsp;\n\n&nbsp;\n\n智韬\n\n我还会再回来的！\n\n&nbsp;\n\n念祖\n\n希望文教带领更多的人往前冲冲冲！\n\n&nbsp;\n\n你们辛苦啦，谢谢你们！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加集体活动就是文教了。忘不了，很开心！\n\n&nbsp;\n\n我爱文教！\n\n&nbsp;\n\n深深祝愿，一切安好！\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n静周\n\n拍了很多照片留念，我成人路上的珍贵纪念。经历了一些事情，才会慢慢成长。谢谢文教，辛苦了喵，师兄师姐们！\n\n&nbsp;\n\n婷婷\n\n我的很多第一次尝试在文教，所以在文教我成长了自己。感谢文教给了我机会，也为我自己能抓住机会而鼓掌。与文教的缘分，待续......\n\n&nbsp;\n\n&nbsp;\n\n清燕\n\n那是一种最真诚的交流，一种心与心之间的交流，只可意会不可言传。睡觉时有种叫 “幸福” 的暖流在我心中流动。\n\n&nbsp;\n\n慧敏\n\n我却收获了欢笑，感受到了文教大家庭的温暖。非常感谢这次营会，真的！\n\n&nbsp;\n\n大勇\n\n那一刻，我感觉彻底放开了自我，不再有腼腆和不自信的束缚，我的前面不再是巨石，我感觉到了友情，感觉到了自己突破的见证，感觉到了表现自己的欲望......\n\n这次文教夏令营，在这种轻松愉快的氛围，在大家的热情鼓励和帮助下，我终于慢慢走出自己的阴影，释放自我。\n\n&nbsp;\n\n育广\n\n因为文教而聚在了一起，大家毫无嫌隙地、毫无顾忌地玩在一起，那一个个场景，实在令人难忘。\n\n&nbsp;\n\n碧莲\n\nI know everyone !\n\nI see everyone !\n\nI hear everyone !\n\nI feel everyone !\n\nI love everyone !\n\n&nbsp;\n\n&nbsp;\n\n蒋清\n\n总之总之，参加文教我不会后悔，收获到的如江水般我无法说完。我很喜欢文教，能够加入我觉得意义不在单纯的奖学、助学金。文教传承的感恩、友谊我是真的明白、体会。\n\n&nbsp;\n\n&nbsp;\n\n钊漩\n\n在这次营会中，我结识了很多朋友。我想如果没有参加这个营会，我与他们可能永远没有交集。能够认识他们，我感到非常高兴。\n\n&nbsp;\n\n刘艳\n\n对小赖学长说过，面对未知，人总会有一种莫名的恐惧感。我很害怕那些无法由自己掌控的未来，但文教却告诉我：未知并不可怕，可怕的是那颗将自己尘封的心。我会慢慢学会成长，学会面对，为生活加油喝彩。\n\n&nbsp;\n\n&nbsp;\n\n淼锋\n\n美好的时光总是容易让人怀念，不过还好我拍下了很多照片，记住了每一个开心的笑脸。\n\n很爱过去的充满欢笑的这几天。\n\n&nbsp;\n\n&nbsp;\n\n凤媚\n\n文教给我的总体印象是很好的，因为她是由很多有心人组织的大家庭，而且她不仅可以在物质上帮助需要的人，更多的是从精神上鼓励他们，使得学生们能首先从心理上战胜自己，超越自己。而且文教让我们明白了 “心连心” 的重要性，做事不能太功利，有时也要做一些无回报的活动，因为都需要我一份爱心。\n\n&nbsp;\n\n&nbsp;\n\n海青\n\n希望师兄师姐们都要好好的，永远幸福，forever love!!\n\n&nbsp;\n\n&nbsp;\n\n维业\n\n我相信，相信文教会壮大，会越来越好。每一次举办都会让文教越来越强，我也相信文教的精神、爱会永远传承。没有过不去的坎，有了爱，世界会更加美好。\n\n&nbsp;\n\n&nbsp;\n\n佳慧\n\n文教真心能做到这样，非常不容易，她让一群不甚熟悉的人High得手舞足蹈，还有谁有这个魔力？\n\n文教给予我们的有物质的，更重要的，在于精神。无形之中，她已经播下了许许多多的种子。\n\n&nbsp;\n\n&nbsp;\n\n思征\n\n营会越办越好！\n\n&nbsp;\n\n清菊\n\n其实还有很多想说的话，但我更想让它们留在我的内心，永远，永远。\n\n念祖\n\n希望时光能停留，可惜，天下没有不散的宴席。\n\n&nbsp;\n\n翠芬\n\n从师兄师姐身上学到了很多正能量的东西，这使我个人也坚定了一些梦想。当然最大的收获就是认识了好多朋友 ······\n\n总之呢，真的非常喜欢这个活动。\n\n&nbsp;\n\n宝珠\n\n我喜欢这个大家庭，我想成为其中一员。\n\n&nbsp;\n\n海珠\n\n只有融入他们，才会真正地感受到温暖。\n\n&nbsp;\n\n&nbsp;\n\n杨州\n\n留下太多难以言表的记忆。\n\n</div>  \n\n<div align=\"left\">欢迎在评论中补充哦O(∩_∩)O~</div>  \n<div align=\"left\"></div>  \n<div align=\"left\"><!--more--></div>  \n<div align=\"left\">  \n<div align=\"left\">  \n<div>\n\n&nbsp;\n\n**Part2 小赖版**\n\n</div>  \n\n<div>\n\n&nbsp;\n\n小赖  小赖！\n\n&nbsp;\n\n</div>  \n\n<div>清声学长，我超喜欢你上次的学习分享，我学到很多。</div>  \n<div>\n\n昨天我听了其他学姐学长说大学里并没有想象中那么好，很多事都会改变。\n\n但我依旧相信梦想，我会坚持自己的信仰。\n\n以后有什么困难，我都会麻烦你哦！\n\n这次营会，我不是不高兴而是在思考我今后的路。4次营会让我印象最深的就是你说的话！\n\n好吧，我们还会见面的。我希望下次见到你，你可以多笑笑，烦恼怕什么，活得开心才最重要。（嘉奇）\n\n&nbsp;\n\n小赖，有活动就Call me!（智韬）\n\n&nbsp;\n\n小赖哥，你讲话好有哲理啊，好多都很受用呢~祝你天天开心！（艳萍）\n\n&nbsp;\n\n小赖哥，很谢谢你的帮忙。说实话，你说的特别多话，让我很受益，我不知道怎么表达。但，这份特殊的爱，一直在心中。（蒋清）\n\n&nbsp;\n\n小赖学长，你这人很好！很健谈，又有组织能力！不过我觉得你不要在乎别人说你是否严肃，毕竟一个人的气质是天生的，那才是你的真性情！我们都要加油哦！（海青）\n\n&nbsp;\n\n呵呵，学长加油！营会办得越来越出色了！（思征）\n\n&nbsp;\n\n清声小赖子，居然忘了我是大麻人...太桑心了...我都还记得你是小留的。你好厉害，会变得更棒。潜力股哦...（玲志）\n\n&nbsp;\n\n赖小赖，你有才华，有能力，对有些情况有你独特的见解！\n\n两个字，“不错”！\n\n真是后生可 wei 啊,哈哈...（清燕）\n\n&nbsp;\n\n清声，小赖，师兄，同乡：很开心，很高兴，可以再见到你，再次成为朋友。你要加油，好好加油，祝福你。（婷婷）\n\n&nbsp;\n\n呼呼，赖小赖，好久不见了捏，莫名的感动啊！头发长了好帅啊！太有哲理的讲话，我喜欢！继续Open继续Smile，大学继续加油！（嘉宸）\n\n&nbsp;\n\n小赖，别再忘记点我名了！！！（宝珠）\n\n&nbsp;\n\n小赖学长，其实你也没有那么沉重啦。就是感觉你好像有点累。记得不要皱眉哦。开心哈！\n\n&nbsp;\n\n小赖，你经历好丰富，希望有机会能一睹你的风采！不要忘了我（菊珍）\n\n&nbsp;\n\n小赖，你辛苦了！我也要谢谢你，你让我明白了做人要有责任。\n\n&nbsp;\n\n清声，看你收那么多!真的不想再写给你！不过。你真的成熟又稳重，成长很多！以后想你自己跟我们讲你的成长故事！（反正我没听过）（小安妮）\n\n&nbsp;\n\n清声，哈哈，好像也叫你“声声”。这次，好样！（佳慧）\n\n&nbsp;\n\n小赖兄，你的主持很好，人是更好！你教会了我们很多。期待下次的见面。（家威）\n\n&nbsp;\n\n愿你有个灿烂的前程，获得幸福。\n\n&nbsp;\n\n小赖哥，我好爱你，嫁给我吧！我会一生一世守护你（大勇你这是恶心我嘛 - -！）\n\n&nbsp;\n\n小赖，真的好喜欢你啊！每次来文教你都会给我一些不同的感悟，崇拜你耶！喜欢你的那句话：有趣必有舍，有舍必有得。（习翔）\n\n&nbsp;\n\n看看！看看！看看！我又给你写了，因为你赖小赖哥于我意义不同，不常是因为你帮了我，而且在精神与一些做人的道理上，我学到了超多。\n\n&nbsp;\n\n小赖学长，To be honest，这次活动你组织的很不错。有机会把这些经验传授给我。\n\n&nbsp;\n\n不够自信，太严肃的赖小赖。此次，连我都觉得后面办的不错，就真的挺不错的了。以后，还有机会可以见面。期待...感谢...此次我学会了很多。（海珠）\n\n&nbsp;\n\n弟弟啊，恕我看到你的真人后，叫不出口“弟弟啊”。至于原因，你懂的...（姐姐？）\n\n&nbsp;\n\n清声，说实话，你真的很优秀，而且比我最初见你时又更成熟些了。加油O(∩_∩)O希望你以后能更加快乐、开心，做个阳光男孩。用于面对困境，是强者的表现。你是真正的强者。（叶茜）\n\n&nbsp;\n\n小赖哥，天降大任于斯人也。相信自己，未来会更好的，笑口常开哦！（维业）\n\n&nbsp;\n\n清声学长，我特别崇拜你。这次营会让我懂得一些道理，我希望今后你还是一样坚持自己的信仰。还有，虽然惨两天，但你的高度负责让我感动，但有些事要分给别人做，不要全揽给自己。虽然我也是这样，不过我在改咯！要相信自己，相信别人！\n\n&nbsp;\n\n笑起来的酒窝很好看\n\n&nbsp;\n\n小赖，谢谢。你是好人。（刘艳）\n\n</div>  \n\n<div></div>  \n<div>**好吧，我承认，我很爱你们。**</div>  \n<div>**但是，我打死也不说我很多情O(∩_∩)O~**</div>  \n<div>**谢谢文教给我的这笔财富。**</div>  \n</div>  \n\n<div></div>  \n</div>  \n\n<div></div>  \n\n<address><span style=\"color: #3366ff;\">**[<span style=\"color: #3366ff;\">点击观看2012文教梅州营会纪念视频</span>](http://http://v.youku.com/v_show/id_XNDM4MTA5MDY0.html?f=17856494 \"CCPS梅州营会纪念\")**</span></address>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1344583979000,"created_by":1,"updated_at":1344583979000,"updated_by":1,"published_at":1344583979000,"published_by":1},{"id":475,"uuid":"a1e4393c-4299-4182-96b4-efb3051a0221","title":"2013-03-CSS和JQuery下拉菜单练习","slug":"2013-03-csshe-jqueryxia-la-cai-dan-lian-xi","markdown":"\n\n手生，光看书不动手去写代码，就不会发现细节问题，要不断地练习，熟能生巧！\n\nCSS和JQ分别实现下拉菜单，核心代码只有几行。\n\n[css]\n\n/*CSS下拉菜单*/\n nav#css-menu&gt;ul&gt;li:hover ul{\n     display: block;/*鼠标悬浮时显示下拉菜单*/\n }\n\n[/css]\n[javascript]\n\n/*jQuery下拉菜单*/\n $(document).ready(function(){\n     $('#jquery-menu&gt;ul&gt;li').hover(function(){\n     $(this).find('ul').slideDown('slow');\n     },function(){\n     $(this).find('ul').slideUp('fast');\n     });\n });\n\n[/javascript]\n\n[Demo](http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery下拉菜单练习/index.html)","html":"<p>手生，光看书不动手去写代码，就不会发现细节问题，要不断地练习，熟能生巧！</p>\n\n<p>CSS和JQ分别实现下拉菜单，核心代码只有几行。</p>\n\n<p>[css]</p>\n\n<p>/<em>CSS下拉菜单</em>/\n nav#css-menu&gt;ul&gt;li:hover ul{\n     display: block;/<em>鼠标悬浮时显示下拉菜单</em>/\n }</p>\n\n<p>[/css]\n[javascript]</p>\n\n<p>/<em>jQuery下拉菜单</em>/\n $(document).ready(function(){\n     $('#jquery-menu&gt;ul&gt;li').hover(function(){\n     $(this).find('ul').slideDown('slow');\n     },function(){\n     $(this).find('ul').slideUp('fast');\n     });\n });</p>\n\n<p>[/javascript]</p>\n\n<p><a href=\"http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery下拉菜单练习/index.html\">Demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1363372366000,"created_by":1,"updated_at":1363372366000,"updated_by":1,"published_at":1363372366000,"published_by":1},{"id":476,"uuid":"0fe2cb6b-09bf-4d83-8122-4cbd4692bdd1","title":"2013-03-CSS和JQuery多方式Tab练习","slug":"2013-03-csshe-jqueryduo-fang-shi-tablian-xi","markdown":"\n\n今天练习的是Tab的制作，使用了CSS3的选择器和JQuery。\n\n练习页里有对应的原理声明，[Demo](http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery多方式Tab练习/index.html)\n\nCSS还没找到方法实现鼠标停留在tab上时，对应的内容div保持显示，还要继续学习。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg \"2013-03-16_203807\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg)","html":"<p>今天练习的是Tab的制作，使用了CSS3的选择器和JQuery。</p>\n\n<p>练习页里有对应的原理声明，<a href=\"http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery多方式Tab练习/index.html\">Demo</a></p>\n\n<p>CSS还没找到方法实现鼠标停留在tab上时，对应的内容div保持显示，还要继续学习。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg\" alt=\"\" title=\"2013-03-16_203807\" /></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1363466404000,"created_by":1,"updated_at":1363466404000,"updated_by":1,"published_at":1363466404000,"published_by":1},{"id":477,"uuid":"339e7cdb-89c9-4d67-ba0a-df375f1f8ca4","title":"2013-03-jquery.ajax()表单验证练习","slug":"2013-03-jquery-ajaxbiao-dan-yan-zheng-lian-xi","markdown":"\n\n今天学习了Json数据格式，并用$.ajax()发送表单：点击按钮发送数据到后台php文件，后台处理后返回Json，再用jquery读取Json数据\n<div>成功发送数据到后台，我模拟了后台返回的数据（笨方法：直接赋值回来）：点击注册或登录按钮，就会检测表单。</div>\n<div>PS：这个页面没有真正的表单验证，不管输入什么都会显示出错误提示，因为我只是模拟后台，处理结果都是表单输入错误。</div>\n<div></div>\n<div>核心代码：</div>\n<div>1.php封装json数据，返回到前台：</div>\n<div>[\n](http://www.laispace.com/wp-content/uploads/2013/03/html.jpg)[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg \"2013-03-24_163652\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg)</div>\n<div>2.$.ajax()处理返回的json数据，控制表单的行为：[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg \"2013-03-25_005442\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg)</div>\n最终效果，见[Demo](http://laispace.com/xiaospace/demo/2013-03/%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95%E9%82%AE%E7%AE%B1%E7%9A%84ajax%E9%AA%8C%E8%AF%81/login.html)","html":"<p>今天学习了Json数据格式，并用$.ajax()发送表单：点击按钮发送数据到后台php文件，后台处理后返回Json，再用jquery读取Json数据</p>\n\n<div>成功发送数据到后台，我模拟了后台返回的数据（笨方法：直接赋值回来）：点击注册或登录按钮，就会检测表单。</div>  \n\n<div>PS：这个页面没有真正的表单验证，不管输入什么都会显示出错误提示，因为我只是模拟后台，处理结果都是表单输入错误。</div>  \n\n<div></div>  \n\n<div>核心代码：</div>  \n\n<div>1.php封装json数据，返回到前台：</div>  \n\n<div>[  \n](http://www.laispace.com/wp-content/uploads/2013/03/html.jpg)[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg \"2013-03-24_163652\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg)</div>\n\n<div>2.$.ajax()处理返回的json数据，控制表单的行为：[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg \"2013-03-25_005442\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg)</div>  \n\n<p>最终效果，见<a href=\"http://laispace.com/xiaospace/demo/2013-03/%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95%E9%82%AE%E7%AE%B1%E7%9A%84ajax%E9%AA%8C%E8%AF%81/login.html\">Demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364173277000,"created_by":1,"updated_at":1364173277000,"updated_by":1,"published_at":1364173277000,"published_by":1},{"id":478,"uuid":"f01b9151-570f-4113-b14a-fdba4f0d3f0d","title":"2013-04-鼠标悬浮图片出现描述信息","slug":"2013-04-shu-biao-xuan-fu-tu-pian-chu-xian-miao-shu-xin-xi","markdown":"\n\n用jquery结合CSS3的动画，写了几个不同的效果。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/04/2013-04-12_204252.jpg \"2013-04-12_204252\")](http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/)\n\n原理：把图片描述放在title里，光标悬浮时用JQ将其显示出来，[DEMO](http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/)","html":"<p>用jquery结合CSS3的动画，写了几个不同的效果。</p>\n\n<p><a href=\"http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/04/2013-04-12_204252.jpg\" alt=\"\" title=\"2013-04-12_204252\" /></a></p>\n\n<p>原理：把图片描述放在title里，光标悬浮时用JQ将其显示出来，<a href=\"http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/\">DEMO</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1365800461000,"created_by":1,"updated_at":1365800461000,"updated_by":1,"published_at":1365800461000,"published_by":1},{"id":479,"uuid":"4beb787c-5f1d-426a-a3d4-4f9c2c5d4e79","title":"2013-05-瀑布流效果的制作","slug":"2013-05-pu-bu-liu-xiao-guo-de-zhi-zuo","markdown":"\n\n[\n](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png)[![](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png \"20130508\")](http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/)[\n](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png)\n\n这个图片墙是动态瀑布流，思路是：\n\n1.动态计算用户视窗的宽度，计算出可显示多少列的图片；\n\n2.监听滚动条的变化,动态算出滚动时最短的是哪一列，当最短列底部露出后,用$.getJSON()方法获取新的一批图片，并遍历每一个图片，将新图片添加到最短列中（这时最短列是动态的啦）。\n\n3.监听视窗大小变化,动态算出窗口的新宽度值，重新对图片进行排列，并使用了动画效果。\n\n核心代码也有点长，就不贴出来了，直接看源码呗，我写满了注释O(∩_∩)O~ [Demo](http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/)\n\n//--2013-05-09-优化","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\">\n</a><a href=\"http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\" alt=\"\" title=\"20130508\" /></a><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\">\n</a></p>\n\n<p>这个图片墙是动态瀑布流，思路是：</p>\n\n<p>1.动态计算用户视窗的宽度，计算出可显示多少列的图片；</p>\n\n<p>2.监听滚动条的变化,动态算出滚动时最短的是哪一列，当最短列底部露出后,用$.getJSON()方法获取新的一批图片，并遍历每一个图片，将新图片添加到最短列中（这时最短列是动态的啦）。</p>\n\n<p>3.监听视窗大小变化,动态算出窗口的新宽度值，重新对图片进行排列，并使用了动画效果。</p>\n\n<p>核心代码也有点长，就不贴出来了，直接看源码呗，我写满了注释O(∩_∩)O~ <a href=\"http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/\">Demo</a></p>\n\n<p>//--2013-05-09-优化</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1367975458000,"created_by":1,"updated_at":1367975458000,"updated_by":1,"published_at":1367975458000,"published_by":1},{"id":480,"uuid":"c08a9b4e-6981-454e-96b2-c0cf2c6aaed0","title":"2013，顾自地来了","slug":"2013gu-zi-di-lai-liao","markdown":"\n\n我在想，我该怎么总结我的2012。\n\n下午下了地铁回到学校就把柴静的书看完了，看完后就睡了一觉，起来是晚上七点半接着把《看见》新书发布会的视频看完，然后打个电话洗个澡回到被窝里，一直发呆到现在，想着：这是2012的最后一天，我到底该怎么总结我的2012。\n\n我想用黄西的一句幽默“我在过去的十年里生活了十年”来总结我这一年：我在过去的一年里生活了一年。\n\n这句话没有意义，对的。\n\n&nbsp;\n\n按旧习惯，我会按着时间顺序回顾这一年，然后给自己打打鸡血喝喝心灵鸡汤，不是恶狠狠地打击自己就是美滋滋地向往下一年。\n\n可，这真可笑。\n\n&nbsp;\n\n一年里看的书，得到的感悟超过了过去的二十年，这是真的。\n\n我妄想着要自由，一直在挣扎着。\n\n“不要去争自由，要争独立。没有独立的自由，你仍是奴隶。”\n\n这，才是对的。\n\n&nbsp;\n\n我总想着对抗，有一副假装，有何用？\n\n自我欺骗。\n\n&nbsp;\n\n我这毛孩子，还需要磨练，需要继续摔跟头，断断续续站起身摇摇晃晃甩去无知无畏，才会有那么一天能真正地看见自己。\n\n真正地看见自己的故事。\n\n&nbsp;\n\n2012，顾自地去了，2013顾自地来了。\n\n它不会理我，却一直在陪伴。\n\n因为这就是时间。\n\n&nbsp;\n\n要和它做朋友。\n\n然后，让它来讲述故事。\n\n&nbsp;","html":"<p>我在想，我该怎么总结我的2012。</p>\n\n<p>下午下了地铁回到学校就把柴静的书看完了，看完后就睡了一觉，起来是晚上七点半接着把《看见》新书发布会的视频看完，然后打个电话洗个澡回到被窝里，一直发呆到现在，想着：这是2012的最后一天，我到底该怎么总结我的2012。</p>\n\n<p>我想用黄西的一句幽默“我在过去的十年里生活了十年”来总结我这一年：我在过去的一年里生活了一年。</p>\n\n<p>这句话没有意义，对的。</p>\n\n<p>&nbsp;</p>\n\n<p>按旧习惯，我会按着时间顺序回顾这一年，然后给自己打打鸡血喝喝心灵鸡汤，不是恶狠狠地打击自己就是美滋滋地向往下一年。</p>\n\n<p>可，这真可笑。</p>\n\n<p>&nbsp;</p>\n\n<p>一年里看的书，得到的感悟超过了过去的二十年，这是真的。</p>\n\n<p>我妄想着要自由，一直在挣扎着。</p>\n\n<p>“不要去争自由，要争独立。没有独立的自由，你仍是奴隶。”</p>\n\n<p>这，才是对的。</p>\n\n<p>&nbsp;</p>\n\n<p>我总想着对抗，有一副假装，有何用？</p>\n\n<p>自我欺骗。</p>\n\n<p>&nbsp;</p>\n\n<p>我这毛孩子，还需要磨练，需要继续摔跟头，断断续续站起身摇摇晃晃甩去无知无畏，才会有那么一天能真正地看见自己。</p>\n\n<p>真正地看见自己的故事。</p>\n\n<p>&nbsp;</p>\n\n<p>2012，顾自地去了，2013顾自地来了。</p>\n\n<p>它不会理我，却一直在陪伴。</p>\n\n<p>因为这就是时间。</p>\n\n<p>&nbsp;</p>\n\n<p>要和它做朋友。</p>\n\n<p>然后，让它来讲述故事。</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1357000737000,"created_by":1,"updated_at":1357000737000,"updated_by":1,"published_at":1357000737000,"published_by":1},{"id":481,"uuid":"7128cb62-237e-4ff1-ab43-fb63b01fa105","title":"2014-07-好文阅读","slug":"2014-07-hao-wen-yue-du","markdown":"\n\n> 要吸取别人的经验，要产出自己的总结。-- 菲利克斯·小赖\n\n工作比较忙，但时时要提醒自己，保持对行业资讯的敏感度，业余时间多学习一些对自己成长有益的技能，最好是通过文章产出的方式，和业界交流。\n\n笨鸟先飞，越飞越高。\n\n<!-- more -->\n\n- [揭秘GitHub CSS技术细节](http://blog.jobbole.com/75480/)\n\n\t使用预处理器 SCSS\n\n\t使用 [BEM](http://bem.info/) 或 [OOCSS](https://github.com/stubbornella/oocss/wiki)\n\n\t使用 [SCSS-lint](https://github.com/causes/scss-lint) 检测\n","html":"<blockquote>\n  <p>要吸取别人的经验，要产出自己的总结。-- 菲利克斯·小赖</p>\n</blockquote>\n\n<p>工作比较忙，但时时要提醒自己，保持对行业资讯的敏感度，业余时间多学习一些对自己成长有益的技能，最好是通过文章产出的方式，和业界交流。</p>\n\n<p>笨鸟先飞，越飞越高。</p>\n\n<!-- more -->\n\n<ul>\n<li><p><a href=\"http://blog.jobbole.com/75480/\">揭秘GitHub CSS技术细节</a></p>\n\n<p>使用预处理器 SCSS</p>\n\n<p>使用 <a href=\"http://bem.info/\">BEM</a> 或 <a href=\"https://github.com/stubbornella/oocss/wiki\">OOCSS</a></p>\n\n<p>使用 <a href=\"https://github.com/causes/scss-lint\">SCSS-lint</a> 检测</p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406220710000,"created_by":1,"updated_at":1406220710000,"updated_by":1,"published_at":1406220710000,"published_by":1},{"id":482,"uuid":"f1f8667a-2afc-4e30-a799-be04a45f0f56","title":"Base 64 编码","slug":"base-64-encoding","markdown":"\n\n在浏览器中，使用 window.btoa() 将字符串或二进制值转化为 Base64 编码，使用 window.atob() 还原。\n\n```\nwindow.btoa('laispace'); //=> \"bGFpc3BhY2U=\"\nwindow.atob(\"bGFpc3BhY2U=\"); //=>\"laispace\"\n```\n\n注意，要将非 ASCII 编码字符转化为 Base64 编码的话，需要先进行转码，否则会报错\n\n```\nwindow.btoa(encodeURI('赖小赖')); //=> \"JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2\"\nwindow.atob('JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2'); //=> \"%E8%B5%96%E5%B0%8F%E8%B5%96\"\ndecodeURI(\"%E8%B5%96%E5%B0%8F%E8%B5%96\"); //=> \"赖小赖\"\n```","html":"<p>在浏览器中，使用 window.btoa() 将字符串或二进制值转化为 Base64 编码，使用 window.atob() 还原。</p>\n\n<pre><code>window.btoa('laispace'); //=&gt; \"bGFpc3BhY2U=\"  \nwindow.atob(\"bGFpc3BhY2U=\"); //=&gt;\"laispace\"  \n</code></pre>\n\n<p>注意，要将非 ASCII 编码字符转化为 Base64 编码的话，需要先进行转码，否则会报错</p>\n\n<pre><code>window.btoa(encodeURI('赖小赖')); //=&gt; \"JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2\"  \nwindow.atob('JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2'); //=&gt; \"%E8%B5%96%E5%B0%8F%E8%B5%96\"  \ndecodeURI(\"%E8%B5%96%E5%B0%8F%E8%B5%96\"); //=&gt; \"赖小赖\"  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406521406000,"created_by":1,"updated_at":1406521406000,"updated_by":1,"published_at":1406521406000,"published_by":1},{"id":483,"uuid":"d7ecb7c1-08e6-4d49-ad56-9f5c9d7a4bd0","title":"CSS属性扫盲笔记","slug":"css","markdown":"\r\n\r\n- :before 和 ::before 的区别\r\n\r\n单冒号表示 CSS3 伪类，双冒号表示 CSS3 伪元素\r\n双冒号是 CSS3 新引入的属性, 而要兼容 IE8- 则需要使用单冒号\r\n不需要兼容 IE8- 则可以放心的使用双冒号\r\n\r\n\r\n\r\n- -webkit-appearance 设置如何显示元素的外观\r\n\r\nhttp://ued.ctrip.com/webkitcss/demo/appearance.html\r\n\r\n\r\n- -webkit-touch-callout 设置如何显示一个可触摸目标的样式\r\n\r\nhttp://css-infos.net/property/-webkit-touch-callout\r\n\r\n- -webkit-user-select 设置是否可以选择元素内容\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html\r\n\r\n- -webkit-user-drag 设置是否可以拖动元素内容\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html\r\n\r\n- -webkit-flex 设置伸缩布局\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html\r\n\r\n安卓 4.4+ 才支持, 伤不起啊...\r\n\r\n- -webkit-tap-highlight-color 设置元素的点击高亮颜色\r\n\r\nhttp://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html \r\n    \r\n    /* 设置为透明, 则禁用该属性 */\r\n    -webkit-tap-highlight-color: transparent;\r\n\r\n    /* 场景: callout 和 hightlite 配合使用*/\r\n    .nohighlight {\r\n      -webkit-touch-callout: none;\r\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    }\r\n\r\n\r\n- 以下属性与 display: -webkit-box; 配合使用\r\n\r\n-webkit-box-sizing 设置对象的盒模型组成模式\r\n        \r\n        .selector {\r\n            width: 100px;\r\n            margin: 10px;\r\n            padding: 10px;\r\n            border: 1px solid #eee;\r\n            // 设置为 border-box, 则 width 包含了 padding 和 border \r\n            -webkit-box-sizing: border-box;\r\n        }\r\n\r\n-webkit-box-flex 设置弹性盒模型对象的子元素如何分配*剩余*空间\r\n    \r\n    .selector-parent {\r\n        width: 150px;\r\n        display: -webkit-box;\r\n    }\r\n    .selector-child-fixed {\r\n        width: 50px;\r\n    }\r\n    .selector-child-flex-1 {\r\n        /* 占 40px */\r\n        -webkit-box-flex: 2;\r\n    }\r\n    .selector-child-flex-2 {\r\n        /*占 60px */\r\n        -webkit-box-flex: 3;\r\n    }\r\n\r\n\r\n- -webkit-box-orient 设置弹性盒模型对象的子元素的排列方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html\r\n\r\n- -webkit-box-pack 设置弹性盒模型对象的子元素的对齐方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html\r\n\r\n- -webkit-box-align 设置弹性盒模型对象的子元素的对齐方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html\r\n\r\n- -webkit-line-clamp 设置块元素显示文本的行数\r\n\r\nhttp://www.css88.com/webkit/-webkit-line-clamp/\r\n\r\n    .text-overflow-ellipsis {\r\n        // 显示一行\r\n        -webkit-line-clamp: 1;\r\n        // 溢出隐藏\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        // 和模型的子元素垂直排列\r\n        display: -webkit-box;\r\n        -webkit-box-orient: vertical;\r\n       \r\n    }\r\n\r\n-  ::-webkit-input-placeholder 设置占位文字的样式  \r\nhttp://css-tricks.com/snippets/css/style-placeholder-text/ \r\n    \r\n    .selector::-webkit-input-placeholder {\r\n        color: #eee;\r\n    }\r\n\r\n\r\n### 参考资料\r\n\r\n- [携程CSS3-webkit-私有属性列表](http://ued.ctrip.com/blog/wp-content/webkitcss/index.html)","html":"<ul>\n<li>:before 和 ::before 的区别</li>\n</ul>\n\n<p>单冒号表示 CSS3 伪类，双冒号表示 CSS3 伪元素\n双冒号是 CSS3 新引入的属性, 而要兼容 IE8- 则需要使用单冒号\n不需要兼容 IE8- 则可以放心的使用双冒号</p>\n\n<ul>\n<li>-webkit-appearance 设置如何显示元素的外观</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/webkitcss/demo/appearance.html\">http://ued.ctrip.com/webkitcss/demo/appearance.html</a></p>\n\n<ul>\n<li>-webkit-touch-callout 设置如何显示一个可触摸目标的样式</li>\n</ul>\n\n<p><a href=\"http://css-infos.net/property/-webkit-touch-callout\">http://css-infos.net/property/-webkit-touch-callout</a></p>\n\n<ul>\n<li>-webkit-user-select 设置是否可以选择元素内容</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html</a></p>\n\n<ul>\n<li>-webkit-user-drag 设置是否可以拖动元素内容</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html</a></p>\n\n<ul>\n<li>-webkit-flex 设置伸缩布局</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html</a></p>\n\n<p>安卓 4.4+ 才支持, 伤不起啊...</p>\n\n<ul>\n<li>-webkit-tap-highlight-color 设置元素的点击高亮颜色</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html\">http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html</a> </p>\n\n<pre><code>/* 设置为透明, 则禁用该属性 */\n-webkit-tap-highlight-color: transparent;\n\n/* 场景: callout 和 hightlite 配合使用*/\n.nohighlight {\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n</code></pre>\n\n<ul>\n<li>以下属性与 display: -webkit-box; 配合使用</li>\n</ul>\n\n<p>-webkit-box-sizing 设置对象的盒模型组成模式</p>\n\n<pre><code>    .selector {\n        width: 100px;\n        margin: 10px;\n        padding: 10px;\n        border: 1px solid #eee;\n        // 设置为 border-box, 则 width 包含了 padding 和 border \n        -webkit-box-sizing: border-box;\n    }\n</code></pre>\n\n<p>-webkit-box-flex 设置弹性盒模型对象的子元素如何分配<em>剩余</em>空间</p>\n\n<pre><code>.selector-parent {\n    width: 150px;\n    display: -webkit-box;\n}\n.selector-child-fixed {\n    width: 50px;\n}\n.selector-child-flex-1 {\n    /* 占 40px */\n    -webkit-box-flex: 2;\n}\n.selector-child-flex-2 {\n    /*占 60px */\n    -webkit-box-flex: 3;\n}\n</code></pre>\n\n<ul>\n<li>-webkit-box-orient 设置弹性盒模型对象的子元素的排列方式</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html</a></p>\n\n<ul>\n<li>-webkit-box-pack 设置弹性盒模型对象的子元素的对齐方式</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html</a></p>\n\n<ul>\n<li>-webkit-box-align 设置弹性盒模型对象的子元素的对齐方式</li>\n</ul>\n\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html</a></p>\n\n<ul>\n<li>-webkit-line-clamp 设置块元素显示文本的行数</li>\n</ul>\n\n<p><a href=\"http://www.css88.com/webkit/-webkit-line-clamp/\">http://www.css88.com/webkit/-webkit-line-clamp/</a></p>\n\n<pre><code>.text-overflow-ellipsis {\n    // 显示一行\n    -webkit-line-clamp: 1;\n    // 溢出隐藏\n    text-overflow: ellipsis;\n    overflow: hidden;\n    // 和模型的子元素垂直排列\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n\n}\n</code></pre>\n\n<ul>\n<li><p>::-webkit-input-placeholder 设置占位文字的样式 <br />\n<a href=\"http://css-tricks.com/snippets/css/style-placeholder-text/\">http://css-tricks.com/snippets/css/style-placeholder-text/</a> </p>\n\n<p>.selector::-webkit-input-placeholder {\n    color: #eee;\n}</p></li>\n</ul>\n\n<h3 id=\"\">参考资料</h3>\n\n<ul>\n<li><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/index.html\">携程CSS3-webkit-私有属性列表</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1407951649000,"created_by":1,"updated_at":1407951649000,"updated_by":1,"published_at":1407951649000,"published_by":1},{"id":484,"uuid":"7ed32da8-f387-4894-8421-bb071466ffac","title":"CSS最佳实践","slug":"css-best-practice","markdown":"\n\n> 使用最短最优最语义化的css代码对提升工作效率帮助非常大，小赖对常见的好方法总结在这里。（最后更新于 2014/08/13）\n\n- 使用 [normalize.css](http://necolas.github.io/normalize.css/) 而不是 [reset.css](http://meyerweb.com/eric/tools/css/reset/) \n\n    后者清零了所有浏览器的样式，而前者则是统一设置了所有浏览器的样式，省去不少重写样式的时间。\n\n- 使用clearfix来清除浮动，减少不必要的 html 标签：\n```\n/* 现代浏览器 */\n.clearfix:before,\n.clearfix:after {\n     content: '';\n     display: table;\n}\n.clearfix:after {\n     clear: both;\n}\n/* IE6/7 触发hasLayout */\n.clearfix {\n     zoom: 1;\n}     \n```\n\n- 如果不想使用 clearfix 来清除浮动，可用 overflow 来清除：\n```\n.container {\n     overflow: auto; /* 清除浮动 */\n     zoom: 1;      /* IE触发hasLayout */\n     display: block;      /* 保证容器是块元素 */\n}\n```\n\n- 使用 hr 元素加上样式来做分隔线，更加语义化：\n```\n    <hr class=\"divider\">\n```\n```\n.divider {\n     border-top: 1px solid #eee;\n     clear: both;\n}\n```\n\n- text-indent 隐藏文字不要设定为类似 999999em 这么大，以提高移动设备上的性能：\n```\n.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n```\n\n- 使用 box-sizing 属性解决盒模型问题\n\n既然 IE8+ 支持[这个属性](http://caniuse.com/#search=box-sizing)，那我们就大胆的用吧，设置后元素就不会因为被设定的内边距或者边框而挤爆容器了。\n\n```\n* {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n          -ms-box-sizing: border-box;\n             -o-box-sizing: border-box;\n                  box-sizing: border-box;\n}\n```\n\n\n","html":"<blockquote>\n  <p>使用最短最优最语义化的css代码对提升工作效率帮助非常大，小赖对常见的好方法总结在这里。（最后更新于 2014/08/13）</p>\n</blockquote>\n\n<ul>\n<li><p>使用 <a href=\"http://necolas.github.io/normalize.css/\">normalize.css</a> 而不是 <a href=\"http://meyerweb.com/eric/tools/css/reset/\">reset.css</a> </p>\n\n<p>后者清零了所有浏览器的样式，而前者则是统一设置了所有浏览器的样式，省去不少重写样式的时间。</p></li>\n<li><p>使用clearfix来清除浮动，减少不必要的 html 标签：</p></li>\n</ul>\n\n<pre><code>/* 现代浏览器 */\n.clearfix:before,\n.clearfix:after {\n     content: '';\n     display: table;\n}\n.clearfix:after {\n     clear: both;\n}\n/* IE6/7 触发hasLayout */\n.clearfix {\n     zoom: 1;\n}     \n</code></pre>\n\n<ul>\n<li>如果不想使用 clearfix 来清除浮动，可用 overflow 来清除：</li>\n</ul>\n\n<pre><code>.container {\n     overflow: auto; /* 清除浮动 */\n     zoom: 1;      /* IE触发hasLayout */\n     display: block;      /* 保证容器是块元素 */\n}\n</code></pre>\n\n<ul>\n<li>使用 hr 元素加上样式来做分隔线，更加语义化：</li>\n</ul>\n\n<pre><code>    &lt;hr class=\"divider\"&gt;\n</code></pre>\n\n<pre><code>.divider {\n     border-top: 1px solid #eee;\n     clear: both;\n}\n</code></pre>\n\n<ul>\n<li>text-indent 隐藏文字不要设定为类似 999999em 这么大，以提高移动设备上的性能：</li>\n</ul>\n\n<pre><code>.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n</code></pre>\n\n<ul>\n<li>使用 box-sizing 属性解决盒模型问题</li>\n</ul>\n\n<p>既然 IE8+ 支持<a href=\"http://caniuse.com/#search=box-sizing\">这个属性</a>，那我们就大胆的用吧，设置后元素就不会因为被设定的内边距或者边框而挤爆容器了。</p>\n\n<pre><code>* {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n          -ms-box-sizing: border-box;\n             -o-box-sizing: border-box;\n                  box-sizing: border-box;\n}\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1376415195000,"created_by":1,"updated_at":1376415195000,"updated_by":1,"published_at":1376415195000,"published_by":1},{"id":485,"uuid":"74f917a4-5d92-41d2-9da4-01bc01797e1a","title":"CSS碎片积累","slug":"css-fragments","markdown":"\n\n- /* em的理解 */\nem是相对于父元素来计算大小的，浏览器默认为16px，设置body为0.75em(16*0.75=12px)后，若设置再body里的div为1em，则div里的文字大小实则为12px。\nPS：若设置ol为font-size:0.6em;则嵌套的ol为60%*60%=36%的大小，列表嵌套会出问题。原则上用em定义字体时，嵌套不超过两层。\n- /* 文字底部对齐 */\n设置文本在div里底部对齐用vertical-align：bottom;是不够的，还需设置display:table-cell;才会有效果。\n- /* 内容居中文字不居中 */\n设置div绝对定位在网页中间position：absolute;后设置margin:0 auto;即可。设置内容居中但文字不跟着居中，另加text-align:left;即可。\n- /* 行高建议用相对单位 */\n设置行高时建议使用百分比%或者em为单位。\n- /* 浏览器默认行高 */\n浏览器默认行高为1.2em，建议设置为1.6~1.8em。\n-/* 上下边距的合并 */\n在CSS中，上下的margin都设置时，取大的margin值合并，而不是简单的叠加。\n-\n不能简单地用line-height来替代margin的值，因为不同浏览器的解析不一样。\n- /* 图片替代文字 */\n图片代替文字时设置text-indent：-999px;要加overflow:hidden;\n最佳实践是Kellum法：\n[css]\n.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n[/css]\n- /* 隐藏元素的方法 */\nvisibility:hidden;元素不可见，但占据原来位置；display:none;元素不可见，不占据原来位置。\n-\n图像作为链接时默认会有蓝色边框，与 a 的默认样式一致\n\n- /* 元素居中的方法 */\n方法一：设置width和margin；\n方法二：子元素inline-block父元素text-align设置为center；\n方法三：\ndiv设置为float:left;position:relative;\ndiv下的ul设置为float:right;position:relative;left: 50%;/*整个分页向右边移动宽度的50%*/\nul下的li设置为float:left;position:relative;right:50%;\n[原理分析](http://www.w3cplus.com/css/elements-horizontally-center-with-css.html)\n方法四：绝对定位，原理类似方法三\ndiv设置为relative；\nul设置为absolute，left：50%；\nli设置为relative，float，right:50%;\n方法五：CSS3的flex实现水平居中方法\n方法六CSS3的fit-content实现水平居中方法\n- /* 图片宽度自适应容器的宽度 */\n1\\. 从固定宽度改为流式宽度，面临的一个主要问题是图片的显示尺寸。而这个问题在css中有个简单的解决方法，就是只需要设置图片的宽度是100%。\n2\\. 制作自适应大小的图片，即背景图片总是占满容器：给div设置固定的高度并设置背景图片为居中：\n[css]\ndiv.auto_image{\nheight: 200px;\nmargin: 0 auto;\nbackground: url(auto_image.jpg) no-repeat center;\n}\n[/css]\n\n- /* 高亮用id定位的元素 */\n用#id定位页面内的元素时，稍稍高亮背景颜色提升体验：\n[css]\ndiv:target{\nbackground:#333;\n}\n[/css]\n\n- /* outline替代border做测试 */\n之前尝试在鼠标hover一个图像时突出当前图像使用的是border，但总是会影响到周边元素，应该使用outline：不占据空间！outline的属性跟border一样：outline:1px solid #eee;\n- /* 消除relative图片偏移后的空白*/\n经常将一个图片使用relative定位，有了一定的位移后原位置空白，可设置负边距让文字填充进来。\n- /* 关系选择器 + 的妙用 */\n\n使用相邻选择符时常用h3 + p 来h3后的第一个p，别忘了h3 + p + p选择第二个p，以此类推\n- /* inline-block */\ninline-block会激发IE的haslayout，且注意inline-block元素间若有空格，会有影响\n- /*  z-index的理解 */\nz-index只对定位元素起作用。如果你尝试对非定位元素设定一个z-index值，那么肯定不起作用。\n- /* CSS3动画 */\nCSS3 是个独立于 JS 的线程，这个特点目前已经在 Desktop Safari / IOS Safari / Android Chrome 中被支持，所以说，移动 webapp 中的动画应用，尽可能使用 CSS3 吧\n- /* 负边距的妙用 */\n当static元素的margin-top/margin-left被赋予负值时，元素将被拉进指定的方向。例如：\n/* 元素向上移10px*/\n#mydiv1 {margin-top:-10px;}\n但如果你设置margin-bottom/right为负数，元素并不会如你所想的那样向下/右移动，而是将后续的元素拖拉进来，覆盖本来的元素。\n[css]\n#mydiv1 {\nmargin-bottom:-10px;      /* #mydiv1后续元素向上移10px, #mydiv1 本身不移动 */\n}[/css]\n- /* box-sizing的使用 */\n处理盒模型时，让width包括padding和border的宽度：\n[css]\n* {/*所有元素*/\n box-sizing: border-box;/*别忘了加浏览器前缀*/\n}[/css]\n\n- /* 简易浮动 */\n[css]\n\n.clearfix{\n overflow: auto;\n zoom: 1;/*兼容IE6*/\n}\n\n[/css]\n\n//lxl:最佳实践\n\n[css]\n/* 现代浏览器 */\n.cf:before,\n.cf:after {\n     content: &quot;&quot;;\n     display: table;\n}\n\n.cf:after {\n     clear: both;\n}\n\n/* IE6/7 触发hasLayout */\n.cf {\n     *zoom: 1;\n}     \n[/css]\n- /* 媒介查询 */\n\n[css]\n\n@media screen and (min-width:600px) {\nnav { float: left; width: 25%;}\n}\n@media screen and (max-width:599px) {\nnav li { display: inline;}\n}\n\n...\n[/css]\n\n- /* 视窗宽度的理解 */\n指定视窗宽就仿佛告诉了浏览器你的网页在这个宽度下显示是最合适的。要是做了一个专门在iPhone上浏览的网页，那么你就设置视窗宽为320px.\n但是这不易于 响应式设计，因为在平板上浏览它的时候，它会被缩小到320px的区域中。在响应式设计中最好指定视窗宽和设备的屏宽一致。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;\n[/html]\n\n/* 视窗缩放 */\n在移动端，屏幕上开合手指可以控制缩放，但当你设定视窗宽和设备宽度一致时，就没必要去放大浏览整个网页了。为了确保网页的初始显示不是放大过的，可以用initial-scale属性来设置初值。若用户在浏览过程中不需要缩放，你可以设置它为1。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n[/html]\n\n甚至是如果你连用户的滚屏操作都想禁止，你可以设置maximum-scale为1，这样就完全不能放大了。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;maximum-scale=1&quot;&gt;\n[/html]\n\n-/* HTML4与HTML5文档头的理解 */\n HTML 4.01 中的 doctype 需要引用一个 DTD，这是因为 HTML 4.01 基于 SGML。HTML 5 不基于 SGML，也不需要引用 DTD，但是需要声明文档类型让浏览器按照它们应该的方式来运行。\n-/* 表单值设为disabled将不会被发送 */\n如果一个元素被设置成 disabled, 那么它的值就不会被发送的server端。 正确的做法应该是使用 readonly。\n禁用（disabled）：value 不会在 Form 提交时发送出去。这个对于按钮来说用处比较大，一般的 type=\"text\" 最好是隐藏，而不是禁用，因为它不需要发送数据。\n只读（readonly）：value 会在 Form 提交时被发送出去。所以需要在外观上显示跟一般 input/textarea 一样，但不允许用户修改数据，可以用这个属性。\n隐藏（hidden）：这个比较好理解，value 会被发送，并且用户看不到。\n- /* :after和:before的妙用 */\n配合 :after 或者 :before 在CSS中可以用attr()显示HTML属性值\n[css]\n@media print {\n a:after {\n content: &quot; (link to &quot; attr(href) &quot;) &quot;;\n }\n[/css]\n[html]\n&lt;a href=&quot;http://example.com&quot;&gt;Visit our home page&lt;/a&gt;\n[/html]\n\n-/* css的函数方法 */\n使用counter()在列表中自动添加序号\n[css]\nbody {\n counter-reset: heading;\n }\nh4:before {\n counter-increment: heading;\n content: &quot;Heading #&quot; counter(heading) &quot;.&quot;;\n }\n[/css]\n\n/* 使用calc()做算术 */\n[css]\n.parent {\n width: 100%;\n border: solid black 1px;\n position: relative;\n }\n.child {\n position: absolute;\n left: 100px;\n width: calc(90% - 100px);\n background-color: #ff8;\n text-align: center;\n }\n[/css]\n\n- /* 关闭自动补全 */\n关闭浏览器自动补全不是autocomplete=\"false\" 而是autocomplete=\"off\"，可防止自动补全插件与其的冲突\n-\n对em和ex的正确理解：em 是当前字体下 M 的宽度，而 ex 是当前自提下 x 的高度\n- /*边距值单位的妙用*/\n外边距单位的采用，margin-left和margin-right采用px而margin-top和margin-bottom采用em,能保证缩放时边距的自适应：\n[css]\n p {font-size: 1em; margin: .75em 30px;} /* 缩放时边距自适应 */\n\n[/css]\n\n- /* 盒子模型的理解 */\n盒子模型结论1：没有设定元素的宽度即width:auto;时，content、padding、margin、border的总宽度占满父元素宽度；\n盒子模型结论2：有设定元素的宽度即width:400px;时，padding、margin、border的总宽度在原设定的宽度上增加；\n即：盒子的width设定的只是盒子content区的宽度，而非盒子要占据的水平宽度\n盒子模型结论对于布局的用法：\n假定是三列等宽布局，nav、article、adise都是浮动且宽度设定后，若为其中任何一个添加padding、margin,则会让总宽度超出，解决方法是：\n为每一个浮动的元素增加一个内部div.inner,给内部的div.inner设定padding、margin，这么以来，内部div的总宽度总是等于父元素最初设定的宽度了。\n缺点是，这么一来，得跟极度赞成标签语义化的同行们有一番争吵了。\n除此之外，可使用CSS3的box-sizing属性，设置width的计算方式：box-sizing ： content-box || border-box || inherit\ncontent-box:Element Width/Height = border+padding+content width/height\nborder-box:Element Width/Height = 0 + 0 +content width/height\n注：IE6/IE7不支持box-sizing,可使用一个polyfill（腻子脚本）borderBoxModel.js来兼容\n建议使用：* {box-sizing: border-box} // 权衡利弊?\n- /* 防止元素长度撑破容器 */\n防止未来出现过大的元素（特别是在动态网站中，一些过长的url都可能撑破容器）的一种思路：\n给子元素 img {max-width: 100%};\n或父元素：\noverflow: hidden; /* 截断超出的元素（而非缩放）*/\nword-wrap: break-word; /* 让一些长的字符串如url换行显示 */\n-/* 三栏布局的方法 */\n三栏布局-中栏流动布局的思路：中栏改变大小时右栏使用负外边距\n[html]\n\n&lt;div id=&quot;threecolwrap&quot; style=&quot;width:100%; float:left;&quot;&gt;\n&lt;div id=&quot;twocolwrap&quot; style=&quot;margin-right:-210px;float:left;width:100%;&quot;&gt;\n&lt;nav style=&quot;float:left;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article tyle=&quot;margin-right:210px;width:auto;&quot;&gt;给自身margi-right:210px;并给父元素margin-right:-210px&lt;/article&gt;\n&lt;/div&gt;\n&lt;aside id=&quot;onecolwrap&quot; width:210px;float:left;&gt;固定宽度为外边距210px&lt;/aside&gt;\n&lt;/div&gt;\n\n[/html[/html]\n\n-\n/* 一个更简单巧妙的办法实现三栏布局(推荐)*/\n给三个栏都设定display:table-cell让他们具有表格的属性就行了：（缺点是IE7以下的不兼容,且没有polyfill脚本，觉悟吧！）\n[html]\n&lt;nav style=&quot;display:table-cell;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article style=&quot;display:table-cell;width:auto;&quot;&gt;宽度自适应&lt;/article&gt;\n&lt;aside style=&quot;display:table-cell;width:210px;&quot;&gt;固定宽度&lt;/aside&gt;\n[/html]\n\n-\n清除浮动的几种方法\n方法一：父元素overflow:hidden; //不能在下拉菜单中使用\n方法二：父元素也浮动，父元素下的元素clear:both; // 不能对靠外边距居中的元素使用\n方法三：父元素内最后放一个清楚浮动的元素div.clearFloat\n方法四：父元素.clearfix添加伪类模拟方法三（推荐使用,见上文）\n- /* 背景图片定位不同单位下的理解 */\n使用关键字和百分比的情况下，理解background-position：33% 33%;时，是背景图片的33%处与元素的33%处重叠！\n使用像素的绝对数值的情况下，理解background-position：33px 33px;时，图片左上角被放在(33px,33px)的地方！\n- /* 添加水印的方法 */\nbackground-attachment: fixed;常用给body中间添加水印（默认值是scroll）\n- /* font-family常见字体系列 */\nfont-family字体栈中最后一个通常是字体类的名字，能保证最坏情况下文档能以正确的字体显示。常用的字体类有：\nfont-family: serif; // 衬线字体\nfont-family: sans-serif; // 无衬线字体\nfont-family: monospace; // 等宽字体\nfont-family: cursive; // 草书体或手写体\nfont-family: fanstasy; // 一般是奇怪的字体\n- /* font-xxx属性的理解 */\nfont-weight中只有bold和normal才得到了浏览器的广泛支持，建议只使用这两个属性\nfont-varient中只有normal和small-caps（小型大写字母）\nfont的简写注意顺序和格式：\nfont: italic small-caps bold 12px/1.5em arial,verdana;\n即顺序为：\nfont : font-style || font-variant || font-weight || font-size || line-height || font-family\n默认值为：normal normal normal medium normal \"Times New Roman\" 。\nfont-size和font-family是必写项，font-size和line-height只能通过斜杠/组成一个值，不能分开写，且应该在font-family前。\n- /* text-indet缩进是继承的 */\ntext-indent原来是有继承的，且是计算得出的结果父元素400px * 5% = 20px，则子元素默认缩进20px !\n-\n保持id和class最少却又能准确定位元素：正确的方法是设定一个id，以该id为hook（路标），选择它的子元素进行定位，同时提高HTML和CSS代码的易读性！// lxl:缺点是牺牲了权重\n- /* 非首位子选择符 */\n ul li + li {border-top:1px solid #eee;}解决导航菜单不用给最后一个li添加类然后去掉最后一个li的下边框的问题\n- /* 代码分离提高重用性 */ \n在写一个功能性的代码，如下拉菜单时，建议将功能代码和视觉代码分开写，可提高重用性\n- /overflow:hidden对定位元素的影响/\noverflow:hidden 会修剪相对定位（position:relative）的元素，但并不总是会隐藏绝对定位元素。\n- /* zoom触发IE的hasLayout属性 */\nzoom为ie私有css属性，一般用来触发ie的hasLayout属性，解决ie下的浮动，margin重叠等一些问题。\n- /* 图片优化 */\n减少颜色数可减小PNG图片的大小\n- /*禁止修改文本框大小*/\n[css]\ntextarea { resize: none; } /* 禁用textarea的大小改变 */\n[/css]\n- /* 自定义光标样式 */\ncursor: url(cursor.png), default; /* 添加default才能在chrome激活cursor rule,否则不能显示*/\n- /* 网页点击启动QQ */\n[html]\n&lt;a href=&quot;tencent://message/?uin=545183877&amp;Site=JooIT.com&amp;Menu=yes&quot;&gt;点击启动QQ和lxl聊天！&lt;/a&gt;\n[/html]\n\n- /* 顶部栏和底部栏留空 */\n对footer或者header设定了position：fixed；要记得给他们腾出个地方来。对于footer就可在body中设定一个margin-bottom的值给它。\n-\n使用CSS的attr和content属性，改变title的样式：\n[html]\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot;&gt;Hover me！&lt;/p&gt;\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot; title=&quot;I'am title&quot;&gt;注意，使用了自定义的data-title而没有写原属性title，可防止冲突产生&lt;/p&gt;\n[/html]\n\n[css]\n.tooltip:hover:after {\n     content: attr(data-title);\n     background: #eee;\n     border: 1px solid red;\n     position: relative;\n     top: -26px;\n     left: -40px;\n}\n[/css]\n\n- /* 快速检查a标签href属性 */\n[html]\n&lt;a id=&quot;show-href&quot; href=&quot;http://laispace.com&quot;&gt;来思碑&lt;/a&gt;\n[/html]\n\n[css]\n#show-href:hover:after {\n     content: attr(href);\n     background: #eee;\n     border: 1px solid red;\n }\n[/css]\n\n- /* IE6 margin加倍的问题 */\n当box为float时，IE6中box左右的margin会加倍","html":"<ul>\n<li>/* em的理解 <em>/\nem是相对于父元素来计算大小的，浏览器默认为16px，设置body为0.75em(16</em>0.75=12px)后，若设置再body里的div为1em，则div里的文字大小实则为12px。 <br />\nPS：若设置ol为font-size:0.6em;则嵌套的ol为60%*60%=36%的大小，列表嵌套会出问题。原则上用em定义字体时，嵌套不超过两层。  </li>\n<li>/* 文字底部对齐 */\n设置文本在div里底部对齐用vertical-align：bottom;是不够的，还需设置display:table-cell;才会有效果。</li>\n<li>/* 内容居中文字不居中 */\n设置div绝对定位在网页中间position：absolute;后设置margin:0 auto;即可。设置内容居中但文字不跟着居中，另加text-align:left;即可。</li>\n<li>/* 行高建议用相对单位 */\n设置行高时建议使用百分比%或者em为单位。</li>\n<li>/* 浏览器默认行高 <em>/\n浏览器默认行高为1.2em，建议设置为1.6~1.8em。\n-/</em> 上下边距的合并 */</li>\n</ul>\n\n<h2 id=\"cssmarginmargin\">在CSS中，上下的margin都设置时，取大的margin值合并，而不是简单的叠加。</h2>\n\n<p>不能简单地用line-height来替代margin的值，因为不同浏览器的解析不一样。\n- /* 图片替代文字 <em>/\n图片代替文字时设置text-indent：-999px;要加overflow:hidden;\n最佳实践是Kellum法：\n[css]\n.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n[/css]\n- /</em> 隐藏元素的方法 */</p>\n\n<h2 id=\"visibilityhiddendisplaynone\">visibility:hidden;元素不可见，但占据原来位置；display:none;元素不可见，不占据原来位置。  </h2>\n\n<p>图像作为链接时默认会有蓝色边框，与 a 的默认样式一致</p>\n\n<ul>\n<li>/* 元素居中的方法 <em>/\n方法一：设置width和margin；\n方法二：子元素inline-block父元素text-align设置为center；\n方法三：\ndiv设置为float:left;position:relative; <br />\ndiv下的ul设置为float:right;position:relative;left: 50%;/</em>整个分页向右边移动宽度的50%*/ <br />\nul下的li设置为float:left;position:relative;right:50%; <br />\n<a href=\"http://www.w3cplus.com/css/elements-horizontally-center-with-css.html\">原理分析</a>\n方法四：绝对定位，原理类似方法三\ndiv设置为relative； <br />\nul设置为absolute，left：50%； <br />\nli设置为relative，float，right:50%; <br />\n方法五：CSS3的flex实现水平居中方法\n方法六CSS3的fit-content实现水平居中方法</li>\n<li><p>/* 图片宽度自适应容器的宽度 */\n1. 从固定宽度改为流式宽度，面临的一个主要问题是图片的显示尺寸。而这个问题在css中有个简单的解决方法，就是只需要设置图片的宽度是100%。 <br />\n2. 制作自适应大小的图片，即背景图片总是占满容器：给div设置固定的高度并设置背景图片为居中： <br />\n[css]\ndiv.auto<em>image{ <br />\nheight: 200px; <br />\nmargin: 0 auto; <br />\nbackground: url(auto</em>image.jpg) no-repeat center; <br />\n}\n[/css]</p></li>\n<li><p>/* 高亮用id定位的元素 */\n用#id定位页面内的元素时，稍稍高亮背景颜色提升体验：\n[css]\ndiv:target{ <br />\nbackground:#333; <br />\n}\n[/css]</p></li>\n<li><p>/* outline替代border做测试 */\n之前尝试在鼠标hover一个图像时突出当前图像使用的是border，但总是会影响到周边元素，应该使用outline：不占据空间！outline的属性跟border一样：outline:1px solid #eee;</p></li>\n<li>/* 消除relative图片偏移后的空白*/\n经常将一个图片使用relative定位，有了一定的位移后原位置空白，可设置负边距让文字填充进来。</li>\n<li>/* 关系选择器 + 的妙用 */</li>\n</ul>\n\n<p>使用相邻选择符时常用h3 + p 来h3后的第一个p，别忘了h3 + p + p选择第二个p，以此类推\n- /* inline-block <em>/\ninline-block会激发IE的haslayout，且注意inline-block元素间若有空格，会有影响 <br />\n- /</em>  z-index的理解 <em>/\nz-index只对定位元素起作用。如果你尝试对非定位元素设定一个z-index值，那么肯定不起作用。 <br />\n- /</em> CSS3动画 <em>/\nCSS3 是个独立于 JS 的线程，这个特点目前已经在 Desktop Safari / IOS Safari / Android Chrome 中被支持，所以说，移动 webapp 中的动画应用，尽可能使用 CSS3 吧 <br />\n- /</em> 负边距的妙用 <em>/\n当static元素的margin-top/margin-left被赋予负值时，元素将被拉进指定的方向。例如：\n/</em> 元素向上移10px*/</p>\n\n<h1 id=\"mydiv1margintop10px\">mydiv1 {margin-top:-10px;}</h1>\n\n<p>但如果你设置margin-bottom/right为负数，元素并不会如你所想的那样向下/右移动，而是将后续的元素拖拉进来，覆盖本来的元素。\n[css]</p>\n\n<h1 id=\"mydiv1\">mydiv1 {</h1>\n\n<p>margin-bottom:-10px;      /* #mydiv1后续元素向上移10px, #mydiv1 本身不移动 <em>/ <br />\n}[/css]\n- /</em> box-sizing的使用 <em>/\n处理盒模型时，让width包括padding和border的宽度：\n[css]\n* {/</em>所有元素<em>/\n box-sizing: border-box;/</em>别忘了加浏览器前缀*/\n}[/css]</p>\n\n<ul>\n<li>/* 简易浮动 */\n[css]</li>\n</ul>\n\n<p>.clearfix{\n overflow: auto;\n zoom: 1;/<em>兼容IE6</em>/\n}</p>\n\n<p>[/css]</p>\n\n<p>//lxl:最佳实践</p>\n\n<p>[css]\n/* 现代浏览器 */\n.cf:before,\n.cf:after {\n     content: &quot;&quot;;\n     display: table;\n}</p>\n\n<p>.cf:after {\n     clear: both;\n}</p>\n\n<p>/* IE6/7 触发hasLayout <em>/\n.cf {\n     *zoom: 1;\n} <br />\n[/css]\n- /</em> 媒介查询 */</p>\n\n<p>[css]</p>\n\n<p>@media screen and (min-width:600px) {\nnav { float: left; width: 25%;} <br />\n}\n@media screen and (max-width:599px) {\nnav li { display: inline;} <br />\n}</p>\n\n<p>...\n[/css]</p>\n\n<ul>\n<li>/* 视窗宽度的理解 */\n指定视窗宽就仿佛告诉了浏览器你的网页在这个宽度下显示是最合适的。要是做了一个专门在iPhone上浏览的网页，那么你就设置视窗宽为320px.\n但是这不易于 响应式设计，因为在平板上浏览它的时候，它会被缩小到320px的区域中。在响应式设计中最好指定视窗宽和设备的屏宽一致。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;\n[/html]</li>\n</ul>\n\n<p>/* 视窗缩放 */\n在移动端，屏幕上开合手指可以控制缩放，但当你设定视窗宽和设备宽度一致时，就没必要去放大浏览整个网页了。为了确保网页的初始显示不是放大过的，可以用initial-scale属性来设置初值。若用户在浏览过程中不需要缩放，你可以设置它为1。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n[/html]</p>\n\n<p>甚至是如果你连用户的滚屏操作都想禁止，你可以设置maximum-scale为1，这样就完全不能放大了。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;maximum-scale=1&quot;&gt;\n[/html]</p>\n\n<p>-/* HTML4与HTML5文档头的理解 <em>/\n HTML 4.01 中的 doctype 需要引用一个 DTD，这是因为 HTML 4.01 基于 SGML。HTML 5 不基于 SGML，也不需要引用 DTD，但是需要声明文档类型让浏览器按照它们应该的方式来运行。\n-/</em> 表单值设为disabled将不会被发送 <em>/\n如果一个元素被设置成 disabled, 那么它的值就不会被发送的server端。 正确的做法应该是使用 readonly。\n禁用（disabled）：value 不会在 Form 提交时发送出去。这个对于按钮来说用处比较大，一般的 type=\"text\" 最好是隐藏，而不是禁用，因为它不需要发送数据。\n只读（readonly）：value 会在 Form 提交时被发送出去。所以需要在外观上显示跟一般 input/textarea 一样，但不允许用户修改数据，可以用这个属性。\n隐藏（hidden）：这个比较好理解，value 会被发送，并且用户看不到。\n- /</em> :after和:before的妙用 */\n配合 :after 或者 :before 在CSS中可以用attr()显示HTML属性值\n[css]\n@media print {\n a:after {\n content: &quot; (link to &quot; attr(href) &quot;) &quot;;\n }\n[/css]\n[html]\n&lt;a href=&quot;<a href=\"http://example.com&quot;&gt;Visit\">http://example.com&quot;&gt;Visit</a> our home page&lt;/a&gt;\n[/html]</p>\n\n<p>-/* css的函数方法 */\n使用counter()在列表中自动添加序号\n[css]\nbody { <br />\n counter-reset: heading;\n }\nh4:before { <br />\n counter-increment: heading;\n content: &quot;Heading #&quot; counter(heading) &quot;.&quot;;\n }\n[/css]</p>\n\n<p>/* 使用calc()做算术 */\n[css]\n.parent {\n width: 100%;\n border: solid black 1px;\n position: relative;\n }\n.child {\n position: absolute;\n left: 100px;\n width: calc(90% - 100px);\n background-color: #ff8;\n text-align: center;\n }\n[/css]</p>\n\n<ul>\n<li>/* 关闭自动补全 */</li>\n</ul>\n\n<h2 id=\"autocompletefalseautocompleteoff\">关闭浏览器自动补全不是autocomplete=\"false\" 而是autocomplete=\"off\"，可防止自动补全插件与其的冲突</h2>\n\n<p>对em和ex的正确理解：em 是当前字体下 M 的宽度，而 ex 是当前自提下 x 的高度\n- /<em>边距值单位的妙用</em>/\n外边距单位的采用，margin-left和margin-right采用px而margin-top和margin-bottom采用em,能保证缩放时边距的自适应：\n[css]\n p {font-size: 1em; margin: .75em 30px;} /* 缩放时边距自适应 */</p>\n\n<p>[/css]</p>\n\n<ul>\n<li>/* 盒子模型的理解 <em>/\n盒子模型结论1：没有设定元素的宽度即width:auto;时，content、padding、margin、border的总宽度占满父元素宽度；\n盒子模型结论2：有设定元素的宽度即width:400px;时，padding、margin、border的总宽度在原设定的宽度上增加；\n即：盒子的width设定的只是盒子content区的宽度，而非盒子要占据的水平宽度\n盒子模型结论对于布局的用法：\n假定是三列等宽布局，nav、article、adise都是浮动且宽度设定后，若为其中任何一个添加padding、margin,则会让总宽度超出，解决方法是：\n为每一个浮动的元素增加一个内部div.inner,给内部的div.inner设定padding、margin，这么以来，内部div的总宽度总是等于父元素最初设定的宽度了。\n缺点是，这么一来，得跟极度赞成标签语义化的同行们有一番争吵了。\n除此之外，可使用CSS3的box-sizing属性，设置width的计算方式：box-sizing ： content-box || border-box || inherit\ncontent-box:Element Width/Height = border+padding+content width/height <br />\nborder-box:Element Width/Height = 0 + 0 +content width/height <br />\n注：IE6/IE7不支持box-sizing,可使用一个polyfill（腻子脚本）borderBoxModel.js来兼容\n建议使用：</em> {box-sizing: border-box} // 权衡利弊?</li>\n<li>/* 防止元素长度撑破容器 <em>/\n防止未来出现过大的元素（特别是在动态网站中，一些过长的url都可能撑破容器）的一种思路：\n给子元素 img {max-width: 100%};\n或父元素：\noverflow: hidden; /</em> 截断超出的元素（而非缩放）<em>/ <br />\nword-wrap: break-word; /</em> 让一些长的字符串如url换行显示 <em>/ <br />\n-/</em> 三栏布局的方法 */\n三栏布局-中栏流动布局的思路：中栏改变大小时右栏使用负外边距\n[html]</li>\n</ul>\n\n<p>&lt;div id=&quot;threecolwrap&quot; style=&quot;width:100%; float:left;&quot;&gt;\n&lt;div id=&quot;twocolwrap&quot; style=&quot;margin-right:-210px;float:left;width:100%;&quot;&gt;\n&lt;nav style=&quot;float:left;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article tyle=&quot;margin-right:210px;width:auto;&quot;&gt;给自身margi-right:210px;并给父元素margin-right:-210px&lt;/article&gt;\n&lt;/div&gt;\n&lt;aside id=&quot;onecolwrap&quot; width:210px;float:left;&gt;固定宽度为外边距210px&lt;/aside&gt;\n&lt;/div&gt;</p>\n\n<p>[/html[/html]</p>\n\n<p>-\n/* 一个更简单巧妙的办法实现三栏布局(推荐)*/\n给三个栏都设定display:table-cell让他们具有表格的属性就行了：（缺点是IE7以下的不兼容,且没有polyfill脚本，觉悟吧！）\n[html]\n&lt;nav style=&quot;display:table-cell;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article style=&quot;display:table-cell;width:auto;&quot;&gt;宽度自适应&lt;/article&gt;\n&lt;aside style=&quot;display:table-cell;width:210px;&quot;&gt;固定宽度&lt;/aside&gt;\n[/html]</p>\n\n<p>-\n清除浮动的几种方法\n方法一：父元素overflow:hidden; //不能在下拉菜单中使用\n方法二：父元素也浮动，父元素下的元素clear:both; // 不能对靠外边距居中的元素使用\n方法三：父元素内最后放一个清楚浮动的元素div.clearFloat\n方法四：父元素.clearfix添加伪类模拟方法三（推荐使用,见上文）\n- /* 背景图片定位不同单位下的理解 <em>/\n使用关键字和百分比的情况下，理解background-position：33% 33%;时，是背景图片的33%处与元素的33%处重叠！\n使用像素的绝对数值的情况下，理解background-position：33px 33px;时，图片左上角被放在(33px,33px)的地方！\n- /</em> 添加水印的方法 <em>/\nbackground-attachment: fixed;常用给body中间添加水印（默认值是scroll） <br />\n- /</em> font-family常见字体系列 <em>/\nfont-family字体栈中最后一个通常是字体类的名字，能保证最坏情况下文档能以正确的字体显示。常用的字体类有： <br />\nfont-family: serif; // 衬线字体 <br />\nfont-family: sans-serif; // 无衬线字体 <br />\nfont-family: monospace; // 等宽字体 <br />\nfont-family: cursive; // 草书体或手写体 <br />\nfont-family: fanstasy; // 一般是奇怪的字体 <br />\n- /</em> font-xxx属性的理解 <em>/\nfont-weight中只有bold和normal才得到了浏览器的广泛支持，建议只使用这两个属性 <br />\nfont-varient中只有normal和small-caps（小型大写字母） <br />\nfont的简写注意顺序和格式： <br />\nfont: italic small-caps bold 12px/1.5em arial,verdana; <br />\n即顺序为：\nfont : font-style || font-variant || font-weight || font-size || line-height || font-family <br />\n默认值为：normal normal normal medium normal \"Times New Roman\" 。\nfont-size和font-family是必写项，font-size和line-height只能通过斜杠/组成一个值，不能分开写，且应该在font-family前。 <br />\n- /</em> text-indet缩进是继承的 */</p>\n\n<h2 id=\"textindent400px520px20px\">text-indent原来是有继承的，且是计算得出的结果父元素400px * 5% = 20px，则子元素默认缩进20px !  </h2>\n\n<p>保持id和class最少却又能准确定位元素：正确的方法是设定一个id，以该id为hook（路标），选择它的子元素进行定位，同时提高HTML和CSS代码的易读性！// lxl:缺点是牺牲了权重\n- /* 非首位子选择符 <em>/\n ul li + li {border-top:1px solid #eee;}解决导航菜单不用给最后一个li添加类然后去掉最后一个li的下边框的问题\n- /</em> 代码分离提高重用性 <em>/ \n在写一个功能性的代码，如下拉菜单时，建议将功能代码和视觉代码分开写，可提高重用性\n- /overflow:hidden对定位元素的影响/\noverflow:hidden 会修剪相对定位（position:relative）的元素，但并不总是会隐藏绝对定位元素。 <br />\n- /</em> zoom触发IE的hasLayout属性 <em>/\nzoom为ie私有css属性，一般用来触发ie的hasLayout属性，解决ie下的浮动，margin重叠等一些问题。 <br />\n- /</em> 图片优化 <em>/\n减少颜色数可减小PNG图片的大小\n- /</em>禁止修改文本框大小<em>/\n[css]\ntextarea { resize: none; } /</em> 禁用textarea的大小改变 <em>/ <br />\n[/css]\n- /</em> 自定义光标样式 <em>/\ncursor: url(cursor.png), default; /</em> 添加default才能在chrome激活cursor rule,否则不能显示<em>/ <br />\n- /</em> 网页点击启动QQ */\n[html]\n&lt;a href=&quot;tencent://message/?uin=545183877&amp;Site=JooIT.com&amp;Menu=yes&quot;&gt;点击启动QQ和lxl聊天！&lt;/a&gt;\n[/html]</p>\n\n<ul>\n<li>/* 顶部栏和底部栏留空 */</li>\n</ul>\n\n<h2 id=\"footerheaderpositionfixedfooterbodymarginbottom\">对footer或者header设定了position：fixed；要记得给他们腾出个地方来。对于footer就可在body中设定一个margin-bottom的值给它。</h2>\n\n<p>使用CSS的attr和content属性，改变title的样式：\n[html]\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot;&gt;Hover me！&lt;/p&gt;\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot; title=&quot;I'am title&quot;&gt;注意，使用了自定义的data-title而没有写原属性title，可防止冲突产生&lt;/p&gt;\n[/html]</p>\n\n<p>[css]\n.tooltip:hover:after {\n     content: attr(data-title);\n     background: #eee;\n     border: 1px solid red;\n     position: relative;\n     top: -26px;\n     left: -40px;\n}\n[/css]</p>\n\n<ul>\n<li>/* 快速检查a标签href属性 */\n[html]\n&lt;a id=&quot;show-href&quot; href=&quot;<a href=\"http://laispace.com&quot;&gt;来思碑&lt;/a&gt\">http://laispace.com&quot;&gt;来思碑&lt;/a&gt</a>;\n[/html]</li>\n</ul>\n\n<p>[css]</p>\n\n<h1 id=\"showhrefhoverafter\">show-href:hover:after {</h1>\n\n<pre><code> content: attr(href);\n background: #eee;\n border: 1px solid red;\n</code></pre>\n\n<p>}\n[/css]</p>\n\n<ul>\n<li>/* IE6 margin加倍的问题 */\n当box为float时，IE6中box左右的margin会加倍</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1362259121000,"created_by":1,"updated_at":1362259121000,"updated_by":1,"published_at":1362259121000,"published_by":1},{"id":486,"uuid":"4e6a40b3-5a62-4c20-bc56-ad92bd002ce2","title":"Cookies学习笔记","slug":"cookie","markdown":"\n\nCookie 的格式是：\n\n[javascript]\nname=&lt;value&gt;[; expires=&lt;date&gt;][; domain=&lt;domain&gt;][; path=&lt;path&gt;][; secure]\n//名称=&lt;值&gt;[; expires=&lt;日期&gt;][; domain=&lt;域&gt;][; path=&lt;路径&gt;][; 安全]\n[/javascript]\n\n// 设置cookie\n\n[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;;\n[/javascript]\n\n//escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此 种方案还可以避免中文乱码的出现。在取值的时候需要unescape(value)对value再进行转码即可。\n\n// 设置多个cookie\n设置多个cookie需要多次使用这样的方法。正确的设置方法是：\n\n[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;;\ndocument.cookie=&quot;key1=escape(value1)&quot;\n// 而不是\ndocument.cookie=&quot;key=escape(value);key1=escape(value1)&quot;;\n[/javascript]\n// 获取cookie，注意第二个开始key值前面有空格：\n\n[javascript]\nfunction getCookie(key){\n     var aCookie = document.cookie.split(&quot;;&quot;);\n     for (var i=0; i &lt; aCookie.length; i++){\n         var aCrumb = aCookie[i].split(&quot;=&quot;);\n         if (key === aCrumb[0].replace(/^\\s*|\\s*$/,&quot;&quot;)){\n            return unescape(aCrumb[1]);\n         }\n     }\n}\n[/javascript]\n// 设置cookie的存活时间：\n\n[javascript]\nvar liveDate = new Date();\nliveDate.setTime(liveDate.getTime() + 3*24*60*60*1000); //设置cookie的name的存活时间为3天。\ndocument.cookie=&quot;name=test;expires=&quot; + liveDate.toGMTString();\n[/javascript]\n// 删除cookie,设置expires一个过期的时间即可\n\n[javascript]\nvar liveDate = new Date();\nliveDate.setTime(liveDate.getTime() - 10000);\ndocument.cookie = &quot;name=test;expires=&quot; + date.toGMTString();\n[/javascript]\n// 拓展cookie的作用域到根目录：\n\n[javascript]\ndocument.cookie=&quot;key=escape(value);path=/&quot;;\n[/javascript]\n// 设置cookie的访问域\n\n[javascript]\ndocument.cookie=&quot;name=value;domain=cookieDomain&quot;;\n//以Laispace为例，要实现跨主机访问，可以写为：\ndocument.cookie=&quot;name=value;domain=.laispace.com&quot;; //所有Laispace.com下的主机都可以访问该cookie\n[/javascript]\n// 设置cookie的访问权限\n设置了该属性，只有使用https协议才能够访问到\n注意点：\n如果设置cookie时带path属性，那么在删除的时候一定要加上path属性，否则删除的是当前目录下设置的cookie值。","html":"<p>Cookie 的格式是：</p>\n\n<p>[javascript]\nname=&lt;value&gt;[; expires=&lt;date&gt;][; domain=&lt;domain&gt;][; path=&lt;path&gt;][; secure] <br />\n//名称=&lt;值&gt;[; expires=&lt;日期&gt;][; domain=&lt;域&gt;][; path=&lt;路径&gt;][; 安全]\n[/javascript]</p>\n\n<p>// 设置cookie</p>\n\n<p>[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;; <br />\n[/javascript]</p>\n\n<p>//escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此 种方案还可以避免中文乱码的出现。在取值的时候需要unescape(value)对value再进行转码即可。</p>\n\n<p>// 设置多个cookie\n设置多个cookie需要多次使用这样的方法。正确的设置方法是：</p>\n\n<p>[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;; <br />\ndocument.cookie=&quot;key1=escape(value1)&quot; <br />\n// 而不是\ndocument.cookie=&quot;key=escape(value);key1=escape(value1)&quot;; <br />\n[/javascript]\n// 获取cookie，注意第二个开始key值前面有空格：</p>\n\n<p>[javascript]\nfunction getCookie(key){ <br />\n     var aCookie = document.cookie.split(&quot;;&quot;);\n     for (var i=0; i &lt; aCookie.length; i++){\n         var aCrumb = aCookie[i].split(&quot;=&quot;);\n         if (key === aCrumb[0].replace(/^\\s<em>|\\s</em>$/,&quot;&quot;)){\n            return unescape(aCrumb[1]);\n         }\n     }\n}\n[/javascript]\n// 设置cookie的存活时间：</p>\n\n<p>[javascript]\nvar liveDate = new Date(); <br />\nliveDate.setTime(liveDate.getTime() + 3<em>24</em>60<em>60</em>1000); //设置cookie的name的存活时间为3天。 <br />\ndocument.cookie=&quot;name=test;expires=&quot; + liveDate.toGMTString(); <br />\n[/javascript]\n// 删除cookie,设置expires一个过期的时间即可</p>\n\n<p>[javascript]\nvar liveDate = new Date(); <br />\nliveDate.setTime(liveDate.getTime() - 10000); <br />\ndocument.cookie = &quot;name=test;expires=&quot; + date.toGMTString(); <br />\n[/javascript]\n// 拓展cookie的作用域到根目录：</p>\n\n<p>[javascript]\ndocument.cookie=&quot;key=escape(value);path=/&quot;; <br />\n[/javascript]\n// 设置cookie的访问域</p>\n\n<p>[javascript]\ndocument.cookie=&quot;name=value;domain=cookieDomain&quot;; <br />\n//以Laispace为例，要实现跨主机访问，可以写为：\ndocument.cookie=&quot;name=value;domain=.laispace.com&quot;; //所有Laispace.com下的主机都可以访问该cookie <br />\n[/javascript]\n// 设置cookie的访问权限\n设置了该属性，只有使用https协议才能够访问到\n注意点：\n如果设置cookie时带path属性，那么在删除的时候一定要加上path属性，否则删除的是当前目录下设置的cookie值。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1381059917000,"created_by":1,"updated_at":1381059917000,"updated_by":1,"published_at":1381059917000,"published_by":1},{"id":487,"uuid":"7c6ae643-60d1-4d29-a664-bbbbe3315731","title":"Git fork 别人的项目后更新代码的方法","slug":"git-fork","markdown":"\n\n1. 举个例子，需要 fork 这个项目 https://github.com/tarobjtu/WebFundamentals.git\n\n2. 点击 fork, 就会复制一份代码到自己的 repo https://github.com/laispace/WebFundamentals.git\n\n3. 本地 clone 自己 repo 中的这个项目\n\n    $ git clone https://github.com/laispace/WebFundamentals.git\n\n4. 添加自己的远程仓库\n    \n    $ cd WebFundamentals\n    $ git remote add laispace https://github.com/laispace/WebFundamentals.git\n\n5. 修改代码后进行 push\n\n    $ git add --all\n    $ git commit -m 'edit some files'\n    $ git push\n\n这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？\n\n6. 添加源项目的远程仓库\n\n    $ git remote add tarobjtu https://github.com/tarobjtu/WebFundamentals.git\n    // 这时候可以看到有两个源了\n    $ git remote  \n    // laispace\n    // tarobjtu\n\n7. 拉取源仓库的代码到本地\n    \n    $ git fetch tarobjtu\n\n8. 合并源仓库的 master 分支代码到本地\n\n    $ git merge tarobjtu/master\n\n9. 提交代码到我们自己的仓库\n\n    $ git add --all\n    $ git commit -m '合并源仓库代码'\n    $ git push\n\n","html":"<ol>\n<li><p>举个例子，需要 fork 这个项目 <a href=\"https://github.com/tarobjtu/WebFundamentals.git\">https://github.com/tarobjtu/WebFundamentals.git</a></p></li>\n<li><p>点击 fork, 就会复制一份代码到自己的 repo <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>本地 clone 自己 repo 中的这个项目</p>\n\n<p>$ git clone <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>添加自己的远程仓库</p>\n\n<p>$ cd WebFundamentals\n$ git remote add laispace <a href=\"https://github.com/laispace/WebFundamentals.git\">https://github.com/laispace/WebFundamentals.git</a></p></li>\n<li><p>修改代码后进行 push</p>\n\n<p>$ git add --all\n$ git commit -m 'edit some files'\n$ git push</p></li>\n</ol>\n\n<p>这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？</p>\n\n<ol>\n<li><p>添加源项目的远程仓库</p>\n\n<p>$ git remote add tarobjtu <a href=\"https://github.com/tarobjtu/WebFundamentals.git\">https://github.com/tarobjtu/WebFundamentals.git</a>\n// 这时候可以看到有两个源了\n$ git remote <br />\n// laispace\n// tarobjtu</p></li>\n<li><p>拉取源仓库的代码到本地</p>\n\n<p>$ git fetch tarobjtu</p></li>\n<li><p>合并源仓库的 master 分支代码到本地</p>\n\n<p>$ git merge tarobjtu/master</p></li>\n<li><p>提交代码到我们自己的仓库</p>\n\n<p>$ git add --all\n$ git commit -m '合并源仓库代码'\n$ git push</p></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1407007180000,"created_by":1,"updated_at":1407007180000,"updated_by":1,"published_at":1407007180000,"published_by":1},{"id":488,"uuid":"fb8218ae-66f1-4f68-9fc8-310214d5822f","title":"Goagent使用心得","slug":"goagent","markdown":"\n\nGoagent实在是太棒了，可畅游被Qiang了的网站。初次安装可详见 [https://code.google.com/p/goagent/wiki/InstallGuide](https://code.google.com/p/goagent/wiki/InstallGuide)\n<div></div>\n<div>小赖使用总结：</div>\n<div>     1.goagent突然上不去了？</div>\n<div>        可能是国内cn的代理IP被封了，这时候可打开 local/proxy.ini **修改profile = google_cn 为 profile = google_hk**</div>\n<div></div>\n<div>     2.翻Qiang点击切换按钮麻烦？</div>\n<div>**        打开 SwitchySharp -&gt;选项-&gt;切换规则，点击【新建规则】**，编写如下：注意 *://*.twitter.com/* 里的*是通配符，指可匹配任意字符</div>\n<div></div>\n<div>\n<div>     3.手动切换代理很麻烦？</div>\n<div>        按2的设置后，点击 **SwitchySharp-&gt;自动切换模式**，那么每次浏览时，goagent就会按建立好的切换规则来选择是否使用代理来翻Qiang了</div>\n<div></div>\n</div>\n<div>     4.打开goagent.exe麻烦？</div>\n<div>        找到**goage.exe右键创建快捷方式，把它放到 开始菜单-所有程序-启动 的文件夹里**（win7下即C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup）</div>\n<div></div>\n<div>     5.还想开机自启动？</div>\n<div>        按3和4设置后，每次只要一开机，goagent就启动了，每次只要一翻Qiang,goagent就自动代理了。</div>\n<div>        打开local/proxy.ini 找到**visible = 1改为visible = 0可将goagent隐藏在任务栏**哦</div>\n<div></div>\n<div>     6.看完一部片（别邪恶啊）就上不去了？</div>\n<div>         Goagent一个APPID有1G/天的流量使用，刷刷twitter玩玩facebook就够了，可要是在youtube上看视频耗掉了流量，1G耗完就会显示 “[goagent 服务器未发送任何数据，因此无法加载该网页](https://www.google.com/search?q=goagent++%E5%A4%B1%E8%B4%A5&amp;oq=goagent++%E5%A4%B1%E8%B4%A5&amp;aqs=chrome.0.57j62.6423j0&amp;sourceid=chrome&amp;ie=UTF-8#newwindow=1&amp;safe=strict&amp;sclient=psy-ab&amp;q=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;oq=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;gs_l=serp.3...2718.2718.1.3071.1.1.0.0.0.0.114.114.0j1.1.0...0.0.0..1c.1.15.psy-ab.EcsF0oX25Z8&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.47244034,d.dGI&amp;fp=3d441b6fcb5f99ae&amp;biw=1366&amp;bih=677 \"goagent 服务器未发送任何数据，因此无法加载该网页 - Google Search\")“，这并不是像1所说的代理IP被封了或者goagent自己抽风了，而是当前APPID的1G流量已经用完。打开https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid** 就可以看到Outgoing Bandwidth为100%啦！</div>\n<div></div>\n<div><span style=\"font-family: Arial, sans-serif;\">     7.出现了6所说的情况流量不够用？</span></div>\n<div><span style=\"font-family: Arial, sans-serif;\">       可回到</span>[https://appengine.google.com/](https://appengine.google.com/)，点击【Create Application】，输入Application Identifier 如myappid-2（要check Availability），输入Application Title（可任填），然后再次点击【Create Application】。然后**打开 local/proxy.ini 编辑 appid = myappid-1 | myappid-2 （添加myappid-2，<strong>用 | 隔开**）</strong>，再**打开servr/uploader.bat 输入 myappid-2**，就可以将这个新的配置上传了，打开https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！</div>\n<div></div>\n<div>     以此类推，可最多申请十个APPID，共10G的流量。</div>\n<div></div>","html":"<p>Goagent实在是太棒了，可畅游被Qiang了的网站。初次安装可详见 <a href=\"https://code.google.com/p/goagent/wiki/InstallGuide\">https://code.google.com/p/goagent/wiki/InstallGuide</a>  </p>\n\n<div></div>  \n<div>小赖使用总结：</div>  \n<div>     1.goagent突然上不去了？</div>  \n<div>        可能是国内cn的代理IP被封了，这时候可打开 local/proxy.ini **修改profile = google_cn 为 profile = google_hk**</div>  \n<div></div>  \n<div>     2.翻Qiang点击切换按钮麻烦？</div>  \n<div>**        打开 SwitchySharp -&gt;选项-&gt;切换规则，点击【新建规则】**，编写如下：注意 *://*.twitter.com/* 里的*是通配符，指可匹配任意字符</div>  \n<div></div>  \n<div>  \n<div>     3.手动切换代理很麻烦？</div>  \n<div>        按2的设置后，点击 **SwitchySharp-&gt;自动切换模式**，那么每次浏览时，goagent就会按建立好的切换规则来选择是否使用代理来翻Qiang了</div>  \n<div></div>  \n</div>  \n\n<div>     4.打开goagent.exe麻烦？</div>  \n\n<div>        找到**goage.exe右键创建快捷方式，把它放到 开始菜单-所有程序-启动 的文件夹里**（win7下即C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup）</div>  \n\n<div></div>  \n\n<div>     5.还想开机自启动？</div>  \n\n<div>        按3和4设置后，每次只要一开机，goagent就启动了，每次只要一翻Qiang,goagent就自动代理了。</div>  \n\n<div>        打开local/proxy.ini 找到**visible = 1改为visible = 0可将goagent隐藏在任务栏**哦</div>  \n\n<div></div>  \n\n<div>     6.看完一部片（别邪恶啊）就上不去了？</div>  \n\n<div>         Goagent一个APPID有1G/天的流量使用，刷刷twitter玩玩facebook就够了，可要是在youtube上看视频耗掉了流量，1G耗完就会显示 “[goagent 服务器未发送任何数据，因此无法加载该网页](https://www.google.com/search?q=goagent++%E5%A4%B1%E8%B4%A5&amp;oq=goagent++%E5%A4%B1%E8%B4%A5&amp;aqs=chrome.0.57j62.6423j0&amp;sourceid=chrome&amp;ie=UTF-8#newwindow=1&amp;safe=strict&amp;sclient=psy-ab&amp;q=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;oq=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;gs_l=serp.3...2718.2718.1.3071.1.1.0.0.0.0.114.114.0j1.1.0...0.0.0..1c.1.15.psy-ab.EcsF0oX25Z8&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.47244034,d.dGI&amp;fp=3d441b6fcb5f99ae&amp;biw=1366&amp;bih=677 \"goagent 服务器未发送任何数据，因此无法加载该网页 - Google Search\")“，这并不是像1所说的代理IP被封了或者goagent自己抽风了，而是当前APPID的1G流量已经用完。打开<a href=\"https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid**\">https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid**</a> 就可以看到Outgoing Bandwidth为100%啦！</div>  \n\n<div></div>  \n\n<div><span style=\"font-family: Arial, sans-serif;\">     7.出现了6所说的情况流量不够用？</span></div>  \n\n<div><span style=\"font-family: Arial, sans-serif;\">       可回到</span>[https://appengine.google.com/](https://appengine.google.com/)，点击【Create Application】，输入Application Identifier 如myappid-2（要check Availability），输入Application Title（可任填），然后再次点击【Create Application】。然后**打开 local/proxy.ini 编辑 appid = myappid-1 | myappid-2 （添加myappid-2，<strong>用 | 隔开**）</strong>，再**打开servr/uploader.bat 输入 myappid-2**，就可以将这个新的配置上传了，打开<a href=\"https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！\">https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！</a></div>  \n\n<div></div>  \n\n<div>     以此类推，可最多申请十个APPID，共10G的流量。</div>  \n\n<div></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1370088178000,"created_by":1,"updated_at":1370088178000,"updated_by":1,"published_at":1370088178000,"published_by":1},{"id":489,"uuid":"5f16be38-2a15-4c69-999a-4a91f11e5b30","title":"HTML5-WebSocket API 学习","slug":"websocket","markdown":"\n\n使用nodejs的socket.io和现代浏览器的WebSocket来建立一个聊天室。\n\n# 服务器端 编写serverfile.js文件，建立http服务器和socket连接：\n\n[javascript]\n var http = require('http');\n var io = require('socket.io');\n\n // 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);\n\n // 创建一个WebSocket\n var socket = io.listen(server).set('log', 1);\n\n // 监听连接\n server.on('connection', function(client) {\n     // 监听信息\n     client.on('message', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();\n         client.emit('服务器返回信息：', data + '-&gt;' + curTime);\n\n         client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]\n\n创建http服务器，运行http服务器成功：\n\n# 浏览器端 编写 webSocket.html ，建立与服务器的连接：\n\n[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n &lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999&lt;/span&gt;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器\\n');\n             });\n             // 监听信息\n             myWebSocket.socketio.mysocket.on('message', function(data){\n                 myWebSocket.socketio.log('服务器返回数据：' + data + '\\n');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })\n\n             // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             myWebSocket.socketio.mysocket.secd(data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'\\n');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }\n\n     myWebSocket.socketio.initialize();\n     &lt;/script&gt;\n\n &lt;/body&gt;\n &lt;/html&gt;\n [/html]\n\n然后在浏览器打开这个网页，终端显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-1.png)\n\n这样客户端和服务器就可以通信啦！\n\n输入信息后，点击发送，终端显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-2.png)\n\n浏览器则显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-3.png)\n\n然后关闭服务器的话，则显示「已断开连接」：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-4.png)\n\n实现广播功能，即一个客户端发送消息，所以和服务器建立了连接的其他客户端都能看到这个消息：\n修改serverfile.js文件，注意有『修改』字眼的部分：\n\n[javascript]\n var http = require('http');\n var io = require('&lt;span style=&quot;text-decoration: underline;&quot;&gt;socket.io&lt;/span&gt;');\n\n // 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);\n\n // 创建一个WebSocket\n\n var socket = io.listen(server).set('log', 1);\n\n // 监听连接\n socket.on('connection', function(client) {\n     // 修改：监听信息\n     client.on('customMessage', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();\n\n         // 修改：使用广播方法\n         client.broadcast.emit('服务器返回customMessage信息：', data + '广播-&gt;' + curTime);\n\n         client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]\n\n修改webSocket.html文件，注意有『修改』字眼的部分：\n\n[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n &lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999&lt;/span&gt;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器&lt;br /&gt;');\n             });\n             //修改： 监听customMessage信息\n             myWebSocket.socketio.mysocket.on('broadcastMessage', function(data){\n                 myWebSocket.socketio.log('收到广播信息：' + data + '&lt;br /&gt;');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })\n\n             // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             // 修改\n             myWebSocket.socketio.mysocket.emit('customMessage', data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'&lt;br /&gt;');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }\n\n     myWebSocket.socketio.initialize();\n     &lt;/script&gt;\n\n &lt;/body&gt;\n &lt;/html&gt;\n [/html]\n\n然后用多个页面打开webSocket.html,在第一个页面输入消息：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-5.png)\n\n点击发送，其他页面立即收到了消息：\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-6.png)\n\n在第二个页面输入信息：\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-7.png)\n在其他页面收到广播：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-8.png)\n哇！WebSocket够强大，可以实现客户端和服务端的通信，而node的socket.io更是封装了它的一系列方法，实现一个web端通信就轻而易举了，但！是！HTML5的这个新特性，你敢用嘛？！\n\n# 浏览器对WebSocket的支持性\n在caniuse.com查询可知，WebSocket在IE10+和其他现代浏览器才支持，低版本的IE不支持WebSocket  -  -！\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-10.png)\n不过好消息是，socket.io对不支持WebSocket的浏览器启用了其他策略，使得socket.io甚至能在IE6下运行！\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-11.png)\n\n学好node后再回来拓展这个小小聊天室呗^_^\n[参考资料](<span style=\"text-decoration: underline;\">http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://developer.51cto.com/art/201308/407192_all.htm</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://socket.io/</span> )","html":"<p>使用nodejs的socket.io和现代浏览器的WebSocket来建立一个聊天室。</p>\n\n<h1 id=\"serverfilejshttpsocket\">服务器端 编写serverfile.js文件，建立http服务器和socket连接：</h1>\n\n<p>[javascript]\n var http = require('http');\n var io = require('socket.io');</p>\n\n<p>// 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);</p>\n\n<p>// 创建一个WebSocket\n var socket = io.listen(server).set('log', 1);</p>\n\n<p>// 监听连接\n server.on('connection', function(client) {\n     // 监听信息\n     client.on('message', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();\n         client.emit('服务器返回信息：', data + '-&gt;' + curTime);</p>\n\n<p>        client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]</p>\n\n<p>创建http服务器，运行http服务器成功：</p>\n\n<h1 id=\"websockethtml\">浏览器端 编写 webSocket.html ，建立与服务器的连接：</h1>\n\n<p>[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt\">http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt</a>;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n\n<p>&lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999&lt;/span&gt\">http://localhost:9999&lt;/span&gt</a>;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器\\n');\n             });\n             // 监听信息\n             myWebSocket.socketio.mysocket.on('message', function(data){\n                 myWebSocket.socketio.log('服务器返回数据：' + data + '\\n');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })</p>\n\n<p>            // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             myWebSocket.socketio.mysocket.secd(data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'\\n');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }</p>\n\n<p>    myWebSocket.socketio.initialize();\n     &lt;/script&gt;</p>\n\n<p>&lt;/body&gt;\n &lt;/html&gt;\n [/html]</p>\n\n<p>然后在浏览器打开这个网页，终端显示：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-1.png\" alt=\"\" /></p>\n\n<p>这样客户端和服务器就可以通信啦！</p>\n\n<p>输入信息后，点击发送，终端显示：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-2.png\" alt=\"\" /></p>\n\n<p>浏览器则显示：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-3.png\" alt=\"\" /></p>\n\n<p>然后关闭服务器的话，则显示「已断开连接」：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-4.png\" alt=\"\" /></p>\n\n<p>实现广播功能，即一个客户端发送消息，所以和服务器建立了连接的其他客户端都能看到这个消息：\n修改serverfile.js文件，注意有『修改』字眼的部分：</p>\n\n<p>[javascript]\n var http = require('http');\n var io = require('&lt;span style=&quot;text-decoration: underline;&quot;&gt;socket.io&lt;/span&gt;');</p>\n\n<p>// 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);</p>\n\n<p>// 创建一个WebSocket</p>\n\n<p>var socket = io.listen(server).set('log', 1);</p>\n\n<p>// 监听连接\n socket.on('connection', function(client) {\n     // 修改：监听信息\n     client.on('customMessage', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();</p>\n\n<p>        // 修改：使用广播方法\n         client.broadcast.emit('服务器返回customMessage信息：', data + '广播-&gt;' + curTime);</p>\n\n<p>        client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]</p>\n\n<p>修改webSocket.html文件，注意有『修改』字眼的部分：</p>\n\n<p>[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt\">http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt</a>;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n\n<p>&lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999&lt;/span&gt\">http://localhost:9999&lt;/span&gt</a>;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器&lt;br /&gt;');\n             });\n             //修改： 监听customMessage信息\n             myWebSocket.socketio.mysocket.on('broadcastMessage', function(data){\n                 myWebSocket.socketio.log('收到广播信息：' + data + '&lt;br /&gt;');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })</p>\n\n<p>            // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             // 修改\n             myWebSocket.socketio.mysocket.emit('customMessage', data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'&lt;br /&gt;');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }</p>\n\n<p>    myWebSocket.socketio.initialize();\n     &lt;/script&gt;</p>\n\n<p>&lt;/body&gt;\n &lt;/html&gt;\n [/html]</p>\n\n<p>然后用多个页面打开webSocket.html,在第一个页面输入消息：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-5.png\" alt=\"\" /></p>\n\n<p>点击发送，其他页面立即收到了消息：\n<img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-6.png\" alt=\"\" /></p>\n\n<p>在第二个页面输入信息：\n<img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-7.png\" alt=\"\" />\n在其他页面收到广播：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-8.png\" alt=\"\" />\n哇！WebSocket够强大，可以实现客户端和服务端的通信，而node的socket.io更是封装了它的一系列方法，实现一个web端通信就轻而易举了，但！是！HTML5的这个新特性，你敢用嘛？！</p>\n\n<h1 id=\"websocket\">浏览器对WebSocket的支持性</h1>\n\n<p>在caniuse.com查询可知，WebSocket在IE10+和其他现代浏览器才支持，低版本的IE不支持WebSocket  -  -！\n<img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-10.png\" alt=\"\" />\n不过好消息是，socket.io对不支持WebSocket的浏览器启用了其他策略，使得socket.io甚至能在IE6下运行！\n<img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-11.png\" alt=\"\" /></p>\n\n<p>学好node后再回来拓展这个小小聊天室呗^_^\n<a href=\"span style=\"text-decoration: underline;\">http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/</span> \">参考资料</a>\n<a href=\"span style=\"text-decoration: underline;\">http://developer.51cto.com/art/201308/407192_all.htm</span> \">参考资料</a>\n<a href=\"span style=\"text-decoration: underline;\">http://socket.io/</span> \">参考资料</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1385405067000,"created_by":1,"updated_at":1385405067000,"updated_by":1,"published_at":1385405067000,"published_by":1},{"id":490,"uuid":"187454ac-66d3-4784-adfa-69d2db19e1c0","title":"HTML5与CSS3-新特性尝试","slug":"html5-fragments","markdown":"\n\nHTML5一些特性不断在变化，一年前的语法跟现在的已经大有不同，像用来布局的 flex 属性也有新旧版本的语法了。\n\n处理兼容性真是个蛋疼的事情 。\n\n这里放一些闲时做的DEMO吧（含CSS3），测试在chrome下，主要目的是了解基本用法让自己一目了然，在项目需要的时候再加上兼容方案吧：）\n\n- Flex 多栏响应式布局\n\n1.设置父容器为 display 属性为 'flex'\n\n2.设置子容器的 width、flex 和 order 属性\n<iframe src=\"http://jsfiddle.net/laiqs2011/SYVxL/2/embedded/result,js,html,css/\" frameborder=\"0\" width=\"100%\" height=\"300\"></iframe>\n\n&nbsp;\n\n- CSS3 文字从上到下\n\n直接使用 css3 中的属性 transform：\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/p6hkE/1/embedded/result,js,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n- XDM 跨文档消息传递（即跨域通信）\n## 发送消息\n\n[javascript]\n\n// 获取内嵌框架\nvar iframeWindow = document.getElementById(‘myFrame’).contentWindow;\n// 向内嵌框架发送消息\niframeWindow.postMessage(‘你好 赖小赖’, ‘http://laispace.com');\n\n[/javascript]\n\n## 接受消息\n\n[javascript]\n // message 事件是异步的\n window.onmessage = function (event) {\n // 确保消息源是已知域 event.origin\n if (event.origin == ‘http://laispace.com') {\n // 处理接收到的消息 event.data\n console.log(event.data);\n // 向消息源发送回执(event.source是消息源的window对象的代理)\n event.source.postMessage('消息已收到’, ‘http://www.消息源.com');\n\n}\n };\n\n[/javascript]\n\n[DEMO](http://html5demos.com/postmessage2) or [官方文档](http://dev.w3.org/html5/postmsg/)","html":"<p>HTML5一些特性不断在变化，一年前的语法跟现在的已经大有不同，像用来布局的 flex 属性也有新旧版本的语法了。</p>\n\n<p>处理兼容性真是个蛋疼的事情 。</p>\n\n<p>这里放一些闲时做的DEMO吧（含CSS3），测试在chrome下，主要目的是了解基本用法让自己一目了然，在项目需要的时候再加上兼容方案吧：）</p>\n\n<ul>\n<li>Flex 多栏响应式布局</li>\n</ul>\n\n<p>1.设置父容器为 display 属性为 'flex'</p>\n\n<p>2.设置子容器的 width、flex 和 order 属性  </p>\n\n<iframe src=\"http://jsfiddle.net/laiqs2011/SYVxL/2/embedded/result,js,html,css/\" frameborder=\"0\" width=\"100%\" height=\"300\"></iframe>\n\n<p>&nbsp;</p>\n\n<ul>\n<li>CSS3 文字从上到下</li>\n</ul>\n\n<p>直接使用 css3 中的属性 transform：</p>\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/p6hkE/1/embedded/result,js,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ul>\n<li>XDM 跨文档消息传递（即跨域通信）</li>\n</ul>\n\n<h2 id=\"\">发送消息</h2>\n\n<p>[javascript]</p>\n\n<p>// 获取内嵌框架\nvar iframeWindow = document.getElementById(‘myFrame’).contentWindow; <br />\n// 向内嵌框架发送消息\niframeWindow.postMessage(‘你好 赖小赖’, ‘<a href=\"http://laispace.com\">http://laispace.com</a>');</p>\n\n<p>[/javascript]</p>\n\n<h2 id=\"\">接受消息</h2>\n\n<p>[javascript]\n // message 事件是异步的\n window.onmessage = function (event) {\n // 确保消息源是已知域 event.origin\n if (event.origin == ‘<a href=\"http://laispace.com\">http://laispace.com</a>') {\n // 处理接收到的消息 event.data\n console.log(event.data);\n // 向消息源发送回执(event.source是消息源的window对象的代理)\n event.source.postMessage('消息已收到’, ‘<a href=\"http://www.消息源.com\">http://www.消息源.com</a>');</p>\n\n<p>}\n };</p>\n\n<p>[/javascript]</p>\n\n<p><a href=\"http://html5demos.com/postmessage2\">DEMO</a> or <a href=\"http://dev.w3.org/html5/postmsg/\">官方文档</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394230197000,"created_by":1,"updated_at":1394230197000,"updated_by":1,"published_at":1394230197000,"published_by":1},{"id":491,"uuid":"c8ab5356-d28b-48fd-af75-53c3b2956294","title":"HTML5移动开发方案探索","slug":"html5yi-dong-kai-fa-fang-an-tan-suo","markdown":"\n\n2013是移动互联爆发的一年，2014也肯定也是移动互联网的天下！\n\n笨鸟先飞，小赖打算进入移动开发，先从HTML5移动应用开始，再连带学学IOS，希望2014会有更大的收获。\n\n查阅资料后就开始！不过要做好被移动开发各种坑坑死的打算先 - -\n<div>\n<div>\n\n**三种开发方式的简单比较：**\n\n** Native（原生）：**\n\n*   丰富的用户体验\n*   平台指向性\n*   久经考验的移动应用开发途径\n**Hybrid（混合）：**\n\n*   与应用类似的使用体验\n*   利用设备自身功能\n*   多平台支持能力\n**HTML 5：**\n\n*   更快的开发周期\n*   跨平台运行\n*   实时更新\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n</div>\n<div><span style=\"color: #333333; font-family: 宋体;\">Native开发方法在性能和设备访问方面很出色，但成本和更新方面有缺点。Web方法更新起来简单得多，成本较低，也更容易，但是目前功能有限，也无法获得使用Native API调用所能获得的那种出色的用户体验。Hybrid开发方法提供了折中方案：在许多情况下，它集两者之所长，如果开发者面向多种操作系统更是如此。</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">Hybrid是同时利用HTML 5与CSS3创建移动UI，同时又通过JavaScript代码实现与移动SDK之间的通信。</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">目前比较知名的hybrid框架有Phonegap：</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">     PhoneGap为移动应用开发人员提供一套名为phonegap-3.0.0.js的JavaScript API。该JavaScript API会调用PhoneGap的特殊平台引擎/桥接机制，后者则反过来调用原生平台SDK以实现对设备的操作，例如访问联系人名单或者拨打电话等。</span></div>\n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image.png)</div>\n<div>PhoneGap还提供一套与HTML 5、JavaScript以及CSS3在非Chrome浏览器（例如不提供用户界面的浏览器）中相绑定的创建系统。</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png \"Image1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png)</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png \"Image2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png)</div>\n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image(1).png)</div>\n<div></div>\n<div>phonegap提供了接口，使我们通过编写JS代码，调用原生的API。为了快速开发，一般还会搭配一个移动开发框架，常见的有jquery mobile、KendoUI Mobile、Sencha Touch等。</div>\n<div>     Jquery mobile 优点是比较容易上手，而且为了设计jQuery Mobile页面，提供了一套便捷的代码设计工具——也就是Codiqa。</div>\n<div>缺点是应用的列表条目一旦达到五十到六十个，性能就会出现疲软（甚至直接导致移动浏览器崩溃）。在另一方面，Sencha Touch能够载入超过两百个条目，且不会引发任何性能问题。</div>\n<div>     KendoUI Mobile是一款基于MVVM的移动应用框架，附带图表及多款非常实用的移动工具，整体方案售价为699美元。即便它有非常好的表现，但比较昂贵，就暂且不考虑了。</div>\n<div>     Sencha Touch用极高的使用复杂性外加相当夸张的学习曲线换得无与伦比的性能表现。Sencha Touch属于MVC且完全采用JavaScript机制，但由于Sencha Touch最初只针对iOS平台，而后才添加了对Android、黑莓以及Windows Phone的支持能力，因此大家应该做好心理准备——其在各平台上的性能表现并不完全一致。</div>\n<div></div>\n<div>查阅资料后，小赖得出的方案是：使用Phonegap+jquery mobile 开发这个HTML5 Hybrid应用。</div>\n<div>phonegap好在提供了跨平台的方案，坏在当应用复杂起来，性能是个问题；</div>\n<div>jquery mobile 好在提供了一些UI，轻量且快速，坏在一旦DOM操作繁多，会造成性能问题。</div>\n<div></div>\n<div>Hybrid的优点在于用跨平台Web技术，开发应用程序的大部分代码，又可以在需要时直接访问Native API。</div>\n<div>我的想法是，先按Hybrid的方案做出产品原型，然后再评估是否需要针对特定功能用NativeAPI来加强改善。</div>\n<div></div>\n<div>以上都是Ctrl C+V加自己的理解得出的初步方案，接着就需要去具体实践，得出自己真正的开发心得和新方案来了！</div>\n<div></div>\n<div>寒假继续加油！</div>\n<div></div>\n<div>参考链接：</div>\n<div>[【白皮书】HTML5、Native或Hybrid App开发全接触]([http://www.360doc.com/content/13/1128/18/21412_332891741.shtml](http://www.360doc.com/content/13/1128/18/21412_332891741.shtml))</div>\n<div>[专题：跨平台移动web中间件PhoneGap开发入门]([http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml](http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml))</div>\n<div>[phoneGap可行性分析]([http://sunny-liang.iteye.com/blog/1452495](http://sunny-liang.iteye.com/blog/1452495)) 这个写得非常棒</div>\n<div>[开发者眼中的PhoneGap体验]([http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml](http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml))</div>\n<div>[四大Hybrid App移动开发平台对比]([http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml](http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml))</div>\n<div>[Phonegap3.0特性]([http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html](http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html))</div>\n<div>[手机应用开发平台选择资料汇总]([http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/](http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/))</div>\n<div>[如何选择AppCan与PhoneGap跨平台开发框架]([http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml](http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml))</div>\n<div>[Phonegap VS AppCan]([http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html](http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html))</div>\n<div></div>\n<div></div>\n<div>参考实例：</div>\n<div>[Phonegap官方实例]([http://phonegap.com/app/feature/](http://phonegap.com/app/feature/))</div>\n<div>[如何使用 jQuery Mobile 与 PhoneGap 来开发移动应用]([http://www.open-open.com/lib/view/open1323767996984.html](http://www.open-open.com/lib/view/open1323767996984.html))</div>\n<div>[HTML5开发实战之网易微博]([http://uedc.163.com/9494.html](http://uedc.163.com/9494.html))</div>\n<div>[手机搜狐-移动Web单页应用开发实践]([http://bbs.9tech.cn/index.php/topic/show/363616#top](http://bbs.9tech.cn/index.php/topic/show/363616#top))</div>\n<div>[腾讯广告平台产品团队谈PhoneGap使用]([http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap](http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap))</div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n</div>","html":"<p>2013是移动互联爆发的一年，2014也肯定也是移动互联网的天下！</p>\n\n<p>笨鸟先飞，小赖打算进入移动开发，先从HTML5移动应用开始，再连带学学IOS，希望2014会有更大的收获。</p>\n\n<p>查阅资料后就开始！不过要做好被移动开发各种坑坑死的打算先 - -</p>\n\n<div>  \n<div>\n\n**三种开发方式的简单比较：**\n\n** Native（原生）：**\n\n*   丰富的用户体验\n*   平台指向性\n*   久经考验的移动应用开发途径\n**Hybrid（混合）：**\n\n*   与应用类似的使用体验\n*   利用设备自身功能\n*   多平台支持能力\n**HTML 5：**\n\n*   更快的开发周期\n*   跨平台运行\n*   实时更新\n<div><span style=\"color: #333333; font-family: 宋体;\">  \n</span></div>  \n</div>  \n\n<div><span style=\"color: #333333; font-family: 宋体;\">Native开发方法在性能和设备访问方面很出色，但成本和更新方面有缺点。Web方法更新起来简单得多，成本较低，也更容易，但是目前功能有限，也无法获得使用Native API调用所能获得的那种出色的用户体验。Hybrid开发方法提供了折中方案：在许多情况下，它集两者之所长，如果开发者面向多种操作系统更是如此。</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">Hybrid是同时利用HTML 5与CSS3创建移动UI，同时又通过JavaScript代码实现与移动SDK之间的通信。</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">  \n</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">目前比较知名的hybrid框架有Phonegap：</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">     PhoneGap为移动应用开发人员提供一套名为phonegap-3.0.0.js的JavaScript API。该JavaScript API会调用PhoneGap的特殊平台引擎/桥接机制，后者则反过来调用原生平台SDK以实现对设备的操作，例如访问联系人名单或者拨打电话等。</span></div>  \n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image.png)</div>  \n<div>PhoneGap还提供一套与HTML 5、JavaScript以及CSS3在非Chrome浏览器（例如不提供用户界面的浏览器）中相绑定的创建系统。</div>  \n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png \"Image1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png)</div>  \n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png \"Image2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png)</div>  \n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image(1).png)</div>  \n<div></div>  \n<div>phonegap提供了接口，使我们通过编写JS代码，调用原生的API。为了快速开发，一般还会搭配一个移动开发框架，常见的有jquery mobile、KendoUI Mobile、Sencha Touch等。</div>  \n<div>     Jquery mobile 优点是比较容易上手，而且为了设计jQuery Mobile页面，提供了一套便捷的代码设计工具——也就是Codiqa。</div>  \n<div>缺点是应用的列表条目一旦达到五十到六十个，性能就会出现疲软（甚至直接导致移动浏览器崩溃）。在另一方面，Sencha Touch能够载入超过两百个条目，且不会引发任何性能问题。</div>  \n<div>     KendoUI Mobile是一款基于MVVM的移动应用框架，附带图表及多款非常实用的移动工具，整体方案售价为699美元。即便它有非常好的表现，但比较昂贵，就暂且不考虑了。</div>  \n<div>     Sencha Touch用极高的使用复杂性外加相当夸张的学习曲线换得无与伦比的性能表现。Sencha Touch属于MVC且完全采用JavaScript机制，但由于Sencha Touch最初只针对iOS平台，而后才添加了对Android、黑莓以及Windows Phone的支持能力，因此大家应该做好心理准备——其在各平台上的性能表现并不完全一致。</div>  \n<div></div>  \n<div>查阅资料后，小赖得出的方案是：使用Phonegap+jquery mobile 开发这个HTML5 Hybrid应用。</div>  \n<div>phonegap好在提供了跨平台的方案，坏在当应用复杂起来，性能是个问题；</div>  \n<div>jquery mobile 好在提供了一些UI，轻量且快速，坏在一旦DOM操作繁多，会造成性能问题。</div>  \n<div></div>  \n<div>Hybrid的优点在于用跨平台Web技术，开发应用程序的大部分代码，又可以在需要时直接访问Native API。</div>  \n<div>我的想法是，先按Hybrid的方案做出产品原型，然后再评估是否需要针对特定功能用NativeAPI来加强改善。</div>  \n<div></div>  \n<div>以上都是Ctrl C+V加自己的理解得出的初步方案，接着就需要去具体实践，得出自己真正的开发心得和新方案来了！</div>  \n<div></div>  \n<div>寒假继续加油！</div>  \n<div></div>  \n<div>参考链接：</div>  \n<div>[【白皮书】HTML5、Native或Hybrid App开发全接触]([http://www.360doc.com/content/13/1128/18/21412_332891741.shtml](http://www.360doc.com/content/13/1128/18/21412_332891741.shtml))</div>  \n<div>[专题：跨平台移动web中间件PhoneGap开发入门]([http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml](http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml))</div>  \n<div>[phoneGap可行性分析]([http://sunny-liang.iteye.com/blog/1452495](http://sunny-liang.iteye.com/blog/1452495)) 这个写得非常棒</div>  \n<div>[开发者眼中的PhoneGap体验]([http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml](http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml))</div>  \n<div>[四大Hybrid App移动开发平台对比]([http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml](http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml))</div>  \n<div>[Phonegap3.0特性]([http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html](http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html))</div>  \n<div>[手机应用开发平台选择资料汇总]([http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/](http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/))</div>  \n<div>[如何选择AppCan与PhoneGap跨平台开发框架]([http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml](http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml))</div>  \n<div>[Phonegap VS AppCan]([http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html](http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html))</div>  \n<div></div>  \n<div></div>  \n<div>参考实例：</div>  \n<div>[Phonegap官方实例]([http://phonegap.com/app/feature/](http://phonegap.com/app/feature/))</div>  \n<div>[如何使用 jQuery Mobile 与 PhoneGap 来开发移动应用]([http://www.open-open.com/lib/view/open1323767996984.html](http://www.open-open.com/lib/view/open1323767996984.html))</div>  \n<div>[HTML5开发实战之网易微博]([http://uedc.163.com/9494.html](http://uedc.163.com/9494.html))</div>  \n<div>[手机搜狐-移动Web单页应用开发实践]([http://bbs.9tech.cn/index.php/topic/show/363616#top](http://bbs.9tech.cn/index.php/topic/show/363616#top))</div>  \n<div>[腾讯广告平台产品团队谈PhoneGap使用]([http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap](http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap))</div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">  \n</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">  \n</span></div>  \n<div><span style=\"color: #333333; font-family: 宋体;\">  \n</span></div>  \n</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1389309128000,"created_by":1,"updated_at":1389309128000,"updated_by":1,"published_at":1389309128000,"published_by":1},{"id":492,"uuid":"6e2410e8-8fe5-4e38-a8f4-90910c9c36b9","title":"JQuery常用方法","slug":"jquery-fragments","markdown":"\n\n$('div').last();//选择最后一个匹配元素\n\n$('div').eq(1);//选择第二个匹配元素\n\n$('div').eq(-1);//选择倒数第一个匹配元素\n<div>$('div').filter('.selected');//选择含有.selected类的匹配元素</div>\n<div>$('div').not('.selected');//选择不含有.selected类的匹配元素</div>\n<div></div>\n<div>$('div').children();//选择div的第一代（孩子）</div>\n<div>$('div').find('span');//选择div的span后代</div>\n<div></div>\n<div>$('div').parent();//选择div的上一代（父亲）</div>\n<div>$('div').parents();//选择div的前代（祖宗）</div>\n<div></div>\n<div>$('h2').closest('h1');//选择离h2最近的h1</div>\n<div></div>\n<div>$('div').siblings();//选择div的同级兄弟元素</div>\n<div></div>\n<div>$('div').html();//得到div的值</div>\n<div>$('div').html('xiao');//修改div的值</div>\n<div></div>\n<div>addClass();</div>\n<div>removeClass();</div>\n<div>toggleClass();</div>\n<div>hasClass();</div>\n<div></div>\n<div>$.isArray(object);//检查object是否为数组，返回布尔值</div>\n<div></div>\n<div>[GBin1学习JQ笔记](http://www.gbin1.com/technology/jquery/20120620jqueryfunctioncollection/)</div>\n<div>jQuery处理CSS</div>\n<div>     使用.css()方法</div>\n<div>     使用.addClass()和.removeClass()方法</div>\n<div>     使用.toggleClass()方法</div>\n<div></div>\n<div>jQuery处理特效和动画</div>\n<div>     使用.animate() 方法</div>\n<div>      <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#run'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff;\"><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'18'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'+=300'//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'14px'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'-=300'</span><span style=\"color: #489a1b;\">//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"font-family: Tahoma;\">使用.stop() 方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 230px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span><span style=\"color: #70483d;\">0.2</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'padding-top'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=10px'</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">5000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">stop</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #70483d;\">1</span>        \n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">setinterval()和clearinterval()方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #9a6f1b;\">var</span> progressbar<span style=\"color: #444444;\">;</span>\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    progressbar <span style=\"color: #444444;\">=</span> setInterval<span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span> <span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n          <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'+=10'</span>\n        <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">1000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    clearTimeout<span style=\"color: #444444;\">(</span>progressbar<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"background-color: #ffffff;\"> </span></pre>\n</div>\n</div>\n<div>  <span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">.delay()方法</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$('#run').click(function(){\n    $('#demo').html('2秒后消失');\n    $('#demo').show(200).delay(2000).hide(200);//hide()和show()方法要带参数，否则不能正常运行的[[原因]](http://www.gbin1.com/technology/jqueryhowto/20120301hideshowdelay/)。\n});</pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #cccccc; font-family: arial; font-size: 14px; line-height: 28px; white-space: normal;\">jQuery DOM操作</span></pre>\n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.html()，.Text()和.empty()</span><span style=\"font-family: Tahoma;\">方法</span></div>\n<div>     //.html()设置或者取得特定标签中的内容</div>\n<div>       .text()设置或者取得文本而非标签的内容，返回一个字符串。</div>\n<div></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 100px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"font-family: Tahoma;\">\n</span></div>\n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.append()，prepend()，after()和.before()</span><span style=\"font-family: Tahoma;\">方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'append添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prepend</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'prepend添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">before</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'before添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">after</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'after添加的内容&lt;/br&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&amp;nbsp;www.gbin1.com&amp;nbsp;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #000000; font-size: medium; font-family: Tahoma;\">使用</span><span style=\"color: #000000; white-space: pre; font-size: medium; font-family: Tahoma;\"><span style=\"white-space: normal;\">.clone()方法</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"background-color: #ffffff; line-height: normal;\">$</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span><span style=\"background-color: #ffffff; line-height: normal;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #9a6f1b;\">var</span><span style=\"background-color: #ffffff; line-height: normal;\"> ct </span><span style=\"color: #444444;\">=</span><span style=\"background-color: #ffffff; line-height: normal;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; line-height: normal; height: 100px;\">    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n</div>\n<div> 使用jQuery的AJAX方法[[使用指南]](http://www.gbin1.com/technology/jquery/20120307ajaxforjquerypart1/)</div>\n<div>     使用get方法可以快速使用HTTP的get方法来取得页面内容</div>\n<div>     使用.load()方法</div>\n<div>     使用.post()方法</div>\n<div>\n\n## jQuery处理事件\n\n</div>\n<div> 使用bind和unbind方法</div>\n<div>     //.click() 其实和bind('click')方法是一样的。 当然，使用unbind方法我们可以将事件触发删除。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">bind</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//bind</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">bind</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;//添加新元素</span></pre>\n<div>使用live()，on()，off()方法</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">live</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//live</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     很多老的方法像.live()，.bind()和.delegate()都可以使用最新的on()方法来实现，所有其它方法最后都是调用on方法，所以这里我们也可以将以上代码如下书写：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">on</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//on</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">on</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用delegate方法</div>\n<div>          //老版本的jQuery中，我们应该尽量使用delegate方法而不是live方法，你会发现delegate方法的性能要优于live方法，因为live方法将会从document层次来搜索元素，这会带来性能损失。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">delegate</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">delegate</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用one()方法</div>\n<div>          //需要元素只执行一次事件</div>\n<div>          <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">one</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'mouseleave'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"mouseleave once\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">使用preventDefault()方法</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">阻止缺省的事件触发，例如，你点击 &lt;a href=\"http://www.gbin1.com\"&gt;gbin1.com&lt;/a&gt; 将会转向对应的页面，如果你使用preventDefault()方法，将阻止页面加载：</span></pre>\n<div>       <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">preventDefault</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止访问gbin1.com'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div> 使用.stopPropagation()方法</div>\n<div>     //和preventDefault()方法类似，这个方法也可以阻止缺省行为，但区别是阻止上层元素的事件。注意不能和live方法联用，因为如果父元素是document会处理一次事件。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.wp'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'触发父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div></div>\n<div></div>\n<div>使用.stopImmediatePropagation()方法</div>\n<div>     //使用这个方法将立刻阻止所有相关绑定事件。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopImmediatePropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'button'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'-button触发事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div>\n\n## jQuery DOM操作，循环和过滤\n\n</div>\n<div>使用$.each()和.each() 方法</div>\n<div>     //$.each()方法是jQuery的一般性方法用来处理javascript对象或者数组。而.each()方法用来处理jQuery的自有对象。</div>\n<div>     //使用$.each()方法：</div>\n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">gb_array</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jquery'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'javascript'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jsp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c#'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'cpp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'node.js'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'struts'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'spring'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    \n$.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">gb_array</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">i</span><span style=\"color: #444444;\">,</span><span style=\"color: #333333;\"> v</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;li id=\"'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> i </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'\"&gt;'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> v </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'&lt;/li&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; overflow: auto; word-wrap: break-word; background-color: #ffffff; height: 100px; white-space: pre-wrap; font-size: 11px; font-family: Monaco, Courier, monospace;\"></pre>\n<div><span style=\"font-family: Tahoma; font-size: medium;\">//使用.each()方法：</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>i<span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span></pre>\n<div>$<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>color<span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></div>\n<div>使用$.data()，.data()，$.hasData()和 $.removeData()方法</div>\n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">\"p\"</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">0</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">$.<span style=\"color: #666666;\">data</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"site\"</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"gbin1.com\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $.</span><span style=\"color: #666666;\">removeData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>使用slice()方法</div>\n<div>     //选择一系列元素中的特定区域，注意你可以输入负值，这样会从后面计算：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">slice</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">4</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">1</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.filter()方法</span></span></div>\n<div>  <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">filter</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">':even'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.prev()和.next()方法</span></span></div>\n<div>     在同一类的元素中选取前一个或者后一个元素：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div:first'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">addClass</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$cur</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div.selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 300px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#prev'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#next'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    console.<span style=\"color: #666666;\">log</span><span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div>使用.find()，.children()，.parent()，.parents()，closest()方法</div>\n<div>     //查询DOM中的元素</div>\n<div>\n<pre style=\"line-height: normal; text-align: -webkit-auto; margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">find</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level3'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid #ccc'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用find找到元素'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">children</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用children找到子元素'</span><span style=\"color: #444444;\">); </span></pre>\n</div>","html":"<p>$('div').last();//选择最后一个匹配元素</p>\n\n<p>$('div').eq(1);//选择第二个匹配元素</p>\n\n<p>$('div').eq(-1);//选择倒数第一个匹配元素</p>\n\n<div>$('div').filter('.selected');//选择含有.selected类的匹配元素</div>  \n<div>$('div').not('.selected');//选择不含有.selected类的匹配元素</div>  \n<div></div>  \n<div>$('div').children();//选择div的第一代（孩子）</div>  \n<div>$('div').find('span');//选择div的span后代</div>  \n<div></div>  \n<div>$('div').parent();//选择div的上一代（父亲）</div>  \n<div>$('div').parents();//选择div的前代（祖宗）</div>  \n<div></div>  \n<div>$('h2').closest('h1');//选择离h2最近的h1</div>  \n<div></div>  \n<div>$('div').siblings();//选择div的同级兄弟元素</div>  \n<div></div>  \n<div>$('div').html();//得到div的值</div>  \n<div>$('div').html('xiao');//修改div的值</div>  \n<div></div>  \n<div>addClass();</div>  \n<div>removeClass();</div>  \n<div>toggleClass();</div>  \n<div>hasClass();</div>  \n<div></div>  \n<div>$.isArray(object);//检查object是否为数组，返回布尔值</div>  \n<div></div>  \n<div>[GBin1学习JQ笔记](http://www.gbin1.com/technology/jquery/20120620jqueryfunctioncollection/)</div>  \n<div>jQuery处理CSS</div>  \n<div>     使用.css()方法</div>  \n<div>     使用.addClass()和.removeClass()方法</div>  \n<div>     使用.toggleClass()方法</div>  \n<div></div>  \n<div>jQuery处理特效和动画</div>  \n<div>     使用.animate() 方法</div>  \n<div>      <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#run'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff;\"><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'18'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'+=300'//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'14px'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'-=300'</span><span style=\"color: #489a1b;\">//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<div><span style=\"font-family: Tahoma;\">使用.stop() 方法</span></div>  \n<div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 230px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>  \n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span><span style=\"color: #70483d;\">0.2</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'padding-top'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=10px'</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">5000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">stop</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #70483d;\">1</span>        \n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">setinterval()和clearinterval()方法</span></div>  \n<div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #9a6f1b;\">var</span> progressbar<span style=\"color: #444444;\">;</span>  \n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    progressbar <span style=\"color: #444444;\">=</span> setInterval<span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span> <span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n          <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'+=10'</span>\n        <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">1000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    clearTimeout<span style=\"color: #444444;\">(</span>progressbar<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"background-color: #ffffff;\"> </span></pre>\n</div>  \n\n<p></div>  </p>\n\n<div>  <span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">.delay()方法</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$('#run').click(function(){  \n    $('#demo').html('2秒后消失');\n    $('#demo').show(200).delay(2000).hide(200);//hide()和show()方法要带参数，否则不能正常运行的[[原因]](http://www.gbin1.com/technology/jqueryhowto/20120301hideshowdelay/)。\n});</pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #cccccc; font-family: arial; font-size: 14px; line-height: 28px; white-space: normal;\">jQuery DOM操作</span></pre>  \n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.html()，.Text()和.empty()</span><span style=\"font-family: Tahoma;\">方法</span></div>  \n<div>     //.html()设置或者取得特定标签中的内容</div>  \n<div>       .text()设置或者取得文本而非标签的内容，返回一个字符串。</div>  \n<div></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 100px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>  \n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"font-family: Tahoma;\">  \n</span></div>  \n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.append()，prepend()，after()和.before()</span><span style=\"font-family: Tahoma;\">方法</span></div>  \n<div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>  \n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'append添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prepend</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'prepend添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">before</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'before添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">after</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'after添加的内容&lt;/br&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&amp;nbsp;www.gbin1.com&amp;nbsp;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #000000; font-size: medium; font-family: Tahoma;\">使用</span><span style=\"color: #000000; white-space: pre; font-size: medium; font-family: Tahoma;\"><span style=\"white-space: normal;\">.clone()方法</span></span></pre>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"background-color: #ffffff; line-height: normal;\">$</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span><span style=\"background-color: #ffffff; line-height: normal;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span></pre>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #9a6f1b;\">var</span><span style=\"background-color: #ffffff; line-height: normal;\"> ct </span><span style=\"color: #444444;\">=</span><span style=\"background-color: #ffffff; line-height: normal;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n</div>  \n\n<div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; line-height: normal; height: 100px;\">    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n</div>  \n\n<div> 使用jQuery的AJAX方法[[使用指南]](http://www.gbin1.com/technology/jquery/20120307ajaxforjquerypart1/)</div>  \n<div>     使用get方法可以快速使用HTTP的get方法来取得页面内容</div>  \n<div>     使用.load()方法</div>  \n<div>     使用.post()方法</div>  \n<div>\n\n## jQuery处理事件\n\n</div>  \n\n<div> 使用bind和unbind方法</div>  \n<div>     //.click() 其实和bind('click')方法是一样的。 当然，使用unbind方法我们可以将事件触发删除。</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">bind</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//bind</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">bind</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;//添加新元素</span></pre>\n<div>使用live()，on()，off()方法</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">live</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//live</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     很多老的方法像.live()，.bind()和.delegate()都可以使用最新的on()方法来实现，所有其它方法最后都是调用on方法，所以这里我们也可以将以上代码如下书写：</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">on</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//on</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">on</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用delegate方法</div>  \n<div>          //老版本的jQuery中，我们应该尽量使用delegate方法而不是live方法，你会发现delegate方法的性能要优于live方法，因为live方法将会从document层次来搜索元素，这会带来性能损失。</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">delegate</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">delegate</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用one()方法</div>  \n<div>          //需要元素只执行一次事件</div>  \n<div>          <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">one</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'mouseleave'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"mouseleave once\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">使用preventDefault()方法</span></pre>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">阻止缺省的事件触发，例如，你点击 &lt;a href=\"<a href=\"http://www.gbin1.com\">http://www.gbin1.com</a>\"&gt;gbin1.com&lt;/a&gt; 将会转向对应的页面，如果你使用preventDefault()方法，将阻止页面加载：</span></pre>  \n<div>       <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">preventDefault</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>  \n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止访问gbin1.com'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<div> 使用.stopPropagation()方法</div>  \n<div>     //和preventDefault()方法类似，这个方法也可以阻止缺省行为，但区别是阻止上层元素的事件。注意不能和live方法联用，因为如果父元素是document会处理一次事件。</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>  \n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.wp'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'触发父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<div></div>  \n<div></div>  \n<div></div>  \n<div>使用.stopImmediatePropagation()方法</div>  \n<div>     //使用这个方法将立刻阻止所有相关绑定事件。</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopImmediatePropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>  \n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'button'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'-button触发事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<div></div>  \n<div>\n\n## jQuery DOM操作，循环和过滤\n\n</div>  \n\n<div>使用$.each()和.each() 方法</div>  \n<div>     //$.each()方法是jQuery的一般性方法用来处理javascript对象或者数组。而.each()方法用来处理jQuery的自有对象。</div>  \n<div>     //使用$.each()方法：</div>  \n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">gb_array</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jquery'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'javascript'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jsp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c#'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'cpp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'node.js'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'struts'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'spring'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  \n$.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">gb_array</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">i</span><span style=\"color: #444444;\">,</span><span style=\"color: #333333;\"> v</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;li id=\"'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> i </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'\"&gt;'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> v </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'&lt;/li&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; overflow: auto; word-wrap: break-word; background-color: #ffffff; height: 100px; white-space: pre-wrap; font-size: 11px; font-family: Monaco, Courier, monospace;\"></pre>  \n<div><span style=\"font-family: Tahoma; font-size: medium;\">//使用.each()方法：</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>i<span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span></pre>  \n<div>$<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>color<span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></div>  \n<div>使用$.data()，.data()，$.hasData()和 $.removeData()方法</div>  \n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">\"p\"</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">0</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">$.<span style=\"color: #666666;\">data</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"site\"</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"gbin1.com\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $.</span><span style=\"color: #666666;\">removeData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>  \n<div>使用slice()方法</div>  \n<div>     //选择一系列元素中的特定区域，注意你可以输入负值，这样会从后面计算：</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">slice</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">4</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">1</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>  \n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.filter()方法</span></span></div>  \n<div>  <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">filter</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">':even'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>  \n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.prev()和.next()方法</span></span></div>  \n<div>     在同一类的元素中选取前一个或者后一个元素：</div>  \n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div:first'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">addClass</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$cur</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div.selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>  \n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 300px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#prev'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>  \n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#next'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    console.<span style=\"color: #666666;\">log</span><span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>  \n<div>使用.find()，.children()，.parent()，.parents()，closest()方法</div>  \n<div>     //查询DOM中的元素</div>  \n<div>  \n<pre style=\"line-height: normal; text-align: -webkit-auto; margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">find</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level3'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid #ccc'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用find找到元素'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>  \n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">children</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用children找到子元素'</span><span style=\"color: #444444;\">); </span></pre>\n</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1351126597000,"created_by":1,"updated_at":1351126597000,"updated_by":1,"published_at":1351126597000,"published_by":1},{"id":493,"uuid":"b0a6849a-515a-4082-a655-9caaa3234334","title":"JSON数据类型的学习","slug":"json","markdown":"\n\n<div>\n\n初学AJAX，今天写一个表单验证，发现$.ajax()的success回调函数总是不会执行，而error毁掉函数则总是执行。\n\n我是先POST表单账号密码给php文件，该php文件返回数据（我直接返回了常量供自己测试），然后在JS里获得data.login_email。\n\n发现data.login_email得到的总是undefined，为什么呢？由于对JSON格式不是很熟悉，所以不断调试不断查资料，最后发现：\n\n**原来自1.4版本的jQuery开始,JSON写的不规范可能导致错误!**\n\n\"json\": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See[ json.org](http://www.json.org) for more information on proper JSON formatting.\n\n查资料学习了JSON格式后，修改后台php代码为：\n\n[php]\n\n&lt;?php\n\nheader('Content-type: text/json');\n\n  $results = array (\n\n    &quot;login_email&quot; =&gt; &quot;0&quot;,\n\n    &quot;login_password&quot; =&gt;&quot; 0&quot;\n\n);\n\necho json_encode($results);\n\n?&gt;\n\n[/php]\n<div>再修改前台代码则为：</div>\n<div>[javascript]\n\n$('#login-btn').click(function(){\n\nvar emailVal = $('#login-email').val();\n\n  var passwordVal = $('#login-password').val();\n\n//点击登陆按钮时进行验证\n\n  $.ajax({\n\n   type: &quot;POST&quot;,\n\n   data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal},\n\n   dataType: &quot;JSON&quot;,//原来声明了json数据类型就必须严格书写JSON！\n\n   url: &quot;login_check.php&quot;,\n\nsuccess: function(data){\n\nif(data.login_email==0){//邮箱错误\n\n$('#login #login-email').prev().show();\n\n$('#login #login-email').parent().parent().addClass('warning');\n\n}\n\n                if(data.login_password==0){//密码错误\n\n                    $('#login #login-password').prev().show();\n\n$('#login #login-password').parent().parent().addClass('error');\n\n}\n\n  },error:function(XMLResponse){\n\n            alert(&quot;出错！错误信息为&quot;+XMLResponse.responseText)}\n\n            });\n\nreturn false;//禁止登陆按钮的默认行为\n\n});//click（）结束\n\n[/javascript]\n\n</div>\n<div></div>\n<div>总结出一点JSON规范为：</div>\n<div>　　1）名称：用双引号引起，如[javascript]\n\n    data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal}\n\n[/javascript]\n\n</div>\n<div>　　2）字符串：用用双引号引起，如下：</div>\n<div>[php]\n\n&lt;?php\n\n  header('Content-type: text/json');\n\n  $results=array(&quot;a&quot; =&gt; &quot;apple&quot;, &quot;b&quot; =&gt; &quot;banana&quot;, &quot;o&quot; =&gt; &quot;orange&quot;);\n\n  echo json_encode($results);\n\n?&gt;\n\n[/php]\n\n</div>\n<div>        3）boolean类型不加引号，其他都要加（包括数字）</div>\n<div>        4）前后台使用的数据类型应该一致，如后台使用json_encode($results);前台使用dataType:JSON;来声明</div>\n</div>\n<div>        5）若定义了dataType为JSON就必须使用严格语法的JSON，否则success回调函数就不执行！</div>\n<div></div>\n#-- 2013-10-05 更新","html":"<div>\n\n初学AJAX，今天写一个表单验证，发现$.ajax()的success回调函数总是不会执行，而error毁掉函数则总是执行。\n\n我是先POST表单账号密码给php文件，该php文件返回数据（我直接返回了常量供自己测试），然后在JS里获得data.login_email。\n\n发现data.login_email得到的总是undefined，为什么呢？由于对JSON格式不是很熟悉，所以不断调试不断查资料，最后发现：\n\n**原来自1.4版本的jQuery开始,JSON写的不规范可能导致错误!**\n\n\"json\": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See[ json.org](http://www.json.org) for more information on proper JSON formatting.\n\n查资料学习了JSON格式后，修改后台php代码为：\n\n[php]\n\n&lt;?php\n\nheader('Content-type: text/json');\n\n  $results = array (\n\n    &quot;login_email&quot; =&gt; &quot;0&quot;,\n\n    &quot;login_password&quot; =&gt;&quot; 0&quot;\n\n);\n\necho json_encode($results);\n\n?&gt;\n\n[/php]\n<div>再修改前台代码则为：</div>  \n<div>[javascript]\n\n$('#login-btn').click(function(){\n\nvar emailVal = $('#login-email').val();\n\n  var passwordVal = $('#login-password').val();\n\n//点击登陆按钮时进行验证\n\n  $.ajax({\n\n   type: &quot;POST&quot;,\n\n   data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal},\n\n   dataType: &quot;JSON&quot;,//原来声明了json数据类型就必须严格书写JSON！\n\n   url: &quot;login_check.php&quot;,\n\nsuccess: function(data){\n\nif(data.login_email<mark>0){//邮箱错误\n\n$('#login #login-email').prev().show();\n\n$('#login #login-email').parent().parent().addClass('warning');\n\n}\n\n                if(data.login_password</mark>0){//密码错误\n\n                    $('#login #login-password').prev().show();\n\n$('#login #login-password').parent().parent().addClass('error');\n\n}\n\n  },error:function(XMLResponse){\n\n            alert(&quot;出错！错误信息为&quot;+XMLResponse.responseText)}\n\n            });\n\nreturn false;//禁止登陆按钮的默认行为\n\n});//click（）结束\n\n[/javascript]\n\n</div>  \n\n<div></div>  \n<div>总结出一点JSON规范为：</div>  \n<div>　　1）名称：用双引号引起，如[javascript]\n\n    data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal}\n\n[/javascript]\n\n</div>  \n\n<div>　　2）字符串：用用双引号引起，如下：</div>  \n<div>[php]\n\n&lt;?php\n\n  header('Content-type: text/json');\n\n  $results=array(&quot;a&quot; =&gt; &quot;apple&quot;, &quot;b&quot; =&gt; &quot;banana&quot;, &quot;o&quot; =&gt; &quot;orange&quot;);\n\n  echo json_encode($results);\n\n?&gt;\n\n[/php]\n\n</div>  \n\n<div>        3）boolean类型不加引号，其他都要加（包括数字）</div>  \n<div>        4）前后台使用的数据类型应该一致，如后台使用json_encode($results);前台使用dataType:JSON;来声明</div>  \n</div>  \n\n<div>        5）若定义了dataType为JSON就必须使用严格语法的JSON，否则success回调函数就不执行！</div>  \n\n<div></div>  \n\n<h1 id=\"20131005\">-- 2013-10-05 更新</h1>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364436041000,"created_by":1,"updated_at":1364436041000,"updated_by":1,"published_at":1364436041000,"published_by":1},{"id":494,"uuid":"c959aacd-a5db-4350-ad7d-c5f967b58dea","title":"JavaScript 碎片","slug":"javascript-fragments","markdown":"\r\n\r\n- Object.defineProperty\r\n\r\n\t\tvar A = {};\r\n        Object.defineProperty(A, 'attrName', {\r\n            set: function(val) { \r\n                this.__attrName__ = val; \r\n                console.log('A.attrName 被设置为: ', val);\r\n            },\r\n            get: function() { \r\n                console.log('A.attrName 被获取到: ', this.__attrName__);\r\n                return this.__attrName__; }\r\n            });\r\n        });    \r\n","html":"<ul>\n<li><p>Object.defineProperty</p>\n\n<pre><code>var A = {};\nObject.defineProperty(A, 'attrName', {\n    set: function(val) { \n        this.__attrName__ = val; \n        console.log('A.attrName 被设置为: ', val);\n    },\n    get: function() { \n        console.log('A.attrName 被获取到: ', this.__attrName__);\n        return this.__attrName__; }\n    });\n});    \n</code></pre></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1418912962000,"created_by":1,"updated_at":1418912962000,"updated_by":1,"published_at":1418912962000,"published_by":1},{"id":495,"uuid":"1a821598-ca9a-4b10-a342-4c6bc68b7798","title":"Javascript 异步加载","slug":"javascript-async","markdown":"\n\n异步编程，即非阻塞地执行代码，其实可以用来加载一些附属功能的代码，比如分享按钮代码、GA分析代码等。\n建议将script标签放置在</body>就是为了不让JS代码阻塞DOM的渲染，不会在JS执行期间，网页一片空白卡顿的糟糕体验。\n今天学习到GA的异步加载代码：\n[javascript]\n(function() {\n     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n })();\n[/javascript]\n动态生成script标签并利用HTML5才新增的async属性设置为异步(可不写，但最好加上)，加上用匿名函数封装，避免了内部变量泄露到外部污染全局。\n这份代码可以兼容不支持HTML5中async属性的浏览器，而如果只考虑现代浏览器的话，其实可以偷懒，直接给要异步加载的script一个async属性即可实现上述异步加载的效果了：\n<script src=\"asyncFile.js\" async></script> ","html":"<p>异步编程，即非阻塞地执行代码，其实可以用来加载一些附属功能的代码，比如分享按钮代码、GA分析代码等。\n建议将script标签放置在</body>就是为了不让JS代码阻塞DOM的渲染，不会在JS执行期间，网页一片空白卡顿的糟糕体验。\n今天学习到GA的异步加载代码：\n[javascript]\n(function() {\n     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n     ga.src = ('https:' == document.location.protocol ? '<a href=\"https://ssl\">https://ssl</a>' : '<a href=\"http://www\">http://www</a>') + '.google-analytics.com/ga.js';\n     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n })();\n[/javascript]\n动态生成script标签并利用HTML5才新增的async属性设置为异步(可不写，但最好加上)，加上用匿名函数封装，避免了内部变量泄露到外部污染全局。\n这份代码可以兼容不支持HTML5中async属性的浏览器，而如果只考虑现代浏览器的话，其实可以偷懒，直接给要异步加载的script一个async属性即可实现上述异步加载的效果了：</p>\n\n<script src=\"asyncFile.js\" async></script> ","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1380913532000,"created_by":1,"updated_at":1380913532000,"updated_by":1,"published_at":1380913532000,"published_by":1},{"id":496,"uuid":"9f7dc80a-0f45-4b70-b892-fc4d2128e8e4","title":"Javascript 闭包的学习","slug":"javascript-closure","markdown":"\n\n名词定义：包裹一些局部变量的一个函数叫做一个闭包。闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另个函数」\n实现原理：嵌套函数可以访问外部作用域中声明的变量。\n组成结构：函数以及构建这个函数的环境。\n使用价值：将函数与其所操作的某些数据（环境）关连起来\n使用缺点：闭包会影响性能！闭包会使得函数中的变量都被保存在内存中，内存消耗很大。\n- 用途1，将数据与多个函数相关联：\n[javascript]\n function makeSizer(size) {\n   return function() {\n     document.body.style.fontSize = size + 'px';\n   };\n }\n\n var size12 = makeSizer(12);\n var size14 = makeSizer(14);\n var size16 = makeSizer(16);\n\n //size12();  // 将字号调整到12px\n //size14();  // 将字号调整到14px\n //size16();  // 将字号调整到16px\n [/javascript]\n\n- 用途2，模拟私有方法：\n私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。\n[javascript]\n // 创建一个环境为三个函数共享，减少了污染\n var Counter = (function() {\n   var privateCounter = 0;\n   function changeBy(val) {\n     privateCounter += val;\n   }\n   return {\n     increment: function() {\n       changeBy(1);\n     },\n     decrement: function() {\n       changeBy(-1);\n     },\n     value: function() {\n       return privateCounter;\n     }\n   }\n })();\n\n alert(Counter.value()); /* 提示 0 */\n Counter.increment();\n Counter.increment();\n alert(Counter.value()); /* 提示 2 */\n Counter.decrement();\n alert(Counter.value()); /* 提示 1 */\n [/javascript]\n\n这种方法跟创建一个对象，并分别定义对象的三个方法相似吧？\n实验结果显示，这两种方式是相同的，不过小赖觉得，以下这种更为直观一点吧：\n[javascript]\n // 创建一个环境为三个函数共享，减少了污染\n var Counter = {\n   privateCounter : 0,\n\n   increment: function() {\n       this.privateCounter +=1;\n     },\n\n     decrement: function() {\n       this.privateCounter -=1;\n     },\n\n     value: function() {\n       return this.privateCounter;\n     }\n }\n\n alert(Counter.value()); /* 提示 0 */\n Counter.increment();\n Counter.increment();\n alert(Counter.value()); /* 提示 2 */\n Counter.decrement();\n alert(Counter.value()); /* 提示 1 */\n [/javascript]\n\n使用闭包的话，三个方法共享一个环境，而使用对象来创建明明空间，实则是通过this指向这个对象，来保证共享一个环境，也是避免了污染，有异曲同工之妙吧。\n\n参考：\n1\\. [闭包](<span style=\"text-decoration: underline;\">https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Closures</span> )\n2\\. [闭包](<span style=\"text-decoration: underline;\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</span> )\n3\\. [secrets_of_javascript_closures](<span style=\"text-decoration: underline;\">https://app.box.com/shared/elkumrpfng</span> )","html":"<p>名词定义：包裹一些局部变量的一个函数叫做一个闭包。闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另个函数」\n实现原理：嵌套函数可以访问外部作用域中声明的变量。\n组成结构：函数以及构建这个函数的环境。\n使用价值：将函数与其所操作的某些数据（环境）关连起来\n使用缺点：闭包会影响性能！闭包会使得函数中的变量都被保存在内存中，内存消耗很大。\n- 用途1，将数据与多个函数相关联：\n[javascript]\n function makeSizer(size) {\n   return function() {\n     document.body.style.fontSize = size + 'px';\n   };\n }</p>\n\n<p>var size12 = makeSizer(12);\n var size14 = makeSizer(14);\n var size16 = makeSizer(16);</p>\n\n<p>//size12();  // 将字号调整到12px\n //size14();  // 将字号调整到14px\n //size16();  // 将字号调整到16px\n [/javascript]</p>\n\n<ul>\n<li><p>用途2，模拟私有方法：\n私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。\n[javascript]\n// 创建一个环境为三个函数共享，减少了污染\nvar Counter = (function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  }\n})();</p>\n\n<p>alert(Counter.value()); /* 提示 0 <em>/\nCounter.increment();\nCounter.increment();\nalert(Counter.value()); /</em> 提示 2 <em>/\nCounter.decrement();\nalert(Counter.value()); /</em> 提示 1 */\n[/javascript]</p></li>\n</ul>\n\n<p>这种方法跟创建一个对象，并分别定义对象的三个方法相似吧？\n实验结果显示，这两种方式是相同的，不过小赖觉得，以下这种更为直观一点吧：\n[javascript]\n // 创建一个环境为三个函数共享，减少了污染\n var Counter = {\n   privateCounter : 0,</p>\n\n<p>  increment: function() {\n       this.privateCounter +=1;\n     },</p>\n\n<p>    decrement: function() {\n       this.privateCounter -=1;\n     },</p>\n\n<p>    value: function() {\n       return this.privateCounter;\n     }\n }</p>\n\n<p>alert(Counter.value()); /* 提示 0 <em>/\n Counter.increment();\n Counter.increment();\n alert(Counter.value()); /</em> 提示 2 <em>/\n Counter.decrement();\n alert(Counter.value()); /</em> 提示 1 */\n [/javascript]</p>\n\n<p>使用闭包的话，三个方法共享一个环境，而使用对象来创建明明空间，实则是通过this指向这个对象，来保证共享一个环境，也是避免了污染，有异曲同工之妙吧。</p>\n\n<p>参考：\n1. <a href=\"span style=\"text-decoration: underline;\">https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Closures</span> \">闭包</a> <br />\n2. <a href=\"span style=\"text-decoration: underline;\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</span> \">闭包</a> <br />\n3. <a href=\"span style=\"text-decoration: underline;\">https://app.box.com/shared/elkumrpfng</span> \">secrets<em>of</em>javascript_closures</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1381016173000,"created_by":1,"updated_at":1381016173000,"updated_by":1,"published_at":1381016173000,"published_by":1},{"id":497,"uuid":"1f3c0fc9-5aef-4db9-ae91-134a6e396026","title":"Javascript碎片积累","slug":"javascript-fragments-2","markdown":"\n\n-\nJS中的Image对象：\n\n[javascript]\nfunction getImageSize(imageEl) {\n var i = new Image();\n i.src = imageEl.src;\n return new Array(i.width, i.height);\n}\n[/javascript]\n\nimage对象现在一般常用来预加载一些图片，先将其装入 DOM，等到需要的时候，直接调用，省掉等待的时间，直接显示出来。\n需要注意的是：src 属性一定要写到 onload 的后面，否则程序在 IE 中会出错。\n-\nfor 和 class 是 JavaScript 中的关键字，所以在 JavaScript 中这两个属性名称分别用 htmlFor 和 className 代替。\n\n[javascript]\nfunction getAttr(el, attrName){\n var attr = {'for':'htmlFor', 'class':'className'}[attrName] || attrName;\n}\n[/javascript]\n\n-\n交换两个变量值的巧妙方法，利用数组：\nfoo = [bar, bar=foo][0]; // 多巧妙啊！编程的时候不要忘记思考，否则你就只是一个完成工作的机器。\n-\n双感叹号的用法：!! 一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false。\n-\n注意一些类型转换：\n\n[javascript]\na=parseInt(“1234″)\na=”1234″-0 //转换为数字\nb=1234+”&quot; //转换为字符串\nc=someObject.toString() //将对象转换为字符串\n[/javascript]\n\n其中第1种、第4种为显式转换，2、3为隐式转换\n布尔型的转换，javascript约定规则为\nfalse、undefinded、null、0、”\" 为 false\ntrue、1、”somestring”、[Object] 为 true\n-\n在标准的事件绑定中绑定事件的方法函数为 addEventListener,而IE使用的是attachEvent\n-\njQuery.trim()去除字符串前后的空格\n-\njQuery.inArray()判断元素是否在数组中\n\n[javascript]\nvar arr = [&quot;html&quot;, &quot;css&quot;, &quot;js&quot;, &quot;jquery&quot;];\n$.inArray('js',arr);\n[/javascript]\n\n-\n编写一个简单的 jQuery 插件（模板）\n\n[javascript]\n//You need an anonymous function to wrap around your function to avoid conflict\n(function($){\n //Attach this new method to jQuery\n $.fn.extend({\n //This is where you write your plugin's name\n pluginname: function() {\n //options\n var defaults = {\n option1: &quot;default_value&quot;\n }\n var options = $.extend(defaults, options);\n //a public method\n this.methodName: function () {\n //call this method via $.pluginname().methodName();\n }\n //Iterate over the current set of matched elements\n return this.each(function() {\n var o = options;\n //code to be inserted here\n });\n }\n });\n//pass jQuery to the function,\n//So that we will able to use any valid Javascript variable name\n//to replace &quot;$&quot; SIGN. But, we'll stick to $ (I like dollar sign: ) )\n})(jQuery);\n[/javascript]\n\n-\n小技巧：在浏览器地址栏中输入一行代码：data:text/html, &lt;html contenteditable&gt; ，回车即可把浏览器变临时编辑器（需要浏览器支持 HTML5 属性 contenteditable） 原文\n-\n所有JS对象共享的方法是toString()，返回该对象序列化格式后的字符串\n-\n元素的client属性(只读)指元素的内容部分再加上padding的大小，不包括border和滚动条占用的空间，故document元素的clientHeight和clientWidth属性，就代表了网页的相对大小。\n\n[javascript]\n // 获得网页的相对大小\n function getViewport(){ // 页面加载完成后才能运行\n 　　　　if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　return {\n // IE6 quirks模式\n 　　　　　　　　width: document.body.clientWidth,\n 　　　　　　　　height: document.body.clientHeight\n 　　　　　　}\n 　　　　} else {\n 　　　　　　return {\n 　　　　　　　　width: document.documentElement.clientWidth,\n 　　　　　　　　height: document.documentElement.clientHeight\n 　　　　　　}\n 　　　　}\n 　　}\n[/javascript]\n\n&nbsp;\n\n[javascript]\n // 获取网页的绝对大小\n // 如果网页内容能够在浏览器窗口中全部显示,不同浏览器有不同的处理，这两个值未必相等,要取它们之中较大的那个值\n function getPagearea(){\n if (document.compatMode == &quot;BackCompat&quot;){\n return {\n width: Math.max(document.body.scrollWidth,\n document.body.clientWidth),\n height: Math.max(document.body.scrollHeight,\n document.body.clientHeight)\n }\n } else {\n return {\n width: Math.max(document.documentElement.scrollWidth,\n document.documentElement.clientWidth),\n\nheight: Math.max(document.documentElement.scrollHeight,\n document.documentElement.clientHeight)\n }\n }\n }\n [/javascript]\n\n-\n每个元素都有offsetTop和offsetLeft属性，表示该元素的左上角与父容器（offsetParent对象）左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标。\n\n// 获取绝对位置的横坐标和纵坐标\n// 由于在表格和iframe中，offsetParent对象未必等于父容器，所以以下函数对于表格和iframe中的元素不适用。\n\n[javascript]\nfunction getElementLeft(element){\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualLeft;\n 　　}\n 　　function getElementTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualTop += current.offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualTop;\n 　　}\n[/javascript]\n\n// 获取网页元素的相对位置:绝对坐标减去滚动条滚动的距离\n\n[javascript]\nfunction getElementViewLeft(element){\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　var elementScrollLeft=document.body.scrollLeft;\n 　　　　} else {\n 　　　　　　var elementScrollLeft=document.documentElement.scrollLeft;\n 　　　　}\n 　　　　return actualLeft-elementScrollLeft;\n 　　}\n 　　function getElementViewTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualTop += current. offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　 if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　var elementScrollTop=document.body.scrollTop;\n 　　　　} else {\n 　　　　　　var elementScrollTop=document.documentElement.scrollTop;\n 　　　　}\n 　　　　return actualTop-elementScrollTop;\n 　　}\n// scrollTop和scrollLeft属性是可以赋值的\n[/javascript]\n\n-\n-\nobject.prop和object['prop']是等价的，当属性是带空格的string时就只能用方括号了：person['first name'];\n-\nfor…in 循环输出的属性名顺序不可预测,使用之前先检测对象是否为null 或者 undefined\n-\nhasOwnProperty是js中唯一一个处理属性但是不查找原型链的函数\n\n[javascript]\nObject.prototype.prop = 'propsss';\nvar obj = {und:undefined};\nobj.prop; // propsss\n'und' in obj; // true\nobj.hasOwnProperty('prop'); // false\nobj.hasOwnProperty('und'); // true\n//只有hasOwnProperty可以给出正确和期望的结果，尤其在遍历一个对象时\n//除了hasOwnProperty外，没有其他方法可以排除原型链上的属性（不是定义在对象自身上的属性）\n//如果hasOwnProperty被占用呢？来看：\nvar obj = {\n    hasOwnProperty: function(){\n        return false;\n    },\n    prop: 'this is bad...'\n};\nobj.hasOwnProperty('prop'); // 总是返回false\n//这样解决：\n{}.hasOwnProperty.call(obj,'prop'); // 返回true\n[/javascript]\n\n-\nObject的每个实例都具有下列属性方法：\n1.Constructor：保存着用于创建当前对象的函数 上面例子 构造函数就是 Object()\n2.hasOwnProperty(prop):检查给定的属性是否在当前对象实例中（而不是在实例的原型中）。作为参数的属性必须以string形式指定\n3.isPrototypeOf(object):用于检查传入的对象是否是另一个对象的原型。\n4.propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for in语句\n5.toLocaleString():返回对象的字符串表示，与环境的地区对应\n6.toString():同上\n7.valueOf(): 返回对象的字符串、number、Boolean表示。通常与toString()相同\n-\njavascript中的乘法问题：\n可用 10000 作为基数确保精度，如 31.12 * 10000 * 9.7 / 10000\n-\nfunction语句在解析时会被提升，对代码求值时js引擎在第一遍会声明函数并将它们放到源代码树的顶部。\n\n[javascript]\n     alert(sum(10,10))\n      function sum(n1,n2){\n          return n1+n2;\n     }\n     //单独使用下面代码时，函数表达式会出错：\n      alert(sum(10,10));\n      var sum = function (n1,n2){\n          return n1+n2;\n     }\n[/javascript]\n\n命名函数表达式即被认为是函数声明也被认为是函数表达式\n\n[javascript]\ntypeof g; // &quot;function&quot;\nvar f = function g(){};\n//上面这个例子论证了 jScript 是如何把一个命名函数表达式处理成一个函数声明的\n//在函数声明发生之前就把 g 给解析了   【在IE中检测】\n[/javascript]\n\n-\nthis是在函数调用时才被确定的而不是定义的时候\n\n[javascript]\n     var Dog = {\n          toString: function() { return 'dog';},\n          fn: function() { alert(this);},\n     };\n      var Cat = {\n          toString: function() { return 'cat';}\n     };\n      Dog.fn(); // dog\n      Dog['fn']() // dog\n      Cat.fn = Dog.fn;\n      Cat.fn(); // cat\n      var func = Dog.fn;\n      func(); // window\n[/javascript]\n\n-\n\napply和call的区别，在于apply用数组传递参数，而call用多参数逗号传递参数：\n\n[javascript]\n\nfunction myFunc(arg1,arg2,arg3){\n\n// code ...\n\n}\n\nmyFunc.apply(null,[arg1,arg2,aeg3]);\n\nmyFunc.call(null,arg1,arg2,arg3);\n\n// 第一个参数指定调用函数myFunc的对象\n\n[/javascript]\n\n-\n\n构造函数的理解：当new修饰符修饰函数时，this就会指向新对象，该对象会自动返回，称之为构造函数：\n\n[javascript]\nfunction Person(name){\n    this.name = name;\n    this.sayName = function(){\n        alert(&quot;我的大名是：&quot; + this.name);\n}\n}\n\nvar person1 = new Person(&quot;xiaolai&quot;); // 构造函数返回一个对象，赋值给变量 xiaolai\nperson1.sayName(); // 『我的大名是：xiaolai』\n[/javascript]\n\n-\nMarch 6, 2014—添加—\n\n- 获取元素的classList:\n\n[javascript]\n selector.classList 获取所有的class\n selector.clasList.add(value); // 添加类\n selector.clasList.remove(value); // 删除类\n selector.clasList.toggle(value); // 切换类\n selector.clasList.contains(value); // 判断是否包含类\n [/javascript]\n\n- 获取DOM中获得了焦点的元素\n\n[javascript]\n document.activeElement\n [/javascript]\n\n- 判断DOM是否加载完成\n\n[javascript]\n document.readyState // ‘complete’ or ‘loading’\n [/javascript]\n\n- 判断浏览器采用了哪种渲染模式\n\n[javascript]\n document.compatMode // ‘CSS1Compat’ 为标准模式，’BackCompat’ 为混杂模式\n [/javascript]\n\n- 判断浏览器采用的字符集\n\n[javascript]\n document.defaultCharset   // 默认字符集\n document.charset // 采用的字符集\n [/javascript]\n\n- 访问所有自定义属性\n\n[javascript]\n selector.dataset.myid; // 获取div[data-myid=‘100’]中的100\n [/javascript]\n\n- 将某个元素调入视窗内\n\n[javascript]\n selector.scrollIntoView()\n [/javascript]\n\n- 返回元素的子元素节点（不包括其他节点）\n\n[javascript]\n selector.children // 是HTMLCollection的一个实例\n [/javascript]\n\n- 获取视窗大小\n[javascript]\nfunction getViewport() {\n // 判断是否混杂模式\n if (document.compatMode == 'BackCompat') {\n return {\n width: document.body.clientWidth,\n height: document.body.clientHeight\n }\n } else {\n return {\n width: document.documentElement.clientWidth,\n height: document.documentElement.clientHeight\n }\n }\n}\n[/javascript]\n\n- 获取元素在视窗内的位置\n[javascript]\nselector.getBoundingClientRegt() // 返回对象含属性 left right top bottom\n[/javascript]\n\n- 获取页面的样式表\n[javascript]\ndocument.styleSheets;\ndocument.styleSheets[0].disabled = true; // 禁用第一个样式表\n[/javascript]","html":"<p>-\nJS中的Image对象：</p>\n\n<p>[javascript]\nfunction getImageSize(imageEl) { <br />\n var i = new Image();\n i.src = imageEl.src;\n return new Array(i.width, i.height);\n}\n[/javascript]</p>\n\n<p>image对象现在一般常用来预加载一些图片，先将其装入 DOM，等到需要的时候，直接调用，省掉等待的时间，直接显示出来。  </p>\n\n<h2 id=\"srconloadie\">需要注意的是：src 属性一定要写到 onload 的后面，否则程序在 IE 中会出错。</h2>\n\n<p>for 和 class 是 JavaScript 中的关键字，所以在 JavaScript 中这两个属性名称分别用 htmlFor 和 className 代替。</p>\n\n<p>[javascript]\nfunction getAttr(el, attrName){ <br />\n var attr = {'for':'htmlFor', 'class':'className'}[attrName] || attrName;\n}\n[/javascript]</p>\n\n<p>-\n交换两个变量值的巧妙方法，利用数组：</p>\n\n<h2 id=\"foobarbarfoo0\">foo = [bar, bar=foo][0]; // 多巧妙啊！编程的时候不要忘记思考，否则你就只是一个完成工作的机器。  </h2>\n\n<h2 id=\"booleantruefalse\">双感叹号的用法：!! 一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false。</h2>\n\n<p>注意一些类型转换：</p>\n\n<p>[javascript]\na=parseInt(“1234″) <br />\na=”1234″-0 //转换为数字 <br />\nb=1234+”&quot; //转换为字符串 <br />\nc=someObject.toString() //将对象转换为字符串 <br />\n[/javascript]</p>\n\n<p>其中第1种、第4种为显式转换，2、3为隐式转换\n布尔型的转换，javascript约定规则为\nfalse、undefinded、null、0、”\" 为 false  </p>\n\n<h2 id=\"true1somestringobjecttrue\">true、1、”somestring”、[Object] 为 true  </h2>\n\n<h2 id=\"addeventlistenerieattachevent\">在标准的事件绑定中绑定事件的方法函数为 addEventListener,而IE使用的是attachEvent</h2>\n\n<h2 id=\"jquerytrim\">jQuery.trim()去除字符串前后的空格  </h2>\n\n<p>jQuery.inArray()判断元素是否在数组中</p>\n\n<p>[javascript]\nvar arr = [&quot;html&quot;, &quot;css&quot;, &quot;js&quot;, &quot;jquery&quot;]; <br />\n$.inArray('js',arr);\n[/javascript]</p>\n\n<p>-\n编写一个简单的 jQuery 插件（模板）</p>\n\n<p>[javascript]\n//You need an anonymous function to wrap around your function to avoid conflict\n(function($){\n //Attach this new method to jQuery\n $.fn.extend({\n //This is where you write your plugin's name\n pluginname: function() {\n //options\n var defaults = {\n option1: &quot;default_value&quot;\n }\n var options = $.extend(defaults, options);\n //a public method\n this.methodName: function () {\n //call this method via $.pluginname().methodName();\n }\n //Iterate over the current set of matched elements\n return this.each(function() {\n var o = options;\n //code to be inserted here\n });\n }\n });\n//pass jQuery to the function,\n//So that we will able to use any valid Javascript variable name\n//to replace &quot;$&quot; SIGN. But, we'll stick to $ (I like dollar sign: ) )\n})(jQuery);\n[/javascript]</p>\n\n<p>-</p>\n\n<h2 id=\"datatexthtmllthtmlcontenteditablegthtml5contenteditable\">小技巧：在浏览器地址栏中输入一行代码：data:text/html, &lt;html contenteditable&gt; ，回车即可把浏览器变临时编辑器（需要浏览器支持 HTML5 属性 contenteditable） 原文</h2>\n\n<h2 id=\"jstostring\">所有JS对象共享的方法是toString()，返回该对象序列化格式后的字符串</h2>\n\n<p>元素的client属性(只读)指元素的内容部分再加上padding的大小，不包括border和滚动条占用的空间，故document元素的clientHeight和clientWidth属性，就代表了网页的相对大小。</p>\n\n<p>[javascript]\n // 获得网页的相对大小\n function getViewport(){ // 页面加载完成后才能运行\n 　　　　if (document.compatMode <mark> &quot;BackCompat&quot;){\n 　　　　　　return {\n // IE6 quirks模式\n 　　　　　　　　width: document.body.clientWidth,\n 　　　　　　　　height: document.body.clientHeight\n 　　　　　　}\n 　　　　} else {\n 　　　　　　return {\n 　　　　　　　　width: document.documentElement.clientWidth,\n 　　　　　　　　height: document.documentElement.clientHeight\n 　　　　　　}\n 　　　　}\n 　　}\n[/javascript]</p>\n\n<p>&nbsp;</p>\n\n<p>[javascript]\n // 获取网页的绝对大小\n // 如果网页内容能够在浏览器窗口中全部显示,不同浏览器有不同的处理，这两个值未必相等,要取它们之中较大的那个值\n function getPagearea(){\n if (document.compatMode </mark> &quot;BackCompat&quot;){\n return {\n width: Math.max(document.body.scrollWidth,\n document.body.clientWidth),\n height: Math.max(document.body.scrollHeight,\n document.body.clientHeight)\n }\n } else {\n return {\n width: Math.max(document.documentElement.scrollWidth,\n document.documentElement.clientWidth),</p>\n\n<p>height: Math.max(document.documentElement.scrollHeight, <br />\n document.documentElement.clientHeight)\n }\n }\n }\n [/javascript]</p>\n\n<p>-\n每个元素都有offsetTop和offsetLeft属性，表示该元素的左上角与父容器（offsetParent对象）左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标。</p>\n\n<p>// 获取绝对位置的横坐标和纵坐标\n// 由于在表格和iframe中，offsetParent对象未必等于父容器，所以以下函数对于表格和iframe中的元素不适用。</p>\n\n<p>[javascript]\nfunction getElementLeft(element){ <br />\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !<mark> null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualLeft;\n 　　}\n 　　function getElementTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !</mark> null){\n 　　　　　　actualTop += current.offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualTop;\n 　　}\n[/javascript]</p>\n\n<p>// 获取网页元素的相对位置:绝对坐标减去滚动条滚动的距离</p>\n\n<p>[javascript]\nfunction getElementViewLeft(element){ <br />\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !<mark> null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　if (document.compatMode </mark> &quot;BackCompat&quot;){\n 　　　　　　var elementScrollLeft=document.body.scrollLeft;\n 　　　　} else {\n 　　　　　　var elementScrollLeft=document.documentElement.scrollLeft;\n 　　　　}\n 　　　　return actualLeft-elementScrollLeft;\n 　　}\n 　　function getElementViewTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !<mark> null){\n 　　　　　　actualTop += current. offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　 if (document.compatMode </mark> &quot;BackCompat&quot;){\n 　　　　　　var elementScrollTop=document.body.scrollTop;\n 　　　　} else {\n 　　　　　　var elementScrollTop=document.documentElement.scrollTop;\n 　　　　}\n 　　　　return actualTop-elementScrollTop;\n 　　}\n// scrollTop和scrollLeft属性是可以赋值的\n[/javascript]</p>\n\n<h2 id=\"\">-</h2>\n\n<h2 id=\"objectpropobjectpropstringpersonfirstname\">object.prop和object['prop']是等价的，当属性是带空格的string时就只能用方括号了：person['first name'];  </h2>\n\n<h2 id=\"forinnullundefined\">for…in 循环输出的属性名顺序不可预测,使用之前先检测对象是否为null 或者 undefined  </h2>\n\n<p>hasOwnProperty是js中唯一一个处理属性但是不查找原型链的函数</p>\n\n<p>[javascript]\nObject.prototype.prop = 'propsss'; <br />\nvar obj = {und:undefined}; <br />\nobj.prop; // propsss <br />\n'und' in obj; // true <br />\nobj.hasOwnProperty('prop'); // false <br />\nobj.hasOwnProperty('und'); // true <br />\n//只有hasOwnProperty可以给出正确和期望的结果，尤其在遍历一个对象时\n//除了hasOwnProperty外，没有其他方法可以排除原型链上的属性（不是定义在对象自身上的属性）\n//如果hasOwnProperty被占用呢？来看：\nvar obj = { <br />\n    hasOwnProperty: function(){\n        return false;\n    },\n    prop: 'this is bad...'\n};\nobj.hasOwnProperty('prop'); // 总是返回false <br />\n//这样解决：\n{}.hasOwnProperty.call(obj,'prop'); // 返回true\n[/javascript]</p>\n\n<p>-\nObject的每个实例都具有下列属性方法： <br />\n1.Constructor：保存着用于创建当前对象的函数 上面例子 构造函数就是 Object() <br />\n2.hasOwnProperty(prop):检查给定的属性是否在当前对象实例中（而不是在实例的原型中）。作为参数的属性必须以string形式指定 <br />\n3.isPrototypeOf(object):用于检查传入的对象是否是另一个对象的原型。 <br />\n4.propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for in语句 <br />\n5.toLocaleString():返回对象的字符串表示，与环境的地区对应 <br />\n6.toString():同上  </p>\n\n<h2 id=\"7valueofnumberbooleantostring\">7.valueOf(): 返回对象的字符串、number、Boolean表示。通常与toString()相同  </h2>\n\n<p>javascript中的乘法问题：  </p>\n\n<h2 id=\"100003112100009710000\">可用 10000 作为基数确保精度，如 31.12 * 10000 * 9.7 / 10000</h2>\n\n<p>function语句在解析时会被提升，对代码求值时js引擎在第一遍会声明函数并将它们放到源代码树的顶部。</p>\n\n<p>[javascript]\n     alert(sum(10,10))\n      function sum(n1,n2){\n          return n1+n2;\n     }\n     //单独使用下面代码时，函数表达式会出错：\n      alert(sum(10,10));\n      var sum = function (n1,n2){\n          return n1+n2;\n     }\n[/javascript]</p>\n\n<p>命名函数表达式即被认为是函数声明也被认为是函数表达式</p>\n\n<p>[javascript]\ntypeof g; // &quot;function&quot; <br />\nvar f = function g(){}; <br />\n//上面这个例子论证了 jScript 是如何把一个命名函数表达式处理成一个函数声明的\n//在函数声明发生之前就把 g 给解析了   【在IE中检测】\n[/javascript]</p>\n\n<p>-\nthis是在函数调用时才被确定的而不是定义的时候</p>\n\n<p>[javascript]\n     var Dog = {\n          toString: function() { return 'dog';},\n          fn: function() { alert(this);},\n     };\n      var Cat = {\n          toString: function() { return 'cat';}\n     };\n      Dog.fn(); // dog\n      Dog<a href=\"\">'fn'</a> // dog\n      Cat.fn = Dog.fn;\n      Cat.fn(); // cat\n      var func = Dog.fn;\n      func(); // window\n[/javascript]</p>\n\n<p>-</p>\n\n<p>apply和call的区别，在于apply用数组传递参数，而call用多参数逗号传递参数：</p>\n\n<p>[javascript]</p>\n\n<p>function myFunc(arg1,arg2,arg3){</p>\n\n<p>// code ...</p>\n\n<p>}</p>\n\n<p>myFunc.apply(null,[arg1,arg2,aeg3]);</p>\n\n<p>myFunc.call(null,arg1,arg2,arg3);</p>\n\n<p>// 第一个参数指定调用函数myFunc的对象</p>\n\n<p>[/javascript]</p>\n\n<p>-</p>\n\n<p>构造函数的理解：当new修饰符修饰函数时，this就会指向新对象，该对象会自动返回，称之为构造函数：</p>\n\n<p>[javascript]\nfunction Person(name){ <br />\n    this.name = name;\n    this.sayName = function(){\n        alert(&quot;我的大名是：&quot; + this.name);\n}\n}</p>\n\n<p>var person1 = new Person(&quot;xiaolai&quot;); // 构造函数返回一个对象，赋值给变量 xiaolai <br />\nperson1.sayName(); // 『我的大名是：xiaolai』 <br />\n[/javascript]</p>\n\n<p>-\nMarch 6, 2014—添加—</p>\n\n<ul>\n<li>获取元素的classList:</li>\n</ul>\n\n<p>[javascript]\n selector.classList 获取所有的class\n selector.clasList.add(value); // 添加类\n selector.clasList.remove(value); // 删除类\n selector.clasList.toggle(value); // 切换类\n selector.clasList.contains(value); // 判断是否包含类\n [/javascript]</p>\n\n<ul>\n<li>获取DOM中获得了焦点的元素</li>\n</ul>\n\n<p>[javascript]\n document.activeElement\n [/javascript]</p>\n\n<ul>\n<li>判断DOM是否加载完成</li>\n</ul>\n\n<p>[javascript]\n document.readyState // ‘complete’ or ‘loading’\n [/javascript]</p>\n\n<ul>\n<li>判断浏览器采用了哪种渲染模式</li>\n</ul>\n\n<p>[javascript]\n document.compatMode // ‘CSS1Compat’ 为标准模式，’BackCompat’ 为混杂模式\n [/javascript]</p>\n\n<ul>\n<li>判断浏览器采用的字符集</li>\n</ul>\n\n<p>[javascript]\n document.defaultCharset   // 默认字符集\n document.charset // 采用的字符集\n [/javascript]</p>\n\n<ul>\n<li>访问所有自定义属性</li>\n</ul>\n\n<p>[javascript]\n selector.dataset.myid; // 获取div[data-myid=‘100’]中的100\n [/javascript]</p>\n\n<ul>\n<li>将某个元素调入视窗内</li>\n</ul>\n\n<p>[javascript]\n selector.scrollIntoView()\n [/javascript]</p>\n\n<ul>\n<li>返回元素的子元素节点（不包括其他节点）</li>\n</ul>\n\n<p>[javascript]\n selector.children // 是HTMLCollection的一个实例\n [/javascript]</p>\n\n<ul>\n<li><p>获取视窗大小\n[javascript]\nfunction getViewport() { <br />\n// 判断是否混杂模式\nif (document.compatMode == 'BackCompat') {\nreturn {\nwidth: document.body.clientWidth,\nheight: document.body.clientHeight\n}\n} else {\nreturn {\nwidth: document.documentElement.clientWidth,\nheight: document.documentElement.clientHeight\n}\n}\n}\n[/javascript]</p></li>\n<li><p>获取元素在视窗内的位置\n[javascript]\nselector.getBoundingClientRegt() // 返回对象含属性 left right top bottom <br />\n[/javascript]</p></li>\n<li><p>获取页面的样式表\n[javascript]\ndocument.styleSheets; <br />\ndocument.styleSheets[0].disabled = true; // 禁用第一个样式表 <br />\n[/javascript]</p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1370105868000,"created_by":1,"updated_at":1370105868000,"updated_by":1,"published_at":1370105868000,"published_by":1},{"id":498,"uuid":"6fc045b0-3b6a-4389-a68a-50771ddeb863","title":"Karma和Jasmine学习笔记","slug":"learn-karma-n-jasmine","markdown":"\n\n# Jasmine \n\nJasmine 是一个用于编写 js 测试的框架。\t\n\t\n下载\n\n\t$ git clone https://github.com/pivotal/jasmine.git\n\t$ mkdir jasmine && cd jasmine\n\t$ mv jasmine/dist/jasmine-standalone-2.0.0.zip jasmine/jasmine\n\t$ cd jasmine/jasmine\n\t// 解压\n\t$ unzip jasmine-standalone-2.0.0.zip\n\n\t// 除了使用 git 也可以使用 bower 来安装 $ bower install jasmine\n\n创建测试文件\n\n\t// test.html\n\t<!-- 引入jasmine依赖文件 -->\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"jasmine/lib/jasmine-2.0.0/jasmine.css\">\n\t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine.js\"></script>\n \t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"></script>\n\t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/boot.js\"></script>\n  \n\t<!-- 编写需要测试的代码 -->\n\t<script>\n\t  function sayHello (name) {\n    \treturn 'Hello ' + name;\n\t  }\n\t</script>\n\n\t<!-- 编写测试脚本 -->\n\t<script>\n\t  describe('A suite of basic functions', function () {\n\t    it('sayHello', function () {\n    \t  var name = 'Xiaolai';\n      \tvar exp = 'Hello Xiaolai';\n\t      expect(exp).toBe(sayHello(name));\n    \t})\n\t  })\n\t</script>\t\t\n\n浏览器打开 test.html 即可看到测试效果\n\n更多的 jasmine 语法，查看[官方文档](http://jasmine.github.io/2.0/introduction.html)\n\n<!-- more -->\n\n# Karma\n\nKarma 是一个基于 NodeJS 的js测试执行过程管理工具。\n\n安装\n\n\t$ npm install -g karma-cli\t\t\n\n初始化\n\n\t$ mkdir karma && cd karma\n\t$ karma init\n\t// 根据提示完成初始化\n\n安装 jasmine 插件\n\n\t$ npm install karma-jasmine -g\t\t\n\t\n创建源文件\n\t\n\t// source.js\n\tfunction reverse(name){\n    \treturn name.split(\"\").reverse().join(\"\");\n\t} \t\n\t\n创建测试文件，使用 jasmine 语法编写\n\t\n\t// test.js\n\tdescribe(\"A suite of basic functions\", function() {\n   \t\tit(\"reverse word\",function(){\n   \t \t\texpect(\"DCBA\").toEqual(reverse(\"ABCD\"));\n\t        expect(\"Xiaolai\").toEqual(reverse(\"ialoaiX\"));\n\t    });\n\t});\n\n修改配置文件\n\t\n\t// karma.conf.js 修改以下部分\n\tfiles: ['*.js']\n\texclude: ['karma.conf.js']\n\t\n启动测试\n\n\t$ karma start karma.conf.js\t\n\t\n### 参考链接\n\n- [karma-runner.github.io](http://karma-runner.github.io/)\n- [jasmine.github.io](http://jasmine.github.io/)\n- [jasmine.github.io/2.0/](http://jasmine.github.io/2.0/introduction.html)\n- [Karma和Jasmine自动化单元测试](http://blog.fens.me/nodejs-karma-jasmine/)","html":"<h1 id=\"jasmine\">Jasmine</h1>\n\n<p>Jasmine 是一个用于编写 js 测试的框架。    </p>\n\n<p>下载</p>\n\n<pre><code>$ git clone https://github.com/pivotal/jasmine.git\n$ mkdir jasmine &amp;&amp; cd jasmine\n$ mv jasmine/dist/jasmine-standalone-2.0.0.zip jasmine/jasmine\n$ cd jasmine/jasmine\n// 解压\n$ unzip jasmine-standalone-2.0.0.zip\n\n// 除了使用 git 也可以使用 bower 来安装 $ bower install jasmine\n</code></pre>\n\n<p>创建测试文件</p>\n\n<pre><code>// test.html\n&lt;!-- 引入jasmine依赖文件 --&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"jasmine/lib/jasmine-2.0.0/jasmine.css\"&gt;\n&lt;script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine.js\"&gt;&lt;/script&gt;\n &lt;script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/boot.js\"&gt;&lt;/script&gt;\n\n&lt;!-- 编写需要测试的代码 --&gt;\n&lt;script&gt;\n  function sayHello (name) {\n    return 'Hello ' + name;\n  }\n&lt;/script&gt;\n\n&lt;!-- 编写测试脚本 --&gt;\n&lt;script&gt;\n  describe('A suite of basic functions', function () {\n    it('sayHello', function () {\n      var name = 'Xiaolai';\n      var exp = 'Hello Xiaolai';\n      expect(exp).toBe(sayHello(name));\n    })\n  })\n&lt;/script&gt;       \n</code></pre>\n\n<p>浏览器打开 test.html 即可看到测试效果</p>\n\n<p>更多的 jasmine 语法，查看<a href=\"http://jasmine.github.io/2.0/introduction.html\">官方文档</a></p>\n\n<!-- more -->\n\n<h1 id=\"karma\">Karma</h1>\n\n<p>Karma 是一个基于 NodeJS 的js测试执行过程管理工具。</p>\n\n<p>安装</p>\n\n<pre><code>$ npm install -g karma-cli     \n</code></pre>\n\n<p>初始化</p>\n\n<pre><code>$ mkdir karma &amp;&amp; cd karma\n$ karma init\n// 根据提示完成初始化\n</code></pre>\n\n<p>安装 jasmine 插件</p>\n\n<pre><code>$ npm install karma-jasmine -g     \n</code></pre>\n\n<p>创建源文件</p>\n\n<pre><code>// source.js\nfunction reverse(name){\n    return name.split(\"\").reverse().join(\"\");\n}   \n</code></pre>\n\n<p>创建测试文件，使用 jasmine 语法编写</p>\n\n<pre><code>// test.js\ndescribe(\"A suite of basic functions\", function() {\n       it(\"reverse word\",function(){\n           expect(\"DCBA\").toEqual(reverse(\"ABCD\"));\n        expect(\"Xiaolai\").toEqual(reverse(\"ialoaiX\"));\n    });\n});\n</code></pre>\n\n<p>修改配置文件</p>\n\n<pre><code>// karma.conf.js 修改以下部分\nfiles: ['*.js']\nexclude: ['karma.conf.js']\n</code></pre>\n\n<p>启动测试</p>\n\n<pre><code>$ karma start karma.conf.js    \n</code></pre>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><a href=\"http://karma-runner.github.io/\">karma-runner.github.io</a></li>\n<li><a href=\"http://jasmine.github.io/\">jasmine.github.io</a></li>\n<li><a href=\"http://jasmine.github.io/2.0/introduction.html\">jasmine.github.io/2.0/</a></li>\n<li><a href=\"http://blog.fens.me/nodejs-karma-jasmine/\">Karma和Jasmine自动化单元测试</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405247284000,"created_by":1,"updated_at":1405247284000,"updated_by":1,"published_at":1405247284000,"published_by":1},{"id":499,"uuid":"01d4d6c3-8079-4237-88e0-947dc67e7805","title":"MEANJS 学习笔记","slug":"meanjs","markdown":"\n\n- server.js 为程序入口文件\n\n- config/config.js 为配置入口文件\n\n- config/env/all.js 配置将在所有环境(development、production、test)中生效\n\n\tconfig.db\n\tconfig.port\n\tconfig.app.title\n\tconfig.app.description\n\tconfig.app.keywords\n\t// 项目css文件路径，glob 模式匹配\n\tconfig.assets.css \n\tconfig.assets.js\n\t// 项目的 Jasmine 测试文件路径\n\tconfig.assets.tests \n\t// 依赖的第三方 css 文件路径\n\tconfig.assets.lib.css \n\tconfig.assets.lib.js\n\n- 指定环境启动应用\n\t\t\n\t// 开发环境，将使用 config/env/development.js 配置\n\t$ NODE_ENV=development grunt \t\n\t// 生产环境，将使用 config/env/production.js 配置\n\t$ NODE_ENV=production grunt\n\t// 测试环境，将使用 config/env/test.js 配置\n\t$ NODE_ENV=test grunt\n\t\t\n- 应用启动后会自动加载的文件\n\n\t// 在这些目录下创建的 model、route、strategy 等，在需要的地方可直接引用，无须手动引入\n\tapp/models\n\tapp/routes\n\tconfig/strategies\n\tpublic/modules\n\t\n<!-- more -->\n\n[官方API](http://meanjs.org/docs.html)","html":"<ul>\n<li><p>server.js 为程序入口文件</p></li>\n<li><p>config/config.js 为配置入口文件</p></li>\n<li><p>config/env/all.js 配置将在所有环境(development、production、test)中生效</p>\n\n<p>config.db\nconfig.port\nconfig.app.title\nconfig.app.description\nconfig.app.keywords\n// 项目css文件路径，glob 模式匹配\nconfig.assets.css \nconfig.assets.js\n// 项目的 Jasmine 测试文件路径\nconfig.assets.tests \n// 依赖的第三方 css 文件路径\nconfig.assets.lib.css \nconfig.assets.lib.js</p></li>\n<li><p>指定环境启动应用</p>\n\n<p>// 开发环境，将使用 config/env/development.js 配置\n$ NODE<em>ENV=development grunt <br />\n// 生产环境，将使用 config/env/production.js 配置\n$ NODE</em>ENV=production grunt\n// 测试环境，将使用 config/env/test.js 配置\n$ NODE_ENV=test grunt</p></li>\n<li><p>应用启动后会自动加载的文件</p>\n\n<p>// 在这些目录下创建的 model、route、strategy 等，在需要的地方可直接引用，无须手动引入\napp/models\napp/routes\nconfig/strategies\npublic/modules</p></li>\n</ul>\n\n<!-- more -->\n\n<p><a href=\"http://meanjs.org/docs.html\">官方API</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405247300000,"created_by":1,"updated_at":1405247300000,"updated_by":1,"published_at":1405247300000,"published_by":1},{"id":500,"uuid":"ce95cc59-1bfd-4c02-ae78-2d72252ea7a8","title":"Mac OS 下MySQL配置与乱码解决","slug":"mac-os-xia-mysqlpei-zhi-yu-luan-ma-jie-jue","markdown":"\n\n用惯了windows下xampp,打开Apache打开mysql就可以有一个本地服务器做测试了，在mac上发现：\n\n1.xampp上的MySQL开启后，在终端输入『mysql』无反应，故在MySQL官网重装了个，终端就可以操作MySQL了；\n\n2.MySQL默认端口是3306，两个MySQL是无法同时打开的，于是修改xampp中mysql的端口为3307（只要不冲突）就可以了：\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png \"QQ20130924-1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png)[\n](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png)\n\n3.初学Python，用Python连接数据库，却发现无法连接xampp中mysql的数据库，这就纳闷了，显示错误：\n\nOperationalError: (2002, \"Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\")\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png \"QQ20130924-2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png)[\n](http://www.laispace.com/?p=469)\n修改了端口还不行么？查了好久了资料都没搞懂，stackoverflow上有类似的问题，真是个神奇的地方啊，修改xampp的配置文件：[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-3.png \"QQ20130924-3\")](http://www.laispace.com/?p=469)\n\n让它能找到正确的socket,重新连接数据库，成功！\n\nPS:除此之外，还可以在连接数据库时指定一个unix_socket使程序招到正确的sock:\n\n[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n[/python]\n\n&nbsp;\n\n4.因mac默认编码不是utf-8，用python操纵mysql输出数据库的中文信息显示乱码[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png \"QQ20130927-2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png)\n\n解决办法:\n在配置文件的［client］后添加default-character-set=utf8；\n在［mysqld］后添加：\ndefault-storage-engine=INNODB\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci；\n终端mysql直接查询是不出现问题了，Python文件头也声明了utf-8编码，还是没用，只好直接在MySQLdb.connect 参数中指定编码为utf8：\n\n[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n[/python]\n\n如此一来，输出中文乱码的问题就解决啦：[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png \"QQ20130927-1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png)","html":"<p>用惯了windows下xampp,打开Apache打开mysql就可以有一个本地服务器做测试了，在mac上发现：</p>\n\n<p>1.xampp上的MySQL开启后，在终端输入『mysql』无反应，故在MySQL官网重装了个，终端就可以操作MySQL了；</p>\n\n<p>2.MySQL默认端口是3306，两个MySQL是无法同时打开的，于是修改xampp中mysql的端口为3307（只要不冲突）就可以了： <br />\n<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\" alt=\"\" title=\"QQ20130924-1\" /></a><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\">\n</a></p>\n\n<p>3.初学Python，用Python连接数据库，却发现无法连接xampp中mysql的数据库，这就纳闷了，显示错误：</p>\n\n<p>OperationalError: (2002, \"Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\")</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png\" alt=\"\" title=\"QQ20130924-2\" /></a><a href=\"http://www.laispace.com/?p=469\">\n</a>\n修改了端口还不行么？查了好久了资料都没搞懂，stackoverflow上有类似的问题，真是个神奇的地方啊，修改xampp的配置文件：<a href=\"http://www.laispace.com/?p=469\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-3.png\" alt=\"\" title=\"QQ20130924-3\" /></a></p>\n\n<p>让它能找到正确的socket,重新连接数据库，成功！</p>\n\n<p>PS:除此之外，还可以在连接数据库时指定一个unix_socket使程序招到正确的sock:</p>\n\n<p>[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;, <br />\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     unix<em>socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix</em>socket \n[/python]</p>\n\n<p>&nbsp;</p>\n\n<p>4.因mac默认编码不是utf-8，用python操纵mysql输出数据库的中文信息显示乱码<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png\" alt=\"\" title=\"QQ20130927-2\" /></a></p>\n\n<p>解决办法:\n在配置文件的［client］后添加default-character-set=utf8；\n在［mysqld］后添加：\ndefault-storage-engine=INNODB <br />\ncharacter-set-server=utf8 <br />\ncollation-server=utf8<em>general</em>ci； <br />\n终端mysql直接查询是不出现问题了，Python文件头也声明了utf-8编码，还是没用，只好直接在MySQLdb.connect 参数中指定编码为utf8：</p>\n\n<p>[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;, <br />\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix<em>socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix</em>socket \n[/python]</p>\n\n<p>如此一来，输出中文乱码的问题就解决啦：<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png\" alt=\"\" title=\"QQ20130927-1\" /></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1380054590000,"created_by":1,"updated_at":1380054590000,"updated_by":1,"published_at":1380054590000,"published_by":1},{"id":501,"uuid":"40819aba-9609-4855-89fb-c5aae82c132b","title":"Meta标签属性学习","slug":"meta","markdown":"\n\nMETA标签用来描述一个HTML网页文档的属性。\n\n一般有三个属性：http-equiv,name,scheme.\n\n1.http-equiv\n\n1.1 content-type：字符集的设定，决定读取文件的形式和编码,用法：\n\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /&gt;\n\n1.2 expires：期限，设定网页到期时间（网页到期后必须服务器重新上传），用法：\n\n用法：＜meta http-equiv=\"expires\" content=\"Mon, 03 Dec 2012 18:18:18 GMT\"＞\n\n1.3 refresh：定时重刷新到指定页面，用法：\n\n＜meta http-equiv=\"Refresh\" content=\"2\"；URL=http://www.laispace.com\"＞\n\n1.4 set-cookie：网页过期，那么存盘的cookie将被删除。，用法：\n\n＜meta http-equiv=\"Set-Cookie\" content=\"cookievalue=xxx; expires=Monday, 03-Jan-2012 18:18:18 GMT； path=/\"＞\n\n1.5 pragma:缓存模式，禁止浏览器使用本地缓存（无法脱机浏览），用法：\n\n＜meta http-equiv=\"Pragma\" content=\"no-cache\"＞\n\n1.6 window-target：显示窗口设定，用法（独立页面显示，防止别人在框架里调用自己的页面。）：\n\n＜meta http-equiv=\"Window-target\" content=\"_top\"＞\n\n1.7 page-enter/exit：网页进出动态效果，用法：\n\n＜meta http-equiv=\"Page-Enter\" content=\"revealTrans(duration=５.０, transition=２０)\"＞\n\n＜meta http-equiv=\"Page-Exit\" content=\"revealTrans(duration=５.０, transition=２０)\"＞\n\n&nbsp;\n\n2.name\n\n2.1 revisit-after：\n\n&lt;meta name=\"revisit-after\" content=\"1 days\" &gt;\n\n2.2 author：作者\n\n2.3 description：内容描述\n\n2.4 keywords：关键词，keywords的content用逗号隔开\n\n2.5 robots:机器人向导，声明需要索引的页面，content值可选all,none,index,noindex,follow,nofollow。默认是all。\n\n2.5 generator：网页采用的技术版本版本\n\n2.6 revised：修复\n\n2.7 others：其他，用法：\n\n&lt;meta NAME=\"copyright\" content=\"Copyright 2012 -laispace.com\" /&gt;\n\n&nbsp;\n\n3.scheme\n\nsome_text：定义与 http-equiv 或 name 属性相关的元信息，用法：\n\n&lt;meta scheme=\"ISBN\" name=\"identifier\" content=\"0-14-043205-1\" /&gt;\n\n&nbsp;\n\nhead中其他元素的用法：\n\n1.link:链接，用法：\n\n&lt;link href=\"URL\" rel=\"relationship\"&gt;如&lt;link href=\"xiaolai.ico\" rel=\"shortcut icon\"&gt;\n\n2.base：基链接，将网页内的相对路径改成绝对路径，用法：\n\n&lt;base href=\"http://www.laispace.com\" target=\"_blank\"&gt;\n\n&lt;base href=\"http://www.laispace.com\" target=\"_top\"&gt;\n\n&nbsp;\n\n&nbsp;\n\nMeta的使用方法技巧（以下为摘抄[转载](http://blog.sina.com.cn/s/blog_6dd5ebcb01013oqw.html)内容）：\n\nMeta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。要想网站做的更符合搜索引擎标准就必须了解meta标签，下面由Seoer惜缘于大家讲讲meta标签含义与使用方法：\n\n1、META标签的keywords\n\n写法为：&lt;meta name=\"Keywords\" content=\"信息参数\" /&gt;\n\nmeat标签的Keywords的的信息参数，代表说明网站的关键词是什么。\n\n2、META标签的Description\n\n&lt;meta name=\"Description\" content=\"信息参数\" /&gt;\n\nmeta标签的Description的信息参数，代表说明网站的主要内容，概况是什么。\n\n3、META标签的http-equiv=Content-Type content=\"text/html\n\nhttp-equiv=Content-Type代表的是HTTP的头部协议，提示浏览器网页的信息，\n\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=信息参数\" /&gt;\n\nmeta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；\n\nmeta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文；\n\nmeta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；\n\nmeta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文；\n\nmeta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；\n\nmeta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；\n\n4、META标签的generator\n\n&lt;meta name=\"generator\" content=\"信息参数\" /&gt;\n\nmeta标签的generator的信息参数，代表说明网站的采用的什么软件制作。\n\n5、META标签的author\n\n&lt;meta name=\"author\" content=\"信息参数\"&gt;\n\nmeta标签的author的信息参数，代表说明网页版权作者信息。\n\n6、META标签的http-equiv=\"Refresh\"\n\n&lt;Meta http-equiv=\"Refresh\" Content=\"时间; Url=网址参数\"&gt;\n\nmeta标签的Refresh代表多少时间网页自动刷新，加上Url中的网址参数就代表，多长时间自动链接其他网址。\n\n7、META标签的HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"\n\n&lt;META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"&gt;代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访\n\n问者将无法脱机浏览。\n\n8、META标签的COPYRIGHT\n\n&lt;META NAME=\"COPYRIGHT\" CONTENT=\"信息参数\"&gt;\n\nmeta标签的COPYRIGHT的信息参数，代表说明网站版权信息。\n\n9、META标签的http-equiv=\"imagetoolbar\"\n\n&lt;meta http-equiv=\"imagetoolbar\" content=\"false\" /&gt;\n\n指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。\n\n10、META标签的Content-Script-Type\n\n&lt;Meta http-equiv=\"Content-Script-Type\" Content=\"text/javascript\"&gt;\n\nW3C网页规范，指明页面中脚本的类型。\n\n11、META标签的revisit-after\n\n&lt;META name=\"revisit-after\" CONTENT=\"7 days\" &gt;\n\nrevisit-after代表网站重访,7 days代表7天，依此类推。\n\n12、META标签的Robots\n\n&lt;meta name=\"Robots\" contect=\"信息参数\"&gt;\n\nRobots代表告诉搜索引擎机器人抓取哪些页面\n\n其中的属性说明如下：\n\n信息参数为all：文件将被检索，且页面上的链接可以被查询；\n\n信息参数为none：文件将不被检索，且页面上的链接不可以被查询；\n\n信息参数为index：文件将被检索；\n\n信息参数为follow：页面上的链接可以被查询；\n\n信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；\n\n信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；\n\n2、英文前缀meta-前缀 pref.\n\n1.表示\"变化\",\"变换\"\n\n2.表示\"继\",\"在...之后\"\n\n3.表示\"超越\"\n\n4.表示\"在...之间\",\"介于\"\n\n例词：metaphysics\n\nn.\n\n1.形而上学；玄学\n\n2.深奥莫测的推理；空谈；空头理论\n\n来自希腊语，最初来源是作为亚里士多德所著《形而上学》一书的书名，意指“第一哲学”，也就是以“作为存在的存在（being as being）”为研究对象的形而上学，其意义为“在具体科学之后”\n\n3.模板meta语言\n\n模板meta语言由GDMO提出，采用类似于BNF的语法，因此与ASN.1相似，只要了解了它与ASN.1的不同之处就可以在ASN.1有关知识的基础上正确使用。因此，这里只将有关要点进行如下说明：\n\n1.分号（；）用于终止结构和中止模板\n\n2.空格，空行，注释和行尾只起分割符的作用。在需要标志一个元素结束，另一个元素开始时使用。\n\n3.注释由双连字符（--）引导，在行尾或遇到另外的双连字符终止。可以出现在任何分隔区中，但不能出现在结构名或模板名所包含的空格之间。\n\n4.方括号（[ ]）用于指出模板定义中的可选元素。\n\n5.右圆括号中的星号（*）指出模板定义中的可选元素。\n\n6.选择对象由竖线（|）分割。这个符号旨在支持件的定义中使用。\n\n7.将由用户确定的字符串扩在尖括号(&lt;&gt;)中。\n\n8.附件用一个引用标号，后接符号-&gt;&gt;,后接一个由文本字符串和符号构成的语法定义组成。\n\n9.分隔串出现在模板定义中自然语言文本或形式说明文本之中。他们由任意的字符串组成，字符串可以由以下任意一个分隔符引导和终止。分隔符是“$ % ^ &amp; * ` ' ~ ? @ \\”。如果分隔串由某个分隔符开始，则这个分隔串直到再次遇到相同的分隔符才结束。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","html":"<p>META标签用来描述一个HTML网页文档的属性。</p>\n\n<p>一般有三个属性：http-equiv,name,scheme.</p>\n\n<p>1.http-equiv</p>\n\n<p>1.1 content-type：字符集的设定，决定读取文件的形式和编码,用法：</p>\n\n<p>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /&gt;</p>\n\n<p>1.2 expires：期限，设定网页到期时间（网页到期后必须服务器重新上传），用法：</p>\n\n<p>用法：＜meta http-equiv=\"expires\" content=\"Mon, 03 Dec 2012 18:18:18 GMT\"＞</p>\n\n<p>1.3 refresh：定时重刷新到指定页面，用法：</p>\n\n<p>＜meta http-equiv=\"Refresh\" content=\"2\"；URL=<a href=\"http://www.laispace.com\">http://www.laispace.com</a>\"＞</p>\n\n<p>1.4 set-cookie：网页过期，那么存盘的cookie将被删除。，用法：</p>\n\n<p>＜meta http-equiv=\"Set-Cookie\" content=\"cookievalue=xxx; expires=Monday, 03-Jan-2012 18:18:18 GMT； path=/\"＞</p>\n\n<p>1.5 pragma:缓存模式，禁止浏览器使用本地缓存（无法脱机浏览），用法：</p>\n\n<p>＜meta http-equiv=\"Pragma\" content=\"no-cache\"＞</p>\n\n<p>1.6 window-target：显示窗口设定，用法（独立页面显示，防止别人在框架里调用自己的页面。）：</p>\n\n<p>＜meta http-equiv=\"Window-target\" content=\"_top\"＞</p>\n\n<p>1.7 page-enter/exit：网页进出动态效果，用法：</p>\n\n<p>＜meta http-equiv=\"Page-Enter\" content=\"revealTrans(duration=５.０, transition=２０)\"＞</p>\n\n<p>＜meta http-equiv=\"Page-Exit\" content=\"revealTrans(duration=５.０, transition=２０)\"＞</p>\n\n<p>&nbsp;</p>\n\n<p>2.name</p>\n\n<p>2.1 revisit-after：</p>\n\n<p>&lt;meta name=\"revisit-after\" content=\"1 days\" &gt;</p>\n\n<p>2.2 author：作者</p>\n\n<p>2.3 description：内容描述</p>\n\n<p>2.4 keywords：关键词，keywords的content用逗号隔开</p>\n\n<p>2.5 robots:机器人向导，声明需要索引的页面，content值可选all,none,index,noindex,follow,nofollow。默认是all。</p>\n\n<p>2.5 generator：网页采用的技术版本版本</p>\n\n<p>2.6 revised：修复</p>\n\n<p>2.7 others：其他，用法：</p>\n\n<p>&lt;meta NAME=\"copyright\" content=\"Copyright 2012 -laispace.com\" /&gt;</p>\n\n<p>&nbsp;</p>\n\n<p>3.scheme</p>\n\n<p>some_text：定义与 http-equiv 或 name 属性相关的元信息，用法：</p>\n\n<p>&lt;meta scheme=\"ISBN\" name=\"identifier\" content=\"0-14-043205-1\" /&gt;</p>\n\n<p>&nbsp;</p>\n\n<p>head中其他元素的用法：</p>\n\n<p>1.link:链接，用法：</p>\n\n<p>&lt;link href=\"URL\" rel=\"relationship\"&gt;如&lt;link href=\"xiaolai.ico\" rel=\"shortcut icon\"&gt;</p>\n\n<p>2.base：基链接，将网页内的相对路径改成绝对路径，用法：</p>\n\n<p>&lt;base href=\"<a href=\"http://www.laispace.com\">http://www.laispace.com</a>\" target=\"_blank\"&gt;</p>\n\n<p>&lt;base href=\"<a href=\"http://www.laispace.com\">http://www.laispace.com</a>\" target=\"_top\"&gt;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>Meta的使用方法技巧（以下为摘抄<a href=\"http://blog.sina.com.cn/s/blog_6dd5ebcb01013oqw.html\">转载</a>内容）：</p>\n\n<p>Meta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。要想网站做的更符合搜索引擎标准就必须了解meta标签，下面由Seoer惜缘于大家讲讲meta标签含义与使用方法：</p>\n\n<p>1、META标签的keywords</p>\n\n<p>写法为：&lt;meta name=\"Keywords\" content=\"信息参数\" /&gt;</p>\n\n<p>meat标签的Keywords的的信息参数，代表说明网站的关键词是什么。</p>\n\n<p>2、META标签的Description</p>\n\n<p>&lt;meta name=\"Description\" content=\"信息参数\" /&gt;</p>\n\n<p>meta标签的Description的信息参数，代表说明网站的主要内容，概况是什么。</p>\n\n<p>3、META标签的http-equiv=Content-Type content=\"text/html</p>\n\n<p>http-equiv=Content-Type代表的是HTTP的头部协议，提示浏览器网页的信息，</p>\n\n<p>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=信息参数\" /&gt;</p>\n\n<p>meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；</p>\n\n<p>meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文；</p>\n\n<p>meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；</p>\n\n<p>meta标签的charset的信息参数如ks<em>c</em>5601时，代表说明网站是采用的编码是韩文；</p>\n\n<p>meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；</p>\n\n<p>meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；</p>\n\n<p>4、META标签的generator</p>\n\n<p>&lt;meta name=\"generator\" content=\"信息参数\" /&gt;</p>\n\n<p>meta标签的generator的信息参数，代表说明网站的采用的什么软件制作。</p>\n\n<p>5、META标签的author</p>\n\n<p>&lt;meta name=\"author\" content=\"信息参数\"&gt;</p>\n\n<p>meta标签的author的信息参数，代表说明网页版权作者信息。</p>\n\n<p>6、META标签的http-equiv=\"Refresh\"</p>\n\n<p>&lt;Meta http-equiv=\"Refresh\" Content=\"时间; Url=网址参数\"&gt;</p>\n\n<p>meta标签的Refresh代表多少时间网页自动刷新，加上Url中的网址参数就代表，多长时间自动链接其他网址。</p>\n\n<p>7、META标签的HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"</p>\n\n<p>&lt;META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"&gt;代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访</p>\n\n<p>问者将无法脱机浏览。</p>\n\n<p>8、META标签的COPYRIGHT</p>\n\n<p>&lt;META NAME=\"COPYRIGHT\" CONTENT=\"信息参数\"&gt;</p>\n\n<p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。</p>\n\n<p>9、META标签的http-equiv=\"imagetoolbar\"</p>\n\n<p>&lt;meta http-equiv=\"imagetoolbar\" content=\"false\" /&gt;</p>\n\n<p>指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。</p>\n\n<p>10、META标签的Content-Script-Type</p>\n\n<p>&lt;Meta http-equiv=\"Content-Script-Type\" Content=\"text/javascript\"&gt;</p>\n\n<p>W3C网页规范，指明页面中脚本的类型。</p>\n\n<p>11、META标签的revisit-after</p>\n\n<p>&lt;META name=\"revisit-after\" CONTENT=\"7 days\" &gt;</p>\n\n<p>revisit-after代表网站重访,7 days代表7天，依此类推。</p>\n\n<p>12、META标签的Robots</p>\n\n<p>&lt;meta name=\"Robots\" contect=\"信息参数\"&gt;</p>\n\n<p>Robots代表告诉搜索引擎机器人抓取哪些页面</p>\n\n<p>其中的属性说明如下：</p>\n\n<p>信息参数为all：文件将被检索，且页面上的链接可以被查询；</p>\n\n<p>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；</p>\n\n<p>信息参数为index：文件将被检索；</p>\n\n<p>信息参数为follow：页面上的链接可以被查询；</p>\n\n<p>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；</p>\n\n<p>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；</p>\n\n<p>2、英文前缀meta-前缀 pref.</p>\n\n<p>1.表示\"变化\",\"变换\"</p>\n\n<p>2.表示\"继\",\"在...之后\"</p>\n\n<p>3.表示\"超越\"</p>\n\n<p>4.表示\"在...之间\",\"介于\"</p>\n\n<p>例词：metaphysics</p>\n\n<p>n.</p>\n\n<p>1.形而上学；玄学</p>\n\n<p>2.深奥莫测的推理；空谈；空头理论</p>\n\n<p>来自希腊语，最初来源是作为亚里士多德所著《形而上学》一书的书名，意指“第一哲学”，也就是以“作为存在的存在（being as being）”为研究对象的形而上学，其意义为“在具体科学之后”</p>\n\n<p>3.模板meta语言</p>\n\n<p>模板meta语言由GDMO提出，采用类似于BNF的语法，因此与ASN.1相似，只要了解了它与ASN.1的不同之处就可以在ASN.1有关知识的基础上正确使用。因此，这里只将有关要点进行如下说明：</p>\n\n<p>1.分号（；）用于终止结构和中止模板</p>\n\n<p>2.空格，空行，注释和行尾只起分割符的作用。在需要标志一个元素结束，另一个元素开始时使用。</p>\n\n<p>3.注释由双连字符（--）引导，在行尾或遇到另外的双连字符终止。可以出现在任何分隔区中，但不能出现在结构名或模板名所包含的空格之间。</p>\n\n<p>4.方括号（[ ]）用于指出模板定义中的可选元素。</p>\n\n<p>5.右圆括号中的星号（*）指出模板定义中的可选元素。</p>\n\n<p>6.选择对象由竖线（|）分割。这个符号旨在支持件的定义中使用。</p>\n\n<p>7.将由用户确定的字符串扩在尖括号(&lt;&gt;)中。</p>\n\n<p>8.附件用一个引用标号，后接符号-&gt;&gt;,后接一个由文本字符串和符号构成的语法定义组成。</p>\n\n<p>9.分隔串出现在模板定义中自然语言文本或形式说明文本之中。他们由任意的字符串组成，字符串可以由以下任意一个分隔符引导和终止。分隔符是“$ % ^ &amp; * ` ' ~ ? @ \\”。如果分隔串由某个分隔符开始，则这个分隔串直到再次遇到相同的分隔符才结束。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1354574626000,"created_by":1,"updated_at":1354574626000,"updated_by":1,"published_at":1354574626000,"published_by":1},{"id":502,"uuid":"d83020a3-ed21-43f3-8215-a050e9a763af","title":"MongoDB入门-CRUD简单操作","slug":"mongodb","markdown":"\n\n按着 [mongodb官网](http://www.mongodb.org/) 教程安装好后，练习一下CRUD（增加、读取、更新、删除）操作。\n\n// 我把数据库保存在了 ~/nosql/mongodb下\n\n# 第一步-启动mongodb：\n\n$ cd nosql/mongodb/bin\n\n$ sudo ./mongod\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png \"Screen Shot 2014-03-09 at 1.47.04 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png)\n\n这样，mongodb就启动了，接着是创建数据库。进行简单的CRUD。\n\n# 第二步-启动 mongo shell\n\n$ ./mongo\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png \"Screen Shot 2014-03-09 at 1.51.09 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png)\n\n# 第三步-创建数据库laispace\n\n// $ help\n\n// 显示已有的数据库\n\n$ show dbs\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png \"Screen Shot 2014-03-09 at 1.55.25 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png)\n\n// 切换数据库，这里用了新的数据库laispace，则自动创建\n\n$ use laispace\n\n// 注意这时候没有插入数据，但实际上已经创建了\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png \"Screen Shot 2014-03-09 at 1.57.12 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png)\n\n# 第四步-向数据库中添加数据\n\n// db即表示laispace数据库，先建立users文档并插入一个新用户\n\n$ var newUser = { \"name\": \"赖小赖\", \"email\": \"example@gmail.com\"};\n\n$ db.users.insert(newUser);\n\n// 继续插入\n\n$ var anotherNewUser = { \"name\": \"小清\", \"email\": \"123456@gmail.com\"};\n\n$ db.users.insert(anotherNewUser);\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png \"Screen Shot 2014-03-09 at 2.03.43 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png)\n<div></div>\n<div># 第五步-查找数据</div>\n<div>// 查看laispace是否创建</div>\n<div>$ show dbs</div>\n<div>// 切换到laispace</div>\n<div>$ use laispace</div>\n<div>// 查看laispace下有哪些文档</div>\n<div>$ show collections</div>\n<div>// 查看laispace.users下有哪些数据</div>\n<div>$ db.users.find(); // 或 $ db.getCollection('users').find();</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png \"Screen Shot 2014-03-09 at 2.07.18 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png)</div>\n<div>// 查看其中一个</div>\n<div>$ db.users.findOne({\"name\": \"小清\"});</div>\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png \"Screen Shot 2014-03-09 at 2.11.10 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png)\n\n# 第六步-更新数据\n\nvar xiaoqing = {\n\n\"name\": \"小清\",\n\"email\": \"abcd@laispace.com\",\n\"password\": \"myLatestPassword\"\n};\n\n$ db.users.update({\"name\": \"小清\"}, xiaoqing);\n\n$ db.users.findOne({\"name\": \"小清\"});\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png \"Screen Shot 2014-03-09 at 2.15.05 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png)\n\n# 第七步-删除数据\n\n// 看看已有的数据\n\n$ db.users.find();\n\n$ db.users.find({\"name\": \"小清\"});\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png \"Screen Shot 2014-03-09 at 2.16.37 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png)\n\n// 删除 小清\n\n$ db.users.remove({\"name\": \"小清\"});\n\n$ db.users.findOne({\"name\": \"小清\"});\n\n$ db.users.find();\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png \"Screen Shot 2014-03-09 at 2.18.37 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png)\n\n// 删除全部\n\n$ db.users.remove();\n$ db.users.find()\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png \"Screen Shot 2014-03-09 at 2.20.42 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png)\n\n# 第八步-继续学习\n\n$ console.log(\"待补充！\");\n<!--more-->\n\n# 其他笔记\n\n- mongodb 默认占用了系统的27017端口，而打开 http://localhost:28017 则可以进入管理界面：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM-1024x821.png \"Screen Shot 2014-03-09 at 3.18.30 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM.png)\n\n# 修改器\n\n[javascript]\n\n// 原子修改器\ndb.users.update({&quot;name&quot;: &quot;小清&quot;}, {\n&quot;$inc&quot;: {\n&quot;age&quot;: 1 // 年龄加一\n}\n})\n&quot;$inc&quot; // 增加\n&quot;$set&quot; // 修改，无则创建\n&quot;$unset&quot; // 删除\n\n// 数组修改器\n// &quot;$push&quot; // 添加\n// &quot;$pop&quot;: {key: 1} // 数组末删除一个元素\n// &quot;$pop&quot;: {key: -1} // 数组头删除一个元素\n// &quot;$pull&quot;: {&quot;foo&quot;: &quot;bar&quot;} // 删除数组foo中的bar\n\n// 函数 update(query , obj , upsert , multi) 参数说明：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing);\n// 若指定第三个参数upsert为true,即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true);\n// 则表示：\n// - 若找到匹配文档，正常更新；\n// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n// 若指定第四个参数multi为true, 即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true, true);\n// 则表示：\n// 匹配到的所有文档都得到更新（为false则只匹配第一个）。\n\n[/javascript]\n\n&nbsp;\n\n# 查询操作\n\n[javascript]\n\n// 查找全部，缺省参数{} 即 db.users.find({});\n$ db.users.find();\n// 指定范围查找\n$ db.users.find({&quot;name&quot;: &quot;小清&quot;, &quot;email&quot;: &quot;abcd@laispace.com&quot;});\n// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n$ db.users.find({}, {&quot;name&quot;: 1, &quot;email&quot;: 1});\n// 查找全部，但不要返回指定的键，0表示false\n$ db.users.find({}, {&quot;password&quot;: 0});\n// 大于小于\n$ db.users.find({&quot;age&quot;: {&quot;$gte&quot;: 18, &quot;$lte&quot;: 30}}) // 大于等于18小于等于30岁\ndb.users.find({&quot;registered&quot;: {&quot;$lt&quot;: new Date(&quot;01/01/2014&quot;)}}); // 在2014/01/01前注册\n// 不等于\n$ db.users.find({&quot;name&quot;: {&quot;$ne&quot;: &quot;小清&quot;}}); // 用户名不是『小清』\n// 包含于\ndb.users.find({&quot;name&quot;: {&quot;$in&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名是『小清』或『小赖』\n// 不包含于\ndb.users.find({&quot;name&quot;: {&quot;$nin&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名不是『小清』和『小赖』\n// 或\ndb.users.find({&quot;$or&quot;: [{&quot;name&quot;: &quot;小清&quot;}, {&quot;email&quot;: &quot;123@example.com&quot;}]}); // 用户名是『小清』或 邮箱是 &quot;123@example.com&quot;\n\n[/javascript]","html":"<p>按着 <a href=\"http://www.mongodb.org/\">mongodb官网</a> 教程安装好后，练习一下CRUD（增加、读取、更新、删除）操作。</p>\n\n<p>// 我把数据库保存在了 ~/nosql/mongodb下</p>\n\n<h1 id=\"mongodb\">第一步-启动mongodb：</h1>\n\n<p>$ cd nosql/mongodb/bin</p>\n\n<p>$ sudo ./mongod</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.47.04 PM\" /></a></p>\n\n<p>这样，mongodb就启动了，接着是创建数据库。进行简单的CRUD。</p>\n\n<h1 id=\"mongoshell\">第二步-启动 mongo shell</h1>\n\n<p>$ ./mongo</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.51.09 PM\" /></a></p>\n\n<h1 id=\"laispace\">第三步-创建数据库laispace</h1>\n\n<p>// $ help</p>\n\n<p>// 显示已有的数据库</p>\n\n<p>$ show dbs</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.55.25 PM\" /></a></p>\n\n<p>// 切换数据库，这里用了新的数据库laispace，则自动创建</p>\n\n<p>$ use laispace</p>\n\n<p>// 注意这时候没有插入数据，但实际上已经创建了</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.57.12 PM\" /></a></p>\n\n<h1 id=\"\">第四步-向数据库中添加数据</h1>\n\n<p>// db即表示laispace数据库，先建立users文档并插入一个新用户</p>\n\n<p>$ var newUser = { \"name\": \"赖小赖\", \"email\": \"example@gmail.com\"};</p>\n\n<p>$ db.users.insert(newUser);</p>\n\n<p>// 继续插入</p>\n\n<p>$ var anotherNewUser = { \"name\": \"小清\", \"email\": \"123456@gmail.com\"};</p>\n\n<p>$ db.users.insert(anotherNewUser);</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.03.43 PM\" /></a></p>\n\n<div></div>  \n\n<div># 第五步-查找数据</div>  \n\n<div>// 查看laispace是否创建</div>  \n\n<div>$ show dbs</div>  \n\n<div>// 切换到laispace</div>  \n\n<div>$ use laispace</div>  \n\n<div>// 查看laispace下有哪些文档</div>  \n\n<div>$ show collections</div>  \n\n<div>// 查看laispace.users下有哪些数据</div>  \n\n<div>$ db.users.find(); // 或 $ db.getCollection('users').find();</div>  \n\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png \"Screen Shot 2014-03-09 at 2.07.18 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png)</div>  \n\n<div>// 查看其中一个</div>  \n\n<div>$ db.users.findOne({\"name\": \"小清\"});</div>  \n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.11.10 PM\" /></a></p>\n\n<h1 id=\"\">第六步-更新数据</h1>\n\n<p>var xiaoqing = {</p>\n\n<p>\"name\": \"小清\",\n\"email\": \"abcd@laispace.com\",\n\"password\": \"myLatestPassword\"\n};</p>\n\n<p>$ db.users.update({\"name\": \"小清\"}, xiaoqing);</p>\n\n<p>$ db.users.findOne({\"name\": \"小清\"});</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.15.05 PM\" /></a></p>\n\n<h1 id=\"\">第七步-删除数据</h1>\n\n<p>// 看看已有的数据</p>\n\n<p>$ db.users.find();</p>\n\n<p>$ db.users.find({\"name\": \"小清\"});</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.16.37 PM\" /></a></p>\n\n<p>// 删除 小清</p>\n\n<p>$ db.users.remove({\"name\": \"小清\"});</p>\n\n<p>$ db.users.findOne({\"name\": \"小清\"});</p>\n\n<p>$ db.users.find();</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.18.37 PM\" /></a></p>\n\n<p>// 删除全部</p>\n\n<p>$ db.users.remove();\n$ db.users.find()</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.20.42 PM\" /></a></p>\n\n<h1 id=\"\">第八步-继续学习</h1>\n\n$ console.log(\"待补充！\");\n<!--more-->\n\n<h1 id=\"\">其他笔记</h1>\n\n<ul>\n<li>mongodb 默认占用了系统的27017端口，而打开 <a href=\"http://localhost:28017\">http://localhost:28017</a> 则可以进入管理界面：</li>\n</ul>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM-1024x821.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 3.18.30 PM\" /></a></p>\n\n<h1 id=\"\">修改器</h1>\n\n<p>[javascript]</p>\n\n<p>// 原子修改器\ndb.users.update({&quot;name&quot;: &quot;小清&quot;}, { <br />\n&quot;$inc&quot;: {\n&quot;age&quot;: 1 // 年龄加一\n}\n})\n&quot;$inc&quot; // 增加\n&quot;$set&quot; // 修改，无则创建\n&quot;$unset&quot; // 删除</p>\n\n<p>// 数组修改器\n// &quot;$push&quot; // 添加\n// &quot;$pop&quot;: {key: 1} // 数组末删除一个元素\n// &quot;$pop&quot;: {key: -1} // 数组头删除一个元素\n// &quot;$pull&quot;: {&quot;foo&quot;: &quot;bar&quot;} // 删除数组foo中的bar</p>\n\n<p>// 函数 update(query , obj , upsert , multi) 参数说明：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing);\n// 若指定第三个参数upsert为true,即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true);\n// 则表示：\n// - 若找到匹配文档，正常更新；\n// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n// 若指定第四个参数multi为true, 即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true, true);\n// 则表示：\n// 匹配到的所有文档都得到更新（为false则只匹配第一个）。</p>\n\n<p>[/javascript]</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"\">查询操作</h1>\n\n<p>[javascript]</p>\n\n<p>// 查找全部，缺省参数{} 即 db.users.find({});\n$ db.users.find();\n// 指定范围查找\n$ db.users.find({&quot;name&quot;: &quot;小清&quot;, &quot;email&quot;: &quot;abcd@laispace.com&quot;});\n// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n$ db.users.find({}, {&quot;name&quot;: 1, &quot;email&quot;: 1});\n// 查找全部，但不要返回指定的键，0表示false\n$ db.users.find({}, {&quot;password&quot;: 0});\n// 大于小于\n$ db.users.find({&quot;age&quot;: {&quot;$gte&quot;: 18, &quot;$lte&quot;: 30}}) // 大于等于18小于等于30岁\ndb.users.find({&quot;registered&quot;: {&quot;$lt&quot;: new Date(&quot;01/01/2014&quot;)}}); // 在2014/01/01前注册 <br />\n// 不等于\n$ db.users.find({&quot;name&quot;: {&quot;$ne&quot;: &quot;小清&quot;}}); // 用户名不是『小清』\n// 包含于\ndb.users.find({&quot;name&quot;: {&quot;$in&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名是『小清』或『小赖』 <br />\n// 不包含于\ndb.users.find({&quot;name&quot;: {&quot;$nin&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名不是『小清』和『小赖』 <br />\n// 或\ndb.users.find({&quot;$or&quot;: [{&quot;name&quot;: &quot;小清&quot;}, {&quot;email&quot;: &quot;123@example.com&quot;}]}); // 用户名是『小清』或 邮箱是 &quot;123@example.com&quot;</p>\n\n<p>[/javascript]</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394374930000,"created_by":1,"updated_at":1394374930000,"updated_by":1,"published_at":1394374930000,"published_by":1},{"id":503,"uuid":"26e7774a-1985-4a2f-a529-af99a78b2b8d","title":"NODE-写一个socket.io聊天室","slug":"node-socket-chat-app","markdown":"\n\n前几天接触了WebSocket，感觉到了socket通信的强大，见《[HTML5-WebSocket API 学习](http://www.laispace.com/?p=532)》。\n\n小赖决定自己动手写一个基于nodejs+express+socket.io的聊天室应用，用来做node入门的小项目吧。\n\n项目地址戳[这里](https://github.com/laispace/laiChat)。\n\n今天实现的部分是：\n\n- 客户端与服务器通信\n\n- 多个客户端同时通信\n\n- 保存聊天记录和在线用户\n\n安装方法：\n\n1.  下载到本地，安装需要的模块：$ npm install\n2.  打开服务器：$ node app.js\n3.  打开多个浏览器页面，分别输入昵称\n4.  可以开始聊天啦！\n这算是我试水学习node的第一个项目，代码托管到github上，慢慢捣鼓出一些东西来！","html":"<p>前几天接触了WebSocket，感觉到了socket通信的强大，见《<a href=\"http://www.laispace.com/?p=532\">HTML5-WebSocket API 学习</a>》。</p>\n\n<p>小赖决定自己动手写一个基于nodejs+express+socket.io的聊天室应用，用来做node入门的小项目吧。</p>\n\n<p>项目地址戳<a href=\"https://github.com/laispace/laiChat\">这里</a>。</p>\n\n<p>今天实现的部分是：</p>\n\n<ul>\n<li><p>客户端与服务器通信</p></li>\n<li><p>多个客户端同时通信</p></li>\n<li><p>保存聊天记录和在线用户</p></li>\n</ul>\n\n<p>安装方法：</p>\n\n<ol>\n<li>下载到本地，安装需要的模块：$ npm install  </li>\n<li>打开服务器：$ node app.js  </li>\n<li>打开多个浏览器页面，分别输入昵称  </li>\n<li>可以开始聊天啦！ <br />\n这算是我试水学习node的第一个项目，代码托管到github上，慢慢捣鼓出一些东西来！</li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1386011811000,"created_by":1,"updated_at":1386011811000,"updated_by":1,"published_at":1386011811000,"published_by":1},{"id":504,"uuid":"4b3b9ddf-a4b4-400c-85e5-b125f324bad3","title":"NODE-调试方法","slug":"node-debug-tips","markdown":"\n\nNODE核心自带的STDIO模块，就是类似浏览器端的console.*()系列方法，可像浏览器端调试代码一样，简单对代码进行调试：\n\n# 输出普通信息：\nconsole.log() 在控制台输出信息，可用来记录一个函数是否执行、函数执行时某些变量的值\n\n# 输出错误信息：\nconsole.error() 输出错误信息，常配合try catch语句使用\n\n# 判断代码块的性能：\nconsole.time(‘mytime')和console.timeEnd(‘mytime’)会输出代码块执行的时间\n\n# 设置断点：\ndebugger; 遇到这句断点时，代码都会中止执行，按play可继续代码执行\n\n# 安装node-inspector调试器\n$ npm install -g node-inspector\n使用node-inspector 对nodejs代码进行调试,需要环境：webkit内核浏览器\n\n&nbsp;\n\n[javascript]\n // file t6.js\n var foo = function(){\n     var a = 3, b = 5;\n     var bar = function(){\n         var b = 7, c = 11;\n         a += b + c;\n     }\n     bar();\n }\n foo();\n\n[/javascript]\n\n<!-- more -->\n\n\n写好以上代码后，开始调试\n$ node --debug-brk t6.js\n\n控制台显示对5858端口进行了监听：\n\n![](http://laispace.u.qiniudn.com/NODE-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%951.png)\n然后启动node inspector\n$ node-inspector\n\n启动后会提示访问http://127.0.0.1:8080/debug?port=5858进行调试\n开后通过单击行号来设置/移除断点，可依次按play按钮并观察Scope Variables下的变量值的变化来理解代码的执行过程\n\n总结：使用inspector 可用来按部查询代码引用的文件和模块，让代码具备交互性","html":"<p>NODE核心自带的STDIO模块，就是类似浏览器端的console.*()系列方法，可像浏览器端调试代码一样，简单对代码进行调试：</p>\n\n<h1 id=\"\">输出普通信息：</h1>\n\n<p>console.log() 在控制台输出信息，可用来记录一个函数是否执行、函数执行时某些变量的值</p>\n\n<h1 id=\"\">输出错误信息：</h1>\n\n<p>console.error() 输出错误信息，常配合try catch语句使用</p>\n\n<h1 id=\"\">判断代码块的性能：</h1>\n\n<p>console.time(‘mytime')和console.timeEnd(‘mytime’)会输出代码块执行的时间</p>\n\n<h1 id=\"\">设置断点：</h1>\n\n<p>debugger; 遇到这句断点时，代码都会中止执行，按play可继续代码执行</p>\n\n<h1 id=\"nodeinspector\">安装node-inspector调试器</h1>\n\n<p>$ npm install -g node-inspector\n使用node-inspector 对nodejs代码进行调试,需要环境：webkit内核浏览器</p>\n\n<p>&nbsp;</p>\n\n<p>[javascript]\n // file t6.js\n var foo = function(){\n     var a = 3, b = 5;\n     var bar = function(){\n         var b = 7, c = 11;\n         a += b + c;\n     }\n     bar();\n }\n foo();</p>\n\n<p>[/javascript]</p>\n\n<!-- more -->\n\n<p>写好以上代码后，开始调试\n$ node --debug-brk t6.js</p>\n\n<p>控制台显示对5858端口进行了监听：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/NODE-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%951.png\" alt=\"\" />\n然后启动node inspector\n$ node-inspector</p>\n\n<p>启动后会提示访问<a href=\"http://127.0.0.1:8080/debug?port=5858进行调试\">http://127.0.0.1:8080/debug?port=5858进行调试</a>\n开后通过单击行号来设置/移除断点，可依次按play按钮并观察Scope Variables下的变量值的变化来理解代码的执行过程</p>\n\n<p>总结：使用inspector 可用来按部查询代码引用的文件和模块，让代码具备交互性</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1385821754000,"created_by":1,"updated_at":1385821754000,"updated_by":1,"published_at":1385821754000,"published_by":1},{"id":505,"uuid":"dc189bd2-14c7-42fd-94d9-02998c0bba2a","title":"NODE入门-一些常用的DNS模块","slug":"node-dns-modules","markdown":"\n\n记录一些Modules的简单用法，方便快速查阅。\n\n- DNS 解析模块\n\n[javascript]\n// 解析DNS\nvar dns = require('dns');\nvar href = 'www.laispace.com';\nvar type = 'A';\n// href 待解析的域名字符串, type 表示记录类型的字符串(A-地址解析/CNAME-别名解析/MX-邮件域名解析/SRV-服务记录等);\ndns.resolve(href, type, function (err, result) {\n if (err) {\n throw err;\n }\n console.log('DNS解析结果是：', result);\n})\n[/javascript]\n\n解析结果：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png \"Screen Shot 2014-03-08 at 9.04.05 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png)\n\n除resolve()方法外，还有lookup()、resolve4()、resolve6()。resolveMx() 等其他方法见：[DNS模块官方文档](http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback)\n\n<!-- more -->\n\n- Crypto 加密模块\n\n[javascript]\n\n// 安装Node时保证添加了 OpenSSL 支持\n\nvar crypto = require('crypto');\n\n// 创建 hash 对象实例, 传入 md5/sha1/sha256/sha512/ripemd160\nvar md5 = crypto.createHash('md5');\n\nvar password = 'helloXiaoLai';\n\nconsole.log('输入的明文是：', password);\n\n// 生成hash\nmd5.update('myPassword');\n// 添加数据更新hash\nmd5.update('laispace.com');\n// 生成密钥, 16进制显示\npassword = md5.digest('hex');\nconsole.log('输出的密文是：', password);\n\n[/javascript]\n\n加密结果：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png \"Screen Shot 2014-03-08 at 9.23.22 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png)\n\n除hashing加密外，还有HMAC加密、公钥加密等其他方法见：[Crypto模块官方文档](http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm)\n\n- Process 全局变量\n\n[javascript]\n&lt;span style=&quot;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;console.log('版本号是：', process.version);&lt;/span&gt;&lt;/pre&gt;\nconsole.log('运行平台是：', process.platform);\n\nconsole.log('当前进程已运行的时间：', process.uptime());\n\n// 捕获进程信号量\n// 输入\nconsole.log('输入你的姓名:');\n// 激活进程输入\nprocess.stdin.resume();\n// 设置编码\nprocess.stdin.setEncoding('utf8');\nvar body = '';\n// 监听\nprocess.stdin.on('data', function (chunk) {\n body += chunk;\n // process.stdout.write('数据传输中...' + chunk);\n});\nprocess.stdin.on('end', function () {\n process.stdout.write('你好，' + body);\n});\n\n// 监听\nprocess.on('SIGINT', function () {\n console.log('捕获到SIGINT事件，按 ctrl+D 退出');\n})\n\n// 监听进程退出\nprocess.on('exit', function () {\n console.log('监听到进程退出');\n})\n&lt;pre&gt;[/javascript]\n\n监听结果：\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png \"Screen Shot 2014-03-08 at 9.58.58 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png)\n\n更多方法见：[Process 进程](http://nodejs.org/api/process.html#process_process)","html":"<p>记录一些Modules的简单用法，方便快速查阅。</p>\n\n<ul>\n<li>DNS 解析模块</li>\n</ul>\n\n<p>[javascript]\n// 解析DNS\nvar dns = require('dns'); <br />\nvar href = 'www.laispace.com'; <br />\nvar type = 'A'; <br />\n// href 待解析的域名字符串, type 表示记录类型的字符串(A-地址解析/CNAME-别名解析/MX-邮件域名解析/SRV-服务记录等);\ndns.resolve(href, type, function (err, result) { <br />\n if (err) {\n throw err;\n }\n console.log('DNS解析结果是：', result);\n})\n[/javascript]</p>\n\n<p>解析结果：</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.04.05 PM\" /></a></p>\n\n<p>除resolve()方法外，还有lookup()、resolve4()、resolve6()。resolveMx() 等其他方法见：<a href=\"http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback\">DNS模块官方文档</a></p>\n\n<!-- more -->\n\n<ul>\n<li>Crypto 加密模块</li>\n</ul>\n\n<p>[javascript]</p>\n\n<p>// 安装Node时保证添加了 OpenSSL 支持</p>\n\n<p>var crypto = require('crypto');</p>\n\n<p>// 创建 hash 对象实例, 传入 md5/sha1/sha256/sha512/ripemd160\nvar md5 = crypto.createHash('md5');</p>\n\n<p>var password = 'helloXiaoLai';</p>\n\n<p>console.log('输入的明文是：', password);</p>\n\n<p>// 生成hash\nmd5.update('myPassword'); <br />\n// 添加数据更新hash\nmd5.update('laispace.com'); <br />\n// 生成密钥, 16进制显示\npassword = md5.digest('hex'); <br />\nconsole.log('输出的密文是：', password);</p>\n\n<p>[/javascript]</p>\n\n<p>加密结果：</p>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.23.22 PM\" /></a></p>\n\n<p>除hashing加密外，还有HMAC加密、公钥加密等其他方法见：<a href=\"http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm\">Crypto模块官方文档</a></p>\n\n<ul>\n<li>Process 全局变量</li>\n</ul>\n\n<p>[javascript]\n&lt;span style=&quot;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;console.log('版本号是：', process.version);&lt;/span&gt;&lt;/pre&gt;\nconsole.log('运行平台是：', process.platform);</p>\n\n<p>console.log('当前进程已运行的时间：', process.uptime());</p>\n\n<p>// 捕获进程信号量\n// 输入\nconsole.log('输入你的姓名:'); <br />\n// 激活进程输入\nprocess.stdin.resume(); <br />\n// 设置编码\nprocess.stdin.setEncoding('utf8'); <br />\nvar body = ''; <br />\n// 监听\nprocess.stdin.on('data', function (chunk) { <br />\n body += chunk;\n // process.stdout.write('数据传输中...' + chunk);\n});\nprocess.stdin.on('end', function () { <br />\n process.stdout.write('你好，' + body);\n});</p>\n\n<p>// 监听\nprocess.on('SIGINT', function () { <br />\n console.log('捕获到SIGINT事件，按 ctrl+D 退出');\n})</p>\n\n<p>// 监听进程退出\nprocess.on('exit', function () { <br />\n console.log('监听到进程退出');\n})\n&lt;pre&gt;[/javascript]</p>\n\n<p>监听结果：\n<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.58.58 PM\" /></a></p>\n\n<p>更多方法见：<a href=\"http://nodejs.org/api/process.html#process_process\">Process 进程</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394312999000,"created_by":1,"updated_at":1394312999000,"updated_by":1,"published_at":1394312999000,"published_by":1},{"id":506,"uuid":"ead2da2c-984c-4d27-83f5-b5638abdf224","title":"NODE入门-简单爬虫","slug":"node-simple-spider","markdown":"\n\nnodejs真是太酷了！\n\n使用 http.get() 抓取页面，然后使用 jsdom 来解析页面（简单配置+jquery语法），简单代码如下：\n\n    var http = require('http');\n    // 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\n    var jsdom = require('jsdom');\n    // 抓取 V2EX 最新话题\n    var url = 'http://www.v2ex.com';\n\n    // 获取一个页面\n    http.get(url, function(res) {\n        var body = '';\n        console.log('状态码：', res.statusCode);\n        res.on('data', function(chunk) {\n            console.log('数据传输中...');\n            body += chunk;\n        });\n        res.on('end', function() {\n            console.log('数据传输完成:');\n            // 使用 jsdom 解析抓取到的html\n            jsdom.env(\n                body,\n                'http://code.jquery.com/jquery.js',\n                function(errors, window) {\n                    var $ = window.$;\n                    console.log('数据传输完成');\n                    var len = $('.cell.item').length;\n                    console.log('找到最新主题', len);\n                    for (var i = 0; i & lt; len; i++) {\n                        var title = $('.cell.item').eq(i).find('.item_title a').html();\n                        var link = url + $('.cell.item').eq(i).find('.item_title a').attr('href');\n                        console.log(title + '(' + link + ')');\n                    }\n                }\n            );\n        });\n    }).on('error', function(e) {\n        console.log( & quot; 发生错误: & quot; + e.message);\n    });\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-10.29.44-AM.png)](简单小爬虫)\n\n<!-- more -->\n\n另一个例子，抓取知乎的一个问答：\n\n    var http = require('http');\n    // 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\n    var jsdom = require('jsdom');\n    // 抓取 知乎话题『你认为自己最好的照片是哪张？』里的图片\n    var url = 'http://www.zhihu.com/question/20937691';\n    // 获取一个页面\n    http.get(url, function(res) {\n            var body = '';\n            console.log('状态码：', res.statusCode);\n            console.log('数据传输中...');\n            res.on('data', function(chunk) {\n                body += chunk;\n            });\n            res.on('end', function() {\n                    console.log('数据传输完成:');\n                    // 使用 jsdom 解析抓取到的html\n                    jsdom.env(\n                        body, [ & quot;http: //code.jquery.com/jquery.js&quot;],\n                            function(errors, window) {\n                                var $ = window.$;\n                                console.log('数据传输完成');\n                                // 知乎问题\n                                var question = $('title').text();\n                                console.log(question);\n                                // 知乎回答\n                                var len = $('#zh-question-answer-wrap').find('.zm-item-answer ').length;\n                                console.log('共有', len, '个回答');\n                                for (var i = 0; i & lt; len; i++) {\n                                    var author = $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').text();\n                                    var author_link = 'http://www.zhihu.com' + $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').attr('href');\n                                    var avatar = $('.zm-item-answer').eq(i).find('.zm-list-avatar').attr('src');\n                                    var vote_count = $('.zm-item-answer').eq(i).find('.zm-item-vote-count').text();\n                                    author = author ? author : '匿名用户';\n                                    // 输出每个答案下的 作者 票数等信息\n                                    console.log('第' + i + '位', vote_count + '票', '作者:' + author);\n                                    console.log('(主页:' + author_link + '头像:' + avatar + ')')\n                                    var imgs = $('.zm-item-answer').eq(i).find('.zm-item-rich-text img');\n                                    var imgLen = imgs.length;\n                                    for (var j = 0; j & lt; imgLen; j++) {\n                                        var imgSrc = imgs.eq(j).attr('src');\n                                        if (imgSrc) {\n                                            console.log('图片' + j + ': ' + imgSrc);\n                                        }\n                                    }\n                                    console.log('\\n')\n                                }\n                            }\n                        );\n                    });\n            }).on('error', function(e) {\n            console.log( & quot; 发生错误: & quot; + e.message);\n        });\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-1.48.00-PM.png \")](简单爬虫)\n\n此外，可以试试用简化的 request 模块代替 http.get()：\n\n    // $ npm install request (https://www.npmjs.org/package/request)\n    var request = require('request');\n    request('http://laispace.github.io', function (error, response, body) {\n         if (!error && response.statusCode == 200) {\n             console.log(body)\n        }\n    });\n\n接下来就只要把解析出的数据存入自己的数据库，就可以拿来用了。\n\n","html":"<p>nodejs真是太酷了！</p>\n\n<p>使用 http.get() 抓取页面，然后使用 jsdom 来解析页面（简单配置+jquery语法），简单代码如下：</p>\n\n<pre><code>var http = require('http');\n// 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\nvar jsdom = require('jsdom');\n// 抓取 V2EX 最新话题\nvar url = 'http://www.v2ex.com';\n\n// 获取一个页面\nhttp.get(url, function(res) {\n    var body = '';\n    console.log('状态码：', res.statusCode);\n    res.on('data', function(chunk) {\n        console.log('数据传输中...');\n        body += chunk;\n    });\n    res.on('end', function() {\n        console.log('数据传输完成:');\n        // 使用 jsdom 解析抓取到的html\n        jsdom.env(\n            body,\n            'http://code.jquery.com/jquery.js',\n            function(errors, window) {\n                var $ = window.$;\n                console.log('数据传输完成');\n                var len = $('.cell.item').length;\n                console.log('找到最新主题', len);\n                for (var i = 0; i &amp; lt; len; i++) {\n                    var title = $('.cell.item').eq(i).find('.item_title a').html();\n                    var link = url + $('.cell.item').eq(i).find('.item_title a').attr('href');\n                    console.log(title + '(' + link + ')');\n                }\n            }\n        );\n    });\n}).on('error', function(e) {\n    console.log( &amp; quot; 发生错误: &amp; quot; + e.message);\n});\n</code></pre>\n\n<p><a href=\"简单小爬虫\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-10.29.44-AM.png\" alt=\"\" title=\"\" /></a></p>\n\n<!-- more -->\n\n<p>另一个例子，抓取知乎的一个问答：</p>\n\n<pre><code>var http = require('http');\n// 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\nvar jsdom = require('jsdom');\n// 抓取 知乎话题『你认为自己最好的照片是哪张？』里的图片\nvar url = 'http://www.zhihu.com/question/20937691';\n// 获取一个页面\nhttp.get(url, function(res) {\n        var body = '';\n        console.log('状态码：', res.statusCode);\n        console.log('数据传输中...');\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n                console.log('数据传输完成:');\n                // 使用 jsdom 解析抓取到的html\n                jsdom.env(\n                    body, [ &amp; quot;http: //code.jquery.com/jquery.js&amp;quot;],\n                        function(errors, window) {\n                            var $ = window.$;\n                            console.log('数据传输完成');\n                            // 知乎问题\n                            var question = $('title').text();\n                            console.log(question);\n                            // 知乎回答\n                            var len = $('#zh-question-answer-wrap').find('.zm-item-answer ').length;\n                            console.log('共有', len, '个回答');\n                            for (var i = 0; i &amp; lt; len; i++) {\n                                var author = $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').text();\n                                var author_link = 'http://www.zhihu.com' + $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').attr('href');\n                                var avatar = $('.zm-item-answer').eq(i).find('.zm-list-avatar').attr('src');\n                                var vote_count = $('.zm-item-answer').eq(i).find('.zm-item-vote-count').text();\n                                author = author ? author : '匿名用户';\n                                // 输出每个答案下的 作者 票数等信息\n                                console.log('第' + i + '位', vote_count + '票', '作者:' + author);\n                                console.log('(主页:' + author_link + '头像:' + avatar + ')')\n                                var imgs = $('.zm-item-answer').eq(i).find('.zm-item-rich-text img');\n                                var imgLen = imgs.length;\n                                for (var j = 0; j &amp; lt; imgLen; j++) {\n                                    var imgSrc = imgs.eq(j).attr('src');\n                                    if (imgSrc) {\n                                        console.log('图片' + j + ': ' + imgSrc);\n                                    }\n                                }\n                                console.log('\\n')\n                            }\n                        }\n                    );\n                });\n        }).on('error', function(e) {\n        console.log( &amp; quot; 发生错误: &amp; quot; + e.message);\n    });\n</code></pre>\n\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-1.48.00-PM.png &quot;\"><img src=\"简单爬虫\" alt=\"</a>\" title=\"\" /></p>\n\n<p>此外，可以试试用简化的 request 模块代替 http.get()：</p>\n\n<pre><code>// $ npm install request (https://www.npmjs.org/package/request)\nvar request = require('request');\nrequest('http://laispace.github.io', function (error, response, body) {\n     if (!error &amp;&amp; response.statusCode == 200) {\n         console.log(body)\n    }\n});\n</code></pre>\n\n<p>接下来就只要把解析出的数据存入自己的数据库，就可以拿来用了。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393424773000,"created_by":1,"updated_at":1393424773000,"updated_by":1,"published_at":1393424773000,"published_by":1},{"id":507,"uuid":"817b8651-d4e2-4201-9f8e-4b1b114b0da8","title":"NODE入门-简单的文件管理器","slug":"node-file-manager","markdown":"\n\n今天学习了一个简单的CLI文件管理器的编写：\n\n## 安装方法：\n\n- 运行 $ node index.js后会列出当前文件夹下的文件或文件夹\n- 选择文件，则显示这个文件内容\n- 选择文件夹，则列出这个文件夹下的文件\n\n> Hello, 这是小赖的第一个nodejs命令行程序！\n\n<!-- more -->\n\n    // index.js\n    // fs 模块是唯一一个同时提供异步和同步API的模块\n    var fs = require('fs');\n    // !!! 定义快捷变量\n    var stdin = process.stdin,\n        stdout = process.stdout;\n    // #1 获取文件列表\n    fs.readdir(__dirname, function(err, files) {\n        // __dirname 即当前文件夹的路径\n        // console.log('    当前文件夹路径：', __dirname);\n        // 当前文件夹下的文件\n        // console.log('    文件夹下的文件：', files);\n    })\n    // #2 列出当前目录下的文件，然后等待用户输入\n    // process.cwd()返回当前的工作目录，http://nodejs.org/api/process.html#process_process_cwd\n    fs.readdir(process.cwd(), function(err, files) {\n        // 将下面出现的Stat对象存储起来\n        var stats = [];\n        // 为了界面友好，输出一个空行\n        console.log('');\n        if (!files.length) {\n            return console.log('    目录下没有文件存在！ \\n');\n        }\n        console.log('   当前目录下的文件或目录列表：\\n');\n        function file(i) {\n            var filename = files[i];\n            // fs.stat(path, callback)输出文件的状态信息，http://nodejs.org/api/fs.html#fs_fs_stat_path_callback\n            fs.stat(__dirname + '/' + filename, function(err, stat) {\n                // 将当前Stat对象存到数组中供以后使用\n                stats[i] = stat;\n                // 判断是否为文件夹\n                if (stat.isDirectory()) {\n                    console.log('   ' + i + ' ' + filename + '/');\n                } else {\n                    console.log('   ' + i + ' ' + filename + ' ');\n                }\n                // 继续遍历文件\n                if (++i == files.length) {\n                    // !!!\n                    read();\n                } else {\n                    file(i);\n                }\n            });\n            function read() {\n                console.log('');\n                // process.stdout.write()与console.log()不同在于无需换行就可直接输入，http://nodejs.org/api/process.html#process_process_stdout\n                stdout.write('  请选择：');\n                // process.stdin.resume() 等待用户输入\n                stdin.resume();\n                // 设置编码为utf8才支持特殊字符\n                stdin.setEncoding('utf8');\n                // 监听用户输入\n                stdin.on('data', option);\n            }\n            // 监听用户输入后调用的函数\n            function option(data) {\n                // 用户输入的不是数字,不匹配files数组的下标\n                var filename = files[Number(data)];\n                if (!filename) {\n                    stdout.write('  请选择：');\n                } else {\n                    // 用户输入通过，pause()确保再次将流暂停（回到默认状态）\n                    stdin.pause();\n                    // 读取这个文件，以utf8编码，http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback | http://www.cnblogs.com/yangdejin/archive/2012/03/01/2375123.html\n                    // 读取的是目录\n                    if (stats[Number(data)].isDirectory()) {\n                        fs.readdir(__dirname + '/' + filename, function(err, files) {\n                            console.log('');\n                            console.log('   文件夹' + filename + '下有' + files.length + '个文件：');\n                            files.forEach(function(file) {\n                                console.log('   - ' + file);\n                            });\n                            console.log('');\n                        });\n                    } else {\n                        // 读取的是文件\n                        fs.readFile(__dirname + '/' + filename, 'utf8', function(err, data) {\n                            console.log('');\n                            // 使用正则，添加辅助性的缩进来输出，正则入门http://deerchao.net/tutorials/regex/regex.htm\n                            console.log('   文件' + filename + '的内容是：\\n', data.replace(/(.*)/g, '      $1'))\n                        })\n                    }\n                }\n            }\n        }\n        // 初始遍历第一个文件或文件夹\n        file(0);\n    });\n\n\n- 执行参数 process.argv 包含node程序运行时的参数值：node argv.js\n\n  - 第一个参数是 'node'\n  \n  - 第二个参数是 argv.js的路径\n  \n  - 第三个参数是 传给argv.js 的参数\n  \n  - 要获取真正传给argv.js的参数，使用 process.argv.slice(2) 即可\n  \n- 文件路径 __dirname 和 process.cwd 的区别\n\n  - __dirname 获取的是文件在文件系统中的目录\n  \n  - process.cwd 获取的是当前工作目录\n  \n  - 使用 process.chdir 方法可以改变灵活地工作目录 \n\n- 环境变量 process.env 可以访问 shell 环境下的变量\n\n- 退出程序 process.exit()  \n\n$ node 进入node环境后，输入 process.exit(1) 就可以退出，不用老是 CTRL C 来退出啦\n\n- fs.readFile('myFile.txt'， callback) 和 fs.creatrReadStream('myFile.txt') 的区别\n \n  - fs.readFile('myFile.txt', funtion(err, data)) 是当 myFile.txt 完全读取完后才执行回调函数\n  - 当 myFile.txt 这个文件非常大，甚至读取的视频的时候呢？延迟就会非常厉害了\n  - fs.createReadStream() 创建可读的 Stream 对象，分块处理：\n    \n    var stream = fs.createReadStream('myFile.txt');     \n    stream.on('data', function(chunk){\n      // chunk 是传输的内容块        \n    });\n    stream.on('end', function(chunk){\n      // 文件全传输完毕\n    });","html":"<p>今天学习了一个简单的CLI文件管理器的编写：</p>\n\n<h2 id=\"\">安装方法：</h2>\n\n<ul>\n<li>运行 $ node index.js后会列出当前文件夹下的文件或文件夹</li>\n<li>选择文件，则显示这个文件内容</li>\n<li>选择文件夹，则列出这个文件夹下的文件</li>\n</ul>\n\n<blockquote>\n  <p>Hello, 这是小赖的第一个nodejs命令行程序！</p>\n</blockquote>\n\n<!-- more -->\n\n<pre><code>// index.js\n// fs 模块是唯一一个同时提供异步和同步API的模块\nvar fs = require('fs');\n// !!! 定义快捷变量\nvar stdin = process.stdin,\n    stdout = process.stdout;\n// #1 获取文件列表\nfs.readdir(__dirname, function(err, files) {\n    // __dirname 即当前文件夹的路径\n    // console.log('    当前文件夹路径：', __dirname);\n    // 当前文件夹下的文件\n    // console.log('    文件夹下的文件：', files);\n})\n// #2 列出当前目录下的文件，然后等待用户输入\n// process.cwd()返回当前的工作目录，http://nodejs.org/api/process.html#process_process_cwd\nfs.readdir(process.cwd(), function(err, files) {\n    // 将下面出现的Stat对象存储起来\n    var stats = [];\n    // 为了界面友好，输出一个空行\n    console.log('');\n    if (!files.length) {\n        return console.log('    目录下没有文件存在！ \\n');\n    }\n    console.log('   当前目录下的文件或目录列表：\\n');\n    function file(i) {\n        var filename = files[i];\n        // fs.stat(path, callback)输出文件的状态信息，http://nodejs.org/api/fs.html#fs_fs_stat_path_callback\n        fs.stat(__dirname + '/' + filename, function(err, stat) {\n            // 将当前Stat对象存到数组中供以后使用\n            stats[i] = stat;\n            // 判断是否为文件夹\n            if (stat.isDirectory()) {\n                console.log('   ' + i + ' ' + filename + '/');\n            } else {\n                console.log('   ' + i + ' ' + filename + ' ');\n            }\n            // 继续遍历文件\n            if (++i == files.length) {\n                // !!!\n                read();\n            } else {\n                file(i);\n            }\n        });\n        function read() {\n            console.log('');\n            // process.stdout.write()与console.log()不同在于无需换行就可直接输入，http://nodejs.org/api/process.html#process_process_stdout\n            stdout.write('  请选择：');\n            // process.stdin.resume() 等待用户输入\n            stdin.resume();\n            // 设置编码为utf8才支持特殊字符\n            stdin.setEncoding('utf8');\n            // 监听用户输入\n            stdin.on('data', option);\n        }\n        // 监听用户输入后调用的函数\n        function option(data) {\n            // 用户输入的不是数字,不匹配files数组的下标\n            var filename = files[Number(data)];\n            if (!filename) {\n                stdout.write('  请选择：');\n            } else {\n                // 用户输入通过，pause()确保再次将流暂停（回到默认状态）\n                stdin.pause();\n                // 读取这个文件，以utf8编码，http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback | http://www.cnblogs.com/yangdejin/archive/2012/03/01/2375123.html\n                // 读取的是目录\n                if (stats[Number(data)].isDirectory()) {\n                    fs.readdir(__dirname + '/' + filename, function(err, files) {\n                        console.log('');\n                        console.log('   文件夹' + filename + '下有' + files.length + '个文件：');\n                        files.forEach(function(file) {\n                            console.log('   - ' + file);\n                        });\n                        console.log('');\n                    });\n                } else {\n                    // 读取的是文件\n                    fs.readFile(__dirname + '/' + filename, 'utf8', function(err, data) {\n                        console.log('');\n                        // 使用正则，添加辅助性的缩进来输出，正则入门http://deerchao.net/tutorials/regex/regex.htm\n                        console.log('   文件' + filename + '的内容是：\\n', data.replace(/(.*)/g, '      $1'))\n                    })\n                }\n            }\n        }\n    }\n    // 初始遍历第一个文件或文件夹\n    file(0);\n});\n</code></pre>\n\n<ul>\n<li><p>执行参数 process.argv 包含node程序运行时的参数值：node argv.js</p>\n\n<ul><li><p>第一个参数是 'node'</p></li>\n<li><p>第二个参数是 argv.js的路径</p></li>\n<li><p>第三个参数是 传给argv.js 的参数</p></li>\n<li><p>要获取真正传给argv.js的参数，使用 process.argv.slice(2) 即可</p></li></ul></li>\n<li><p>文件路径 __dirname 和 process.cwd 的区别</p>\n\n<ul><li><p>__dirname 获取的是文件在文件系统中的目录</p></li>\n<li><p>process.cwd 获取的是当前工作目录</p></li>\n<li><p>使用 process.chdir 方法可以改变灵活地工作目录 </p></li></ul></li>\n<li><p>环境变量 process.env 可以访问 shell 环境下的变量</p></li>\n<li><p>退出程序 process.exit()  </p></li>\n</ul>\n\n<p>$ node 进入node环境后，输入 process.exit(1) 就可以退出，不用老是 CTRL C 来退出啦</p>\n\n<ul>\n<li><p>fs.readFile('myFile.txt'， callback) 和 fs.creatrReadStream('myFile.txt') 的区别</p>\n\n<ul><li>fs.readFile('myFile.txt', funtion(err, data)) 是当 myFile.txt 完全读取完后才执行回调函数</li>\n<li>当 myFile.txt 这个文件非常大，甚至读取的视频的时候呢？延迟就会非常厉害了</li>\n<li>fs.createReadStream() 创建可读的 Stream 对象，分块处理：</li></ul>\n\n<p>var stream = fs.createReadStream('myFile.txt'); <br />\nstream.on('data', function(chunk){\n  // chunk 是传输的内容块 <br />\n});\nstream.on('end', function(chunk){\n  // 文件全传输完毕\n});</p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1389999349000,"created_by":1,"updated_at":1389999349000,"updated_by":1,"published_at":1389999349000,"published_by":1},{"id":508,"uuid":"5306a152-498e-4420-9c93-25933f1bf7b6","title":"NPM SSL错误的解决","slug":"npm-solve-ssl-error","markdown":"\n\n执行 $ npm update 更新模块的时候，报错：\n<pre>Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n\n查资料发现是防火墙的问题，要解决的话，关闭ssl的严格模式，执行：\n$ npm config set strict-ssl false \n\n然后重新执行 $npm update 即可解决\n\n但别忘了这样会降低npm的安全性，所以可以设置回来：\n$ npm config set strict-ssl true</pre>","html":"<p>执行 $ npm update 更新模块的时候，报错：</p>\n\n<pre>Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n\n查资料发现是防火墙的问题，要解决的话，关闭ssl的严格模式，执行：\n$ npm config set strict-ssl false \n\n然后重新执行 $npm update 即可解决\n\n但别忘了这样会降低npm的安全性，所以可以设置回来：\n$ npm config set strict-ssl true</pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1397300591000,"created_by":1,"updated_at":1397300591000,"updated_by":1,"published_at":1397300591000,"published_by":1},{"id":509,"uuid":"1b703f36-a682-4040-9375-d13dbe18eb9e","title":"NPM update -g 错误的解决","slug":"npm-solve-update-error","markdown":"\n\n使用 $ sudo npm update -g 报错，清除 npm 缓存 或者在 nodejs.org 的官网下载最新版重装后，还是报错。\n\n解决办法是，执行：\n\t\t\n\t\t// 使当前用户拥有 /usr/local/lib/node_modules 目录的权限\n\t\t$ sudo chown -R $USER /usr/local/lib/node_modules\n\n然后再执行更新就不会报错了：\n\n\t\t$ npm update -g\t\n\t\t\n\t\t\t\n让普通用户拥有 npm 的全局权限，即可以不用在 install 或 update 时加上 sudo：\n\n\t\t// 使当前用户拥有 /usr/local 目录的权限\n\t\t$ sudo chown -R $USER /usr/local\n\t\t// 然后就可以直接全局安装/更新一些包了\n\t\t$ npm install -g xxx\n\t\t$ npm update -g","html":"<p>使用 $ sudo npm update -g 报错，清除 npm 缓存 或者在 nodejs.org 的官网下载最新版重装后，还是报错。</p>\n\n<p>解决办法是，执行：</p>\n\n<pre><code>    // 使当前用户拥有 /usr/local/lib/node_modules 目录的权限\n    $ sudo chown -R $USER /usr/local/lib/node_modules\n</code></pre>\n\n<p>然后再执行更新就不会报错了：</p>\n\n<pre><code>    $ npm update -g    \n</code></pre>\n\n<p>让普通用户拥有 npm 的全局权限，即可以不用在 install 或 update 时加上 sudo：</p>\n\n<pre><code>    // 使当前用户拥有 /usr/local 目录的权限\n    $ sudo chown -R $USER /usr/local\n    // 然后就可以直接全局安装/更新一些包了\n    $ npm install -g xxx\n    $ npm update -g\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405555514000,"created_by":1,"updated_at":1405555514000,"updated_by":1,"published_at":1405555514000,"published_by":1},{"id":510,"uuid":"02a4c1bf-155f-47cf-bc10-e37825ba0740","title":"Nodejs 的 stream 使用指南","slug":"node-stream","markdown":"\n\n# 使用 Stream \n\n当我们读取一个文件内容时，可能会这么写：\n    \n    var http = require('http');\n    var fs = require('fs');\n    var server = http.createServer(function (req, res) {\n        fs.readFile(__dirname + '/data.txt', function (err, data) {\n            res.end(data);\n        });\n    });\n    server.listen(8000);\n\n当这个文件 data.txt 非常大时，不仅会占满内存，而且对于网络不好的用户而言体验将非常差。\n\n\n好在 req 和 res 都是 Stream 对象，我们可以使用 Stream 的方式来写代码：\n\n    var http = require('http');\n    var fs = require('fs');\n    var server = http.createServer(function (req, res) {\n        var stream = fs.createReadStream(__dirname + '/data.txt');\n        stream.pipe(res);\n    });\n    server.listen(8000);\n\n我们使用 fs.createReadStream 创建了一个 Stream 对象，.pipe() 方法会监听对应的 `data` 和 `end` 事件。\n\n使用 Stream 的好处在于，我们将 data.txt 分段（chunk）传输到客户端，减轻了网络带宽的压力。\n\n\n<!--more-->\n\n# 使用 oppressor 压缩数据\n\n如果客户端支持 gzip 或 deflate 压缩的话，我们就可以使用 oppressor 这个模块来对数据进行压缩后传输：\n\n    var http = require('http');\n    var fs = require('fs');\n    var oppressor = require('operessor');\n    var server = http.createServer(function (req, res) {\n        var stream = fs.createReadStream(__dirname + '/data.txt');\n        stream.pipe(oppressor(req)).pipe(res);\n    });\n    server.listen(8000);\n\n# 理解 Stream 的基础知识\n\n## pipe 管道\n\n我们可以这么理解 pipe:\n    \n    src.pipe(A).pipe(B).pipe(dst);            \n\n等价于：\n\n    src.pipe(A);\n    A.pipe(B);\n    B.pipe(dst);\n\n即把 src 这个输入交给 A 进行处理后，输出到 B处理，然后把结果输出到 dst。\n\n# readable streams 可读流\n\n在上述代码中，src 就是一个 readable stream 即可读流。\n\n让我们来创建一个可读流：\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    rs.push('hello ');\n    rs.push('world \\n');\n    rs.push(null);\n    rs.pipe(process.stdout);\n\n将这段代码保存到 read0.js 中，然后执行它：\n\n    $ node read0.js\n\n将得到输出：\n\n    hello world\n\n注意 `rs.push(null)` 用于指明我们对这个可读流写入数据完毕。\n\n\n在发出 `rs.push(null)` 指明写入数据完毕之前，我们可以使用 `rs.push()` 往可读流中继续输入数据。\n\n而有时候我们希望根据特定条件完成可读流的输入，这时候就可以改写 Readable._read() 方法。\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    var c = 97;\n    rs._read = function () {\n        rs.push(String.fromCharCode(c++));\n        if (c > 'z'.charCodeAt(0)) {\n            rs.push(null);\n        }\n    };\n    rs.pipe(process.stdout);\n\nrs._read() 将从 `a` 读到 `z`，然后才停止对可读流的写入。\n\n将这段代码保存到 read1.js 中，然后执行它：\n\n    $ node read1.js\n\n将得到输出：\n\n    abcdefghijklmnopqrstuvwxyz\n\n注意我们改写了 rs._read() 方法而并没有调用它，因为当条件 `c > 'z'.charCodeAt(0)` 成立时，我们使用 `rs.push(null)` 指明可读流写入数据完毕。\n\n为了证明输出 `a-z` 的过程中调用了 `rs._read()` 多次，我们编写：\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    var c = 97 - 1;\n    rs._read = function () {\n        if (c >= 'z'.charCodeAt(0)) {\n            return rs.push(null);\n        }\n        setTimeout(function () {\n            rs.push(String.fromCharCode(++c));\n        }, 100);\n    };\n    rs.pipe(process.stdout);\n    process.on('exit', function () {\n        console.error('\\n_read() called ' + (c - 97) + ' times');\n    });\n    process.stdout.on('error', process.exit);\n\n将这段代码保存到 read2.js 中，然后执行它：\n\n    $ node read2.js\n\n将得到输出：\n\n    abcdefghijklmnopqrstuvwxyz\n    _read() called 25 times\n\n而如果我们执行：\n\n    $ node read2.js | head -c5\n\n这里的 `| head -c5` 为 *nix 命令，表示只输出 5 个字节的数据，这时候将得到输出：\n\n    abcde\n    _read() called 5 times\n\n有了 `| head -c5` 这个参数，当输出了 5 个字节的数据后，操作系统发出 SIFPIPE 信号，中断进程，process.stdout 产生错误 EPIPE。\n\n接着 `process.stdout` 捕获到错误，触发 `exit` 事件，所以这时候记录下 `rs._read()` 的执行次数为 5。\n\n\n## 使用 readable stream 可读流\n\n直接使用可读流非常简单：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read();\n        console.dir(buf);\n    });\n\n将这段代码保存到 consume0.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume0.js \n\n我们在命令行中输出一些数据当做 consume0.js 的输入，将得到输出：\n\n    <Buffer 61 62 63 0a>\n    <Buffer 64 65 66 0a>\n    <Buffer 67 68 69 0a>\n    null\n\n当 `process.stdin` 监听到有数据传入时，我们就可以使用 `process.stdin.read()` 读取到这些数据。\n\n我们看到了输出中有 `null` 是因为当数据读取完毕时，`process.stdin.read()` 将返回 `null`。\n\n而如果我们给 `process.std.read(n)` 传入了参数 `n` 时，将得到 n 字节的数据输出：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read(3);\n        console.dir(buf);\n    });\n\n将这段代码保存到 consume1.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume1.js \n   \n我们在命令行中输出一些数据当做 consume1.js 的输入，但给 `process.stdin.read(3)` 传入了参数数字 3，将得到输出：\n\n    <Buffer 61 62 63>\n    <Buffer 0a 64 65>\n    <Buffer 66 0a 67>\n\n注意我们并没有得到 `abc` `def` `ghi` 对应的完整输出，因为我们限制了读取的字节数为 3，所以剩下的数据保存在了内存中。\n\n我们能需要读出剩余的数据，改写代码为：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read(3);\n        console.dir(buf);\n        process.stdin.read(0);\n    });\n\n将这段代码保存到 consume2.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js \n   \n我们在命令行中输出一些数据当做 consume2.js 的输入，读完 3 个字节数据后，继续读取。将得到输出：\n\n    <Buffer 61 62 63>\n    <Buffer 0a 64 65>\n    <Buffer 66 0a 67>\n    <Buffer 68 69 0a>\n\n## writable streams 可写流\n\n只需要使用 Writable._write() 即可创建 writable strearm 可写流：\n\n    var Writable = require('stream').Writable;\n    var ws = new Writable();\n    ws._write = function (chunk, enc, callback) {\n        console.dir(chunk);\n        callback();\n    };\n    process.stdin.pipe(ws);\n\n将这段代码保存到 write0.js 中，然后执行它：\n\n    $ (echo hello; sleep 1; echo world) | node write0.js \n\n将得到输出：\n    \n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a> hello world    \n\n第一个参数 `chunk` 表示将要写入的数据。\n\n第二个参数 `enc` 表示编码，如果 chunk 为字符串，编码类型则为字符串。\n\n除非我们在创建可写流时指定了 `Writable({ decodeStrings: false })`，否则数据将会被转化为 Buffer 类型。\n\n第三个参数 `callback` 表示回调函数。\n\n## 使用 writable stream 可写流\n\n直接使用 `.write()` 方法就即可使用可写流：\n\n    process.stdout.write('hello world \\n');\n\n我们可以将文件内容创建为可写流：\n\n    var fs = require('fs');\n    var ws = fs.createWriteStream('message.txt');\n    ws.write('hello ');\n    setTimeout(function () {\n        ws.end('world \\n');\n    }, 1000);\n\n将这段代码保存到 writing1.js 中，然后执行它：\n\n    $ node writing1.js \n\n注意这里用 `ws.end()` 指明我们写入数据完毕，数据将被写入到 `message.txt` 中：\n    \n    $ cat message.txt\n    hello world\n\n## transform 转换\n\nTransform streams 即转换流，是用于转换输入为输出的可读/写的双工流。\n\n## duplex 双工\n\nDuplex streams 即双工流，流的两端都可进行读或写：\n\n    A.pipe(B).pipe(A);\n\n## classic streams 经典流\n\nClassic streams 即经典流，最早出现在 node v0.4 中。\n\n当一个流注册了 `data` 监听函数时，就会转换到静电流模式，这时候可以使用旧的 API 对流进行操作。\n\n### classic readable streams 经典可读流\n\n经典可读流只有 `data` 和 `end` 事件触发器，分别用来接收数据和停止接收数据。\n\n`.pipe()` 通过判断 `stream.readable` 的值来检查一个经典流是否可读：\n\n    var Stream = require('stream');\n    var stream = new Stream;\n    stream.readable = true;\n    var c = 64;\n    var iv = setInterval(function () {\n        if (++c >= 75) {\n            clearInterval(iv);\n            stream.emit('end');\n        }\n        else stream.emit('data', String.fromCharCode(c));\n    }, 100);\n    stream.pipe(process.stdout);\n\n将这段代码保存到 classic0.js 中，然后执行它：\n\n    $ node classic0.js \n   \n将得到输出：\n\n    ABCDEFGHIJ\n\n上面这段代码中的 `.emit` 用于触发 `data` 和 `end` 事件。\n\n为了从命令行中得到输入，我们使用 `on` 对这两个事件进行监听：\n\n    process.stdin.on('data', function (buf) {\n        console.log(buf);\n    });\n    process.stdin.on('end', function () {\n        console.log('__END__');\n    });\n\n将这段代码保存到 classic1.js 中，然后执行它：\n\n    $ node classic1.js \n   \n我们接着输入 `hello world` 和 `hello xiaolai`将分别得到输出：\n\n    hello world\n    <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a>\n    hello xiaolai\n    <Buffer 68 65 6c 6c 6f 20 78 69 61 6f 6c 61 69 0a>\n\n或者在运行 classic1.js 时就传入数据：\n\n    $ (echo hello; sleep 1; echo world) | node classic1.js \n\n将得到输出：\n\n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a>\n    __END__\n\n\n注意 `data` 和 `end` 事件我们可以不再使用了，毕竟这是老旧的 API 了。\n\n我们可以使用一些模块比如 [through](https://www.npmjs.org/package/through) 来处理流：\n\n    var through = require('through');\n    process.stdin.pipe(through(write, end));\n    function write (buf) {\n        console.log(buf);\n    }\n    function end () {\n        console.log('__END__');\n    }\n\n将这段代码保存到 through.js 中，然后执行它：\n\n    $ (echo hello; sleep 1; echo world) | node through.js\n   \n将得到输出：\n    \n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a>\n    __END__\n\n也可以使用 [concat-stream](https://www.npmjs.org/package/concat-stream) 模块来进行操作：\n\n    var concat = require('concat-stream');\n    process.stdin.pipe(concat(function (body) {\n        console.log(JSON.parse(body));\n    }));\n\n将这段代码保存到 concat-stream.js 中，然后执行它：\n\n    $ echo '{\"hello\":\"world\"}' | node concat-stream.js \n\n将得到输出：\n\n    { hello: 'world' }\n\n经典的可读流具有 `.pause()` 和 `.resume()` 逻辑对暂停、恢复读取数据进行支持。\n\n如果我们要使用这些操作的话，最好通过 [through](https://www.npmjs.org/package/through) 模块来完成。\n\n### classic writable streams 经典可写流\n\n经典可写流很简单，只需要定义 `.write(buf)` `.end(buf)` `.destroy()` 即可。\n\n注意 `.end(buf)` 可能不包含参数，即 相当于 `stream.write(buf); stream.end()` 指明写入流完毕。\n\n## 阅读更多\n\n- [流的官方文档](http://nodejs.org/docs/latest/api/stream.html#stream_stream)\n- 使用 [readable-stream](https://npmjs.org/package/readable-stream) 模块兼容 v0.8 及以下版本的 node，只需要用 `require('readable-stream')` 取代 `require('stream')` 来操作即可。\n\n## built-in streams 内置的流\n\n这些流是 node 中内置的流。\n\n！！！未完待续 https://github.com/substack/stream-handbook#built-in-streams\n\n\n\n\n\n\n\n\n\n\n### 参考链接\n\n- [Implement readable._read(size), but do NOT call it directly](http://nodejs.org/api/stream.html#stream_readable_read_size_1)\n\n- [readable.push(chunk, [encoding]) should be called by Readable implementors, NOT by consumers of Readable streams.](http://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding)\n\n\n\n   \n\n\n","html":"<h1 id=\"stream\">使用 Stream</h1>\n\n<p>当我们读取一个文件内容时，可能会这么写：</p>\n\n<pre><code>var http = require('http');\nvar fs = require('fs');\nvar server = http.createServer(function (req, res) {\n    fs.readFile(__dirname + '/data.txt', function (err, data) {\n        res.end(data);\n    });\n});\nserver.listen(8000);\n</code></pre>\n\n<p>当这个文件 data.txt 非常大时，不仅会占满内存，而且对于网络不好的用户而言体验将非常差。</p>\n\n<p>好在 req 和 res 都是 Stream 对象，我们可以使用 Stream 的方式来写代码：</p>\n\n<pre><code>var http = require('http');\nvar fs = require('fs');\nvar server = http.createServer(function (req, res) {\n    var stream = fs.createReadStream(__dirname + '/data.txt');\n    stream.pipe(res);\n});\nserver.listen(8000);\n</code></pre>\n\n<p>我们使用 fs.createReadStream 创建了一个 Stream 对象，.pipe() 方法会监听对应的 <code>data</code> 和 <code>end</code> 事件。</p>\n\n<p>使用 Stream 的好处在于，我们将 data.txt 分段（chunk）传输到客户端，减轻了网络带宽的压力。</p>\n\n<!--more-->\n\n<h1 id=\"oppressor\">使用 oppressor 压缩数据</h1>\n\n<p>如果客户端支持 gzip 或 deflate 压缩的话，我们就可以使用 oppressor 这个模块来对数据进行压缩后传输：</p>\n\n<pre><code>var http = require('http');\nvar fs = require('fs');\nvar oppressor = require('operessor');\nvar server = http.createServer(function (req, res) {\n    var stream = fs.createReadStream(__dirname + '/data.txt');\n    stream.pipe(oppressor(req)).pipe(res);\n});\nserver.listen(8000);\n</code></pre>\n\n<h1 id=\"stream\">理解 Stream 的基础知识</h1>\n\n<h2 id=\"pipe\">pipe 管道</h2>\n\n<p>我们可以这么理解 pipe:</p>\n\n<pre><code>src.pipe(A).pipe(B).pipe(dst);            \n</code></pre>\n\n<p>等价于：</p>\n\n<pre><code>src.pipe(A);\nA.pipe(B);\nB.pipe(dst);\n</code></pre>\n\n<p>即把 src 这个输入交给 A 进行处理后，输出到 B处理，然后把结果输出到 dst。</p>\n\n<h1 id=\"readablestreams\">readable streams 可读流</h1>\n\n<p>在上述代码中，src 就是一个 readable stream 即可读流。</p>\n\n<p>让我们来创建一个可读流：</p>\n\n<pre><code>var Readable = require('stream').Readable;\nvar rs = new Readable;\nrs.push('hello ');\nrs.push('world \\n');\nrs.push(null);\nrs.pipe(process.stdout);\n</code></pre>\n\n<p>将这段代码保存到 read0.js 中，然后执行它：</p>\n\n<pre><code>$ node read0.js\n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>hello world\n</code></pre>\n\n<p>注意 <code>rs.push(null)</code> 用于指明我们对这个可读流写入数据完毕。</p>\n\n<p>在发出 <code>rs.push(null)</code> 指明写入数据完毕之前，我们可以使用 <code>rs.push()</code> 往可读流中继续输入数据。</p>\n\n<p>而有时候我们希望根据特定条件完成可读流的输入，这时候就可以改写 Readable._read() 方法。</p>\n\n<pre><code>var Readable = require('stream').Readable;\nvar rs = new Readable;\nvar c = 97;\nrs._read = function () {\n    rs.push(String.fromCharCode(c++));\n    if (c &gt; 'z'.charCodeAt(0)) {\n        rs.push(null);\n    }\n};\nrs.pipe(process.stdout);\n</code></pre>\n\n<p>rs._read() 将从 <code>a</code> 读到 <code>z</code>，然后才停止对可读流的写入。</p>\n\n<p>将这段代码保存到 read1.js 中，然后执行它：</p>\n\n<pre><code>$ node read1.js\n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>abcdefghijklmnopqrstuvwxyz\n</code></pre>\n\n<p>注意我们改写了 rs._read() 方法而并没有调用它，因为当条件 <code>c &gt; 'z'.charCodeAt(0)</code> 成立时，我们使用 <code>rs.push(null)</code> 指明可读流写入数据完毕。</p>\n\n<p>为了证明输出 <code>a-z</code> 的过程中调用了 <code>rs._read()</code> 多次，我们编写：</p>\n\n<pre><code>var Readable = require('stream').Readable;\nvar rs = new Readable;\nvar c = 97 - 1;\nrs._read = function () {\n    if (c &gt;= 'z'.charCodeAt(0)) {\n        return rs.push(null);\n    }\n    setTimeout(function () {\n        rs.push(String.fromCharCode(++c));\n    }, 100);\n};\nrs.pipe(process.stdout);\nprocess.on('exit', function () {\n    console.error('\\n_read() called ' + (c - 97) + ' times');\n});\nprocess.stdout.on('error', process.exit);\n</code></pre>\n\n<p>将这段代码保存到 read2.js 中，然后执行它：</p>\n\n<pre><code>$ node read2.js\n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>abcdefghijklmnopqrstuvwxyz\n_read() called 25 times\n</code></pre>\n\n<p>而如果我们执行：</p>\n\n<pre><code>$ node read2.js | head -c5\n</code></pre>\n\n<p>这里的 <code>| head -c5</code> 为 *nix 命令，表示只输出 5 个字节的数据，这时候将得到输出：</p>\n\n<pre><code>abcde\n_read() called 5 times\n</code></pre>\n\n<p>有了 <code>| head -c5</code> 这个参数，当输出了 5 个字节的数据后，操作系统发出 SIFPIPE 信号，中断进程，process.stdout 产生错误 EPIPE。</p>\n\n<p>接着 <code>process.stdout</code> 捕获到错误，触发 <code>exit</code> 事件，所以这时候记录下 <code>rs._read()</code> 的执行次数为 5。</p>\n\n<h2 id=\"readablestream\">使用 readable stream 可读流</h2>\n\n<p>直接使用可读流非常简单：</p>\n\n<pre><code>process.stdin.on('readable', function () {\n    var buf = process.stdin.read();\n    console.dir(buf);\n});\n</code></pre>\n\n<p>将这段代码保存到 consume0.js 中，然后执行它：</p>\n\n<pre><code>$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume0.js \n</code></pre>\n\n<p>我们在命令行中输出一些数据当做 consume0.js 的输入，将得到输出：</p>\n\n<pre><code>&lt;Buffer 61 62 63 0a&gt;\n&lt;Buffer 64 65 66 0a&gt;\n&lt;Buffer 67 68 69 0a&gt;\nnull\n</code></pre>\n\n<p>当 <code>process.stdin</code> 监听到有数据传入时，我们就可以使用 <code>process.stdin.read()</code> 读取到这些数据。</p>\n\n<p>我们看到了输出中有 <code>null</code> 是因为当数据读取完毕时，<code>process.stdin.read()</code> 将返回 <code>null</code>。</p>\n\n<p>而如果我们给 <code>process.std.read(n)</code> 传入了参数 <code>n</code> 时，将得到 n 字节的数据输出：</p>\n\n<pre><code>process.stdin.on('readable', function () {\n    var buf = process.stdin.read(3);\n    console.dir(buf);\n});\n</code></pre>\n\n<p>将这段代码保存到 consume1.js 中，然后执行它：</p>\n\n<pre><code>$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume1.js \n</code></pre>\n\n<p>我们在命令行中输出一些数据当做 consume1.js 的输入，但给 <code>process.stdin.read(3)</code> 传入了参数数字 3，将得到输出：</p>\n\n<pre><code>&lt;Buffer 61 62 63&gt;\n&lt;Buffer 0a 64 65&gt;\n&lt;Buffer 66 0a 67&gt;\n</code></pre>\n\n<p>注意我们并没有得到 <code>abc</code> <code>def</code> <code>ghi</code> 对应的完整输出，因为我们限制了读取的字节数为 3，所以剩下的数据保存在了内存中。</p>\n\n<p>我们能需要读出剩余的数据，改写代码为：</p>\n\n<pre><code>process.stdin.on('readable', function () {\n    var buf = process.stdin.read(3);\n    console.dir(buf);\n    process.stdin.read(0);\n});\n</code></pre>\n\n<p>将这段代码保存到 consume2.js 中，然后执行它：</p>\n\n<pre><code>$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js \n</code></pre>\n\n<p>我们在命令行中输出一些数据当做 consume2.js 的输入，读完 3 个字节数据后，继续读取。将得到输出：</p>\n\n<pre><code>&lt;Buffer 61 62 63&gt;\n&lt;Buffer 0a 64 65&gt;\n&lt;Buffer 66 0a 67&gt;\n&lt;Buffer 68 69 0a&gt;\n</code></pre>\n\n<h2 id=\"writablestreams\">writable streams 可写流</h2>\n\n<p>只需要使用 Writable._write() 即可创建 writable strearm 可写流：</p>\n\n<pre><code>var Writable = require('stream').Writable;\nvar ws = new Writable();\nws._write = function (chunk, enc, callback) {\n    console.dir(chunk);\n    callback();\n};\nprocess.stdin.pipe(ws);\n</code></pre>\n\n<p>将这段代码保存到 write0.js 中，然后执行它：</p>\n\n<pre><code>$ (echo hello; sleep 1; echo world) | node write0.js \n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>&lt;Buffer 68 65 6c 6c 6f 0a&gt;\n&lt;Buffer 77 6f 72 6c 64 0a&gt; hello world    \n</code></pre>\n\n<p>第一个参数 <code>chunk</code> 表示将要写入的数据。</p>\n\n<p>第二个参数 <code>enc</code> 表示编码，如果 chunk 为字符串，编码类型则为字符串。</p>\n\n<p>除非我们在创建可写流时指定了 <code>Writable({ decodeStrings: false })</code>，否则数据将会被转化为 Buffer 类型。</p>\n\n<p>第三个参数 <code>callback</code> 表示回调函数。</p>\n\n<h2 id=\"writablestream\">使用 writable stream 可写流</h2>\n\n<p>直接使用 <code>.write()</code> 方法就即可使用可写流：</p>\n\n<pre><code>process.stdout.write('hello world \\n');\n</code></pre>\n\n<p>我们可以将文件内容创建为可写流：</p>\n\n<pre><code>var fs = require('fs');\nvar ws = fs.createWriteStream('message.txt');\nws.write('hello ');\nsetTimeout(function () {\n    ws.end('world \\n');\n}, 1000);\n</code></pre>\n\n<p>将这段代码保存到 writing1.js 中，然后执行它：</p>\n\n<pre><code>$ node writing1.js \n</code></pre>\n\n<p>注意这里用 <code>ws.end()</code> 指明我们写入数据完毕，数据将被写入到 <code>message.txt</code> 中：</p>\n\n<pre><code>$ cat message.txt\nhello world\n</code></pre>\n\n<h2 id=\"transform\">transform 转换</h2>\n\n<p>Transform streams 即转换流，是用于转换输入为输出的可读/写的双工流。</p>\n\n<h2 id=\"duplex\">duplex 双工</h2>\n\n<p>Duplex streams 即双工流，流的两端都可进行读或写：</p>\n\n<pre><code>A.pipe(B).pipe(A);\n</code></pre>\n\n<h2 id=\"classicstreams\">classic streams 经典流</h2>\n\n<p>Classic streams 即经典流，最早出现在 node v0.4 中。</p>\n\n<p>当一个流注册了 <code>data</code> 监听函数时，就会转换到静电流模式，这时候可以使用旧的 API 对流进行操作。</p>\n\n<h3 id=\"classicreadablestreams\">classic readable streams 经典可读流</h3>\n\n<p>经典可读流只有 <code>data</code> 和 <code>end</code> 事件触发器，分别用来接收数据和停止接收数据。</p>\n\n<p><code>.pipe()</code> 通过判断 <code>stream.readable</code> 的值来检查一个经典流是否可读：</p>\n\n<pre><code>var Stream = require('stream');\nvar stream = new Stream;\nstream.readable = true;\nvar c = 64;\nvar iv = setInterval(function () {\n    if (++c &gt;= 75) {\n        clearInterval(iv);\n        stream.emit('end');\n    }\n    else stream.emit('data', String.fromCharCode(c));\n}, 100);\nstream.pipe(process.stdout);\n</code></pre>\n\n<p>将这段代码保存到 classic0.js 中，然后执行它：</p>\n\n<pre><code>$ node classic0.js \n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>ABCDEFGHIJ\n</code></pre>\n\n<p>上面这段代码中的 <code>.emit</code> 用于触发 <code>data</code> 和 <code>end</code> 事件。</p>\n\n<p>为了从命令行中得到输入，我们使用 <code>on</code> 对这两个事件进行监听：</p>\n\n<pre><code>process.stdin.on('data', function (buf) {\n    console.log(buf);\n});\nprocess.stdin.on('end', function () {\n    console.log('__END__');\n});\n</code></pre>\n\n<p>将这段代码保存到 classic1.js 中，然后执行它：</p>\n\n<pre><code>$ node classic1.js \n</code></pre>\n\n<p>我们接着输入 <code>hello world</code> 和 <code>hello xiaolai</code>将分别得到输出：</p>\n\n<pre><code>hello world\n&lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a&gt;\nhello xiaolai\n&lt;Buffer 68 65 6c 6c 6f 20 78 69 61 6f 6c 61 69 0a&gt;\n</code></pre>\n\n<p>或者在运行 classic1.js 时就传入数据：</p>\n\n<pre><code>$ (echo hello; sleep 1; echo world) | node classic1.js \n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>&lt;Buffer 68 65 6c 6c 6f 0a&gt;\n&lt;Buffer 77 6f 72 6c 64 0a&gt;\n__END__\n</code></pre>\n\n<p>注意 <code>data</code> 和 <code>end</code> 事件我们可以不再使用了，毕竟这是老旧的 API 了。</p>\n\n<p>我们可以使用一些模块比如 <a href=\"https://www.npmjs.org/package/through\">through</a> 来处理流：</p>\n\n<pre><code>var through = require('through');\nprocess.stdin.pipe(through(write, end));\nfunction write (buf) {\n    console.log(buf);\n}\nfunction end () {\n    console.log('__END__');\n}\n</code></pre>\n\n<p>将这段代码保存到 through.js 中，然后执行它：</p>\n\n<pre><code>$ (echo hello; sleep 1; echo world) | node through.js\n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>&lt;Buffer 68 65 6c 6c 6f 0a&gt;\n&lt;Buffer 77 6f 72 6c 64 0a&gt;\n__END__\n</code></pre>\n\n<p>也可以使用 <a href=\"https://www.npmjs.org/package/concat-stream\">concat-stream</a> 模块来进行操作：</p>\n\n<pre><code>var concat = require('concat-stream');\nprocess.stdin.pipe(concat(function (body) {\n    console.log(JSON.parse(body));\n}));\n</code></pre>\n\n<p>将这段代码保存到 concat-stream.js 中，然后执行它：</p>\n\n<pre><code>$ echo '{\"hello\":\"world\"}' | node concat-stream.js \n</code></pre>\n\n<p>将得到输出：</p>\n\n<pre><code>{ hello: 'world' }\n</code></pre>\n\n<p>经典的可读流具有 <code>.pause()</code> 和 <code>.resume()</code> 逻辑对暂停、恢复读取数据进行支持。</p>\n\n<p>如果我们要使用这些操作的话，最好通过 <a href=\"https://www.npmjs.org/package/through\">through</a> 模块来完成。</p>\n\n<h3 id=\"classicwritablestreams\">classic writable streams 经典可写流</h3>\n\n<p>经典可写流很简单，只需要定义 <code>.write(buf)</code> <code>.end(buf)</code> <code>.destroy()</code> 即可。</p>\n\n<p>注意 <code>.end(buf)</code> 可能不包含参数，即 相当于 <code>stream.write(buf); stream.end()</code> 指明写入流完毕。</p>\n\n<h2 id=\"\">阅读更多</h2>\n\n<ul>\n<li><a href=\"http://nodejs.org/docs/latest/api/stream.html#stream_stream\">流的官方文档</a></li>\n<li>使用 <a href=\"https://npmjs.org/package/readable-stream\">readable-stream</a> 模块兼容 v0.8 及以下版本的 node，只需要用 <code>require('readable-stream')</code> 取代 <code>require('stream')</code> 来操作即可。</li>\n</ul>\n\n<h2 id=\"builtinstreams\">built-in streams 内置的流</h2>\n\n<p>这些流是 node 中内置的流。</p>\n\n<p>！！！未完待续 <a href=\"https://github.com/substack/stream-handbook#built-in-streams\">https://github.com/substack/stream-handbook#built-in-streams</a></p>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><p><a href=\"http://nodejs.org/api/stream.html#stream_readable_read_size_1\">Implement readable._read(size), but do NOT call it directly</a></p></li>\n<li><p><a href=\"http://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding\">readable.push(chunk, [encoding]) should be called by Readable implementors, NOT by consumers of Readable streams.</a></p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1409219902000,"created_by":1,"updated_at":1409219902000,"updated_by":1,"published_at":1409219902000,"published_by":1},{"id":511,"uuid":"55725e15-c3f9-4078-aee9-b1ed0ebd46ac","title":"PhoneGap入门-用Ionic+Angular创建Hybrid应用","slug":"leran-phonegap-with-ionic-n-angular","markdown":"\n\n使用HTML5制作移动应用，寒假前确定了方案《[HTML5移动开发方案探索](http://www.laispace.com/?p=551)》，是时候开始实施了！\n\n这是第一次做HTML5移动应用的开发，Google了不少发现坑不少，中文文档也不多，只得自己好好摸索多查官方文档了。\n\n处女PhoneGap应用的笔记先贴在这里，项目完工再好好做个总结吧：）\n\n<!-- more -->\n\n\n选择方案：\n\nPhoneGap + Ionic + AngularJS\n\n开发环境：\n\n操作系统：mac OS10.9\n\n$ node -v\n\nv0.10.26\n\n$ npm -v\n\n1.4.3\n\n$ phonegap -v    # 安装后才查看\n\n3.3.0-0.19.6\n\n$ cordova -v\n\n3.4.0-0.1.0\n\n第一步：安装 command_line_tools\n\n第二步：安装 phonegap和cordova\n# 第一次安装失败，将nodejs更新到最新版后才成功\n$ sudo npm install -g phonegap\n$ sudo npm install -g cordova\n\n第三步：使用cordova创建项目\n$ cordova create hello com.example.hello \"HelloWorld\"\n$ cd hello\n# 添加ios开发平台\n$ cordova platform add iOS\n# 初始化\n$ cordova prepare              # 或 \"cordova build”\n\n第四步：测试模拟器\n\nXcode打开文件 hello/platforms/ios/hello.xcodeproj\n\n文件夹  hello/www/即是存放html/css/js的地方。\n\n修改文件 hello/www/index.html，添加 &lt;h1&gt;Hello 赖小赖&lt;/h1&gt;\n\n点击Xcode左上角的run，即打开了模拟器，就能看到 『Hello 赖小赖』啦！\n\n第五步：编写www目录下的代码\n\n【未完待续...】\n\n","html":"<p>使用HTML5制作移动应用，寒假前确定了方案《<a href=\"http://www.laispace.com/?p=551\">HTML5移动开发方案探索</a>》，是时候开始实施了！</p>\n\n<p>这是第一次做HTML5移动应用的开发，Google了不少发现坑不少，中文文档也不多，只得自己好好摸索多查官方文档了。</p>\n\n<p>处女PhoneGap应用的笔记先贴在这里，项目完工再好好做个总结吧：）</p>\n\n<!-- more -->\n\n<p>选择方案：</p>\n\n<p>PhoneGap + Ionic + AngularJS</p>\n\n<p>开发环境：</p>\n\n<p>操作系统：mac OS10.9</p>\n\n<p>$ node -v</p>\n\n<p>v0.10.26</p>\n\n<p>$ npm -v</p>\n\n<p>1.4.3</p>\n\n<p>$ phonegap -v    # 安装后才查看</p>\n\n<p>3.3.0-0.19.6</p>\n\n<p>$ cordova -v</p>\n\n<p>3.4.0-0.1.0</p>\n\n<p>第一步：安装 command<em>line</em>tools</p>\n\n<p>第二步：安装 phonegap和cordova</p>\n\n<h1 id=\"nodejs\">第一次安装失败，将nodejs更新到最新版后才成功</h1>\n\n<p>$ sudo npm install -g phonegap\n$ sudo npm install -g cordova</p>\n\n<p>第三步：使用cordova创建项目\n$ cordova create hello com.example.hello \"HelloWorld\"\n$ cd hello</p>\n\n<h1 id=\"ios\">添加ios开发平台</h1>\n\n<p>$ cordova platform add iOS</p>\n\n<h1 id=\"\">初始化</h1>\n\n<p>$ cordova prepare              # 或 \"cordova build”</p>\n\n<p>第四步：测试模拟器</p>\n\n<p>Xcode打开文件 hello/platforms/ios/hello.xcodeproj</p>\n\n<p>文件夹  hello/www/即是存放html/css/js的地方。</p>\n\n<p>修改文件 hello/www/index.html，添加 &lt;h1&gt;Hello 赖小赖&lt;/h1&gt;</p>\n\n<p>点击Xcode左上角的run，即打开了模拟器，就能看到 『Hello 赖小赖』啦！</p>\n\n<p>第五步：编写www目录下的代码</p>\n\n<p>【未完待续...】</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393635849000,"created_by":1,"updated_at":1393635849000,"updated_by":1,"published_at":1393635849000,"published_by":1},{"id":512,"uuid":"4102d28a-1a1f-4a1c-af62-40aec6dd6454","title":"Sass 学习笔记","slug":"sass","markdown":"\n\n# 安装 Sass\n\n```\n$ gem install sass\n// 或\n$ sudo gem install sass \n\n// 查看 sass 版本\n$ sass -v  \n```\n\n# 快速入门 sass 语法\n\n## Variables | 变量\n```\n// test.scss\n$lai-font: Roboto, sans-serif;\n$lai-color: #eee;\n\nbody {\n  color: $lai-color;\n  font-family: $lai-font;\n}\n```\n\n## Nesting | 嵌套\n```\nnav {\n  ul {\n    margin: 0 auto;\n    padding: 0;\n    list-style: 0;\n  }\n\n  li {\n    display: inline-block;\n  }\n\n  a {\n    display: block;\n    padding: 5px 10px;\n    text-decoration: none;\n  }\n}\n```\n\n## Partials | 模板\n```\n// _reset.scss\nhtml,\nbody,\nul,\nol {\n  margin: 0;\n  padding: 0;\n\n}\n// 使用 partial\n// base.scss\n@import 'reset'\nbody {\n  backgrount: #333;\n}\n```\n\n\n## Mixins | 混入\n```\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n// 使用 mixin\n.box {\n  @include border-radius(10px);\n}\n```\n\n## Inheritance | 继承\n```\n.message {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n.success {\n  @extend .message;\n  border-color: green;\n}\n.error {\n  @extend .message;\n  border-color: red;\n}\n.warning {\n  @extend .message;\n  border-color: yellow;\n}\n```\n\n## Operators | 运算符\n.container {\n  width: 100%;\n}\narticle[role=\"main\"] {\n  float: left;\n  width: 600px / 960px * 100%;\n}\narticle[role=\"sub\"] {\n  float: right;\n  width: 300px / 960px * 100%;\n}\n\n# 编译 .scss 为 .css\n  \nnested：嵌套缩进的css代码，它是默认值。\n　   　 \nexpanded：没有缩进的、扩展的css代码。\n　   　 \ncompact：简洁格式的css代码。\n　　    \ncompressed：压缩后的css代码。\n            \n```\n// 编译风格默认为 --style nested\n$ sass test.scss test.css\n// 编译风格设置为 --style compressed\n$ sass --style compassed test.scss test.css\n\n// 查看编译后的 test.css    \n$ cat test.css\n```\n\n# 监听文件变化\n\n一旦某个文件/目录发生变化，Sass 就自动编译出新的版本\n\n```\n// 监听文件\n$ sass --watch test.scss:test.css\n// 监听目录，一旦 src/scss 下有文件发生变化，就编译到 dist/css 目录\n$ sass --watch src/scss:dist/css\n```\n\n\n### 参考链接\n\n- [Sass 官网](http://sass-lang.com/guide)\n- [Sass 文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)","html":"<h1 id=\"sass\">安装 Sass</h1>\n\n<pre><code>$ gem install sass\n// 或\n$ sudo gem install sass \n\n// 查看 sass 版本\n$ sass -v  \n</code></pre>\n\n<h1 id=\"sass\">快速入门 sass 语法</h1>\n\n<h2 id=\"variables\">Variables | 变量</h2>\n\n<pre><code>// test.scss\n$lai-font: Roboto, sans-serif;\n$lai-color: #eee;\n\nbody {  \n  color: $lai-color;\n  font-family: $lai-font;\n}\n</code></pre>\n\n<h2 id=\"nesting\">Nesting | 嵌套</h2>\n\n<pre><code>nav {  \n  ul {\n    margin: 0 auto;\n    padding: 0;\n    list-style: 0;\n  }\n\n  li {\n    display: inline-block;\n  }\n\n  a {\n    display: block;\n    padding: 5px 10px;\n    text-decoration: none;\n  }\n}\n</code></pre>\n\n<h2 id=\"partials\">Partials | 模板</h2>\n\n<pre><code>// _reset.scss\nhtml,  \nbody,  \nul,  \nol {  \n  margin: 0;\n  padding: 0;\n\n}\n// 使用 partial\n// base.scss\n@import 'reset'\nbody {  \n  backgrount: #333;\n}\n</code></pre>\n\n<h2 id=\"mixins\">Mixins | 混入</h2>\n\n<pre><code>@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n// 使用 mixin\n.box {\n  @include border-radius(10px);\n}\n</code></pre>\n\n<h2 id=\"inheritance\">Inheritance | 继承</h2>\n\n<pre><code>.message {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n.success {\n  @extend .message;\n  border-color: green;\n}\n.error {\n  @extend .message;\n  border-color: red;\n}\n.warning {\n  @extend .message;\n  border-color: yellow;\n}\n</code></pre>\n\n<h2 id=\"operators\">Operators | 运算符</h2>\n\n<p>.container {\n  width: 100%;\n}\narticle[role=\"main\"] { <br />\n  float: left;\n  width: 600px / 960px * 100%;\n}\narticle[role=\"sub\"] { <br />\n  float: right;\n  width: 300px / 960px * 100%;\n}</p>\n\n<h1 id=\"scsscss\">编译 .scss 为 .css</h1>\n\n<p>nested：嵌套缩进的css代码，它是默认值。 <br />\n　   　 \nexpanded：没有缩进的、扩展的css代码。 <br />\n　   　 \ncompact：简洁格式的css代码。 <br />\n　　 <br />\ncompressed：压缩后的css代码。</p>\n\n<pre><code>// 编译风格默认为 --style nested\n$ sass test.scss test.css\n// 编译风格设置为 --style compressed\n$ sass --style compassed test.scss test.css\n\n// 查看编译后的 test.css    \n$ cat test.css\n</code></pre>\n\n<h1 id=\"\">监听文件变化</h1>\n\n<p>一旦某个文件/目录发生变化，Sass 就自动编译出新的版本</p>\n\n<pre><code>// 监听文件\n$ sass --watch test.scss:test.css\n// 监听目录，一旦 src/scss 下有文件发生变化，就编译到 dist/css 目录\n$ sass --watch src/scss:dist/css\n</code></pre>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><a href=\"http://sass-lang.com/guide\">Sass 官网</a></li>\n<li><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\">Sass 文档</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1407951649000,"created_by":1,"updated_at":1407951649000,"updated_by":1,"published_at":1407951649000,"published_by":1},{"id":513,"uuid":"3916a8ac-7b2a-4cc5-8bd5-2738d4e77ff5","title":"UMD兼容AMD和CMD的写法","slug":"umd","markdown":"\r\n\r\nUMD 规范 http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/\r\n\r\n同时支持 AMD 和 CMD, 做一层封装即可\r\n\r\n这里使用 jquery 和 underscore 做例子:\r\n\r\n    (function (root, factory) {\r\n        if (typeof define === 'function' && define.amd) {\r\n            // AMD 格式\r\n            define(['jquery', 'underscore'], factory);\r\n        } else if (typeof exports === 'object') {\r\n            // CMD 格式\r\n            module.exports = factory(require('jquery'), require('underscore'));\r\n        } else {\r\n            挂载到浏览器 window 下\r\n            root.returnExports = factory(root.jQuery, root._);\r\n        }\r\n    }(this, function ($, _) {\r\n        //    定义几个方法\r\n        function a{};    //    私有方法, 不暴露出去\r\n        function b{};    //    公有方法\r\n        function c{};    //    公有方法\r\n\r\n        // 将公有方法暴露出去\r\n        return {\r\n            b: b,\r\n            c: c\r\n        }\r\n    }));\r\n","html":"<p>UMD 规范 <a href=\"http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/\">http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/</a></p>\n\n<p>同时支持 AMD 和 CMD, 做一层封装即可</p>\n\n<p>这里使用 jquery 和 underscore 做例子:</p>\n\n<pre><code>(function (root, factory) {\n    if (typeof define === 'function' &amp;&amp; define.amd) {\n        // AMD 格式\n        define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // CMD 格式\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        挂载到浏览器 window 下\n        root.returnExports = factory(root.jQuery, root._);\n    }\n}(this, function ($, _) {\n    //    定义几个方法\n    function a{};    //    私有方法, 不暴露出去\n    function b{};    //    公有方法\n    function c{};    //    公有方法\n\n    // 将公有方法暴露出去\n    return {\n        b: b,\n        c: c\n    }\n}));\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1419280693000,"created_by":1,"updated_at":1419280693000,"updated_by":1,"published_at":1419280693000,"published_by":1},{"id":514,"uuid":"1146186a-8bc7-482d-af0b-88ede2084b0b","title":"Velocity 学习笔记","slug":"velocity","markdown":"\n\n单行注释\n\t\t\n\t\t## This is a comment.\n\n多行注释\n\n\t\t#*\n\t\t\tThis is a mutil-line comment\n\t\t\tThis is a mutil-line comment\n\t\t\tThis is a mutil-line comment\t\t\n\t\t*#\t\t\n\n变量\n\n\t\t<div>\n\t\t\t#set ( $name = 'xiaolai')\n\t\t\tHello $name !\n\t\t</div>\n\t\t\n属性\n\n\t\t$person.Name\n\n方法\n\n\t\t$person.getName()\n\t\t$person.setName('xiaolai')\n\t\t\n\t\t## 注意 $person.getName() 等同于 $person.Name\n\n<!-- more -->\n\n单引号双引号\n\t\n\t放在双引号内的变量才会被解析\n\n\t\t#set ( $foo = 'xiaolai')\n\t\t#set ( $bar1 = '$foo' )\n\t\t$set ( $bar2 = \"$foo\")\n\t\t$bar1 ##=> '$foo'\t\t\n\t\t$bar2 ##=> 'xiaolai'\n\t\t\n\n条件语句\n\n\t\t#set ( $foo = 100 )\n\t\t#if ( $foo < 10 )\n\t\t\t<div> 123 </div>\n\t\t#elseif ( $foo < 50 )\n\t\t\t<div> 456 </div>\n\t\t#else\n\t\t\t<div> 789 </div>\n\t\t#end\t\t\t\n\n关系、逻辑运算符\n\n\t\t## 全等，使用 == \n\t\t$foo == $bar\t\t\n\t\n\t\t## AND、OR、NOT，使用 &&、||、!\n\t\t$foo && $bar\n\t\t$foo || $bar\n\t\t!$foo\n\n循环\n\n\t\t<ul>\n\t\t\t#foreach ( $product in $allProducts)\n\t\t\t\t<li> $product <li>\n\t\t\t#end\t\n\t\t</ul>\t\n\ninclude 引入文件\n\t\n\t\t## 文件必须包含在TEMPLATE_ROOT目录下\t\n\t\t#include ('test.txt')\n\t\t#include ('test1.txt', 'test2.txt', 'test3.txt')\n\nparse 渲染文件\n\t\n\t\t## 文件必须包含在TEMPLATE_ROOT目录下\n\t\t#parse('test.vm')\t\t\t\t\n\nmacro 宏的定义\n\n\t\t## 宏可以定义可重用的代码\n\t\t#macro ( tpl $title $description )\n\t\t\t<div>\n\t\t\t\t<h1> $title </h1>\n\t\t\t\t<p> $description </p>\n\t\t\t<div>\t\n\t\t\n\t\t## 使用这个宏，将会进行替换\n\t\t#tpl('title', 'This is a description')\t\n\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\t\t\t\t","html":"<p>单行注释</p>\n\n<pre><code>    ## This is a comment.\n</code></pre>\n\n<p>多行注释</p>\n\n<pre><code>    #*\n        This is a mutil-line comment\n        This is a mutil-line comment\n        This is a mutil-line comment        \n    *#      \n</code></pre>\n\n<p>变量</p>\n\n<pre><code>    &lt;div&gt;\n        #set ( $name = 'xiaolai')\n        Hello $name !\n    &lt;/div&gt;\n</code></pre>\n\n<p>属性</p>\n\n<pre><code>    $person.Name\n</code></pre>\n\n<p>方法</p>\n\n<pre><code>    $person.getName()\n    $person.setName('xiaolai')\n\n    ## 注意 $person.getName() 等同于 $person.Name\n</code></pre>\n\n<!-- more -->\n\n<p>单引号双引号</p>\n\n<pre><code>放在双引号内的变量才会被解析\n\n    #set ( $foo = 'xiaolai')\n    #set ( $bar1 = '$foo' )\n    $set ( $bar2 = \"$foo\")\n    $bar1 ##=&gt; '$foo'     \n    $bar2 ##=&gt; 'xiaolai'\n</code></pre>\n\n<p>条件语句</p>\n\n<pre><code>    #set ( $foo = 100 )\n    #if ( $foo &lt; 10 )\n        &lt;div&gt; 123 &lt;/div&gt;\n    #elseif ( $foo &lt; 50 )\n        &lt;div&gt; 456 &lt;/div&gt;\n    #else\n        &lt;div&gt; 789 &lt;/div&gt;\n    #end            \n</code></pre>\n\n<p>关系、逻辑运算符</p>\n\n<pre><code>    ## 全等，使用 == \n    $foo == $bar      \n\n    ## AND、OR、NOT，使用 &amp;&amp;、||、!\n    $foo &amp;&amp; $bar\n    $foo || $bar\n    !$foo\n</code></pre>\n\n<p>循环</p>\n\n<pre><code>    &lt;ul&gt;\n        #foreach ( $product in $allProducts)\n            &lt;li&gt; $product &lt;li&gt;\n        #end    \n    &lt;/ul&gt;   \n</code></pre>\n\n<p>include 引入文件</p>\n\n<pre><code>    ## 文件必须包含在TEMPLATE_ROOT目录下  \n    #include ('test.txt')\n    #include ('test1.txt', 'test2.txt', 'test3.txt')\n</code></pre>\n\n<p>parse 渲染文件</p>\n\n<pre><code>    ## 文件必须包含在TEMPLATE_ROOT目录下\n    #parse('test.vm')               \n</code></pre>\n\n<p>macro 宏的定义</p>\n\n<pre><code>    ## 宏可以定义可重用的代码\n    #macro ( tpl $title $description )\n        &lt;div&gt;\n            &lt;h1&gt; $title &lt;/h1&gt;\n            &lt;p&gt; $description &lt;/p&gt;\n        &lt;div&gt;   \n\n    ## 使用这个宏，将会进行替换\n    #tpl('title', 'This is a description')  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405636517000,"created_by":1,"updated_at":1405636517000,"updated_by":1,"published_at":1405636517000,"published_by":1},{"id":515,"uuid":"59137215-d270-4e44-9b1d-2200dd55afc9","title":"Web worker 的简单使用","slug":"web-worker","markdown":"\n\n# Main.js\n\n   注意在 chrome 下  worker 不能正常加载，需要在服务器环境下\n   \n        var worker = new Worker('Worker.js');\n\n        // 给 worker 发送消息\n        worker.postMessage('Hi, I am a message from Main');\n\n        // 监听来自 worker 的消息\n        worker.onmessage  = function (e) {\n            console.log(e);\n            console.log('Main had receive a message: ', e.data);\n\n            // 接收 worker 传回的指令\n            if (e.data.command) {\n                eval('(' + e.data.command + ')')\n            }\n        };\n        \n        // 中止 worker\n        // 立即杀死 worker\n        // worker.terminate();\n        \n# Worker.js\n\n\t    console.log('Worker: I am working!');\n\n        // 发送消息给主线程\n        postMessage('Hi, I am a message from Worker!');\n\n        // 监听主线程传来的消息\n        onmessage = function (e) {\n            console.log(e);\n            console.log('Worker had receive a message: ', e.data);\n        };\n\n\n        // 注意： 通常来说，后台线程 – 包括 worker – 无法操作 DOM。\n        // 如果后台线程需要修改 DOM，那么它应该将消息发送给它的创建者，让创建者来完成这些操作。\n        // document.write('I will not be executed :(');  => 报错：alert is not defined\n\n\n        //  所以为了操作 DOM, 可以通过传递命令的方式来让主线程来执行\n        postMessage({\n            command: \"document.write('hello I am from Worker')\"\n        });    \n        \n        // 除了在 Main.js 杀死线程，也可以自己杀死自己\n        // self.close();  ","html":"<h1 id=\"mainjs\">Main.js</h1>\n\n<p>注意在 chrome 下  worker 不能正常加载，需要在服务器环境下</p>\n\n<pre><code>    var worker = new Worker('Worker.js');\n\n    // 给 worker 发送消息\n    worker.postMessage('Hi, I am a message from Main');\n\n    // 监听来自 worker 的消息\n    worker.onmessage  = function (e) {\n        console.log(e);\n        console.log('Main had receive a message: ', e.data);\n\n        // 接收 worker 传回的指令\n        if (e.data.command) {\n            eval('(' + e.data.command + ')')\n        }\n    };\n\n    // 中止 worker\n    // 立即杀死 worker\n    // worker.terminate();\n</code></pre>\n\n<h1 id=\"workerjs\">Worker.js</h1>\n\n<pre><code>    console.log('Worker: I am working!');\n\n    // 发送消息给主线程\n    postMessage('Hi, I am a message from Worker!');\n\n    // 监听主线程传来的消息\n    onmessage = function (e) {\n        console.log(e);\n        console.log('Worker had receive a message: ', e.data);\n    };\n\n\n    // 注意： 通常来说，后台线程 – 包括 worker – 无法操作 DOM。\n    // 如果后台线程需要修改 DOM，那么它应该将消息发送给它的创建者，让创建者来完成这些操作。\n    // document.write('I will not be executed :(');  =&gt; 报错：alert is not defined\n\n\n    //  所以为了操作 DOM, 可以通过传递命令的方式来让主线程来执行\n    postMessage({\n        command: \"document.write('hello I am from Worker')\"\n    });    \n\n    // 除了在 Main.js 杀死线程，也可以自己杀死自己\n    // self.close();  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1417269994000,"created_by":1,"updated_at":1417269994000,"updated_by":1,"published_at":1417269994000,"published_by":1},{"id":516,"uuid":"68a0843a-4cc3-40dc-8ed0-f7554ef48edb","title":"XMLHttpRequest 对象新特性","slug":"xhr","markdown":"\n\n# 旧版本\n\n```\n// 新建实例\nvar xhr = new XMLHttpRequest();\n\n// 向服务器发出请求\nxhr.open('GET','example.php');\nxhr.send();\n\n// 监控xhr对象的状态变化，制定回调函数\nxhr.onreadystatechange  = function(){\n     if(xhr.readyState ==4 && xhr.status ==200){ // 4表示数据接收完毕，200表示服务器返回一切正常\n          alert( xhr.responseText ); \n     } else {\n          alert( xhr.statusText );\n     }\n}\n```\n\n<!-- more -->\n\n- xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。\n\n- xhr.status：服务器返回的状态码，等于200表示一切正常。\n\n- xhr.responseText：服务器返回的文本数据\n\n- xhr.responseXML：服务器返回的XML格式的数据\n\n- xhr.statusText：服务器返回的状态文本。\n\n\n## 旧版本的缺点\n\n- 只支持文本数据传送，不能读取和上传二进制文件\n\n- 没有进度提示，只能提示有没有完成\n\n- 有同域限制\n\n\n# 新版本\n\n\n## 新版本的改进\n\n- 可设置HTTP请求时限\n\n- 可用FormData对象管理表单数据\n\n- 可上传文件、读取服务器端的二进制信息\n\n- 有进度信息\n\n- 可跨域请求\n\n```\n// 设置请求时限\nxhr.timeout = 3000; // 过了 3s 就停止HTTP请求\n//请求超时的毁掉函数\nxhr.ontimeout = function(event){\n     console.log('Time out!');\n}\n\n// 新建FormData对象（HTML5）\nvar formData = new FormDate();\n// 可在这个 FormData 对象中添加表单项\nformData.append('name','xiaolai');\nformData.append('id',123456);\n// 发送该表单，与提交网页表单效果一样\nxhr.send(formData);\n\n// 获取页面中表单\nvar form = document.getElementById('myform');\n// 生成 FormData 对象表单\nvar formData = new FormData(form); \n// 可继续添加表单项，如 csrf\nformData.append('csrfToken','123456789'); \n//发送表单\nxhr.open('POST',form.action);             \nxhr.send(formData);\n\n// 新酷特性：可上传文件！\n// 假定 files 是 input[type=\"file\"] 的元素\nvat formData = new FormData();\nvar files = document.getElementById('myFiles');\n// 注意可能是多文件\nfor(var i = 0; i < files.length; i++) {\n     formData.append('files[]',files[i]);\n}\n// 发送啦！\nxhr.send(formData);\n```\n\n## 注意几点：\n\n- 跨域请求 Cross-origin resource sharing 前提是浏览器的支持且服务器同意\n\t\n\t写法与不跨域请求的写法一样\n\n\t```\n\txhr.open('GET','http://other.server/and/path/to/script');\n\t```\n\n- 读取二进制数据\n\t\n\t- 方法1：改写MIMEType属性\n\t\n\t- 方法2：改变 responseType属性\n\n- 显示进度的 progress 事件\n\n\t- 下载的progress事件属于XMLHttpRequest对象\n\t\n\t- 上传的progress事件属于XMLHttpRequest.upload对象\n\n\n\n\n\n\n\n\n\n\n","html":"<h1 id=\"\">旧版本</h1>\n\n<pre><code>// 新建实例\nvar xhr = new XMLHttpRequest();\n\n// 向服务器发出请求\nxhr.open('GET','example.php');  \nxhr.send();\n\n// 监控xhr对象的状态变化，制定回调函数\nxhr.onreadystatechange  = function(){  \n     if(xhr.readyState ==4 &amp;&amp; xhr.status ==200){ // 4表示数据接收完毕，200表示服务器返回一切正常\n          alert( xhr.responseText ); \n     } else {\n          alert( xhr.statusText );\n     }\n}\n</code></pre>\n\n<!-- more -->\n\n<ul>\n<li><p>xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。</p></li>\n<li><p>xhr.status：服务器返回的状态码，等于200表示一切正常。</p></li>\n<li><p>xhr.responseText：服务器返回的文本数据</p></li>\n<li><p>xhr.responseXML：服务器返回的XML格式的数据</p></li>\n<li><p>xhr.statusText：服务器返回的状态文本。</p></li>\n</ul>\n\n<h2 id=\"\">旧版本的缺点</h2>\n\n<ul>\n<li><p>只支持文本数据传送，不能读取和上传二进制文件</p></li>\n<li><p>没有进度提示，只能提示有没有完成</p></li>\n<li><p>有同域限制</p></li>\n</ul>\n\n<h1 id=\"\">新版本</h1>\n\n<h2 id=\"\">新版本的改进</h2>\n\n<ul>\n<li><p>可设置HTTP请求时限</p></li>\n<li><p>可用FormData对象管理表单数据</p></li>\n<li><p>可上传文件、读取服务器端的二进制信息</p></li>\n<li><p>有进度信息</p></li>\n<li><p>可跨域请求</p></li>\n</ul>\n\n<pre><code>// 设置请求时限\nxhr.timeout = 3000; // 过了 3s 就停止HTTP请求  \n//请求超时的毁掉函数\nxhr.ontimeout = function(event){  \n     console.log('Time out!');\n}\n\n// 新建FormData对象（HTML5）\nvar formData = new FormDate();  \n// 可在这个 FormData 对象中添加表单项\nformData.append('name','xiaolai');  \nformData.append('id',123456);  \n// 发送该表单，与提交网页表单效果一样\nxhr.send(formData);\n\n// 获取页面中表单\nvar form = document.getElementById('myform');  \n// 生成 FormData 对象表单\nvar formData = new FormData(form);  \n// 可继续添加表单项，如 csrf\nformData.append('csrfToken','123456789');  \n//发送表单\nxhr.open('POST',form.action);  \nxhr.send(formData);\n\n// 新酷特性：可上传文件！\n// 假定 files 是 input[type=\"file\"] 的元素\nvat formData = new FormData();  \nvar files = document.getElementById('myFiles');  \n// 注意可能是多文件\nfor(var i = 0; i &lt; files.length; i++) {  \n     formData.append('files[]',files[i]);\n}\n// 发送啦！\nxhr.send(formData);  \n</code></pre>\n\n<h2 id=\"\">注意几点：</h2>\n\n<ul>\n<li><p>跨域请求 Cross-origin resource sharing 前提是浏览器的支持且服务器同意</p>\n\n<p>写法与不跨域请求的写法一样</p>\n\n<p><code>\nxhr.open('GET','http://other.server/and/path/to/script');\n</code></p></li>\n<li><p>读取二进制数据</p>\n\n<ul><li><p>方法1：改写MIMEType属性</p></li>\n<li><p>方法2：改变 responseType属性</p></li></ul></li>\n<li><p>显示进度的 progress 事件</p>\n\n<ul><li><p>下载的progress事件属于XMLHttpRequest对象</p></li>\n<li><p>上传的progress事件属于XMLHttpRequest.upload对象</p></li></ul></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405923741000,"created_by":1,"updated_at":1405923741000,"updated_by":1,"published_at":1405923741000,"published_by":1},{"id":517,"uuid":"a34967a3-91c9-4573-83a6-a541ba300689","title":"bytewiser 练习","slug":"bytewiser","markdown":"\n\n> bytewiser 是 nodeschool.io 出品的nodejs入门练习项目\n\n# bytewiser-exercise-1\n\nWrite a node program that prints a buffer object containing the string \"bytewiser\" using console.log.\n\n```\nvar str = 'bytewiser';\nvar buffer = new Buffer(str);\nconsole.log(buffer);\n```\n\n# bytewiser-exercise-2\n\nGiven an unknown number of bytes passed via process.argv, create a buffer from them and output a hexadecimal encoded representation of the buffer.\n```\nvar array = process.argv.slice(2);\nvar buffer = new Buffer(array);\nconsole.log(buffer.toString('hex'));\n\n// 官方答案\n// var bytes = process.argv.slice(2).map(function(arg) { return parseInt(arg) })\n// console.log(new Buffer(bytes).toString('hex'))\n```\n\n<!--more-->\n\n# bytewiser-exercise-3\n\nWrite a program that takes the first buffer written to `process.stdin`,\nupdates all instances of . with ! and then logs out the updated buffer object.\n```\n// 监听用户输入，将 . 替换为 ! 输出\nprocess.stdin.on('data', function(buffer) {\n  for (var i = 0; i < buffer.length; i++) {\n    // 0x2e 对应为 .\n    // 0x2e 对应为 !\n    if (buffer[i] === 0x2e) buffer[i] = 0x21\n  }\n  console.log(buffer);\n});\n```\n\n# bytewiser-exercise-4\n\nThe argument given to you from `process.argv[2]` will be a path to a file.\nRead this file and split it by newline characters ('\\n'). You should log one Buffer per line.\n\n```\nvar fs = require('fs');\nvar file = process.argv[2];\nfs.readFile(file, function (err, data) {\n    if (err) {\n        throw err;\n    }\n    var array = data.toString().split('\\n');\n    var len = array.length;\n    var buffer;\n    for (var i = 0; i < len; i++) {\n        buffer = new Buffer(array[i]);\n        console.log(buffer);\n    };\n});\n\n// 官方答案\n// var fs = require('fs')\n// var file = fs.readFileSync(process.argv[2])\n// var offset = 0\n// for (var i = 0; i < file.length; i++) {\n//   if (file[i] === 10) {\n//     console.log(file.slice(offset, i))\n//     i++\n//     offset = i\n//   }\n// }\n// console.log(file.slice(offset, i))\n```\n\n# bytewiser-exercise-5\n\nWrite a program that combines all of the buffers from `process.stdin`\nand then writes the single big buffer out to the console.\n\n```\nvar buffers = [];\nprocess.stdin.on('data', function (chunk) {\n    var buffer = new Buffer(chunk);\n    buffers.push(buffer);\n});\nprocess.stdin.on('end', function () {\n    var result = Buffer.concat(buffers);\n    console.log(result);\n});\n\n// 官方答案\n// var buffers = [];\n// process.stdin.on('readable', function() {\n//   var chunk = process.stdin.read();\n//   if (chunk !== null) {\n//     buffers.push(chunk);\n//   }\n// });\n// process.stdin.on('end', function() {\n//   console.log(Buffer.concat(buffers));\n// });\n```\n\n# bytewiser-exercise-6\n\nRead the first buffer from process.stdin, copy all bytes into a\nUint8Array and then log out a JSON stringified representation of the typed array.\n\n```\nprocess.stdin.on('data', function (chunk) {\n    var uInt8array = new Uint8Array(chunk);\n    var result = JSON.stringify(uInt8array);\n    console.log(result);\n});\n\n// 官方答案\n// process.stdin.once('data', function(buff) {\n//   var ui8 = new Uint8Array(buff)\n//   console.log(JSON.stringify(ui8))\n// })\n```\n\n# bytewiser-exercise-7\n\nTake the integer from process.argv[2] and write it as the first\nelement in a single element Uint32Array. Then create a Uint16Array from the Array\nBuffer of the Uint32Array and log out to the console the JSON stringified version\nof the Uint16Array.\n\n```\nvar int = parseInt(process.argv[2]);\nvar uint32array = new Uint32Array(1);\nuint32array[0] = int;\nvar uint16array = new Uint16Array(uint32array.buffer);\nvar result = JSON.stringify(uint16array);\nconsole.log(result);\n\n// 官方答案\n// var num = +process.argv[2]\n// var ui32 = new Uint32Array(1)\n// ui32[0] = num\n// var ui16 = new Uint16Array(ui32.buffer)\n// console.log(JSON.stringify(ui16))\n```","html":"<blockquote>\n  <p>bytewiser 是 nodeschool.io 出品的nodejs入门练习项目</p>\n</blockquote>\n\n<h1 id=\"bytewiserexercise1\">bytewiser-exercise-1</h1>\n\n<p>Write a node program that prints a buffer object containing the string \"bytewiser\" using console.log.</p>\n\n<pre><code>var str = 'bytewiser';  \nvar buffer = new Buffer(str);  \nconsole.log(buffer);  \n</code></pre>\n\n<h1 id=\"bytewiserexercise2\">bytewiser-exercise-2</h1>\n\n<p>Given an unknown number of bytes passed via process.argv, create a buffer from them and output a hexadecimal encoded representation of the buffer.  </p>\n\n<pre><code>var array = process.argv.slice(2);  \nvar buffer = new Buffer(array);  \nconsole.log(buffer.toString('hex'));\n\n// 官方答案\n// var bytes = process.argv.slice(2).map(function(arg) { return parseInt(arg) })\n// console.log(new Buffer(bytes).toString('hex'))\n</code></pre>\n\n<!--more-->\n\n<h1 id=\"bytewiserexercise3\">bytewiser-exercise-3</h1>\n\n<p>Write a program that takes the first buffer written to <code>process.stdin</code>, <br />\nupdates all instances of . with ! and then logs out the updated buffer object.  </p>\n\n<pre><code>// 监听用户输入，将 . 替换为 ! 输出\nprocess.stdin.on('data', function(buffer) {  \n  for (var i = 0; i &lt; buffer.length; i++) {\n    // 0x2e 对应为 .\n    // 0x2e 对应为 !\n    if (buffer[i] === 0x2e) buffer[i] = 0x21\n  }\n  console.log(buffer);\n});\n</code></pre>\n\n<h1 id=\"bytewiserexercise4\">bytewiser-exercise-4</h1>\n\n<p>The argument given to you from <code>process.argv[2]</code> will be a path to a file. <br />\nRead this file and split it by newline characters ('\\n'). You should log one Buffer per line.</p>\n\n<pre><code>var fs = require('fs');  \nvar file = process.argv[2];  \nfs.readFile(file, function (err, data) {  \n    if (err) {\n        throw err;\n    }\n    var array = data.toString().split('\\n');\n    var len = array.length;\n    var buffer;\n    for (var i = 0; i &lt; len; i++) {\n        buffer = new Buffer(array[i]);\n        console.log(buffer);\n    };\n});\n\n// 官方答案\n// var fs = require('fs')\n// var file = fs.readFileSync(process.argv[2])\n// var offset = 0\n// for (var i = 0; i &lt; file.length; i++) {\n//   if (file[i] === 10) {\n//     console.log(file.slice(offset, i))\n//     i++\n//     offset = i\n//   }\n// }\n// console.log(file.slice(offset, i))\n</code></pre>\n\n<h1 id=\"bytewiserexercise5\">bytewiser-exercise-5</h1>\n\n<p>Write a program that combines all of the buffers from <code>process.stdin</code> <br />\nand then writes the single big buffer out to the console.</p>\n\n<pre><code>var buffers = [];  \nprocess.stdin.on('data', function (chunk) {  \n    var buffer = new Buffer(chunk);\n    buffers.push(buffer);\n});\nprocess.stdin.on('end', function () {  \n    var result = Buffer.concat(buffers);\n    console.log(result);\n});\n\n// 官方答案\n// var buffers = [];\n// process.stdin.on('readable', function() {\n//   var chunk = process.stdin.read();\n//   if (chunk !== null) {\n//     buffers.push(chunk);\n//   }\n// });\n// process.stdin.on('end', function() {\n//   console.log(Buffer.concat(buffers));\n// });\n</code></pre>\n\n<h1 id=\"bytewiserexercise6\">bytewiser-exercise-6</h1>\n\n<p>Read the first buffer from process.stdin, copy all bytes into a <br />\nUint8Array and then log out a JSON stringified representation of the typed array.</p>\n\n<pre><code>process.stdin.on('data', function (chunk) {  \n    var uInt8array = new Uint8Array(chunk);\n    var result = JSON.stringify(uInt8array);\n    console.log(result);\n});\n\n// 官方答案\n// process.stdin.once('data', function(buff) {\n//   var ui8 = new Uint8Array(buff)\n//   console.log(JSON.stringify(ui8))\n// })\n</code></pre>\n\n<h1 id=\"bytewiserexercise7\">bytewiser-exercise-7</h1>\n\n<p>Take the integer from process.argv[2] and write it as the first <br />\nelement in a single element Uint32Array. Then create a Uint16Array from the Array <br />\nBuffer of the Uint32Array and log out to the console the JSON stringified version <br />\nof the Uint16Array.</p>\n\n<pre><code>var int = parseInt(process.argv[2]);  \nvar uint32array = new Uint32Array(1);  \nuint32array[0] = int;  \nvar uint16array = new Uint16Array(uint32array.buffer);  \nvar result = JSON.stringify(uint16array);  \nconsole.log(result);\n\n// 官方答案\n// var num = +process.argv[2]\n// var ui32 = new Uint32Array(1)\n// ui32[0] = num\n// var ui16 = new Uint16Array(ui32.buffer)\n// console.log(JSON.stringify(ui16))\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1408802641000,"created_by":1,"updated_at":1408802641000,"updated_by":1,"published_at":1408802641000,"published_by":1},{"id":518,"uuid":"0a9ebb15-978d-40f7-a1d3-af84f3feeee1","title":"express提供的中间件","slug":"express-middler-ware","markdown":"\n\n## Express 框架中常用的一些中间件的使用方法\n\n- basiAuth 访问控制\n\n\t\t// 帐号密码正确时才发回 true，才能继续访问\n\t\tvar express =  require('express');\n\t\tvar app = express();\n\t\t// 这里的用户名和密码应从数据库读取\n\t\tapp.use(express.basicAuth('username', 'password'));\n\t\tapp.get('/', function (req, res) {\n\t\t\tres. send('成功登录后才会看到这段内容。');\n\t\t});\n\t\tapp.listen(1234, 'localhost');\n\n- bodyParse 处理请求 body 的内容\n\n\t\t// 内部使用 JSON\t编码、url 编码处理和文件的上传处理\n\t\t// 处理一个上传文件\n        <body>\n          <h1>使用 express.bodyParser 中间件上传文件</h1>\n          <form id=\"myForm\" action=\"upload.html\" method=\"post\" enctype=\"multipart/form-data\">\n            <input type=\"file\" id=\"file\" name=\"file\">\n            <input type=\"submit\" onclick=\"uploadFile()\" value=\"上传\">\n          </form>\n          <div id=\"result\">\n            选择文件后，点击按钮上传.\n          </div>\n        </body>\n\n\t\t\n    \t// 帐号密码正确时才发回 true，才能继续访问\n    \tvar express =  require('express');\n        var connect = require('connect');\n        var fs = require('fs');\n    \t\tvar app = express();\n        // 使用 bodyParser 处理上传\n        // app.use(express.bodyParser());\n        app.use(connect.urlencoded());\n        app.use(connect.json());\n        app.get('/upload.html', function (req, res) {\n          res.sendFile(__dirname + '/upload.html');\n        });\n        // 开始处理\n        app.post('/upload.html', function (req, res) {\n          var file = req.files.myFile;\n          // 读取文件\n          fs.readFile(file.path, function (err, data) {\n            if (err) throw err; //读取文件失败\n            fs.writeFile(file.name, data, function (err) {\n              if (err) throw err; // 写入文件失败\n              res.send('文件上传成功！');\n            })\n          })\n        })\n    \tapp.listen(1234, 'localhost');\n\t\t\n\t\t\n\t \n- compress 压缩响应流数据\n\n\t\t// 在其他中间前调用才能保证全部数据流都压缩\n\t\t\n- cookieParser 处理 cookie\n\n        var express = require('express');\n        var app = express();\n        // 使用 cookieParser 处理 cookie\n        app.use(express.cookieParser());\n        // 提前在 cookie.html 中埋下 cookie\n        app.get('/cookie.html', function (req, res) {\n            res.sendFile(__dirname + '/cookie.html');\n        });\n        app.post('/cookie.html', function (req, res) {\n          var cookies = req.cookies;\n          // 开始处理\n          for (var key in cookies) {\n            res.write('名：', key);\n            res.write('值：', cookies[key]);\n            res.write('</br>');\n          }\n          res.end();\n        });\n        app.listen(1234, 'localhost');\t\t\n\t\t\n- csrf 防止跨站访问\n\n\t\t// 与 session 中间件 和 bodyParser 中间件配合使用\n\t\t\n- directory 列出某目录下的文件列表\n\n\t\t// app.use(express.directory(path, [options]))\n\t\t// 与 express.static 配合使用\n\t\tapp.use(express.static(__dirname));\n\t\tapp.use(express.directory(__dirname), {icons: true}); // 显示文件icon\n\t\t// 此时会列出文件目录，且点击静态文件（如js/css）可直接访问\n\n\n- errorHandler 捕获错误\n\n- limit 限制请求提交数据的字节数\n\n\t\t// 限制为 1M，超出则报错\n\t\tvar size = 1024*1024; // 1M\n\t\tapp.use(express.limit(size))\n\n\n- logger 输出日志到文件中\n\n\t\t// app.use(express.logger([options]))\n\t\t// options = {\n\t\t//\timmediate: false, // 是否在接收到客户端请求时就输出日志,否则服务器端发送完响应数据才输出\n\t\t//\tformat: 'default', // 可选 default/short/tiny/dev，即输出日志的格式\t\t//  stream: process.stdout, // 指定输出数据流的对象\n\t\t// \tbuffer: undefined, // 整数毫秒则指定缓存区有效时间啊暖，或为 true 时，使用缓存区且有效时间为 1000ms\n\t\t// }\n\t\tvar express = require('express');\n\t\tvar app = express();\n\t\tapp.use(express.logger({\n\t\t\tformat: 'default',\n\t\t\tstream: process.stdout\n\t\t}))\n\t\t\n\n\n- methodOverride 为 bodyParser 提供 HTTP 支持\n\n- reponseTime 在响应头添加 X-Request-Time 字段\n\n\t\t// 使用后可在 浏览器控制台查看到响应头多了一个 X-Request-Time \n\t\tapp.use(express.responseTime());\n\t\t\n\n- router 提供路由功能\n\t\t\n\t\t// express 3.x 隐式使用了 router \n\t\t\n- session 提供session功能\n\n\t\t// session 加密过的数据保存在 cookie 中\n\t\tapp.use(express.session([options]))\n\t\toptions = {\n\t\t\tkey: connect.sid, // 字符串，指定保存这个 session 的 cookie 名\n\t\t\tstore: , // 保存 session 的第三方存储对象\n\t\t\tfingerprint: function () {}, // 一个自定义指纹生成函数\n\t\t\tcookie: {path: '/', httpOnly: true, maxAge: 14400000}, // 指定保存 session 的设置 cookie 的对象\n\t\t\tsecret: 'xiaolai', // 字符串，用于 session 的数据加密（加盐）\n\t\t}\n\t\t\n\t\t// 使用这个中间件后，就有了 req.session 属性\n\t\tvar express = require('express');\n\t\tvar app = express();\n\t\tapp.use(express.cookieParser());\n\t\tapp.use(express.session({secret: 'xiaolai'}));\n\t\tapp.get('/', function (req, res) {\n\t\t\tres.sendFile(__dianema + '/index.html');\n\t\t\t// 开始设置\n\t\t\treq.session.username = 'xiaolai';\n\t\t\treq.session.password = 'password';\n\t\t\t\n\t\t\t// 重新生成\n\t\t\t// req.session.regenerate(function (err) {});\n\t\t\t\n\t\t\t// 销毁\n\t\t\t// req.session.destroy(function (err) {});\n\t\t})\n\n- static 设置访问静态文件的功能\n\n\t\t// public 为存放静态文件的目录\n\t\tapp.use(express.static('public'))\n\t\t\n- 自定义错误处理中间件\n\n\t\tapp.use(function (err, req, res, next) {\n\t\t\t// 输出错误到服务端\n\t\t\tconsole.log(err.stack);\n\t\t\tnext();\n\t\t})\t\n\t\tapp.use(function (err, req, res, next) {\n\t\t\t// 输出错误到客户端\n\t\t\tres.send(500, err.message);\n\t\t})\t\n\n<!-- more -->\t\n\n## Express 框架中常用的一些配置的使用方法\n\n\t\t// env 指定环境， callback为无参数的回调\n\t\t// app.configure([env], callback)\t\n\n\t\t// 设置\n\t\tapp.set(name, value);\n\t\t// 将 布尔类型的内部变量设置为 true\n\t\tapp.enable(name);\n\t\t// 或 false\n\t\t\n\t\tapp.disable(name);\n\t\t// 判断是否为 true\n\t\tvar isTure = app.enabled(name)\n\t\t// 或 false\n\t\tvar isFalse = app.disabled(name)\n\t\t\n\t\t// 获取设置\n\t\tvar value = app.get(name);\n\t\t\n\n- 所有环境下的配置\n\n\t\tapp.configure(function () {\n\t\t\tapp.set('title', 'My title');\n\t\t\t// 模板文件存放的目录\n\t\t\tapp.set('views', __dirname + '/views');\n\t\t\t// 模板引擎\n\t\t\tapp.set('view engine', 'ejs');\n\t\t\t// 使用一些中间件\n\t\t\tapp.use(express.bodyParser());\n\t\t\tapp.use(express.cookieParser());\n\t\t\tapp.use(express.static(__dirname + '/public'));\n\t\t\tapp.use(app.router);\n\t\t});\t\n\t\t\n\t\t// 相当于：\n\t\tapp.set('title', 'My title');\n\t\t// ...\n\t\t\n- 针对开发环境的配置\t\t\n\t\n\t\tapp.configure('development', function () {\n\t\t\tapp.set('db uri', 'localhost/dev');\n\t\t});\n\t\t\n\t\t// 相当于：\n\t\tif (app.get('env') === 'development') {\n\t\t\tapp.set('db uri', 'localhost/dev');\n\t\t}\n\n- 针对生产环境的配置\n\n\t\tapp.configure('production', function () {\n\t\t\tapp.set('db uri', '222.201.132.xxx/prod');\n\t\t})\t\n\t\t\n\t\t// 相当于：\n\t\tif (app.get('env') === 'production') {\n\t\t\tapp.set('db uri', '222.201.132.xxx/prod');\n\t\t}\n\t\t\n\t\n\n\n\n\n\n\n\n\t\t\n\t\t\n\t\t\n\t\t\n ","html":"<h2 id=\"express\">Express 框架中常用的一些中间件的使用方法</h2>\n\n<ul>\n<li><p>basiAuth 访问控制</p>\n\n<pre><code>// 帐号密码正确时才发回 true，才能继续访问\nvar express =  require('express');\nvar app = express();\n// 这里的用户名和密码应从数据库读取\napp.use(express.basicAuth('username', 'password'));\napp.get('/', function (req, res) {\n    res. send('成功登录后才会看到这段内容。');\n});\napp.listen(1234, 'localhost');\n</code></pre></li>\n<li><p>bodyParse 处理请求 body 的内容</p>\n\n<pre><code>// 内部使用 JSON    编码、url 编码处理和文件的上传处理\n// 处理一个上传文件\n&lt;body&gt;\n  &lt;h1&gt;使用 express.bodyParser 中间件上传文件&lt;/h1&gt;\n  &lt;form id=\"myForm\" action=\"upload.html\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" id=\"file\" name=\"file\"&gt;\n    &lt;input type=\"submit\" onclick=\"uploadFile()\" value=\"上传\"&gt;\n  &lt;/form&gt;\n  &lt;div id=\"result\"&gt;\n    选择文件后，点击按钮上传.\n  &lt;/div&gt;\n&lt;/body&gt;\n\n\n// 帐号密码正确时才发回 true，才能继续访问\nvar express =  require('express');\nvar connect = require('connect');\nvar fs = require('fs');\n    var app = express();\n// 使用 bodyParser 处理上传\n// app.use(express.bodyParser());\napp.use(connect.urlencoded());\napp.use(connect.json());\napp.get('/upload.html', function (req, res) {\n  res.sendFile(__dirname + '/upload.html');\n});\n// 开始处理\napp.post('/upload.html', function (req, res) {\n  var file = req.files.myFile;\n  // 读取文件\n  fs.readFile(file.path, function (err, data) {\n    if (err) throw err; //读取文件失败\n    fs.writeFile(file.name, data, function (err) {\n      if (err) throw err; // 写入文件失败\n      res.send('文件上传成功！');\n    })\n  })\n})\napp.listen(1234, 'localhost');\n</code></pre></li>\n<li><p>compress 压缩响应流数据</p>\n\n<pre><code>// 在其他中间前调用才能保证全部数据流都压缩\n</code></pre></li>\n<li><p>cookieParser 处理 cookie</p>\n\n<pre><code>var express = require('express');\nvar app = express();\n// 使用 cookieParser 处理 cookie\napp.use(express.cookieParser());\n// 提前在 cookie.html 中埋下 cookie\napp.get('/cookie.html', function (req, res) {\n    res.sendFile(__dirname + '/cookie.html');\n});\napp.post('/cookie.html', function (req, res) {\n  var cookies = req.cookies;\n  // 开始处理\n  for (var key in cookies) {\n    res.write('名：', key);\n    res.write('值：', cookies[key]);\n    res.write('&lt;/br&gt;');\n  }\n  res.end();\n});\napp.listen(1234, 'localhost');        \n</code></pre></li>\n<li><p>csrf 防止跨站访问</p>\n\n<pre><code>// 与 session 中间件 和 bodyParser 中间件配合使用\n</code></pre></li>\n<li><p>directory 列出某目录下的文件列表</p>\n\n<pre><code>// app.use(express.directory(path, [options]))\n// 与 express.static 配合使用\napp.use(express.static(__dirname));\napp.use(express.directory(__dirname), {icons: true}); // 显示文件icon\n// 此时会列出文件目录，且点击静态文件（如js/css）可直接访问\n</code></pre></li>\n<li><p>errorHandler 捕获错误</p></li>\n<li><p>limit 限制请求提交数据的字节数</p>\n\n<pre><code>// 限制为 1M，超出则报错\nvar size = 1024*1024; // 1M\napp.use(express.limit(size))\n</code></pre></li>\n<li><p>logger 输出日志到文件中</p>\n\n<pre><code>// app.use(express.logger([options]))\n// options = {\n//  immediate: false, // 是否在接收到客户端请求时就输出日志,否则服务器端发送完响应数据才输出\n//  format: 'default', // 可选 default/short/tiny/dev，即输出日志的格式        //  stream: process.stdout, // 指定输出数据流的对象\n//  buffer: undefined, // 整数毫秒则指定缓存区有效时间啊暖，或为 true 时，使用缓存区且有效时间为 1000ms\n// }\nvar express = require('express');\nvar app = express();\napp.use(express.logger({\n    format: 'default',\n    stream: process.stdout\n}))\n</code></pre></li>\n<li><p>methodOverride 为 bodyParser 提供 HTTP 支持</p></li>\n<li><p>reponseTime 在响应头添加 X-Request-Time 字段</p>\n\n<pre><code>// 使用后可在 浏览器控制台查看到响应头多了一个 X-Request-Time \napp.use(express.responseTime());\n</code></pre></li>\n<li><p>router 提供路由功能</p>\n\n<pre><code>// express 3.x 隐式使用了 router \n</code></pre></li>\n<li><p>session 提供session功能</p>\n\n<pre><code>// session 加密过的数据保存在 cookie 中\napp.use(express.session([options]))\noptions = {\n    key: connect.sid, // 字符串，指定保存这个 session 的 cookie 名\n    store: , // 保存 session 的第三方存储对象\n    fingerprint: function () {}, // 一个自定义指纹生成函数\n    cookie: {path: '/', httpOnly: true, maxAge: 14400000}, // 指定保存 session 的设置 cookie 的对象\n    secret: 'xiaolai', // 字符串，用于 session 的数据加密（加盐）\n}\n\n\n// 使用这个中间件后，就有了 req.session 属性\nvar express = require('express');\nvar app = express();\napp.use(express.cookieParser());\napp.use(express.session({secret: 'xiaolai'}));\napp.get('/', function (req, res) {\n    res.sendFile(__dianema + '/index.html');\n    // 开始设置\n    req.session.username = 'xiaolai';\n    req.session.password = 'password';\n\n\n<pre><code>// 重新生成\n// req.session.regenerate(function (err) {});\n\n\n// 销毁\n// req.session.destroy(function (err) {});\n</code></pre>\n\n})\n</code></pre></li>\n<li><p>static 设置访问静态文件的功能</p>\n\n<pre><code>// public 为存放静态文件的目录\napp.use(express.static('public'))\n</code></pre></li>\n<li><p>自定义错误处理中间件</p>\n\n<pre><code>app.use(function (err, req, res, next) {\n    // 输出错误到服务端\n    console.log(err.stack);\n    next();\n})  \napp.use(function (err, req, res, next) {\n    // 输出错误到客户端\n    res.send(500, err.message);\n})  \n</code></pre></li>\n</ul>\n\n<!-- more -->    \n\n<h2 id=\"express\">Express 框架中常用的一些配置的使用方法</h2>\n\n<pre><code>    // env 指定环境， callback为无参数的回调\n    // app.configure([env], callback)   \n\n    // 设置\n    app.set(name, value);\n    // 将 布尔类型的内部变量设置为 true\n    app.enable(name);\n    // 或 false\n\n    app.disable(name);\n    // 判断是否为 true\n    var isTure = app.enabled(name)\n    // 或 false\n    var isFalse = app.disabled(name)\n\n    // 获取设置\n    var value = app.get(name);\n</code></pre>\n\n<ul>\n<li><p>所有环境下的配置</p>\n\n<pre><code>app.configure(function () {\n    app.set('title', 'My title');\n    // 模板文件存放的目录\n    app.set('views', __dirname + '/views');\n    // 模板引擎\n    app.set('view engine', 'ejs');\n    // 使用一些中间件\n    app.use(express.bodyParser());\n    app.use(express.cookieParser());\n    app.use(express.static(__dirname + '/public'));\n    app.use(app.router);\n}); \n\n\n// 相当于：\napp.set('title', 'My title');\n// ...\n</code></pre></li>\n<li><p>针对开发环境的配置        </p>\n\n<pre><code>app.configure('development', function () {\n    app.set('db uri', 'localhost/dev');\n});\n\n\n// 相当于：\nif (app.get('env') === 'development') {\n    app.set('db uri', 'localhost/dev');\n}\n</code></pre></li>\n<li><p>针对生产环境的配置</p>\n\n<pre><code>app.configure('production', function () {\n    app.set('db uri', '222.201.132.xxx/prod');\n})  \n\n\n// 相当于：\nif (app.get('env') === 'production') {\n    app.set('db uri', '222.201.132.xxx/prod');\n}\n</code></pre></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400495214000,"created_by":1,"updated_at":1400495214000,"updated_by":1,"published_at":1400495214000,"published_by":1},{"id":519,"uuid":"1655e43d-8869-4a06-bb40-98ebaf1ab18a","title":"grunt 学习笔记","slug":"grunt","markdown":"\n\n\n- 配置 Gruntfile.js\n\n\t  grunt.initConfig({\n\t    // 读取 package.json 文件\n    \tpkg: grunt.file.readJSON('package.json'),\n    \t\n\t\t// 其他配置，如下面的 jshint/uglify\n\t\t// ...\n\t  });\n\n\n- 设置 jshint 代码审查\n\n\t执行命令 ~# grunt jshint\n\n\t\tjshint: {\n      \t\toptions: {\n      \t\t\t// 使用 jshint-stylish 高亮错误\n        \t\treporter: require('jshint-stylish') \n      \t\t},\n\t  \t  // 配置任务启动时要验证的文件\n   \t\t  build: ['Grunfile.js', 'src/**/*.js']\n   \t\t}\n   \t\t\n<!--more-->\n\n- 设置 uglify 压缩js代码\n\t\n\t执行命令 ~# grunt uglify\n\t\n\t\tuglify: {\n      \t\toptions: {\n      \t\t// banner 会显示在压缩后的代码文件中\n        \tbanner: '/*\\n <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> \\n*/\\n'\n      \t\t},\n      \t\t// 创建压缩文件路径\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t\t'dist/js/magic.min.js': 'src/js/magic.js'\n        \t\t}\n      \t\t}\n    \t}\n    \t\n- 设置 cssmin 压缩css代码\n\t\n\t// 执行命令 ~# grunt cssmin\n\t\n\t\tcssmin: {\n      \t\toptions: {\n        \t\tbanner: '/*\\n <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> \\n*/\\n'\n      \t\t},\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t'dist/css/style.min.css': 'src/css/style.css'\n      \t\t  \t}\n      \t\t}\n    \t} \n   \t \t\n- 设置 less 代码编译\n\n\t执行命令 ~# grunt less\n\t\n\t\tless: {\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t\t'dist/css/pretty.css': 'src/css/pretty.less'\n        \t\t}\n      \t\t}\n    \t} \n    \t\n- 一次执行多个任务\n\n\t执行命令 ~# grunt\n\n\t\t// Gruntfile.js\n\t\tgrunt.initConfig({\n\t\t\t...\n\t\t});\n\t\t// 设置default任务\n\t\tgrunt.registerTask('default', ['jshint', 'uglify', 'cssmin', 'less']);\n\n- 配置文件监视，自动执行任务\n\n\t执行命令 ~# grunt watch\n\t当文件改变并保存时，自动执行任务\n\t\n\t\t// Gruntfile.js\n\t\tgrunt.initConfig({\n\t\t\t...\n\t\t// 配置监视\n    \t\twatch: {\n\t\t\t\t// 监视 css/less 文件，执行 less/cssmin 任务\n\t      \t\tstylesheets: {\n    \t    \t\tfiles: ['src/**/*.css', 'src/**/*.less'],\n        \t\t\ttasks: ['less', 'cssmin']\n      \t  \t\t},\n      \t\t\t// 监视 js 文件， 执行 jshint/uplify 任务\n\t      \t\tscripts: {\n    \t    \t\tfiles: 'src/**/*.js',\n\t\t        \ttasks: ['jshint', 'uglify']\n      \t\t\t  }\n\t\t    \t}\n\t\t});\n\n- 使用  time-grunt 记录每个任务执行的时间\n\n- 使用 node-minify 压缩文件\n\n   \t\n\n\n[参考资料](http://scotch.io/bar-talk/a-simple-guide-to-getting-started-with-grunt)","html":"<ul>\n<li><p>配置 Gruntfile.js</p>\n\n<p>grunt.initConfig({\n    // 读取 package.json 文件\n    pkg: grunt.file.readJSON('package.json'),</p>\n\n<pre><code>// 其他配置，如下面的 jshint/uglify\n// ...\n</code></pre>\n\n<p>});</p></li>\n<li><p>设置 jshint 代码审查</p>\n\n<p>执行命令 ~# grunt jshint</p>\n\n<pre><code>jshint: {\n      options: {\n          // 使用 jshint-stylish 高亮错误\n        reporter: require('jshint-stylish') \n      },\n  // 配置任务启动时要验证的文件\n     build: ['Grunfile.js', 'src/**/*.js']\n   }\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<ul>\n<li><p>设置 uglify 压缩js代码</p>\n\n<p>执行命令 ~# grunt uglify</p>\n\n<pre><code>uglify: {\n      options: {\n      // banner 会显示在压缩后的代码文件中\n    banner: '/*\\n &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; \\n*/\\n'\n      },\n      // 创建压缩文件路径\n      build: {\n        files: {\n              'dist/js/magic.min.js': 'src/js/magic.js'\n        }\n      }\n}\n</code></pre></li>\n<li><p>设置 cssmin 压缩css代码</p>\n\n<p>// 执行命令 ~# grunt cssmin</p>\n\n<pre><code>cssmin: {\n      options: {\n        banner: '/*\\n &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"yyyy-mm-dd\") %&gt; \\n*/\\n'\n      },\n      build: {\n        files: {\n          'dist/css/style.min.css': 'src/css/style.css'\n          }\n      }\n} \n</code></pre></li>\n<li><p>设置 less 代码编译</p>\n\n<p>执行命令 ~# grunt less</p>\n\n<pre><code>less: {\n      build: {\n        files: {\n              'dist/css/pretty.css': 'src/css/pretty.less'\n        }\n      }\n} \n</code></pre></li>\n<li><p>一次执行多个任务</p>\n\n<p>执行命令 ~# grunt</p>\n\n<pre><code>// Gruntfile.js\ngrunt.initConfig({\n    ...\n});\n// 设置default任务\ngrunt.registerTask('default', ['jshint', 'uglify', 'cssmin', 'less']);\n</code></pre></li>\n<li><p>配置文件监视，自动执行任务</p>\n\n<p>执行命令 ~# grunt watch\n当文件改变并保存时，自动执行任务</p>\n\n<pre><code>// Gruntfile.js\ngrunt.initConfig({\n    ...\n// 配置监视\n    watch: {\n        // 监视 css/less 文件，执行 less/cssmin 任务\n        stylesheets: {\n            files: ['src/**/*.css', 'src/**/*.less'],\n            tasks: ['less', 'cssmin']\n          },\n          // 监视 js 文件， 执行 jshint/uplify 任务\n        scripts: {\n            files: 'src/**/*.js',\n            tasks: ['jshint', 'uglify']\n            }\n        }\n});\n</code></pre></li>\n<li><p>使用  time-grunt 记录每个任务执行的时间</p></li>\n<li><p>使用 node-minify 压缩文件</p></li>\n</ul>\n\n<p><a href=\"http://scotch.io/bar-talk/a-simple-guide-to-getting-started-with-grunt\">参考资料</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399670382000,"created_by":1,"updated_at":1399670382000,"updated_by":1,"published_at":1399670382000,"published_by":1},{"id":520,"uuid":"a34eb0fa-372c-45fd-8523-a1de324e54d6","title":"HTML5-file API 学习","slug":"file-api","markdown":"\n\n为实现图片上传前预览并限制图片大小，貌似只能通过flash和HTML5的API来解决了吧？\n\n今天学习了HTML5的file API，将预览和限制大小的功能应用到了项目里。\n\n练习代码先贴到这，方便自己查阅，日后比较空闲时再回来好好研究那些API的机制吧：）\n\n[html]\n\n&lt;p&gt;请选择图片(可多选)：&lt;/p&gt;\n &lt;input id=&quot;file_input&quot; type=&quot;file&quot; multiple style=&quot;display:none;&quot; onchange=&quot;handleFiles(this.files)&quot;&gt;\n &lt;button id=&quot;select-btn&quot;&gt;请选择图片&lt;/button&gt;\n &lt;div id=&quot;dropbox&quot; style=&quot;width:300px;height:200px;background:#eee;&quot;&gt;\n 或拖动图片到此处\n &lt;/div&gt;\n &lt;ol id=&quot;preview-img-list&quot;&gt;\n\n&lt;/ol&gt;\n &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n[/html]\n\n[javascript]\n\n// 获取文件\n var file_input = document.getElementById('file_input');\n var select_btn = document.getElementById('select-btn');\n var preview_img_list = document.getElementById('preview-img-list');\n var dropbox = document.getElementById('dropbox');\n var send_btn = document.getElementById('send-btn');\n\n// 选择文件\n select_btn.onclick = function(){\n file_input.click();\n };\n\nsend_btn.onclick = function(){\n sendFiles();\n };\n\n// 监听文件改变\n file_input.addEventListener('change', handleFiles, false);\n // 监听拖拽事件\n dropbox.addEventListener('dragenter', dragenter, false);\n dropbox.addEventListener('dragover', dragover, false);\n dropbox.addEventListener('drop', drop, false);\n\n// 接受并预览图片\n function handleFiles(files){\n var len = files.length;\n var imageType = /image.*/;\n window.URL = window.URL || window.webkitURL;\n if (len) {\n preview_img_list.innerHTML = '';\n for (var i = 0; i &lt; len; i++) {\n if( ! files[i].type.match(imageType)) {\n // 不是图片 跳过\n continue;\n }\n\nvar li = document.createElement('li');\n var img = document.createElement('img');\n var p = document.createElement('p');\n\np.innerHTML = 'name: ' + files[i].name + &quot; &lt;br /&gt;size: &quot; + files[i].size + ' Bytes' + &quot;&lt;br/&gt;type: &quot; + files[i].type;\n\n// 将file对象存在当前图片中,用于后续创建上传任务\n img.file = files[i];\n // 添加一个类，方便选择\n img.classList.add('obj');\n /*方法一：使用URL对象预览图片*/\n // 使用window.URL.createObjectURL创建 blob URL\n img.src = img.src = window.URL.createObjectURL(files[i]);\n img.onload = function(e) {\n // 使用window.URL.revokeObjectURL释放URL对象，因为图片加载完成后不再需要这个对象\n window.URL.revokeObjectURL(this.src);\n }\n /*方法一结束*/\n\n/*方法二：使用FileReader对象预览图片 */\n // var reader = new FileReader();\n // reader.onload = (function(aImg) {\n // return function(e) {\n // aImg.src = e.target.result;\n // };\n // })(img);\n // reader.readAsDataURL(files[i]);\n /*方法二结束 */\n\nli.appendChild(img);\n preview_img_list.appendChild(li);\n\n};\n }\n }\n\n// 创建上传任务\n function sendFiles() {\n var imgs = document.querySelectorAll('.obj');\n var len = imgs.length;\n for (var i = 0; i &lt; len; i++) {\n // 第二个参数用于读取图片数据\n new FileUpLoad(imgs[i], imgs[i].file);\n };\n }\n\nfunction FileUpLoad(img, file) {\n var reader = new FileReader();\n // 创建一个 throbber 用于显示进度信息\n this.ctrl = createThrobber(img);\n // 创建一个XMLHttpRequest对象用来上传数据\n var xhr = new XMLHttpRequest();\n this.xhr = xhr;\n\nvar self = this;\n // 监听数据上传，更新throbber\n this.xhr.upload.addEventListener('progress', function(e){\n if (e.lengthComputable) {\n var percentage = Math.round((e.loaded * 100) / e.total);\n self.ctrl.update(percentage);\n }\n }, false);\n // 上传完成，更新进度到100%，移除throbber 因为不再需要\n xhr.upload.addEventListener('load', function(e) {\n self.ctrl.update(100);\n var canvas = self.ctrl.ctx.canvas;\n canvas.parentNode.removeChild(canvas);\n }, false);\n // 使用POST方式发送数据\n xhr.open(&quot;POST&quot;, &quot;http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&quot;);\n // 使用一个通用的MIME类型\n xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');\n reader.onload = function(evt) {\n // 以二进制形式发送\n xhr.sendAsBinary(evt.target.result);\n };\n // 将文件转化为二进制字符串形式\n reader.readAsBinaryString(file);\n }\n\n&amp;nbsp;\n\nfunction dragenter(e) {\n e.stopPropagation();\n e.preventDefault();\n }\n function dragover(e) {\n e.stopPropagation();\n e.preventDefault();\n }\n function drop(e) {\n e.stopPropagation();\n e.preventDefault();\n\nvar dt = e.dataTransfer;\n var files = dt.files;\n\nhandleFiles(files);\n }\n\n[/javascript]\n\n&nbsp;\n\n这个File API 使得浏览器支持预览、图片大小/类型限制、拖拽上传、多图上传。\n\n&nbsp;","html":"<p>为实现图片上传前预览并限制图片大小，貌似只能通过flash和HTML5的API来解决了吧？</p>\n\n<p>今天学习了HTML5的file API，将预览和限制大小的功能应用到了项目里。</p>\n\n<p>练习代码先贴到这，方便自己查阅，日后比较空闲时再回来好好研究那些API的机制吧：）</p>\n\n<p>[html]</p>\n\n<p>&lt;p&gt;请选择图片(可多选)：&lt;/p&gt;\n &lt;input id=&quot;file_input&quot; type=&quot;file&quot; multiple style=&quot;display:none;&quot; onchange=&quot;handleFiles(this.files)&quot;&gt;\n &lt;button id=&quot;select-btn&quot;&gt;请选择图片&lt;/button&gt;\n &lt;div id=&quot;dropbox&quot; style=&quot;width:300px;height:200px;background:#eee;&quot;&gt;\n 或拖动图片到此处\n &lt;/div&gt;\n &lt;ol id=&quot;preview-img-list&quot;&gt;</p>\n\n<p>&lt;/ol&gt;\n &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n\n<p>[/html]</p>\n\n<p>[javascript]</p>\n\n<p>// 获取文件\n var file<em>input = document.getElementById('file</em>input');\n var select<em>btn = document.getElementById('select-btn');\n var preview</em>img<em>list = document.getElementById('preview-img-list');\n var dropbox = document.getElementById('dropbox');\n var send</em>btn = document.getElementById('send-btn');</p>\n\n<p>// 选择文件\n select<em>btn.onclick = function(){\n file</em>input.click();\n };</p>\n\n<p>send_btn.onclick = function(){ <br />\n sendFiles();\n };</p>\n\n<p>// 监听文件改变\n file_input.addEventListener('change', handleFiles, false);\n // 监听拖拽事件\n dropbox.addEventListener('dragenter', dragenter, false);\n dropbox.addEventListener('dragover', dragover, false);\n dropbox.addEventListener('drop', drop, false);</p>\n\n<p>// 接受并预览图片\n function handleFiles(files){\n var len = files.length;\n var imageType = /image.*/;\n window.URL = window.URL || window.webkitURL;\n if (len) {\n preview<em>img</em>list.innerHTML = '';\n for (var i = 0; i &lt; len; i++) {\n if( ! files[i].type.match(imageType)) {\n // 不是图片 跳过\n continue;\n }</p>\n\n<p>var li = document.createElement('li'); <br />\n var img = document.createElement('img');\n var p = document.createElement('p');</p>\n\n<p>p.innerHTML = 'name: ' + files[i].name + &quot; &lt;br /&gt;size: &quot; + files[i].size + ' Bytes' + &quot;&lt;br/&gt;type: &quot; + files[i].type;</p>\n\n<p>// 将file对象存在当前图片中,用于后续创建上传任务\n img.file = files[i];\n // 添加一个类，方便选择\n img.classList.add('obj');\n /<em>方法一：使用URL对象预览图片</em>/\n // 使用window.URL.createObjectURL创建 blob URL\n img.src = img.src = window.URL.createObjectURL(files[i]);\n img.onload = function(e) {\n // 使用window.URL.revokeObjectURL释放URL对象，因为图片加载完成后不再需要这个对象\n window.URL.revokeObjectURL(this.src);\n }\n /<em>方法一结束</em>/</p>\n\n<p>/<em>方法二：使用FileReader对象预览图片 */\n // var reader = new FileReader();\n // reader.onload = (function(aImg) {\n // return function(e) {\n // aImg.src = e.target.result;\n // };\n // })(img);\n // reader.readAsDataURL(files[i]);\n /</em>方法二结束 */</p>\n\n<p>li.appendChild(img); <br />\n preview<em>img</em>list.appendChild(li);</p>\n\n<p>};\n }\n }</p>\n\n<p>// 创建上传任务\n function sendFiles() {\n var imgs = document.querySelectorAll('.obj');\n var len = imgs.length;\n for (var i = 0; i &lt; len; i++) {\n // 第二个参数用于读取图片数据\n new FileUpLoad(imgs[i], imgs[i].file);\n };\n }</p>\n\n<p>function FileUpLoad(img, file) { <br />\n var reader = new FileReader();\n // 创建一个 throbber 用于显示进度信息\n this.ctrl = createThrobber(img);\n // 创建一个XMLHttpRequest对象用来上传数据\n var xhr = new XMLHttpRequest();\n this.xhr = xhr;</p>\n\n<p>var self = this; <br />\n // 监听数据上传，更新throbber\n this.xhr.upload.addEventListener('progress', function(e){\n if (e.lengthComputable) {\n var percentage = Math.round((e.loaded * 100) / e.total);\n self.ctrl.update(percentage);\n }\n }, false);\n // 上传完成，更新进度到100%，移除throbber 因为不再需要\n xhr.upload.addEventListener('load', function(e) {\n self.ctrl.update(100);\n var canvas = self.ctrl.ctx.canvas;\n canvas.parentNode.removeChild(canvas);\n }, false);\n // 使用POST方式发送数据\n xhr.open(&quot;POST&quot;, &quot;<a href=\"http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&quot\">http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&quot</a>;);\n // 使用一个通用的MIME类型\n xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');\n reader.onload = function(evt) {\n // 以二进制形式发送\n xhr.sendAsBinary(evt.target.result);\n };\n // 将文件转化为二进制字符串形式\n reader.readAsBinaryString(file);\n }</p>\n\n<p>&amp;nbsp;</p>\n\n<p>function dragenter(e) { <br />\n e.stopPropagation();\n e.preventDefault();\n }\n function dragover(e) {\n e.stopPropagation();\n e.preventDefault();\n }\n function drop(e) {\n e.stopPropagation();\n e.preventDefault();</p>\n\n<p>var dt = e.dataTransfer; <br />\n var files = dt.files;</p>\n\n<p>handleFiles(files); <br />\n }</p>\n\n<p>[/javascript]</p>\n\n<p>&nbsp;</p>\n\n<p>这个File API 使得浏览器支持预览、图片大小/类型限制、拖拽上传、多图上传。</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1384875770000,"created_by":1,"updated_at":1384875770000,"updated_by":1,"published_at":1384875770000,"published_by":1},{"id":521,"uuid":"92725eca-fe09-43f4-a91d-37936822ad8b","title":"HTML5-新特性尝鲜","slug":"html5-new-featurers","markdown":"\n\n\n# Desktop notification - 桌面通知\n\n\t\n\n\n\t\tvar notification = new Notification(\"标题\", {dir: 'auto', lang: '', tag: 'Tag', icon: 'icon.png', body: '内容...'})\n\t\t\n\t\t\n\t\t\n\n\n### 参考资料\n\n[Desktop Notification API](http://tech.pro/tutorial/1481/desktop-notification-api-explained)\t\t","html":"<h1 id=\"desktopnotification\">Desktop notification - 桌面通知</h1>\n\n<pre><code>    var notification = new Notification(\"标题\", {dir: 'auto', lang: '', tag: 'Tag', icon: 'icon.png', body: '内容...'})\n</code></pre>\n\n<h3 id=\"\">参考资料</h3>\n\n<p><a href=\"http://tech.pro/tutorial/1481/desktop-notification-api-explained\">Desktop Notification API</a>        </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1401925851000,"created_by":1,"updated_at":1401925851000,"updated_by":1,"published_at":1401925851000,"published_by":1},{"id":522,"uuid":"d69950cc-4970-4719-9e50-f7002530820f","title":"jQuery动画函数animate()的学习","slug":"jquery-animate","markdown":"\n\njQuery的animate()太强大了，可自定义做各种动画。\n把一些简单的动画效果集中在一块，给自己作参考吧。\n注意：animate控制的是能用数值表示的css属性,如width、height等，而诸如color等值则不行。\n[Demo](http://www.laispace.com/XiaoSpace/Demo/2013-03/jquery-animate%E7%BB%83%E4%B9%A0/)","html":"<p>jQuery的animate()太强大了，可自定义做各种动画。 <br />\n把一些简单的动画效果集中在一块，给自己作参考吧。\n注意：animate控制的是能用数值表示的css属性,如width、height等，而诸如color等值则不行。\n<a href=\"http://www.laispace.com/XiaoSpace/Demo/2013-03/jquery-animate%E7%BB%83%E4%B9%A0/\">Demo</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1364863372000,"created_by":1,"updated_at":1364863372000,"updated_by":1,"published_at":1364863372000,"published_by":1},{"id":523,"uuid":"a7bcc45f-a7ab-4969-aa01-8c76b4e532d8","title":"jQuery碎片积累","slug":"jquerysui-pian-ji-lei","markdown":"\n\n-\n\ntd:last与td:last-child的区别\n\n$('td:last'）选择所有td元素中的最后一个\n\n$('td:last-child')选择tr下最后一个子元素td，有多个\n\n-\n让页面内所有的外链都是在新窗口中打开\n[javascript]\n\n$('a[href^=&quot;http://&quot;]').attr(&quot;target&quot;,&quot;_blank&quot;);\n[/javascript]\n\n-\n禁用表单的提交按钮\n[javascript]\n\n$(&quot;form&quot;).submit(function(){\n $(&quot;:submit&quot;,this).attr(&quot;disabled&quot;,&quot;disabled&quot;);\n});\n[/javascript]\n\n-\n绝对定位与相对定位\nW3CFUNS解释\n属性为relative的元素可以用来布局页面，属性为absolute的元素用来定位某元素在父级中的位置\nW3CFUNS实例\n-\n如果用定位来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用absolute，因为它不受父级元素的padding的属性影响，当然你也可以用 relative，计算的时候不要忘记计算padding的值。\n-\n-\n$(\"#test\").each(i,item)方法:\n函数中的this关键字指向一个不同的DOM元素\n返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。\n利用each给元素设置不同样式：\n$(\".laispace\").each(function(i){this.style.color=['#f00','#0f0','#00f'][i]});\n$.each(obj, fn)\n通用例遍方法，可用于例遍对象和数组。\n-DOM和JQ对象互转时要注意：\n\n$(document.getElementById('test')) 相当于$(\"#test\");\n$(\"#test\")[0]或者$(\"#test\").get(0)\n注意：eq()返回JQ对象，get()返回DOM对象，而JQ对象只能调用JQ方法，DOM对象同理\n$(\"div\").eq(2).html();//调用jquery对象的方法\n$(\"div\").get(2).innerHTML;//调用dom的方法属性-$(\"$bt1\").click(function(){\n$(\"#bt2\").click(); //点击按钮1时也触发按钮2\n})\n-\n扩展自定义功能:\n[javascript]\n\n$.extend({\n min: function(a, b){return a &lt; b?a:b; },\n max: function(a, b){return a &gt; b?a:b; }\n});//为在jquery的命名空间中扩展了min,max两个方法\n//可以像下面这样使用\nvar a = 10,b=20;\nvar max = $.max(a,b);//20\nvar min = $.min(a.b);//10\n[/javascript]","html":"<p>-</p>\n\n<p>td:last与td:last-child的区别</p>\n\n<p>$('td:last'）选择所有td元素中的最后一个</p>\n\n<p>$('td:last-child')选择tr下最后一个子元素td，有多个</p>\n\n<p>-\n让页面内所有的外链都是在新窗口中打开\n[javascript]</p>\n\n<p>$('a[href^=&quot;<a href=\"http://&quot;]').attr(&quot;target&quot;,&quot;_blank&quot\">http://&quot;]').attr(&quot;target&quot;,&quot;_blank&quot</a>;);\n[/javascript]</p>\n\n<p>-\n禁用表单的提交按钮\n[javascript]</p>\n\n<p>$(&quot;form&quot;).submit(function(){\n $(&quot;:submit&quot;,this).attr(&quot;disabled&quot;,&quot;disabled&quot;);\n});\n[/javascript]</p>\n\n<p>-\n绝对定位与相对定位\nW3CFUNS解释 <br />\n属性为relative的元素可以用来布局页面，属性为absolute的元素用来定位某元素在父级中的位置</p>\n\n<h2 id=\"w3cfuns\">W3CFUNS实例  </h2>\n\n<h2 id=\"positionrelativeabsolutepaddingrelativepadding\">如果用定位来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用absolute，因为它不受父级元素的padding的属性影响，当然你也可以用 relative，计算的时候不要忘记计算padding的值。</h2>\n\n<p>-\n$(\"#test\").each(i,item)方法:\n函数中的this关键字指向一个不同的DOM元素\n返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。\n利用each给元素设置不同样式：\n$(\".laispace\").each(function(i){this.style.color=['#f00','#0f0','#00f'][i]});\n$.each(obj, fn)\n通用例遍方法，可用于例遍对象和数组。\n-DOM和JQ对象互转时要注意：</p>\n\n<p>$(document.getElementById('test')) 相当于$(\"#test\");\n$(\"#test\")[0]或者$(\"#test\").get(0)\n注意：eq()返回JQ对象，get()返回DOM对象，而JQ对象只能调用JQ方法，DOM对象同理\n$(\"div\").eq(2).html();//调用jquery对象的方法\n$(\"div\").get(2).innerHTML;//调用dom的方法属性-$(\"$bt1\").click(function(){\n$(\"#bt2\").click(); //点击按钮1时也触发按钮2</p>\n\n<h2 id=\"\">})</h2>\n\n<p>扩展自定义功能:\n[javascript]</p>\n\n<p>$.extend({\n min: function(a, b){return a &lt; b?a:b; },\n max: function(a, b){return a &gt; b?a:b; }\n});//为在jquery的命名空间中扩展了min,max两个方法\n//可以像下面这样使用\nvar a = 10,b=20; <br />\nvar max = $.max(a,b);//20 <br />\nvar min = $.min(a.b);//10 <br />\n[/javascript]</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1370106305000,"created_by":1,"updated_at":1370106305000,"updated_by":1,"published_at":1370106305000,"published_by":1},{"id":524,"uuid":"1d804f06-2af1-4d2f-8a8a-517f30d80217","title":"Javascript 最佳实践","slug":"javascript-best-practice","markdown":"\n\n// @author lxl:使用高质量JS代码对提高性能肯定是非常有帮助的，小赖对常见的好方法总结在这里，不断更新。\n// @update 2013/10/04\n-\n使用压缩后的文件（如lxl.min.js），并开启http gzip压缩工具\n-\n尽量将script标签放在前，可以尝试用异步加载的方法加载js文件\n-\n尽量保证js代码和HTML结构的分离，不要内嵌代码到HTML中，以统一维护和缓存处理\n\n-\n\n- 避免全局变量的污染\n\n1\\. 使用命名空间\n2\\. 匿名函数封装立即执行\n3\\. 始终使用var来声明变量\n- 使用var声明（显式）的*全局*变量是**不能**被删除的\n- 未用var声明（隐式）的*全局*变量是**可以**被删除的\n- 隐式全局变量并非真正的全局变量，但却是全局对象的属性，因为属性是可以通过delete操作符删除的，而变量则不行\n\n- for循环中将长度缓存到变量中。\n```\n避免重复计算HTMLCollections的长度（操作DOM一般都是比较昂贵的,缓存长度后效率竟然是是IE7下不缓存的190倍！）\n```\n- for循环中建议使用降序来遍历\n```\n向下数到0通常更快，因为和0作比较要比和数组长度或非0的东西作比较更有效率\n```\n- for-in循环只在遍历对象属性的时候才使用，其他情况建议使用for循环就够了\n```\nfor-in 循环枚举出的顺序是不能保证的，且若数组对象已被自定义的功能增强，就可能发生逻辑错误\n```\n- 避免隐式类型转换，使用===或!==总是最严谨的！\n```\n这总能避免一些意想不到的类型转换问题，不是么？\n```\n\n- 使用hasOwnProperty()方法过滤从原型链继承的属性，如：\n```\nfor (var i in man) {\nif (man.hasOwnProperty(i)) { // 过滤\nconsole.log(i, \":\", man[i]);\n}\n}\n```\n- 使用单var语句声明变量\n```\n变量的声明会被被JS引擎提至函数顶部预解析（hoisting），不如直接使用单var统 一声明所有将会用到的变量，方便查询又易于管理，如：\nvar a = 1,\nb = 2,\nc = 3;\n```\n- 避免改变或增加原型对象的方法\n```\n随意改变或增加原型会增加维护成本，当以后使用一个方法却发现这个方法被重定义时，就会带来问题。\n除非团队认可这种做法并意识到原型已添加了方法，知道怎么使用时：\nif( typeof Object.prototype.myMethod !== \"function\"){\nObject.prototype.myMethod = function(){\n// 实现新增方法\n}\n}\n```\n- 避免使用eval语句\n```\neval是魔鬼，除非知道它执行的代码本身会有什么问题。\neval里的代码被恶意篡改的话，就会带来严重的安全问题。\n若绝对需要使用eval，实则可以\n1.用new Function()替代，因为它有局部函数作用域，其中的var变量不会变成全局 的，可以避免一些问题.\n2.将eval语句封装到即时的匿名函数中，与1有相同效果。\n注意，setInterval、setTimeout中传递字符串跟eval()是一样的，要注意避免直接 传递字符串：\nsetTimeout(myFunc, 1000); // 正确\nsetTimeout(function () { // 正确\nmyFunc(1, 2, 3);\n}, 1000);\n```\n- parseInt() 数制转换，不要忽略第二个参数指定基数\n```\nEC3中以字母o开头的字符串被当做八进制处理，而在EC5中已经改变，为了避免意外，应 该总是指定基数参数，尽管默认是10\n```\n- 团队里使用同一套缩进方案，tab或space缩进\n```\n比起纠结于具体的规范，团队里总是执行同一套方案更有价值！\n```\n- 总是使用花括号{},尽管只有一行代码\n```\n花括号开始的位置，是同一行还是换行，这也是团队规范的问题了：统一就好，不必 纠结。\n为了避免下一条谈到js引擎自动补全分好的问题，建议花括号开始于同一行，可终端JS分 号的自动补全。\n```\n- 总是使用分号结束代码\n```\n因为JS引擎自动补全分号的机制，不小心的换行可能会中断代码逻辑，如return语句块 换到了下一行。\n```\n- 命名规范,多种，选择一套喜欢的呗\n1\\. 构造函数首字母大写，如Person(){}\n2\\. 构造函数驼峰命名分割单词，如MyFunc(){}\n3\\. 变量名用下划线分割单词，如 my_name，这可以喝ECMAScript默认属性和方法的Camel标记法相区分\n4\\. 常量用全大写和下划线书写，如 MAX_WIDTH\n5\\. 全局变量名全部大写，如GLOBAL，并使用它来定义明明空间，如GLOBAL.name = \"xiaolai\";GLOBAL.myMethod = function(){};\n6\\. 私有属性或方法用下划线前缀来表示，如 _index\n-\n\n## 编码技巧\n- 访问全局对象\n```\n全局对象一般直接通过window属性来访问，但特殊情况下（如定义了名为window的局部 变量覆盖了全局的window）可使用匿名函数内的this来获得全局对象：\nvar global = (function(){\nreturn this;\n})();\n```\n## 新鲜概念\n- HTMLCollections对象\n```HTMLCollections对象指的是DOM方法返回的对象，是一个集合，如：\ndocument.getElementsByName();\ndocument.getElementsByClassName();\ndocument.getElementsByTagName();\ndocument.images; // 页面上所有的图片元素\ndocument.links; // 所有a标签\ndocument.forms; // 所有表单\ndocument.forms[0].elements; // 页面上第一个表单中的所有域\n```","html":"<p>// @author lxl:使用高质量JS代码对提高性能肯定是非常有帮助的，小赖对常见的好方法总结在这里，不断更新。</p>\n\n<h2 id=\"update20131004\">// @update 2013/10/04</h2>\n\n<h2 id=\"lxlminjshttpgzip\">使用压缩后的文件（如lxl.min.js），并开启http gzip压缩工具</h2>\n\n<h2 id=\"scriptjs\">尽量将script标签放在前，可以尝试用异步加载的方法加载js文件</h2>\n\n<p>尽量保证js代码和HTML结构的分离，不要内嵌代码到HTML中，以统一维护和缓存处理</p>\n\n<p>-</p>\n\n<ul>\n<li>避免全局变量的污染</li>\n</ul>\n\n<p>1. 使用命名空间 <br />\n2. 匿名函数封装立即执行 <br />\n3. 始终使用var来声明变量 <br />\n- 使用var声明（显式）的<em>全局</em>变量是<strong>不能</strong>被删除的\n- 未用var声明（隐式）的<em>全局</em>变量是<strong>可以</strong>被删除的\n- 隐式全局变量并非真正的全局变量，但却是全局对象的属性，因为属性是可以通过delete操作符删除的，而变量则不行</p>\n\n<ul>\n<li>for循环中将长度缓存到变量中。</li>\n</ul>\n\n<pre><code>避免重复计算HTMLCollections的长度（操作DOM一般都是比较昂贵的,缓存长度后效率竟然是是IE7下不缓存的190倍！）\n</code></pre>\n\n<ul>\n<li>for循环中建议使用降序来遍历</li>\n</ul>\n\n<pre><code>向下数到0通常更快，因为和0作比较要比和数组长度或非0的东西作比较更有效率\n</code></pre>\n\n<ul>\n<li>for-in循环只在遍历对象属性的时候才使用，其他情况建议使用for循环就够了</li>\n</ul>\n\n<pre><code>for-in 循环枚举出的顺序是不能保证的，且若数组对象已被自定义的功能增强，就可能发生逻辑错误  \n</code></pre>\n\n<ul>\n<li>避免隐式类型转换，使用<mark>=或!</mark>总是最严谨的！</li>\n</ul>\n\n<pre><code>这总能避免一些意想不到的类型转换问题，不是么？\n</code></pre>\n\n<ul>\n<li>使用hasOwnProperty()方法过滤从原型链继承的属性，如：</li>\n</ul>\n\n<pre><code>for (var i in man) {  \nif (man.hasOwnProperty(i)) { // 过滤  \nconsole.log(i, \":\", man[i]);  \n}\n}\n</code></pre>\n\n<ul>\n<li>使用单var语句声明变量</li>\n</ul>\n\n<pre><code>变量的声明会被被JS引擎提至函数顶部预解析（hoisting），不如直接使用单var统 一声明所有将会用到的变量，方便查询又易于管理，如：\nvar a = 1,  \nb = 2,  \nc = 3;  \n</code></pre>\n\n<ul>\n<li>避免改变或增加原型对象的方法</li>\n</ul>\n\n<pre><code>随意改变或增加原型会增加维护成本，当以后使用一个方法却发现这个方法被重定义时，就会带来问题。\n除非团队认可这种做法并意识到原型已添加了方法，知道怎么使用时：\nif( typeof Object.prototype.myMethod !== \"function\"){  \nObject.prototype.myMethod = function(){  \n// 实现新增方法\n}\n}\n</code></pre>\n\n<ul>\n<li>避免使用eval语句</li>\n</ul>\n\n<pre><code>eval是魔鬼，除非知道它执行的代码本身会有什么问题。  \neval里的代码被恶意篡改的话，就会带来严重的安全问题。  \n若绝对需要使用eval，实则可以\n1.用new Function()替代，因为它有局部函数作用域，其中的var变量不会变成全局 的，可以避免一些问题.  \n2.将eval语句封装到即时的匿名函数中，与1有相同效果。  \n注意，setInterval、setTimeout中传递字符串跟eval()是一样的，要注意避免直接 传递字符串：\nsetTimeout(myFunc, 1000); // 正确  \nsetTimeout(function () { // 正确  \nmyFunc(1, 2, 3);  \n}, 1000);\n</code></pre>\n\n<ul>\n<li>parseInt() 数制转换，不要忽略第二个参数指定基数</li>\n</ul>\n\n<pre><code>EC3中以字母o开头的字符串被当做八进制处理，而在EC5中已经改变，为了避免意外，应 该总是指定基数参数，尽管默认是10  \n</code></pre>\n\n<ul>\n<li>团队里使用同一套缩进方案，tab或space缩进</li>\n</ul>\n\n<pre><code>比起纠结于具体的规范，团队里总是执行同一套方案更有价值！\n</code></pre>\n\n<ul>\n<li>总是使用花括号{},尽管只有一行代码</li>\n</ul>\n\n<pre><code>花括号开始的位置，是同一行还是换行，这也是团队规范的问题了：统一就好，不必 纠结。\n为了避免下一条谈到js引擎自动补全分好的问题，建议花括号开始于同一行，可终端JS分 号的自动补全。\n</code></pre>\n\n<ul>\n<li>总是使用分号结束代码</li>\n</ul>\n\n<pre><code>因为JS引擎自动补全分号的机制，不小心的换行可能会中断代码逻辑，如return语句块 换到了下一行。\n</code></pre>\n\n<ul>\n<li>命名规范,多种，选择一套喜欢的呗\n1. 构造函数首字母大写，如Person(){} <br />\n2. 构造函数驼峰命名分割单词，如MyFunc(){} <br />\n3. 变量名用下划线分割单词，如 my<em>name，这可以喝ECMAScript默认属性和方法的Camel标记法相区分 <br />\n4. 常量用全大写和下划线书写，如 MAX</em>WIDTH <br />\n5. 全局变量名全部大写，如GLOBAL，并使用它来定义明明空间，如GLOBAL.name = \"xiaolai\";GLOBAL.myMethod = function(){};  </li>\n</ul>\n\n<h2 id=\"6_index\">6. 私有属性或方法用下划线前缀来表示，如 _index  </h2>\n\n<h2 id=\"\">编码技巧</h2>\n\n<ul>\n<li>访问全局对象</li>\n</ul>\n\n<pre><code>全局对象一般直接通过window属性来访问，但特殊情况下（如定义了名为window的局部 变量覆盖了全局的window）可使用匿名函数内的this来获得全局对象：\nvar global = (function(){  \nreturn this;  \n})();\n</code></pre>\n\n<h2 id=\"\">新鲜概念</h2>\n\n<ul>\n<li>HTMLCollections对象</li>\n</ul>\n\n<pre><code class=\"language-HTMLCollections对象指的是DOM方法返回的对象，是一个集合，如：\">document.getElementsByName();  \ndocument.getElementsByClassName();  \ndocument.getElementsByTagName();  \ndocument.images; // 页面上所有的图片元素  \ndocument.links; // 所有a标签  \ndocument.forms; // 所有表单  \ndocument.forms[0].elements; // 页面上第一个表单中的所有域  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1380914911000,"created_by":1,"updated_at":1380914911000,"updated_by":1,"published_at":1380914911000,"published_by":1},{"id":525,"uuid":"7eb130fe-527a-43d4-9b93-299908e2cbb7","title":"learnyounode 练习","slug":"learnyounode","markdown":"\n\n> learnyounode 是 nodeschool.io 出品的nodejs入门练习项目\n\n> 通过这个练习算是对nodejs有了个入门的认识吧，边学边敲边写笔记\n      \n\n- 2.输入任意数字求和.js\n\n      // 输入任意个数字，输出这任意个数字的和\n      // process.argv 变量保存了输入的参数，注意第一个永远为'node',第二个是执行路径'path/to/my/file'，第三个开始才是我们真正传入的参数\n      // 传入的参数当做字符串了，注意类型转换，如下面Number() 将数字字符转换为数字再进行计算\n\n      var len = process.argv.length;\n      // slice(2) 截取数组\n      var numbers = process.argv.slice(2);\n      var sum = 0;\n      for (var i = numbers.length - 1; i >= 0; i--) {\n            sum += Number(numbers[i]);\n      };\n      console.log(sum);\n\n<!-- more -->      \n      \n- 3.fs.readFileSync同步方式读取文件.js\n\n      var fs = require('fs');\n\n      // 用同步方法读取README.md,以utf8编码\n      var path = process.argv[2];\n      var data = fs.readFileSync(path, 'utf8');\n      // console.log(data);\n\n      // 打印这个文件的行数\n      var len = data.toString().split('\\n').length;\n      // 注意：长度减一才是真正的行数！\n      console.log(len-1)\n            \n- 4.fs.readFile异步方式读取文件.js\n\n      var fs = require('fs');\n      // 用异步方法读取README.md,以utf8编码\n      var path = process.argv[2];\n      fs.readFile(path, 'utf8', function (err, data) {\n            if (err) {\n                  throw err;\n            }\n            // console.log(data);\n            // 打印这个文件的行数，指定了上述utf8时才能省略以下的toString()方法\n            var len = data.toString().split('\\n').length;\n            // 注意：长度减一才是真正的行数！\n            console.log(len-1);\n      });\n            \n- 5.fs.readdir读取某目录下文件并过滤输出.js\n\n      var fs = require('fs');\n      // 用异步方法读取参数1指定的目录下的文件列表，以参数2为过滤条件\n      var dir = process.argv[2];\n      var filter = process.argv[3];\n      fs.readdir(dir, function (err, data) {\n            if (err) {\n                  throw err;\n            }\n            // 显示目录下的所有文件, 文件数为data.length\n            // console.log(data);\n            // 遍历，以参数2提供的后缀进行过滤\n            // 构造正则，https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n            var reg = new RegExp('\\\\.' + filter + '$');\n            for (var i = data.length - 1; i >= 0; i--) {\n            // 如果文件后缀符合参数2 则添加到新数组中\n                  if (reg.test(data[i])) {\n                        console.log(data[i]);\n                  }\n            }\n      });\n      \n- 6.module.export使用的模块 mymodule.js\n\n      var fs = require('fs');\n      function readAdir(dir, filter, callback) {\n            fs.readdir(dir, function (err, data) {\n                  if (err) {\n                        // 将错误传给回调函数处理\n                        return callback(err);\n                  } else {\n                        var reg = new RegExp('\\\\.' + filter + '$');\n                        var newData = [];\n                        for (var i = 0; i < data.length; i++) {\n                              if (reg.test(data[i])) {\n                                    newData.push(data[i]);\n                              }\n                        }\n                        // 将处理后的数据传给回调函数处理\n                        callback(null, newData);\n                  }\n            });\n      }\n      // 导出模块\n      module.exports = readAdir;\n      \n      \n- 7.http.get简单的http客户端.js\n\n      var http = require('http');\n      var url = process.argv[2];      \n      http.get(url, function (res) {\n            // 设置编码\n            res.setEncoding('utf8');\n            // 监听数据\n            res.on('data', function (data) {\n                  console.log(data);\n            });\n            // 数据传输完成\n            res.on('end', function (data) {\n                  console.log('数据接受完成！', data);\n            });\n\n            // 数据传输错误\n            res.on('error', function (err) {\n                  console.log('啊哦~发生了错误。')\n            });\n      })\n            \n- 8.http.get简单的http客户端-输出完整数据流.js\n\n      var http = require('http');\n      var url = process.argv[2];\n      http.get(url, function (res) {\n            // 设置编码\n            res.setEncoding('utf8');\n            var result = '';\n            // 监听数据\n            res.on('data', function (data) {\n                  result += data;\n            });\n            // 数据传输完成，将完整的数据流输出\n            res.on('end', function (data) {\n                  console.log(result.length);\n                  console.log(result);\n            });\n            // 数据传输错误\n            // res.on('error', function (err) {\n                  // console.log('啊哦~发生了错误。', err)\n                  // });\n      });\n      \n      \n- 9.http.get简单的http客户端-同步get操作.js\n\n      var http = require('http');\n      var urls = process.argv.slice(2);\n      var results = [];\n      var count = 0;\n      for (var i=0;i<urls.length;i++) {\n            // 用闭包来保证顺序同步操作\n            ;(function(i){\n                  http.get(urls[i], function (res) {\n                        var result = '';\n                        res.on('data', function (data) {\n                              result += data;\n                        });\n                        res.on('end', function (data) {\n                              results[i] = result;\n                              count++;\n                              // 计数器达到url总数，说明完成了顺序同步操作，输出结果\n                              if (count === urls.length) {\n                                    for (var j=0;j<count;j++) {\n                                          console.log(results[j]);\n                                    }\n                              }\n                        })\n                  })\n            })(i);\n      }\n            \n- 10.net.createServer简单的TCP服务器端.js\n\n      var net = require('net');\n      var server = net.createServer(function (socket) {\n            // 获取当前年、月、日、小时、分钟\n            var date = new Date(),\n            y = date.getFullYear(),\n            m = date.getMonth() + 1,\n            d = date.getDate(),\n            h = date.getHours(),\n            minutes = date.getMinutes();\n            // 格式化\n            y = y< 10 ? '0'+y: y,\n            m = m< 10 ? '0'+m: m,\n            d = d< 10 ? '0'+d: d,\n            h = h< 10 ? '0'+h: h,\n            minutes = minutes< 10 ? '0'+minutes: minutes;\n            var dateString = y + '-' + m + '-' + d + ' ' + h + ':' + minutes + '\\n';\n            // console.log(dateString);\n            // socket.write(data);\n            // 输出\n            socket.end(dateString);\n      });\n      // 监听参数指定的端口\n      var port = Number(process.argv[2]);\n      server.listen(port);\n      \n      \n- 11.createReadStream 输出文件内容.js\n\n      var http = require('http');\n      var fs = require('fs');\n      var portNo = process.argv[2];\n      var filePath = process.argv[3];\n      var server = http.createServer(function (req, res) {\n            // fs,createReadStream 返回 ReadStream 对象 http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options\n            var readStream = fs.createReadStream(filePath);\n            var body = '';\n            readStream.on('data', function (chunk) {\n                  body += chunk;\n            });\n            readStream.on('end', function () {\n                  res.writeHead(200);\n                  res.end(body.toString());\n            });\n      });\n      server.listen(portNo);\n\n      // 官方答案\n      // var http = require('http')\n      // var fs = require('fs')\n\n      // var server = http.createServer(function (req, res) {\n            // fs.createReadStream(process.argv[3]).pipe(res)\n      // })\n      // server.listen(Number(process.argv[2]))\n            \n- 12.使用through2-map将POST数据转成大写输出\n\n      var http = require('http')\n      var map = require('through2-map')\n      var server = http.createServer(function (req, res) {\n            // 非POST请求\n            if (req.method != 'POST') {\n                  res.end();\n            }\n            req.pipe(map(toUpper)).pipe(res);\n      });\n      function toUpper (chunk) {\n            return chunk.toString().toUpperCase();\n      }\n      server.listen(process.argv[2]);\n      ","html":"<blockquote>\n  <p>learnyounode 是 nodeschool.io 出品的nodejs入门练习项目</p>\n  \n  <p>通过这个练习算是对nodejs有了个入门的认识吧，边学边敲边写笔记</p>\n</blockquote>\n\n<ul>\n<li><p>2.输入任意数字求和.js</p>\n\n<p>// 输入任意个数字，输出这任意个数字的和\n  // process.argv 变量保存了输入的参数，注意第一个永远为'node',第二个是执行路径'path/to/my/file'，第三个开始才是我们真正传入的参数\n  // 传入的参数当做字符串了，注意类型转换，如下面Number() 将数字字符转换为数字再进行计算</p>\n\n<p>var len = process.argv.length;\n  // slice(2) 截取数组\n  var numbers = process.argv.slice(2);\n  var sum = 0;\n  for (var i = numbers.length - 1; i >= 0; i--) {\n        sum += Number(numbers[i]);\n  };\n  console.log(sum);</p></li>\n</ul>\n\n<!-- more -->      \n\n<ul>\n<li><p>3.fs.readFileSync同步方式读取文件.js</p>\n\n<p>var fs = require('fs');</p>\n\n<p>// 用同步方法读取README.md,以utf8编码\n  var path = process.argv[2];\n  var data = fs.readFileSync(path, 'utf8');\n  // console.log(data);</p>\n\n<p>// 打印这个文件的行数\n  var len = data.toString().split('\\n').length;\n  // 注意：长度减一才是真正的行数！\n  console.log(len-1)</p></li>\n<li><p>4.fs.readFile异步方式读取文件.js</p>\n\n<p>var fs = require('fs');\n  // 用异步方法读取README.md,以utf8编码\n  var path = process.argv[2];\n  fs.readFile(path, 'utf8', function (err, data) {\n        if (err) {\n              throw err;\n        }\n        // console.log(data);\n        // 打印这个文件的行数，指定了上述utf8时才能省略以下的toString()方法\n        var len = data.toString().split('\\n').length;\n        // 注意：长度减一才是真正的行数！\n        console.log(len-1);\n  });</p></li>\n<li><p>5.fs.readdir读取某目录下文件并过滤输出.js</p>\n\n<p>var fs = require('fs');\n  // 用异步方法读取参数1指定的目录下的文件列表，以参数2为过滤条件\n  var dir = process.argv[2];\n  var filter = process.argv[3];\n  fs.readdir(dir, function (err, data) {\n        if (err) {\n              throw err;\n        }\n        // 显示目录下的所有文件, 文件数为data.length\n        // console.log(data);\n        // 遍历，以参数2提供的后缀进行过滤\n        // 构造正则，<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a>\n        var reg = new RegExp('\\.' + filter + '$');\n        for (var i = data.length - 1; i >= 0; i--) {\n        // 如果文件后缀符合参数2 则添加到新数组中\n              if (reg.test(data[i])) {\n                    console.log(data[i]);\n              }\n        }\n  });</p></li>\n<li><p>6.module.export使用的模块 mymodule.js</p>\n\n<p>var fs = require('fs');\n  function readAdir(dir, filter, callback) {\n        fs.readdir(dir, function (err, data) {\n              if (err) {\n                    // 将错误传给回调函数处理\n                    return callback(err);\n              } else {\n                    var reg = new RegExp('\\.' + filter + '$');\n                    var newData = [];\n                    for (var i = 0; i &lt; data.length; i++) {\n                          if (reg.test(data[i])) {\n                                newData.push(data[i]);\n                          }\n                    }\n                    // 将处理后的数据传给回调函数处理\n                    callback(null, newData);\n              }\n        });\n  }\n  // 导出模块\n  module.exports = readAdir;</p></li>\n<li><p>7.http.get简单的http客户端.js</p>\n\n<p>var http = require('http');\n  var url = process.argv[2]; <br />\n  http.get(url, function (res) {\n        // 设置编码\n        res.setEncoding('utf8');\n        // 监听数据\n        res.on('data', function (data) {\n              console.log(data);\n        });\n        // 数据传输完成\n        res.on('end', function (data) {\n              console.log('数据接受完成！', data);\n        });</p>\n\n<pre><code>    // 数据传输错误\n    res.on('error', function (err) {\n          console.log('啊哦~发生了错误。')\n    });\n</code></pre>\n\n<p>})</p></li>\n<li><p>8.http.get简单的http客户端-输出完整数据流.js</p>\n\n<p>var http = require('http');\n  var url = process.argv[2];\n  http.get(url, function (res) {\n        // 设置编码\n        res.setEncoding('utf8');\n        var result = '';\n        // 监听数据\n        res.on('data', function (data) {\n              result += data;\n        });\n        // 数据传输完成，将完整的数据流输出\n        res.on('end', function (data) {\n              console.log(result.length);\n              console.log(result);\n        });\n        // 数据传输错误\n        // res.on('error', function (err) {\n              // console.log('啊哦~发生了错误。', err)\n              // });\n  });</p></li>\n<li><p>9.http.get简单的http客户端-同步get操作.js</p>\n\n<p>var http = require('http');\n  var urls = process.argv.slice(2);\n  var results = [];\n  var count = 0;\n  for (var i=0;i<urls.length;i++) {\n        // 用闭包来保证顺序同步操作\n        ;(function(i){\n              http.get(urls[i], function (res) {\n                    var result = '';\n                    res.on('data', function (data) {\n                          result += data;\n                    });\n                    res.on('end', function (data) {\n                          results[i] = result;\n                          count++;\n                          // 计数器达到url总数，说明完成了顺序同步操作，输出结果\n                          if (count === urls.length) {\n                                for (var j=0;j<count;j++) {\n                                      console.log(results[j]);\n                                }\n                          }\n                    })\n              })\n        })(i);\n  }</p></li>\n<li><p>10.net.createServer简单的TCP服务器端.js</p>\n\n<p>var net = require('net');\n  var server = net.createServer(function (socket) {\n        // 获取当前年、月、日、小时、分钟\n        var date = new Date(),\n        y = date.getFullYear(),\n        m = date.getMonth() + 1,\n        d = date.getDate(),\n        h = date.getHours(),\n        minutes = date.getMinutes();\n        // 格式化\n        y = y&lt; 10 ? '0'+y: y,\n        m = m&lt; 10 ? '0'+m: m,\n        d = d&lt; 10 ? '0'+d: d,\n        h = h&lt; 10 ? '0'+h: h,\n        minutes = minutes&lt; 10 ? '0'+minutes: minutes;\n        var dateString = y + '-' + m + '-' + d + ' ' + h + ':' + minutes + '\\n';\n        // console.log(dateString);\n        // socket.write(data);\n        // 输出\n        socket.end(dateString);\n  });\n  // 监听参数指定的端口\n  var port = Number(process.argv[2]);\n  server.listen(port);</p></li>\n<li><p>11.createReadStream 输出文件内容.js</p>\n\n<p>var http = require('http');\n  var fs = require('fs');\n  var portNo = process.argv[2];\n  var filePath = process.argv[3];\n  var server = http.createServer(function (req, res) {\n        // fs,createReadStream 返回 ReadStream 对象 <a href=\"http://nodejs.org/api/fs.html#fs\">http://nodejs.org/api/fs.html#fs</a><em>fs</em>createreadstream<em>path</em>options\n        var readStream = fs.createReadStream(filePath);\n        var body = '';\n        readStream.on('data', function (chunk) {\n              body += chunk;\n        });\n        readStream.on('end', function () {\n              res.writeHead(200);\n              res.end(body.toString());\n        });\n  });\n  server.listen(portNo);</p>\n\n<p>// 官方答案\n  // var http = require('http')\n  // var fs = require('fs')</p>\n\n<p>// var server = http.createServer(function (req, res) {\n        // fs.createReadStream(process.argv[3]).pipe(res)\n  // })\n  // server.listen(Number(process.argv[2]))</p></li>\n<li><p>12.使用through2-map将POST数据转成大写输出</p>\n\n<p>var http = require('http')\n  var map = require('through2-map')\n  var server = http.createServer(function (req, res) {\n        // 非POST请求\n        if (req.method != 'POST') {\n              res.end();\n        }\n        req.pipe(map(toUpper)).pipe(res);\n  });\n  function toUpper (chunk) {\n        return chunk.toString().toUpperCase();\n  }\n  server.listen(process.argv[2]);</p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400669888000,"created_by":1,"updated_at":1400669888000,"updated_by":1,"published_at":1400669888000,"published_by":1},{"id":526,"uuid":"96e4b71e-b834-4ff6-8f3c-838c7336f921","title":"linux 学习笔记","slug":"linux","markdown":"\n\n\n\n> TODO - 待整理\n\n\n# 一些概念\n\n- bytes stream 字节流\n\n\tlinux 执行一个程序时会自动打开三个流：标准输入流、标准输出流、标准错误流\n\t\n\t输出流用 \">\" 或 \">>\" 表示\n\t\n\t输入流用 \"<\" 表示\n\t\n\t错误流用 \">&\" 表示\n\t\n\t\t// 输出文本流到屏幕\n\t\t$ echo '我是小赖'\n\t\t// echo 输出信息到 a.txt\n\t\t$ echo '我是小赖' > a.txt\n\t\t// 追加文本流到 a.txt\n\t\t$ echo '我才是小赖' >> a.txt\n\n\t\t// 输出命令执行结果文本流到屏幕\n\t\t$ ls\n\t\t// 重新定向, 这样 ls 命令的输出文本流就会写到这个文件上\n\t\t$ ls > a.txt\n\t\t// 若 a.txt 已存在，则将ls 命令的输出文本流追加到这个文件上\n\t\t$ ls >> a.txt \n\t\t\n\t\t// 输入文本流\n\t\t$ cat < a.txt\n\t\t// 复制 a.txt 到 b.txt\n\t\t$ cat < a.txt > b.txt\n\t\t\n\t\t// 输出错误，假定 wrongDir 是不存在的目录\n\t\t$ cd void >& a.txt\n\t\t\n- pipe 管道\n\n\t使用管道，可以将一个命令的输出流当做另一个命令的输入流\n\t\n\t管道用 \"|\" 表示\n\t\n\t\t// 输出 \"cat > a.txt\" 当做命令 \"wc\" 的输入\n\t\t// wc 即 word count：输出文本的行、词和字符总数\n\t\t$ cat < a.txt | wc\n\n<!-- more -->\t\t\t\n\t\n# 帮助类命令\u001b\n\n- type 查看某个命令的类型\n\n类型可为：1.可执行文件 2.内建函数 3.别名\n\n\t\t$ type ls\n\t\t$ type cd\n\t\t$ type open\n\n- which 查看命令的绝对路径\n\n\t\t$ which ls\n\t\t\n- where 更大范围查看命令的绝对路径\t\t\n\n\t\t$ whereis ls\n\n- whatis 查看命令的介绍\n\n\t\t$ whatis ls\t\n\n- man 查询命令的帮助文档\n\t\t\n\t\t// 学习 linux 必备！\n\t\t$ man ls\t\n\n- info 查询命令的更详细帮助文档\n\n\t\t$ info ls\n\n- history 查看输入的命令历史\n\n\t\t$ history \n\t\t\n- alias 别名\n\n\t\t// 查看所有别名\n\t\t$ alias\n\t\t// 设置别名，llss 为 ls 的别名\n\t\t$ alias lllsss = ls\t\n\n- env 环境变量\n\n\t\t// 查看所有环境变量\n\t\t$ env\n\t\t// 设置环境变量\n\t\t// $ export [key]=[value]\t\n\t\t$ export testKey=testVal\n\t\t\n- finger 查看用户信息\n\t\t\n\t\t// 查看所有用户信息\n\t\t$ finger\n\t\t// 查看特定用户信息\n\t\t$ finger xiaolai\n\t\t\n- who am I 显示当前用户\n\n\t\t$ who am I\n\t\t\n- su 成为超级用户\n\n\t\t$ su\n\t\t// 或者用超级用户执行命令：\n\t\t// $ sudo [commmand]\t\n\n- passwd 修改密码\n\t\t\n\t\t$ passwd\t\n\t\n\t\t\n\t\n\t\t\t\t\t\n\t\n# 文件管理类命令\n\t\n- touch 新建文件\n\n\t\t// 如果文件已经存在，则只修改时间信息\n\t\t$ touch a.txt\t\n\n\t\n- ls 列出目录/文件信息 \n\t\t\n\t\t// 显示当前目录下的文件\n\t\t$ ls\n\t\t// 显示桌面目录下的文件\n\t\t$ ls ~/Desktop\n\t\t// 显示目录下所有文件的信息\n\t\t$ ls -l\n\t\t// 显示目录下特定文件的信息\n\t\t$ ls -l a.txt\n\t\t// 显示目录下多个文件的信息\n\t\t$ ls -l a.txt b.txt c.txt d.txt\n\t\t// 列出当前目录下的文件的详细信息，包括隐藏文件\n\t\t$ ls -l -a\n\t\t// 或\n\t\t$ ls -la\n\t\t// 列出当前目录下特定文件的详细信息，包括隐藏文件\n\t\t$ ls -l -a a.txt\n\t\t// 或\n\t\t$ ls -la a.txt\n\n- cp 复制\n \n\t\t// 将 a.txt 复制到 b.txt\n\t\t$ cp a.txt b.txt\n\t\t// 将 a.txt 复制到父目录下的 a.txt\n\t\t$ cp a.txt ..\n\n- mv 移动\t\t\t\t\n\n\t\t// 移动 a.txt 到 b.txt ，此时相当于重命名了\n\t\t$ mv a.txt b.txt\n\t\t// 移动 a.txt 到桌面目录下\n\t\t$ mv a.txt /Desktop\n\n- rm 删除文件\n\n\t\t// 删除 a.txt 文件\n\t\t$ rm a.txt\n\t\t\n- rm -r 删除目录-目录不一定非空\n\n\t\t// 删除 /home/xiaolai 整个目录，参数 -r 是 recursive 重复删除之意\n\t\t$ rm -r /home/xiaolai\t\n\t\t\n\t\t// 慎用 rm -rf 即强制删除目录不提供确认！！\n\t\t// $rm -rf /home/xiaolai\n\t\n- pwd 显示当前路径\n\t\t\n\t\t$ pwd\n\t\t\t\t\n- cd 切换路径\n\t\t\n\t\t// 切换到 /home/xiaolai\n\t\t$ cd /home/xiaolai\n\t\t// 切换到之前的路径\n\t\t$ cd -\t\n\t\n\t\t\n- mkdir 创建目录\n\n\t\t// 创建目录 /home/xiaolai/newdir\n\t\t$ mkdir /home/xiaolai/newdir\n\n- rmdir 删除目录\n\n\t\t// 目录为空时才可删除\n\t\t$ rmdir /home/xiaolai/newdir\t\n\n- chmod 修改权限\n\n\t\t// 修改 a.txt 的权限为 755\n\t\t$ chmod 755 a.txt\n\n- chown 修改拥有者\n\n\t\t// 修改 a.txt 的拥有者为 root, sudo 指以超级权限运行\n\t\t$ sudo chown root a.txt \t\n\n- chgrp 修改拥有组\n\n\t\t// 修改 a.txt 的拥有组为 root 组\n\t\t$ sudo chgrp root a.txt\t\n\t\t\n- cat 查看文件内容\n\t\t\n\t\t// 命令行中列出文件内容\n\t\t$ cat a.txt\t\n\t\t// 链接显示 a.txt 和 b.txt\n\t\t$ cat a.txt b.txt\n\n- head -1 显示文件第一行\n\n\t\t$ head -1 a.txt\n\n- tail -2 显示文件倒数第二行\n\n\t\t$ tail -2 a.txt\n\t\t\n- diff 文件对比\n\t\t\n\t\t// 显示 a.txt 和 b.txt 的差异\n\t\t$ diff a.txt b.txt\n\t\t\n- du 文件占用的磁盘空间\n\t\t\n\t\t// du\t\n\n- df 文件系统的磁盘空间占用情况\n\n\t\t// df\t\t\t\t\t\t\t\n\n- wc 显示文件内容的字符、词和行数 \t\t\t\n\n\t\t$ wc a.txt\t\n\n\t\t\n- od -c 使用ASCII查看文件内容\n\n\t\t$ od -c a.txt\t\n\t\n\t\n- open 打开文件\n\n\t\t// 打开一个应用\n\t\t$ open /Applications/Safari.app/\n\t\t\n\t\t// 打开一个目录\n\t\t$ open /Applications/\n\t\t// 打开当前目录\n\t\t$ open ./\n\t\t\n\t\t// 使用默认软件打开文件\n\t\t$ open fa.css \n\t\t// 使用文本编辑器打开文件\n\t\t$ open fa.css \n\t\t// 指定一个软件打开一个文件，如这里指定用 sublime text 打开\n\t\t$ open test.txt -a /Applications/Sublime\\ Text.app/\t\n- du 查看文件夹大小\n\n\t\t$ du /home/xiaolai\n\t\t// -h 人类可读单位，-s 只显示摘要\t\n\t\t$ du -sh /home/xiaolai\n\n- find 查找文件\n\t\t\n\t\t// 查找test.txt\n\t\t$ find  test.txt\n\n- locate 查找匹配名文件\n\n\t\t// 向下查找文件名中含有 test 的文件\n\t\t$ locate test\n\t\t\n\t\t// 与 find 不同的是，locate 并不是实时查找，需要更新数据库才能获取到最新信息\n\t\t$ updatedb\n\t\t$ locate test\n\n- 其他命令\n\t\n\t\t// 时间\n\t\t$ date\t\n\t\t// 休眠 300s\n\t\t$ sleep 300\n\t\t// 系统日志\n\t\t$ dmesg\n\t\n\t硬件信息\n\t\t\n\t\t// 系统信息\n\t\t$ uname\n\t\t// 系统详细信息\n\t\t$ uname -a\n\t\t// 所有硬盘的使用情况\n\t\t$ df -lh\n\t\t// 所有硬盘使用情况\n\t\t$ mount\n\t\t// 所有分区\n\t\t$ sudo fdisk -l\n\t\t// 架构信息\n\t\t$ arh\n\t\t// CPU信息\n\t\t$ cat /proc/cpuinfo\n\t\t// 内存信息\n\t\t$ cat /proc/meminfo\n\t\t// 内存使用情况\n\t\t$ free\n\t\t// 内存page大小(KB)\n\t\t$ pagesize\n\t\t\n\t网络信息\n\t\t\n\t\t// 网络接口信息\n\t\t$ ifconfig\n\t\t// 路由表\n\t\t$ route\n\t\t// 网络连接状态\n\t\t$ netstat\n\t\t// 发送 ping 包\n\t\t$ ping [IP]\n\t\t// 探测路由路径\n\t\t$ traceroute [IP]\n\t\t// 向DHCP发送请求，获取IP地址和其他设置信息\n\t\t$ dhclient\n\t\t// DNS查询domain对应的IP\n\t\t$ host [domain]\n\t\t// DNS查询IP对应的domain\n\t\t$ host [IP]\n\t\t// 使用 wget 下载 url 指定的资源\n\t\t$ wget [url]\n\t\t\n\n# 进程\n\n- top 显示进程信息\n\t\t\n\t\t$ top\n\n- ps 列出进程\n\n- ps -e -o 列出进程特定信息\n\n\t\t// -e 列出全部进程\n\t\t$ ps -e\n\t\t// -o pid,comm,cmd 列出 PID,COMMAND,CMD,PPID 信息\n\t\t$ ps -e -o pid,comm,cmd,ppid\n\n- fork 创建进程\n\n\t通过复制父进程来得到子进程，子进程有个 ppid 属性保存了父进程 id\n\t\n\t\t// 显示父子进程\n\t\t$ ps -o pid, ppid, cmd\n\t\t// 显示进程树\n\t\t$ pstree\t\n\t\t\n- ps -ajx 显示较完整的进程信息\n\n\t\t$ ps -ajx\t\n\t\n- ps -o pgid\n\t\n\t进程组的作用在于可以将一个新号发送给这个组\n\t\n\t\t// pgid 表示进程组的领导进程的 id\n\t\t$ ps -p pid,,ppid,pgid,cmd\n\n- ps -o sid\n\n\t几个进程组可以组成一个会话，会话领导进程的PID为SID\n\t\n\t会话中的每个进程组都是一个工作(job)，每个会话可以连接一个终端(control terminal)\n\t\n\t会话的作用在于可以将多个工作囊括在一个终端，并取其中的一个作为前台(foreground)，其他工作则进行在后台(background)\n\t\n\t\t// 用 & 将ping工作在后台运行, 并将输出流写到log文件中\n\t\t$ ping localhost > log &\n\n# 信号\n\n\t常见信号：SIGINT, SIGQUIT, SIGCONT, SIGTSTP, SIGALRM\n\t\t\n\t\t// 查询信号\n\t\t$ man 7 signal\n\t\n\t按下键盘 CTRL+C 时，发出 SIGINT 信号，默认操作是中断(INTERRUPT)该进程\t\n\t按下键盘 CTRL+\\ 时，发出 SIGQUIT 信号，默认操作是退出(QUIT)该进程\n\t\n\t按下键盘 CTRL+Z 时，发出 SIGTSTP，默认操作是暂停(STOP)该进程\n\t\n\tSIGCONT 用于通知暂停的进程继续\n\t\n\tSIGALRM 用作定时器：一定时间后才生成该信号\n\t\n\t\t// 运行一个进程\n\t\t$ ping localhost\n\t\t// 按下键盘 CTRL+Z 发出 SIGTSTP 信号，暂停该进程\n\t\t// CTRL+Z,显示：\n\t\t// [1]+ Stopped\t\tping localhost\n\t\t// 查询这个ping进程的pid\n\t\t$ ps -e -o cmd,pid\n\t\t// 查询到 5132，使用 kill 来发送SIGCONT信号，继续该进程\n\t\t$ kill -SIGCONT 5132\n\t\t// 接着ping进程就会继续了\n\t\t\n# 用户\n\n\t用户登录后，有用户id(UID)和组id(GID)\n\t\n\t用户信息保存在 /etc/passwd\n\t组信息保存在 /etc/group\n\t\n\t\t\n# SSH 登录 VPS\n\n- 登录到远程主机\n\n\t\t$ ssh root@123.123.123.123\n\t\n- 修改root用户密码\n\n\t\t$ passwd\n\t\n- 添加用户组\n\n\t\t$ addgroup admin\n\t\n- 添加用户\n\n\t\t$ useradd -d /home/xiaolai -s /bin/bash -m xiaolai\n\t\n\t参数 -d 指定用户主目录，-s 指定用户的shell，-m 指定目录不存在则创建\t\n- 设置新用户的密码\n\n\t\t$ passwd xiaolai\n\t\n- 添加用户到用户组\n\n\t\t$ usermod -a -G admin xiaolai\n\t\n- 为用户设定sudo权限\n\n\t\t$ visudo\n\t\n\tvisudo会打开/etc/sudoers 在：\n\troot    ALL=(ALL:ALL) ALL 后添加：\n\txiaolai    ALL=(ALL:ALL) ALL\t\n\t\n\t\n# 压缩与归档\n\n- zip 压缩\n\n\t\t// 将 file1 和 file2 压缩到 file.zip\n\t\t$ zip file.zip file1 file2\n\n- unzip\t解压缩\n\n\t\t$ unzip file.zip\t\n\t\n- gzip 压缩\n\n\t\t// file1 压缩到 file.gz\n\t\t$ gzip -c file1 > file.gz\n\n- gunzip 解压缩\n\n\t\t$ gunzip file.gz\n\n- tar -cf 创建归档\n\t\t\n\t\t// 将 file1 和 file2 归档到 file.tar\n\t\t$ tar -cf file.tar file1 file2\t\n\n- tar -zcvf 创建归档并压缩\t\t\n\n\t\t$ tat -zcvf file.tar file1 file2\n\t\t\n- tar -xf 释放归档\n\t\t\n\t\t$ tar -xf file.tar\n\n- tar -zxf 解压并释放归档\n\n\t\t$ tar -zxf file.tar.gz\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\n\n\n\t\n\n\t\n\n\n\n\n\t","html":"<blockquote>\n  <p>TODO - 待整理</p>\n</blockquote>\n\n<h1 id=\"\">一些概念</h1>\n\n<ul>\n<li><p>bytes stream 字节流</p>\n\n<p>linux 执行一个程序时会自动打开三个流：标准输入流、标准输出流、标准错误流</p>\n\n<p>输出流用 \">\" 或 \">>\" 表示</p>\n\n<p>输入流用 \"&lt;\" 表示</p>\n\n<p>错误流用 \">&amp;\" 表示</p>\n\n<pre><code>// 输出文本流到屏幕\n$ echo '我是小赖'\n// echo 输出信息到 a.txt\n$ echo '我是小赖' &gt; a.txt\n// 追加文本流到 a.txt\n$ echo '我才是小赖' &gt;&gt; a.txt\n\n\n// 输出命令执行结果文本流到屏幕\n$ ls\n// 重新定向, 这样 ls 命令的输出文本流就会写到这个文件上\n$ ls &gt; a.txt\n// 若 a.txt 已存在，则将ls 命令的输出文本流追加到这个文件上\n$ ls &gt;&gt; a.txt \n\n\n// 输入文本流\n$ cat &lt; a.txt\n// 复制 a.txt 到 b.txt\n$ cat &lt; a.txt &gt; b.txt\n\n\n// 输出错误，假定 wrongDir 是不存在的目录\n$ cd void &gt;&amp; a.txt\n</code></pre></li>\n<li><p>pipe 管道</p>\n\n<p>使用管道，可以将一个命令的输出流当做另一个命令的输入流</p>\n\n<p>管道用 \"|\" 表示</p>\n\n<pre><code>// 输出 \"cat &gt; a.txt\" 当做命令 \"wc\" 的输入\n// wc 即 word count：输出文本的行、词和字符总数\n$ cat &lt; a.txt | wc\n</code></pre></li>\n</ul>\n\n<!-- more -->            \n\n<h1 id=\"\">帮助类命令\u001b</h1>\n\n<ul>\n<li>type 查看某个命令的类型</li>\n</ul>\n\n<p>类型可为：1.可执行文件 2.内建函数 3.别名</p>\n\n<pre><code>    $ type ls\n    $ type cd\n    $ type open\n</code></pre>\n\n<ul>\n<li><p>which 查看命令的绝对路径</p>\n\n<pre><code>$ which ls\n</code></pre></li>\n<li><p>where 更大范围查看命令的绝对路径        </p>\n\n<pre><code>$ whereis ls\n</code></pre></li>\n<li><p>whatis 查看命令的介绍</p>\n\n<pre><code>$ whatis ls    \n</code></pre></li>\n<li><p>man 查询命令的帮助文档</p>\n\n<pre><code>// 学习 linux 必备！\n$ man ls   \n</code></pre></li>\n<li><p>info 查询命令的更详细帮助文档</p>\n\n<pre><code>$ info ls\n</code></pre></li>\n<li><p>history 查看输入的命令历史</p>\n\n<pre><code>$ history \n</code></pre></li>\n<li><p>alias 别名</p>\n\n<pre><code>// 查看所有别名\n$ alias\n// 设置别名，llss 为 ls 的别名\n$ alias lllsss = ls    \n</code></pre></li>\n<li><p>env 环境变量</p>\n\n<pre><code>// 查看所有环境变量\n$ env\n// 设置环境变量\n// $ export [key]=[value]  \n$ export testKey=testVal\n</code></pre></li>\n<li><p>finger 查看用户信息</p>\n\n<pre><code>// 查看所有用户信息\n$ finger\n// 查看特定用户信息\n$ finger xiaolai\n</code></pre></li>\n<li><p>who am I 显示当前用户</p>\n\n<pre><code>$ who am I\n</code></pre></li>\n<li><p>su 成为超级用户</p>\n\n<pre><code>$ su\n// 或者用超级用户执行命令：\n// $ sudo [commmand]   \n</code></pre></li>\n<li><p>passwd 修改密码</p>\n\n<pre><code>$ passwd   \n</code></pre></li>\n</ul>\n\n<h1 id=\"\">文件管理类命令</h1>\n\n<ul>\n<li><p>touch 新建文件</p>\n\n<pre><code>// 如果文件已经存在，则只修改时间信息\n$ touch a.txt  \n</code></pre></li>\n<li><p>ls 列出目录/文件信息 </p>\n\n<pre><code>// 显示当前目录下的文件\n$ ls\n// 显示桌面目录下的文件\n$ ls ~/Desktop\n// 显示目录下所有文件的信息\n$ ls -l\n// 显示目录下特定文件的信息\n$ ls -l a.txt\n// 显示目录下多个文件的信息\n$ ls -l a.txt b.txt c.txt d.txt\n// 列出当前目录下的文件的详细信息，包括隐藏文件\n$ ls -l -a\n// 或\n$ ls -la\n// 列出当前目录下特定文件的详细信息，包括隐藏文件\n$ ls -l -a a.txt\n// 或\n$ ls -la a.txt\n</code></pre></li>\n<li><p>cp 复制</p>\n\n<pre><code>// 将 a.txt 复制到 b.txt\n$ cp a.txt b.txt\n// 将 a.txt 复制到父目录下的 a.txt\n$ cp a.txt ..\n</code></pre></li>\n<li><p>mv 移动                </p>\n\n<pre><code>// 移动 a.txt 到 b.txt ，此时相当于重命名了\n$ mv a.txt b.txt\n// 移动 a.txt 到桌面目录下\n$ mv a.txt /Desktop\n</code></pre></li>\n<li><p>rm 删除文件</p>\n\n<pre><code>// 删除 a.txt 文件\n$ rm a.txt\n</code></pre></li>\n<li><p>rm -r 删除目录-目录不一定非空</p>\n\n<pre><code>// 删除 /home/xiaolai 整个目录，参数 -r 是 recursive 重复删除之意\n$ rm -r /home/xiaolai  \n\n\n// 慎用 rm -rf 即强制删除目录不提供确认！！\n// $rm -rf /home/xiaolai\n</code></pre></li>\n<li><p>pwd 显示当前路径</p>\n\n<pre><code>$ pwd\n</code></pre></li>\n<li><p>cd 切换路径</p>\n\n<pre><code>// 切换到 /home/xiaolai\n$ cd /home/xiaolai\n// 切换到之前的路径\n$ cd - \n</code></pre></li>\n<li><p>mkdir 创建目录</p>\n\n<pre><code>// 创建目录 /home/xiaolai/newdir\n$ mkdir /home/xiaolai/newdir\n</code></pre></li>\n<li><p>rmdir 删除目录</p>\n\n<pre><code>// 目录为空时才可删除\n$ rmdir /home/xiaolai/newdir   \n</code></pre></li>\n<li><p>chmod 修改权限</p>\n\n<pre><code>// 修改 a.txt 的权限为 755\n$ chmod 755 a.txt\n</code></pre></li>\n<li><p>chown 修改拥有者</p>\n\n<pre><code>// 修改 a.txt 的拥有者为 root, sudo 指以超级权限运行\n$ sudo chown root a.txt    \n</code></pre></li>\n<li><p>chgrp 修改拥有组</p>\n\n<pre><code>// 修改 a.txt 的拥有组为 root 组\n$ sudo chgrp root a.txt    \n</code></pre></li>\n<li><p>cat 查看文件内容</p>\n\n<pre><code>// 命令行中列出文件内容\n$ cat a.txt    \n// 链接显示 a.txt 和 b.txt\n$ cat a.txt b.txt\n</code></pre></li>\n<li><p>head -1 显示文件第一行</p>\n\n<pre><code>$ head -1 a.txt\n</code></pre></li>\n<li><p>tail -2 显示文件倒数第二行</p>\n\n<pre><code>$ tail -2 a.txt\n</code></pre></li>\n<li><p>diff 文件对比</p>\n\n<pre><code>// 显示 a.txt 和 b.txt 的差异\n$ diff a.txt b.txt\n</code></pre></li>\n<li><p>du 文件占用的磁盘空间</p>\n\n<pre><code>// du   \n</code></pre></li>\n<li><p>df 文件系统的磁盘空间占用情况</p>\n\n<pre><code>// df                           \n</code></pre></li>\n<li><p>wc 显示文件内容的字符、词和行数             </p>\n\n<pre><code>$ wc a.txt \n</code></pre></li>\n<li><p>od -c 使用ASCII查看文件内容</p>\n\n<pre><code>$ od -c a.txt  \n</code></pre></li>\n<li><p>open 打开文件</p>\n\n<pre><code>// 打开一个应用\n$ open /Applications/Safari.app/\n\n\n// 打开一个目录\n$ open /Applications/\n// 打开当前目录\n$ open ./\n\n\n// 使用默认软件打开文件\n$ open fa.css \n// 使用文本编辑器打开文件\n$ open fa.css \n// 指定一个软件打开一个文件，如这里指定用 sublime text 打开\n$ open test.txt -a /Applications/Sublime\\ Text.app/    \n</code></pre></li>\n<li><p>du 查看文件夹大小</p>\n\n<pre><code>$ du /home/xiaolai\n// -h 人类可读单位，-s 只显示摘要   \n$ du -sh /home/xiaolai\n</code></pre></li>\n<li><p>find 查找文件</p>\n\n<pre><code>// 查找test.txt\n$ find  test.txt\n</code></pre></li>\n<li><p>locate 查找匹配名文件</p>\n\n<pre><code>// 向下查找文件名中含有 test 的文件\n$ locate test\n\n\n// 与 find 不同的是，locate 并不是实时查找，需要更新数据库才能获取到最新信息\n$ updatedb\n$ locate test\n</code></pre></li>\n<li><p>其他命令</p>\n\n<pre><code>// 时间\n$ date \n// 休眠 300s\n$ sleep 300\n// 系统日志\n$ dmesg\n</code></pre>\n\n<p>硬件信息</p>\n\n<pre><code>// 系统信息\n$ uname\n// 系统详细信息\n$ uname -a\n// 所有硬盘的使用情况\n$ df -lh\n// 所有硬盘使用情况\n$ mount\n// 所有分区\n$ sudo fdisk -l\n// 架构信息\n$ arh\n// CPU信息\n$ cat /proc/cpuinfo\n// 内存信息\n$ cat /proc/meminfo\n// 内存使用情况\n$ free\n// 内存page大小(KB)\n$ pagesize\n</code></pre>\n\n<p>网络信息</p>\n\n<pre><code>// 网络接口信息\n$ ifconfig\n// 路由表\n$ route\n// 网络连接状态\n$ netstat\n// 发送 ping 包\n$ ping [IP]\n// 探测路由路径\n$ traceroute [IP]\n// 向DHCP发送请求，获取IP地址和其他设置信息\n$ dhclient\n// DNS查询domain对应的IP\n$ host [domain]\n// DNS查询IP对应的domain\n$ host [IP]\n// 使用 wget 下载 url 指定的资源\n$ wget [url]\n</code></pre></li>\n</ul>\n\n<h1 id=\"\">进程</h1>\n\n<ul>\n<li><p>top 显示进程信息</p>\n\n<pre><code>$ top\n</code></pre></li>\n<li><p>ps 列出进程</p></li>\n<li><p>ps -e -o 列出进程特定信息</p>\n\n<pre><code>// -e 列出全部进程\n$ ps -e\n// -o pid,comm,cmd 列出 PID,COMMAND,CMD,PPID 信息\n$ ps -e -o pid,comm,cmd,ppid\n</code></pre></li>\n<li><p>fork 创建进程</p>\n\n<p>通过复制父进程来得到子进程，子进程有个 ppid 属性保存了父进程 id</p>\n\n<pre><code>// 显示父子进程\n$ ps -o pid, ppid, cmd\n// 显示进程树\n$ pstree   \n</code></pre></li>\n<li><p>ps -ajx 显示较完整的进程信息</p>\n\n<pre><code>$ ps -ajx  \n</code></pre></li>\n<li><p>ps -o pgid</p>\n\n<p>进程组的作用在于可以将一个新号发送给这个组</p>\n\n<pre><code>// pgid 表示进程组的领导进程的 id\n$ ps -p pid,,ppid,pgid,cmd\n</code></pre></li>\n<li><p>ps -o sid</p>\n\n<p>几个进程组可以组成一个会话，会话领导进程的PID为SID</p>\n\n<p>会话中的每个进程组都是一个工作(job)，每个会话可以连接一个终端(control terminal)</p>\n\n<p>会话的作用在于可以将多个工作囊括在一个终端，并取其中的一个作为前台(foreground)，其他工作则进行在后台(background)</p>\n\n<pre><code>// 用 &amp; 将ping工作在后台运行, 并将输出流写到log文件中\n$ ping localhost &gt; log &amp;\n</code></pre></li>\n</ul>\n\n<h1 id=\"\">信号</h1>\n\n<pre><code>常见信号：SIGINT, SIGQUIT, SIGCONT, SIGTSTP, SIGALRM\n\n    // 查询信号\n    $ man 7 signal\n\n按下键盘 CTRL+C 时，发出 SIGINT 信号，默认操作是中断(INTERRUPT)该进程    \n按下键盘 CTRL+\\ 时，发出 SIGQUIT 信号，默认操作是退出(QUIT)该进程\n\n按下键盘 CTRL+Z 时，发出 SIGTSTP，默认操作是暂停(STOP)该进程\n\nSIGCONT 用于通知暂停的进程继续\n\nSIGALRM 用作定时器：一定时间后才生成该信号\n\n    // 运行一个进程\n    $ ping localhost\n    // 按下键盘 CTRL+Z 发出 SIGTSTP 信号，暂停该进程\n    // CTRL+Z,显示：\n    // [1]+ Stopped     ping localhost\n    // 查询这个ping进程的pid\n    $ ps -e -o cmd,pid\n    // 查询到 5132，使用 kill 来发送SIGCONT信号，继续该进程\n    $ kill -SIGCONT 5132\n    // 接着ping进程就会继续了\n</code></pre>\n\n<h1 id=\"\">用户</h1>\n\n<pre><code>用户登录后，有用户id(UID)和组id(GID)\n\n用户信息保存在 /etc/passwd\n组信息保存在 /etc/group\n</code></pre>\n\n<h1 id=\"sshvps\">SSH 登录 VPS</h1>\n\n<ul>\n<li><p>登录到远程主机</p>\n\n<pre><code>$ ssh root@123.123.123.123\n</code></pre></li>\n<li><p>修改root用户密码</p>\n\n<pre><code>$ passwd\n</code></pre></li>\n<li><p>添加用户组</p>\n\n<pre><code>$ addgroup admin\n</code></pre></li>\n<li><p>添加用户</p>\n\n<pre><code>$ useradd -d /home/xiaolai -s /bin/bash -m xiaolai\n</code></pre>\n\n<p>参数 -d 指定用户主目录，-s 指定用户的shell，-m 指定目录不存在则创建   </p></li>\n<li><p>设置新用户的密码</p>\n\n<pre><code>$ passwd xiaolai\n</code></pre></li>\n<li><p>添加用户到用户组</p>\n\n<pre><code>$ usermod -a -G admin xiaolai\n</code></pre></li>\n<li><p>为用户设定sudo权限</p>\n\n<pre><code>$ visudo\n</code></pre>\n\n<p>visudo会打开/etc/sudoers 在：\nroot    ALL=(ALL:ALL) ALL 后添加：\nxiaolai    ALL=(ALL:ALL) ALL    </p></li>\n</ul>\n\n<h1 id=\"\">压缩与归档</h1>\n\n<ul>\n<li><p>zip 压缩</p>\n\n<pre><code>// 将 file1 和 file2 压缩到 file.zip\n$ zip file.zip file1 file2\n</code></pre></li>\n<li><p>unzip    解压缩</p>\n\n<pre><code>$ unzip file.zip   \n</code></pre></li>\n<li><p>gzip 压缩</p>\n\n<pre><code>// file1 压缩到 file.gz\n$ gzip -c file1 &gt; file.gz\n</code></pre></li>\n<li><p>gunzip 解压缩</p>\n\n<pre><code>$ gunzip file.gz\n</code></pre></li>\n<li><p>tar -cf 创建归档</p>\n\n<pre><code>// 将 file1 和 file2 归档到 file.tar\n$ tar -cf file.tar file1 file2 \n</code></pre></li>\n<li><p>tar -zcvf 创建归档并压缩        </p>\n\n<pre><code>$ tat -zcvf file.tar file1 file2\n</code></pre></li>\n<li><p>tar -xf 释放归档</p>\n\n<pre><code>$ tar -xf file.tar\n</code></pre></li>\n<li><p>tar -zxf 解压并释放归档</p>\n\n<pre><code>$ tar -zxf file.tar.gz \n</code></pre></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399670382000,"created_by":1,"updated_at":1399670382000,"updated_by":1,"published_at":1399670382000,"published_by":1},{"id":527,"uuid":"3027c886-9bf9-4019-a2ee-31df7f674828","title":"lodash.js 学习笔记","slug":"lodashjs","markdown":"\nunderscore.js 提供了一系列工具函数，而 lodash.js 可以认为是 underscore.js 的一个超集。\n\n简单示例：\n\n```\nvar _ = require('lodash');\n\n// 去掉falsy值后的数组\n_.compact([0, 1, false, 2, '', 3]);\n// → [1, 2, 3]\n\n// 找出数组中不同的值\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// → [1, 3, 4]\n\n// 根据条件找出数组元素的索引值，未找到则返回 -1\nvar characters = [\n  { 'name': 'barney',  'age': 36, 'blocked': false },\n  { 'name': 'fred',    'age': 40, 'blocked': true },\n  { 'name': 'pebbles', 'age': 1,  'blocked': false }\n];\n_.findIndex(characters, function(chr) {\n  return chr.age < 20;\n});\n// → 2\n// using \"_.where\" callback shorthand\n_.findIndex(characters, { 'age': 36 });\n// → 0\n// using \"_.pluck\" callback shorthand\n_.findIndex(characters, 'blocked');\n// → 1\n\n\n\n\n// 找出数组中相同的值\n_.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n// → [1, 2]\n\n//   找出数组的前 n 个元素 \n_.first([1, 2, 3]);\n// → 1\n\n_.first([1, 2, 3], 2);\n// → [1, 2]\n\n_.first([1, 2, 3], function(num) {\n  return num < 3;\n});\n// → [1, 2]\n\n// 找出数组中最后 n 个元素\n_.last([1, 2, 3]);\n// → 3\n_.last([1, 2, 3], 2);\n// → [2, 3]\n_.last([1, 2, 3], function(num) {\n  return num > 1;\n});\n// → [2, 3]\n\n// 找出数组中某个元素的索引\n_.indexOf([1, 2, 3, 1, 2, 3], 2);\n// → 1\n_.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// → 4\n_.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n// → 2\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n// → 4\n// 从 第三个元素开始\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// → 1\n\n// 移除数组中指定的值\nvar array = [1, 2, 3, 1, 2, 3];\n_.pull(array, 2, 3);\nconsole.log(array);\n// → [1, 1]\n\n// 返回一个范围数组\n// _.range([start=0], end, [step=1])\n_.range(4);\n// → [0, 1, 2, 3]\n_.range(1, 5);\n// → [1, 2, 3, 4]\n_.range(0, 20, 5);\n// → [0, 5, 10, 15]\n_.range(0, -4, -1);\n// → [0, -1, -2, -3]\n_.range(1, 4, 0);\n// → [1, 1, 1]\n_.range(0);\n// → []\n\n// 移除数组中匹配条件的值\nvar array = [1, 2, 3, 4, 5, 6];\nvar evens = _.remove(array, function(num) { return num % 2 == 0; });\nconsole.log(array);\n// → [1, 3, 5]\nconsole.log(evens);\n// → [2, 4, 6]\n\n// 切割数组，默认切割 1\n// _.rest(array, [callback=1], [thisArg])\n_.rest([1, 2, 3]);\n// → [2, 3]\n_.rest([1, 2, 3], 2);\n// → [3]\n_.rest([1, 2, 3], function(num) {\n  return num < 3;\n});\n// → [3]\n\n\n// 将多层嵌套的数组变成一层\n_.flatten([1, [2], [3, [[4]]]]);\n// → [1, 2, 3, 4];\nvar characters = [\n  { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n  { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n];\n// using \"_.pluck\" callback shorthand\n_.flatten(characters, 'pets');\n// → ['hoppy', 'baby puss', 'dino']\n\n\n\n// 更多实用函数见 http://lodash.com/docs\n\n```\n<!-- more -->\n\n### 参考链接\n\n- [underscorejs.org](http://underscorejs.org/)\n- [lodash.com](http://lodash.com/)\n- [http://blog.fens.me/nodejs-underscore/](http://blog.fens.me/nodejs-underscore/)\n- [http://learningcn.com/underscore/](http://learningcn.com/underscore/)\n- [Underscore.js 中文](http://javascript.ruanyifeng.com/library/underscore.html)\n- [Say \"Hello\" to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n-  [Differences between lodash and underscore](http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore)","html":"<p>underscore.js 提供了一系列工具函数，而 lodash.js 可以认为是 underscore.js 的一个超集。</p>\n\n<p>简单示例：</p>\n\n<pre><code>var _ = require('lodash');\n\n// 去掉falsy值后的数组\n_.compact([0, 1, false, 2, '', 3]);  \n// → [1, 2, 3]\n\n// 找出数组中不同的值\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);  \n// → [1, 3, 4]\n\n// 根据条件找出数组元素的索引值，未找到则返回 -1\nvar characters = [  \n  { 'name': 'barney',  'age': 36, 'blocked': false },\n  { 'name': 'fred',    'age': 40, 'blocked': true },\n  { 'name': 'pebbles', 'age': 1,  'blocked': false }\n];\n_.findIndex(characters, function(chr) {  \n  return chr.age &lt; 20;\n});\n// → 2\n// using \"_.where\" callback shorthand\n_.findIndex(characters, { 'age': 36 });  \n// → 0\n// using \"_.pluck\" callback shorthand\n_.findIndex(characters, 'blocked');  \n// → 1\n\n\n\n\n// 找出数组中相同的值\n_.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);  \n// → [1, 2]\n\n//   找出数组的前 n 个元素 \n_.first([1, 2, 3]);  \n// → 1\n\n_.first([1, 2, 3], 2);  \n// → [1, 2]\n\n_.first([1, 2, 3], function(num) {  \n  return num &lt; 3;\n});\n// → [1, 2]\n\n// 找出数组中最后 n 个元素\n_.last([1, 2, 3]);  \n// → 3\n_.last([1, 2, 3], 2);  \n// → [2, 3]\n_.last([1, 2, 3], function(num) {  \n  return num &gt; 1;\n});\n// → [2, 3]\n\n// 找出数组中某个元素的索引\n_.indexOf([1, 2, 3, 1, 2, 3], 2);  \n// → 1\n_.indexOf([1, 2, 3, 1, 2, 3], 2, 3);  \n// → 4\n_.indexOf([1, 1, 2, 2, 3, 3], 2, true);  \n// → 2\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);  \n// → 4\n// 从 第三个元素开始\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);  \n// → 1\n\n// 移除数组中指定的值\nvar array = [1, 2, 3, 1, 2, 3];  \n_.pull(array, 2, 3);  \nconsole.log(array);  \n// → [1, 1]\n\n// 返回一个范围数组\n// _.range([start=0], end, [step=1])\n_.range(4);  \n// → [0, 1, 2, 3]\n_.range(1, 5);  \n// → [1, 2, 3, 4]\n_.range(0, 20, 5);  \n// → [0, 5, 10, 15]\n_.range(0, -4, -1);  \n// → [0, -1, -2, -3]\n_.range(1, 4, 0);  \n// → [1, 1, 1]\n_.range(0);  \n// → []\n\n// 移除数组中匹配条件的值\nvar array = [1, 2, 3, 4, 5, 6];  \nvar evens = _.remove(array, function(num) { return num % 2 == 0; });  \nconsole.log(array);  \n// → [1, 3, 5]\nconsole.log(evens);  \n// → [2, 4, 6]\n\n// 切割数组，默认切割 1\n// _.rest(array, [callback=1], [thisArg])\n_.rest([1, 2, 3]);  \n// → [2, 3]\n_.rest([1, 2, 3], 2);  \n// → [3]\n_.rest([1, 2, 3], function(num) {  \n  return num &lt; 3;\n});\n// → [3]\n\n\n// 将多层嵌套的数组变成一层\n_.flatten([1, [2], [3, [[4]]]]);  \n// → [1, 2, 3, 4];\nvar characters = [  \n  { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n  { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n];\n// using \"_.pluck\" callback shorthand\n_.flatten(characters, 'pets');  \n// → ['hoppy', 'baby puss', 'dino']\n\n\n\n// 更多实用函数见 http://lodash.com/docs\n</code></pre>\n\n<!-- more -->\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><a href=\"http://underscorejs.org/\">underscorejs.org</a></li>\n<li><a href=\"http://lodash.com/\">lodash.com</a></li>\n<li><a href=\"http://blog.fens.me/nodejs-underscore/\">http://blog.fens.me/nodejs-underscore/</a></li>\n<li><a href=\"http://learningcn.com/underscore/\">http://learningcn.com/underscore/</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/library/underscore.html\">Underscore.js 中文</a></li>\n<li><a href=\"http://kitcambridge.be/blog/say-hello-to-lo-dash/\">Say \"Hello\" to Lo-Dash</a></li>\n<li><a href=\"http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore\">Differences between lodash and underscore</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405247280000,"created_by":1,"updated_at":1405247280000,"updated_by":1,"published_at":1405247280000,"published_by":1},{"id":528,"uuid":"d869c1ea-1408-47b3-8370-4209feed3f08","title":"meta viewport 标签","slug":"meta-viewport","markdown":"\n\nviewport 可以控制页面的原始宽度，限制用户的缩放行为。\n\n```\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" />\n```\n\nwidth: 控制 viewport 的宽度，可指定为数字如 800，或特殊值如 device-width，即设置为 100%。\n\nheight: 控制 viewport 的高度。\n\ninitial-scale: 页面第一次加载时的缩放比例。\n\nmaximum-scale: 最大缩放比例，取值从 0 到 10。\n\nminimum-scale: 最小缩放比例，取值从 0 到 10。\n\nuser-scaleble: 是否允许用户缩放，取值为 yes/true 或 no/false。\n\n\n<!-- more -->\n\n### 参考链接\n\n- [Using the viewport meta tag to control layout on mobile browsers](https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag)","html":"<p>viewport 可以控制页面的原始宽度，限制用户的缩放行为。</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt;  \n</code></pre>\n\n<p>width: 控制 viewport 的宽度，可指定为数字如 800，或特殊值如 device-width，即设置为 100%。</p>\n\n<p>height: 控制 viewport 的高度。</p>\n\n<p>initial-scale: 页面第一次加载时的缩放比例。</p>\n\n<p>maximum-scale: 最大缩放比例，取值从 0 到 10。</p>\n\n<p>minimum-scale: 最小缩放比例，取值从 0 到 10。</p>\n\n<p>user-scaleble: 是否允许用户缩放，取值为 yes/true 或 no/false。</p>\n\n<!-- more -->\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\">Using the viewport meta tag to control layout on mobile browsers</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406307942000,"created_by":1,"updated_at":1406307942000,"updated_by":1,"published_at":1406307942000,"published_by":1},{"id":529,"uuid":"5dbc50c5-65d8-4d35-affb-c1838a387c61","title":"moment.js 学习笔记","slug":"momentjs","markdown":"\n\nmoment.js 是一个专注于处理时间的工具库。\n\n<!-- more -->\n\n```\n\nvar moment = require('moment');\n\n// moment 创建了一个 Date 对象的容器，使用 moment() 来获取这个对象\n// moment().format();\n\n// # Now\n// 获取当前时间 Moment 对象\nconsole.log(\n    moment()\n);\n// => 输出一个 Moment 对象，属性如下：\n/*{ _isAMomentObject: true,\n*    _i: undefined,    // input\n*    _f: undefined,    // format\n*    _l: undefined,\n*   _strict: undefined,\n*    _isUTC: false,\n*    _pf:\n*    { empty: false,\n*        unusedTokens: [],\n*        unusedInput: [],\n*        overflow: -2,\n*        charsLeftOver: 0,\n*        nullInput: false,\n*        invalidMonth: null,\n*        invalidFormat: false,\n*        userInvalidated: false,\n*        iso: false },\n*    _d: Mon Jul 14 2014 21:32:18 GMT+0800 (CST)\n}*/\n\n// 将字符串转化为 Moment 对象\nconsole.log(\n    moment('July 14, 2014')\n);\n\n// 判断字符串是否为时间字符串\nconsole.log(\n    moment('I\\'m not a date string').isValid()\n);\n\n// 已知时间字符串的格式，格式化为 Moment 对象\nconsole.log(\n    moment('07-14-2014', 'MM-DD-YYYY')\n);\n// 会忽略非数字字母以外的字符，所以以下输入也可以：\nconsole.log(\n    moment('07.14.2014', 'MM-DD-YYYY')\n);\n\n// 未指定时区，创建的 Moment 对象将基于本地时间\nconsole.log(\n    moment('07-14-2014 21:30', 'YYYY-MM-DD HH:mm') // => Tue Feb 20 7 21:30:00 GMT+0800\n);\n// 指定时区\nconsole.log(\n    moment('07-14-2014 21:30 +0000', 'YYYY-MM-DD HH:mm Z') // => Wed Feb 21 7 05:30:00 GMT+0800\n);\n\n// 若 返回的 Moment 对象对应的时间不存在时，其 isValid() 将返回 false\nconsole.log(\n    moment('15-14-2014', 'MM DD YYYY').isValid()  // => false  不存在15月\n);\nconsole.log(\n    moment('06-31-2014', 'MM DD YYYY').isValid()  // => false  6月可没有31日！\n);\n\n// moment() 第三个参数可指定是否严格匹配，默认为 false\nconsole.log(\n    moment('Today is 2014-07-14', 'YYYY-MM-DD').isValid() // => true\n);\n// 严格匹配\nconsole.log(\n    moment('Today is 2014-07-14', 'YYYY-MM-DD', true).isValid() // => false\n);\n\n// 创建一个 Moment 对象\nconsole.log(\n    // 传入一个对象\n    moment({year: 2014, month: 6, day: 14, hour: 19, minute: 5, second: 4, millisecond: 321}),\n    // 传入一个数组\n    // [year, month, day, hour, minute, second, millisecond]\n    moment([2014, 6, 14, 19, 5, 4, 321])\n);\n\n\n\n// 或传入一个已有的 Date 对象\nvar date = new Date(2014, 6, 14, 19, 5, 4, 321);\nconsole.log(\n    moment(date)\n);\n\n// 判断错误位置\n// 0 years\n// 1 months\n// 2 days\n// 3 hours\n// 4 minutes\n// 5 seconds\n// 6 milliseconds\nconsole.log(\n    moment(\"2014-07-14T21:13:90\").invalidAt() //=> 5 即 90 秒是错误的\n);\n\n// 设置 或 读取\n// 这里的 second 可以替换为\n// minute/hour/date/day/weekday/isoWeekday/dayOfYear/\n// week/isoWeek/month/quarter/year/weekYear/isoWeekYear/weeksInYear/isoWeeksInYear/\nmoment().second(Number);\nmoment().second(); // Number\nmoment().seconds(Number);\n\n// 读取\nmoment().get('year');\nmoment().get('month');  // 0 to 11\nmoment().get('date');\nmoment().get('hour');\nmoment().get('minute');\nmoment().get('second');\nmoment().get('millisecond');\n\n// 设置\nmoment().set('year', 2014);\nmoment().set('month', 6);  // 七月\nmoment().set('date', 17);\nmoment().set('hour', 19);\nmoment().set('minute', 5);\nmoment().set('second', 4);\nmoment().set('millisecond', 321);\n\n// 日期的增、减和比较\nvar a = moment().subtract(1, 'day');\nvar b = moment().add(1, 'day');\nmoment.max(a, b);  //=> b\nmoment.min(a, b);  //=> a\n\n// 链式调用更新\nmoment().add('days', 1).subtract('months', 1).year(2014).hours(19).minutes(5).seconds(5);\n\n// 计算时间间隔\nmoment([2011, 6, 17]).fromNow(); //=> '3 years ago''\nvar a = moment([2009, 6, 17]);\nvar b = moment([2014, 8, 18]);\na.from(b)  //=> '5 years ago''\na.diff(b) //=> -163209600000 单位是 ms\na.diff(b, 'days') //=> -1889\na.diff(b, 'years', true); //=> -5.169398907103825 第三个参数为false表示输出浮点数\n\n// 判断时间是否相同\nmoment('2014-06-17').isSame('2014 06 17'); //=> true\n\n// 判断时间前后\nmoment('2014-06-18').isAfter('2014-06-17'); //=> true\n\n// 判断是否为闰年\nmoment([2014]).isLeapYear(); //=> true\n\n// 判断是否为 Moment 对象\nmoment.isMoment() //=> false\nmoment.isMoment(new Date()) //=> false\nmoment.isMoment(moment()) //=> true\n\n```\n\n\n### 参考链接\n\n- [momentjs.com](http://momentjs.com/docs/#/parsing/)\n","html":"<p>moment.js 是一个专注于处理时间的工具库。</p>\n\n<!-- more -->\n\n<pre><code>var moment = require('moment');\n\n// moment 创建了一个 Date 对象的容器，使用 moment() 来获取这个对象\n// moment().format();\n\n// # Now\n// 获取当前时间 Moment 对象\nconsole.log(  \n    moment()\n);\n// =&gt; 输出一个 Moment 对象，属性如下：\n/*{ _isAMomentObject: true,\n*    _i: undefined,    // input\n*    _f: undefined,    // format\n*    _l: undefined,\n*   _strict: undefined,\n*    _isUTC: false,\n*    _pf:\n*    { empty: false,\n*        unusedTokens: [],\n*        unusedInput: [],\n*        overflow: -2,\n*        charsLeftOver: 0,\n*        nullInput: false,\n*        invalidMonth: null,\n*        invalidFormat: false,\n*        userInvalidated: false,\n*        iso: false },\n*    _d: Mon Jul 14 2014 21:32:18 GMT+0800 (CST)\n}*/\n\n// 将字符串转化为 Moment 对象\nconsole.log(  \n    moment('July 14, 2014')\n);\n\n// 判断字符串是否为时间字符串\nconsole.log(  \n    moment('I\\'m not a date string').isValid()\n);\n\n// 已知时间字符串的格式，格式化为 Moment 对象\nconsole.log(  \n    moment('07-14-2014', 'MM-DD-YYYY')\n);\n// 会忽略非数字字母以外的字符，所以以下输入也可以：\nconsole.log(  \n    moment('07.14.2014', 'MM-DD-YYYY')\n);\n\n// 未指定时区，创建的 Moment 对象将基于本地时间\nconsole.log(  \n    moment('07-14-2014 21:30', 'YYYY-MM-DD HH:mm') // =&gt; Tue Feb 20 7 21:30:00 GMT+0800\n);\n// 指定时区\nconsole.log(  \n    moment('07-14-2014 21:30 +0000', 'YYYY-MM-DD HH:mm Z') // =&gt; Wed Feb 21 7 05:30:00 GMT+0800\n);\n\n// 若 返回的 Moment 对象对应的时间不存在时，其 isValid() 将返回 false\nconsole.log(  \n    moment('15-14-2014', 'MM DD YYYY').isValid()  // =&gt; false  不存在15月\n);\nconsole.log(  \n    moment('06-31-2014', 'MM DD YYYY').isValid()  // =&gt; false  6月可没有31日！\n);\n\n// moment() 第三个参数可指定是否严格匹配，默认为 false\nconsole.log(  \n    moment('Today is 2014-07-14', 'YYYY-MM-DD').isValid() // =&gt; true\n);\n// 严格匹配\nconsole.log(  \n    moment('Today is 2014-07-14', 'YYYY-MM-DD', true).isValid() // =&gt; false\n);\n\n// 创建一个 Moment 对象\nconsole.log(  \n    // 传入一个对象\n    moment({year: 2014, month: 6, day: 14, hour: 19, minute: 5, second: 4, millisecond: 321}),\n    // 传入一个数组\n    // [year, month, day, hour, minute, second, millisecond]\n    moment([2014, 6, 14, 19, 5, 4, 321])\n);\n\n\n\n// 或传入一个已有的 Date 对象\nvar date = new Date(2014, 6, 14, 19, 5, 4, 321);  \nconsole.log(  \n    moment(date)\n);\n\n// 判断错误位置\n// 0 years\n// 1 months\n// 2 days\n// 3 hours\n// 4 minutes\n// 5 seconds\n// 6 milliseconds\nconsole.log(  \n    moment(\"2014-07-14T21:13:90\").invalidAt() //=&gt; 5 即 90 秒是错误的\n);\n\n// 设置 或 读取\n// 这里的 second 可以替换为\n// minute/hour/date/day/weekday/isoWeekday/dayOfYear/\n// week/isoWeek/month/quarter/year/weekYear/isoWeekYear/weeksInYear/isoWeeksInYear/\nmoment().second(Number);  \nmoment().second(); // Number  \nmoment().seconds(Number);\n\n// 读取\nmoment().get('year');  \nmoment().get('month');  // 0 to 11  \nmoment().get('date');  \nmoment().get('hour');  \nmoment().get('minute');  \nmoment().get('second');  \nmoment().get('millisecond');\n\n// 设置\nmoment().set('year', 2014);  \nmoment().set('month', 6);  // 七月  \nmoment().set('date', 17);  \nmoment().set('hour', 19);  \nmoment().set('minute', 5);  \nmoment().set('second', 4);  \nmoment().set('millisecond', 321);\n\n// 日期的增、减和比较\nvar a = moment().subtract(1, 'day');  \nvar b = moment().add(1, 'day');  \nmoment.max(a, b);  //=&gt; b  \nmoment.min(a, b);  //=&gt; a\n\n// 链式调用更新\nmoment().add('days', 1).subtract('months', 1).year(2014).hours(19).minutes(5).seconds(5);\n\n// 计算时间间隔\nmoment([2011, 6, 17]).fromNow(); //=&gt; '3 years ago''  \nvar a = moment([2009, 6, 17]);  \nvar b = moment([2014, 8, 18]);  \na.from(b)  //=&gt; '5 years ago''  \na.diff(b) //=&gt; -163209600000 单位是 ms  \na.diff(b, 'days') //=&gt; -1889  \na.diff(b, 'years', true); //=&gt; -5.169398907103825 第三个参数为false表示输出浮点数\n\n// 判断时间是否相同\nmoment('2014-06-17').isSame('2014 06 17'); //=&gt; true\n\n// 判断时间前后\nmoment('2014-06-18').isAfter('2014-06-17'); //=&gt; true\n\n// 判断是否为闰年\nmoment([2014]).isLeapYear(); //=&gt; true\n\n// 判断是否为 Moment 对象\nmoment.isMoment() //=&gt; false  \nmoment.isMoment(new Date()) //=&gt; false  \nmoment.isMoment(moment()) //=&gt; true\n</code></pre>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><a href=\"http://momentjs.com/docs/#/parsing/\">momentjs.com</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405655943000,"created_by":1,"updated_at":1405655943000,"updated_by":1,"published_at":1405655943000,"published_by":1},{"id":530,"uuid":"4432c050-17aa-45a8-be97-d5813b3b699a","title":"MongoDB-学习笔记","slug":"mongodb-2","markdown":"\n\n## MongoDB 支持的几钟数据类型\n\n- String\n\n\t\t// 字符串\n\t\tvar mySite = 'laispace.com';\t\t\t\n\n- Array\n\n\t\t// 数组\n\t\tvar myFriends = ['小赖', '小清', '大花', '大黄'];\n\n- Boolean\n\n\t\t// 布尔类型，true 或 false \t\t\n\t\tvar IloveU = true;\n\n- Code\n\n\t\t// 代码，可在数据库内运行\n\t\tvar myCode = new BSON.Code('function (name) {\n\t\t\treturn 'My name is ' + name;\n\t\t}');\n\n- Date\n\n\t\t// 日期\n\t\tvar myDate = new Date();\n\t\t\n\n\t\t\n- Integer\n\n\t\t// 整数\n\t\tvar myAge = 18; // 让我年轻一次嘛~\n\n<!--more-->\n\n- Long\n\n\t\t// 长整数\n\t\tvar myMoney = new BSON.Long('999999999999999999999');\n\t\t\n- Hash\n\n\t\t// 数据字典\n\t\tvar myInfo = {\n\t\t\tname: '小赖',\n\t\t\tage: '18,\n\t\t\tsex: 'male'\n\t\t};\n\n- Null \n\n\t\t// null 值\n\t\tvar myBadFriend = null;\n\n- ObjectId\n\n\t\t// 索引ID，12字节，24位16进制串，用于唯一标识\n\t\tvar myId = new BSON.ObjectId()\n\n- DBRef\n\n\t\t// 数据库引用\n\t\tvar bestFriendId = new BSON.DBRef('users', friendObjectId);\n\n<!-- more -->\n\n## 使用MongoDB\n\n\n- 连接数据库\n\n\t\tvar mongodb = require('mongodb');\n\t\t\n\t创建 Server对象 实例\t\t\n\n\t\tvar server = new mongodb.server(host, port, [options]);\n\n\toptions 可选，默认参数为：\n \n\t\toptions = {\n\t\t\tssl: false, // 是否启用ssl安全协议\n\t\t\tsslValidate: false, // 是否验证服务器提交的证书\n\t\t\tsslCA: null, // 数组，一组供服务器验证的证书\n\t\t\tsslCert: null, // 数组，一组服务器验证时使用的证书\n\t\t\tsslKey: null, // Buffer 或 String, 一个供服务器验证时使用的私钥\n\t\t\tsslPass: null, // Buffer 或 String, 一个供服务器验证时使用的证书密码\n\t\t\tpoolSize: 5, // 整数，连接池中最大连接数\n\t\t\tsocketOptions: null, // 对象，指定与服务器连接时端口设置的选项\n\t\t\t// socketOptions: {\n\t\t\t//\tkeepAlive: [Number], // 整数毫秒，指定客户端向服务器发送 keepAlive探测包的时间间隔\n\t\t\t//\tconnectTimeMS: [Number], // 整数毫秒，指定客户端连接超时时间\n\t\t\t//\tsocketTimeoutMS: [Number] // 整数毫秒，指定客户端端口超时时间\n\t\t\t// }\n\t\t\tlogger: null, // 对象，用于记录日志\n\t\t\tauto_reconnect: false, // 是否在客户端与服务器连接出错时自动重连\n\t\t\tdisableDriverBSONSizeCheck: false // 是否在 BSON对象过大时抛出错误\n\t\t}\n\t\n\t创建 Db对象 实例\n\n\t创建了 server服务器对象后，使用它创建代表 MongoDB数据库的 Db对象：\n\n\t\tvar Db = new mongodb.Db(databaseName, server, [options]);\n\t\t\n\toptions 可选，默认参数为：\n\t\n\t\toptions = {\n\t\t\tsafe: false // 是否使用  getLastError命令 执行数据操作，该命令返回数据操作的执行结果\n\t\t\tw: [Number lt -1], // 大于-1d的整数或字符串，用于设置 write concern机制，该值大于等于1或为字符串时，才承认数据被写入\n\t\t\twtimeout: [Number], // 整数毫秒，指定数据操作的超时时间\n\t\t\tfsync: false, // 写入数据的方法返回前是否等待数据库内部的 fsync操作\n\t\t\tjournal: false, // 写入数据的方法返回前是否等待数据库内部的 journal操作 \n\t\t\tnative_parse: false, // 是否使用C++ BSON解析器\n\t\t\tforceServerObjectId: false, 是否强制在服务器端而不是客户端创建 BSON对象ID\n\t\t\tpkFactory: {}, // 用于重载数据库内部生成的对象ID主键的对象\n\t\t\tserializeFunctions: false, // 是否序列化Javascript函数\n\t\t\traw: false, // 是否使用二进制BSON数据缓存区来执行数据操作\n\t\t\trecordQueryStats: false, // 查询数据时是否在数据库内部执行查询统计\n\t\t\tretryMiliSeconds: 5000, // 整数毫秒，指定连接数据库失败时建个多长时间重连数据库\n\t\t\tnumberOfRetries: 5, // 重连数据库的次数\n\t\t\tlogger: null, // 对象，用于记录日志\n\t\t\tslaveOk: null, // 整数，查询时使用的SlaveOk值\n\t\t}\n\t\n\t创建好 Db对象后，则开始打开数据库进行操作：\n\t\t\n\t\t// 连接失败时 db 为 null\n\t\tDb.open(function (err, db) {\n\t\t\t// db operations here.\n\t\t\t\n\t\t\t// 关闭数据库， forceClose 是否强制关闭，强制关闭后不可再用 open() 方法打开 \n\t\t\t// db.close([forceClose], function (err) {\n\t\t\t\tif (err) throw err;\n\t\t\t\t// operations after closing db.\n\t\t\t})\t\t\n\t\t})\t\t\t\t\n\t\n\t实例：\n\n\t\tvar mongodb = require('mongodb');\n\t\tvar host = 'localhost';\n\t\tvar port = mongodb.Connection.DEFAULT_PORT || 1234;\n\t\t// 创建服务器实例\n\t\tvar server = new mongodb.Server(host, port, {auto_connect: true});\n\t\t// 创建数据库实例\n\t\tvar Db = new mongodb.Db('testDbName', server, {safe: true});\n\t\t// 打开数据库\n\t\tDb.open(function (err, db) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('连接数据库成功');\n\t\t\t// 记得操作完要关闭数据库\n\t\t\tdb.close(function (err) {\n\t\t\t\tif (err) throw err;\n\t\t\t\t// console.log('关闭数据库成功');\n\t\t\t});\n\t\t});\n\n- 增查改删操作\n\n\t先获取数据库对象的文档集合\n\t\n\t\t// options 参数与上文的大致相同，增加\n\t\t// optiosn.strict, 默认为false，指定是否在访问的集合不存在时抛出错误\n\t\tdb.collection(collectionName, [options], function (err, collection) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('获取到的文档集合是：\\n', collection);\n\t\t\t// 在这里进行【增查改删】操作\n\t\t\t// 增\n\t\t\tcollection.insert(docs, [options], [callback]);\n\t\t\t// 查\n\t\t\tcollection.find(selector, [options]).toArray(callback);\n\t\t\t// 改\n\t\t\tcollection.update(selector, document, [options], [callback]);\n\t\t\t// 查并改\n\t\t\tcollection.findAndModify(selector, sort, document, [options], [callback]);\n\t\t\t// 删\n\t\t\tcollection.remove([selector], [options], [callback]);\n\t\t\t// 查并删\n\t\t\tcollection.findAndRemove(selector, sort, [options], [callback]);\n\t\t});\t\n\t\n\tcollection.insert(docs, [options], [callback])中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tcontinueOnError: false, // 若一个文档插入失败，是否继续插入剩余文档\n\t\t\tcheckKeys: true, // 插入数据时是否取消检查该数据文档的主键是否已存在的处理\n\t\t}\t\n\n\tcollection.update(selector, document, [options], [callback]);中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tupsert: false, // 是否在更新时执行upsert操作：数据不存在则创建\n\t\t\tmulti: false, // 是否更新所有符合查询条件的数据文档，默认为false即更新第一条\n\t\t}\t\n\t\n\tcollection.remove([selector], [options], [callback]);中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tsingle: false, // 是否只删除符合条件的第一条数据文档\n\t\t}\t\t\t\t\t\t\n\t\t\n\t【增查改删】操作的实例：\n\t\n\t\tvar mongodb = require('mongodb');\n\t\tvar host = 'localhost';\n\t\tvar port = mongodb.Connection.DEFAULT_PORT || 1234;\n\t\tvar server = new mongodb.Server(host, port, {auto_connect: true});\n\t\tvar Db = new mongodb.Db('testDbName', server, {safe: true});\n\t\tDb.open(function (err, db) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('连接数据库成功');\n\t\t\t\n\t\t\t// 先获取文档集合\n\t\t\tdb.collection('users', function (err, collection) {\n\t\t\t\t// 【增】\n\t\t\t\tcollection.insert({\n\t\t\t\t\tname: '小赖',\n\t\t\t\t\tpassword: 'pws123456',\n\t\t\t\t\temail: 'laixiaolai@foxmail.com',\n\t\t\t\t\tage: 18,\n\t\t\t\t\tsex: 'male'\n\t\t\t\t}, function (err, docs) {\n\t\t\t\t\t// docs 是成功插入后的文档集合\n\t\t\t\t\tconsole.log('\\n【增】插入数据成功，刚插入的数据是：\\n', docs);\n\t\t\t\t\t// 记得关闭数据库！\n\t\t\t\t\t// db.close();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【查】, {} 表示查询所有\n\t\t\t\tcollection.find({}).toArray(function (err, docs) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n【查】所有文档集合是：\\n', docs);\n\t\t\t\t});\n\t\t\t\t// 【查】，{name: '小赖'} 为限定条件\n\t\t\t\tcollection.find({name: '小赖'}).toArray(function (err, docs) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n【查】名字叫小赖的文档是：\\n', docs);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【改】\n\t\t\t\tvar xiaoqing = {\n\t\t\t\t\tname: '小清',\n\t\t\t\t\tpassword: 'newPws123456',\n\t\t\t\t\temail: 'abcd@laispace.com',\n\t\t\t\t\tage: 180,\n\t\t\t\t\tsex: 'male'\n\t\t\t\t};\n\t\t\t\t// 把名字为小赖的用户改为小清\n\t\t\t\tcollection.update({name: '小赖'}, xiaoqing, {upsert: true}, function (err, result) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n更新数据成功，刚更新的文档数是：\\n', result);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【删】\n\t\t\t\tcollection.remove({name: '小清'}, function (err, result) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n删除数据成功，刚删除的文档数是：\\n', result);\n\t\t\t\t\n\t\t\t\t\t// 记得最后一次操作要关闭数据库！！！\n\t\t\t\t\t// db.close();\n\t\t\t\t});\t\t\t\n\t\t\t});\n\t\t});\t\n\t\tDb.on('close', function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('关闭数据库成功');\n\t\t})\n\n\t在查询操作 collection.find(selector, [options]).toArray(callback) 中可以设置一些限定：\n\t\n\t\t// 查找全部，缺省参数{} 即 db.users.find({});\n\t\t$ db.users.find();\n\t\t// 指定范围查找\n\t\t$ db.users.find({\"name\": \"小清\", \"email\": \"abcd@laispace.com\"});\n\t\t// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n\t\t$ db.users.find({}, {\"name\": 1, \"email\": 1});\n\t\t// 查找全部，但不要返回指定的键，0表示false\n\t\t$ db.users.find({}, {\"password\": 0});\n\t\t// 大于小于\n\t\t$ db.users.find({\"age\": {\"$gte\": 18, \"$lte\": 30}}) // 大于等于18小于等于30岁\n\t\tdb.users.find({\"registered\": {\"$lt\": new Date(\"01/01/2014\")}}); // 在2014/01/01前注册\n\t\t// 不等于\n\t\t$ db.users.find({\"name\": {\"$ne\": \"小清\"}}); // 用户名不是『小清』\n\t\t// 包含于\n\t\tdb.users.find({\"name\": {\"$in\": [\"小清\", \"小赖\"]}}); // 用户名是『小清』或『小赖』\n\t\t// 不包含于\n\t\tdb.users.find({\"name\": {\"$nin\": [\"小清\", \"小赖\"]}}); // 用户名不是『小清』和『小赖』\n\t\t// 或\n\t\tdb.users.find({\"$or\": [{\"name\": \"小清\"}, {\"email\": \"laixiaolai@foxmail.com\"}]}); // 用户名是『小清』或 邮箱是 \"123@example.com\"\n\n\t也可在更新操作 collection.update(selector, document, [options], [callback]); 中可以设置一些限定：\n\t\n\t\t// 原子修改器\n\t\tdb.users.update({\"name\": \"小清\"}, {\n\t\t\t\"$inc\": {\n\t\t\t\"age\": 1 // 年龄加一\n\t\t\t}\n\t\t})\n\t\t\"$inc\" // 增加\n\t\t\"$set\" // 修改，无则创建\n\t\t\"$unset\" // 删除\n \n\t\t// 数组修改器\n\t\t// \"$push\" // 添加\n\t\t// \"$pop\": {key: 1} // 数组末删除一个元素\n\t\t// \"$pop\": {key: -1} // 数组头删除一个元素\n\t\t// \"$pull\": {\"foo\": \"bar\"} // 删除数组foo中的bar\n \n\t\t// 函数 update(query , obj , upsert , multi) 参数说明：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing);\n\t\t// 若指定第三个参数upsert为true,即：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing, true);\n\t\t// 则表示：\n\t\t// - 若找到匹配文档，正常更新；\n\t\t// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n\t\t// 若指定第四个参数multi为true, 即：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing, true, true);\n\t\t// 则表示：\n\t\t// 匹配到的所有文档都得到更新（为false则只匹配第一个）。\t\n\n## 使用 Mongoose类库\n\n使用mongoose可以让MongoDB在NodeJS中得到更好的支持。\n\n直接上实例吧：\n\t\n  \tvar mongoose =require('mongoose');\n  \t// 通过 Schema 来定义数据架构\n  \tvar Schema = mongoose.Schema;\n  \t// 连接数据库, 27017 是MongoDB的默认端口\n  \tmongoose.connect('mongodb://localhost:27017/testDbName', function (err) {\n  \t\tif (err) {\n  \t\t\tconsole.log('连接数据库失败');\n  \t\t\tthrow err;\n  \t\t}\n  \t\t// 定义数据架构\n  \t\tvar userSchema = new Schema({\n  \t\t\tname: String, // name 为字符串\n  \t\t\tage: Number   // age 为整数\n  \t\t});\n  \t\t\n  \t\tvar user1 = {name: '小赖', age: 18};\n  \t\tvar user2 = {name: '小清', age: 19};\n  \t\tvar user3 = {name: '大花', age: 20};\n  \t\tvar user4 = {name: '大黄', age: 21};\n  \t\tvar docs = [user1, user2, user3, user4];\n  \t\tvar Users = mongoose.model('users', userSchema);\n  \t\tUsers.create(docs, function (err, docs) {\n  \t\t\tif (err) {\n  \t\t\t\tconsole.log('保存数据失败');\n  \t\t\t\tthrow err;\n  \t\t\t}\n  \t\t\tUsers.find(function (err, docs) {\n  \t\t\t\tif (err) throw err;\n  \t\t\t\tconsole.log(docs);\n  \t\t\t\t// 断开数据库连接\n  \t\t\t\tmongoose.disconnect();\n  \t\t\t});\n  \t\t});\n  \t})\n\n### 参考资料：\n\n1. [MongoDB入门-CRUD简单操作](http://laispace.github.io/MongoDB%E5%85%A5%E9%97%A8-CRUD%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%20/)\n2. [the-little-mongodb-book-cn](https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md)","html":"<h2 id=\"mongodb\">MongoDB 支持的几钟数据类型</h2>\n\n<ul>\n<li><p>String</p>\n\n<pre><code>// 字符串\nvar mySite = 'laispace.com';            \n</code></pre></li>\n<li><p>Array</p>\n\n<pre><code>// 数组\nvar myFriends = ['小赖', '小清', '大花', '大黄'];\n</code></pre></li>\n<li><p>Boolean</p>\n\n<pre><code>// 布尔类型，true 或 false        \nvar IloveU = true;\n</code></pre></li>\n<li><p>Code</p>\n\n<pre><code>// 代码，可在数据库内运行\nvar myCode = new BSON.Code('function (name) {\n    return 'My name is ' + name;\n}');\n</code></pre></li>\n<li><p>Date</p>\n\n<pre><code>// 日期\nvar myDate = new Date();\n</code></pre></li>\n<li><p>Integer</p>\n\n<pre><code>// 整数\nvar myAge = 18; // 让我年轻一次嘛~\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<ul>\n<li><p>Long</p>\n\n<pre><code>// 长整数\nvar myMoney = new BSON.Long('999999999999999999999');\n</code></pre></li>\n<li><p>Hash</p>\n\n<pre><code>// 数据字典\nvar myInfo = {\n    name: '小赖',\n    age: '18,\n    sex: 'male'\n};\n</code></pre></li>\n<li><p>Null </p>\n\n<pre><code>// null 值\nvar myBadFriend = null;\n</code></pre></li>\n<li><p>ObjectId</p>\n\n<pre><code>// 索引ID，12字节，24位16进制串，用于唯一标识\nvar myId = new BSON.ObjectId()\n</code></pre></li>\n<li><p>DBRef</p>\n\n<pre><code>// 数据库引用\nvar bestFriendId = new BSON.DBRef('users', friendObjectId);\n</code></pre></li>\n</ul>\n\n<!-- more -->\n\n<h2 id=\"mongodb\">使用MongoDB</h2>\n\n<ul>\n<li><p>连接数据库</p>\n\n<pre><code>var mongodb = require('mongodb');\n</code></pre>\n\n<p>创建 Server对象 实例      </p>\n\n<pre><code>var server = new mongodb.server(host, port, [options]);\n</code></pre>\n\n<p>options 可选，默认参数为：</p>\n\n<pre><code>options = {\n    ssl: false, // 是否启用ssl安全协议\n    sslValidate: false, // 是否验证服务器提交的证书\n    sslCA: null, // 数组，一组供服务器验证的证书\n    sslCert: null, // 数组，一组服务器验证时使用的证书\n    sslKey: null, // Buffer 或 String, 一个供服务器验证时使用的私钥\n    sslPass: null, // Buffer 或 String, 一个供服务器验证时使用的证书密码\n    poolSize: 5, // 整数，连接池中最大连接数\n    socketOptions: null, // 对象，指定与服务器连接时端口设置的选项\n    // socketOptions: {\n    //  keepAlive: [Number], // 整数毫秒，指定客户端向服务器发送 keepAlive探测包的时间间隔\n    //  connectTimeMS: [Number], // 整数毫秒，指定客户端连接超时时间\n    //  socketTimeoutMS: [Number] // 整数毫秒，指定客户端端口超时时间\n    // }\n    logger: null, // 对象，用于记录日志\n    auto_reconnect: false, // 是否在客户端与服务器连接出错时自动重连\n    disableDriverBSONSizeCheck: false // 是否在 BSON对象过大时抛出错误\n}\n</code></pre>\n\n<p>创建 Db对象 实例</p>\n\n<p>创建了 server服务器对象后，使用它创建代表 MongoDB数据库的 Db对象：</p>\n\n<pre><code>var Db = new mongodb.Db(databaseName, server, [options]);\n</code></pre>\n\n<p>options 可选，默认参数为：</p>\n\n<pre><code>options = {\n    safe: false // 是否使用  getLastError命令 执行数据操作，该命令返回数据操作的执行结果\n    w: [Number lt -1], // 大于-1d的整数或字符串，用于设置 write concern机制，该值大于等于1或为字符串时，才承认数据被写入\n    wtimeout: [Number], // 整数毫秒，指定数据操作的超时时间\n    fsync: false, // 写入数据的方法返回前是否等待数据库内部的 fsync操作\n    journal: false, // 写入数据的方法返回前是否等待数据库内部的 journal操作 \n    native_parse: false, // 是否使用C++ BSON解析器\n    forceServerObjectId: false, 是否强制在服务器端而不是客户端创建 BSON对象ID\n    pkFactory: {}, // 用于重载数据库内部生成的对象ID主键的对象\n    serializeFunctions: false, // 是否序列化Javascript函数\n    raw: false, // 是否使用二进制BSON数据缓存区来执行数据操作\n    recordQueryStats: false, // 查询数据时是否在数据库内部执行查询统计\n    retryMiliSeconds: 5000, // 整数毫秒，指定连接数据库失败时建个多长时间重连数据库\n    numberOfRetries: 5, // 重连数据库的次数\n    logger: null, // 对象，用于记录日志\n    slaveOk: null, // 整数，查询时使用的SlaveOk值\n}\n</code></pre>\n\n<p>创建好 Db对象后，则开始打开数据库进行操作：</p>\n\n<pre><code>// 连接失败时 db 为 null\nDb.open(function (err, db) {\n    // db operations here.\n\n\n<pre><code>// 关闭数据库， forceClose 是否强制关闭，强制关闭后不可再用 open() 方法打开 \n// db.close([forceClose], function (err) {\n    if (err) throw err;\n    // operations after closing db.\n})      \n</code></pre>\n\n})              \n</code></pre>\n\n<p>实例：</p>\n\n<pre><code>var mongodb = require('mongodb');\nvar host = 'localhost';\nvar port = mongodb.Connection.DEFAULT_PORT || 1234;\n// 创建服务器实例\nvar server = new mongodb.Server(host, port, {auto_connect: true});\n// 创建数据库实例\nvar Db = new mongodb.Db('testDbName', server, {safe: true});\n// 打开数据库\nDb.open(function (err, db) {\n    if (err) throw err;\n    console.log('连接数据库成功');\n    // 记得操作完要关闭数据库\n    db.close(function (err) {\n        if (err) throw err;\n        // console.log('关闭数据库成功');\n    });\n});\n</code></pre></li>\n<li><p>增查改删操作</p>\n\n<p>先获取数据库对象的文档集合</p>\n\n<pre><code>// options 参数与上文的大致相同，增加\n// optiosn.strict, 默认为false，指定是否在访问的集合不存在时抛出错误\ndb.collection(collectionName, [options], function (err, collection) {\n    if (err) throw err;\n    console.log('获取到的文档集合是：\\n', collection);\n    // 在这里进行【增查改删】操作\n    // 增\n    collection.insert(docs, [options], [callback]);\n    // 查\n    collection.find(selector, [options]).toArray(callback);\n    // 改\n    collection.update(selector, document, [options], [callback]);\n    // 查并改\n    collection.findAndModify(selector, sort, document, [options], [callback]);\n    // 删\n    collection.remove([selector], [options], [callback]);\n    // 查并删\n    collection.findAndRemove(selector, sort, [options], [callback]);\n}); \n</code></pre>\n\n<p>collection.insert(docs, [options], [callback])中的options与上文的大致相同，增加：</p>\n\n<pre><code>options = { \n    continueOnError: false, // 若一个文档插入失败，是否继续插入剩余文档\n    checkKeys: true, // 插入数据时是否取消检查该数据文档的主键是否已存在的处理\n}   \n</code></pre>\n\n<p>collection.update(selector, document, [options], [callback]);中的options与上文的大致相同，增加：</p>\n\n<pre><code>options = { \n    upsert: false, // 是否在更新时执行upsert操作：数据不存在则创建\n    multi: false, // 是否更新所有符合查询条件的数据文档，默认为false即更新第一条\n}   \n</code></pre>\n\n<p>collection.remove([selector], [options], [callback]);中的options与上文的大致相同，增加：</p>\n\n<pre><code>options = { \n    single: false, // 是否只删除符合条件的第一条数据文档\n}                       \n</code></pre>\n\n<p>【增查改删】操作的实例：</p>\n\n<pre><code>var mongodb = require('mongodb');\nvar host = 'localhost';\nvar port = mongodb.Connection.DEFAULT_PORT || 1234;\nvar server = new mongodb.Server(host, port, {auto_connect: true});\nvar Db = new mongodb.Db('testDbName', server, {safe: true});\nDb.open(function (err, db) {\n    if (err) throw err;\n    console.log('连接数据库成功');\n\n\n<pre><code>// 先获取文档集合\ndb.collection('users', function (err, collection) {\n    // 【增】\n    collection.insert({\n        name: '小赖',\n        password: 'pws123456',\n        email: 'laixiaolai@foxmail.com',\n        age: 18,\n        sex: 'male'\n    }, function (err, docs) {\n        // docs 是成功插入后的文档集合\n        console.log('\\n【增】插入数据成功，刚插入的数据是：\\n', docs);\n        // 记得关闭数据库！\n        // db.close();\n    });\n\n\n    // 【查】, {} 表示查询所有\n    collection.find({}).toArray(function (err, docs) {\n        if (err) throw err;\n        console.log('\\n【查】所有文档集合是：\\n', docs);\n    });\n    // 【查】，{name: '小赖'} 为限定条件\n    collection.find({name: '小赖'}).toArray(function (err, docs) {\n        if (err) throw err;\n        console.log('\\n【查】名字叫小赖的文档是：\\n', docs);\n    });\n\n\n    // 【改】\n    var xiaoqing = {\n        name: '小清',\n        password: 'newPws123456',\n        email: 'abcd@laispace.com',\n        age: 180,\n        sex: 'male'\n    };\n    // 把名字为小赖的用户改为小清\n    collection.update({name: '小赖'}, xiaoqing, {upsert: true}, function (err, result) {\n        if (err) throw err;\n        console.log('\\n更新数据成功，刚更新的文档数是：\\n', result);\n    });\n\n\n    // 【删】\n    collection.remove({name: '小清'}, function (err, result) {\n        if (err) throw err;\n        console.log('\\n删除数据成功，刚删除的文档数是：\\n', result);\n\n\n        // 记得最后一次操作要关闭数据库！！！\n        // db.close();\n    });         \n});\n</code></pre>\n\n}); \nDb.on('close', function (err) {\n    if (err) throw err;\n    console.log('关闭数据库成功');\n})\n</code></pre>\n\n<p>在查询操作 collection.find(selector, [options]).toArray(callback) 中可以设置一些限定：</p>\n\n<pre><code>// 查找全部，缺省参数{} 即 db.users.find({});\n$ db.users.find();\n// 指定范围查找\n$ db.users.find({\"name\": \"小清\", \"email\": \"abcd@laispace.com\"});\n// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n$ db.users.find({}, {\"name\": 1, \"email\": 1});\n// 查找全部，但不要返回指定的键，0表示false\n$ db.users.find({}, {\"password\": 0});\n// 大于小于\n$ db.users.find({\"age\": {\"$gte\": 18, \"$lte\": 30}}) // 大于等于18小于等于30岁\ndb.users.find({\"registered\": {\"$lt\": new Date(\"01/01/2014\")}}); // 在2014/01/01前注册\n// 不等于\n$ db.users.find({\"name\": {\"$ne\": \"小清\"}}); // 用户名不是『小清』\n// 包含于\ndb.users.find({\"name\": {\"$in\": [\"小清\", \"小赖\"]}}); // 用户名是『小清』或『小赖』\n// 不包含于\ndb.users.find({\"name\": {\"$nin\": [\"小清\", \"小赖\"]}}); // 用户名不是『小清』和『小赖』\n// 或\ndb.users.find({\"$or\": [{\"name\": \"小清\"}, {\"email\": \"laixiaolai@foxmail.com\"}]}); // 用户名是『小清』或 邮箱是 \"123@example.com\"\n</code></pre>\n\n<p>也可在更新操作 collection.update(selector, document, [options], [callback]); 中可以设置一些限定：</p>\n\n<pre><code>// 原子修改器\ndb.users.update({\"name\": \"小清\"}, {\n    \"$inc\": {\n    \"age\": 1 // 年龄加一\n    }\n})\n\"$inc\" // 增加\n\"$set\" // 修改，无则创建\n\"$unset\" // 删除\n\n\n// 数组修改器\n// \"$push\" // 添加\n// \"$pop\": {key: 1} // 数组末删除一个元素\n// \"$pop\": {key: -1} // 数组头删除一个元素\n// \"$pull\": {\"foo\": \"bar\"} // 删除数组foo中的bar\n\n\n// 函数 update(query , obj , upsert , multi) 参数说明：\n$ db.users.update({\"name\": \"小清\"}, xiaoqing);\n// 若指定第三个参数upsert为true,即：\n$ db.users.update({\"name\": \"小清\"}, xiaoqing, true);\n// 则表示：\n// - 若找到匹配文档，正常更新；\n// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n// 若指定第四个参数multi为true, 即：\n$ db.users.update({\"name\": \"小清\"}, xiaoqing, true, true);\n// 则表示：\n// 匹配到的所有文档都得到更新（为false则只匹配第一个）。    \n</code></pre></li>\n</ul>\n\n<h2 id=\"mongoose\">使用 Mongoose类库</h2>\n\n<p>使用mongoose可以让MongoDB在NodeJS中得到更好的支持。</p>\n\n<p>直接上实例吧：</p>\n\n<pre><code>  var mongoose =require('mongoose');\n  // 通过 Schema 来定义数据架构\n  var Schema = mongoose.Schema;\n  // 连接数据库, 27017 是MongoDB的默认端口\n  mongoose.connect('mongodb://localhost:27017/testDbName', function (err) {\n      if (err) {\n          console.log('连接数据库失败');\n          throw err;\n      }\n      // 定义数据架构\n      var userSchema = new Schema({\n          name: String, // name 为字符串\n          age: Number   // age 为整数\n      });\n\n      var user1 = {name: '小赖', age: 18};\n      var user2 = {name: '小清', age: 19};\n      var user3 = {name: '大花', age: 20};\n      var user4 = {name: '大黄', age: 21};\n      var docs = [user1, user2, user3, user4];\n      var Users = mongoose.model('users', userSchema);\n      Users.create(docs, function (err, docs) {\n          if (err) {\n              console.log('保存数据失败');\n              throw err;\n          }\n          Users.find(function (err, docs) {\n              if (err) throw err;\n              console.log(docs);\n              // 断开数据库连接\n              mongoose.disconnect();\n          });\n      });\n  })\n</code></pre>\n\n<h3 id=\"\">参考资料：</h3>\n\n<ol>\n<li><a href=\"http://laispace.github.io/MongoDB%E5%85%A5%E9%97%A8-CRUD%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%20/\">MongoDB入门-CRUD简单操作</a>  </li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md\">the-little-mongodb-book-cn</a></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400094235000,"created_by":1,"updated_at":1400094235000,"updated_by":1,"published_at":1400094235000,"published_by":1},{"id":531,"uuid":"d62c5439-4909-4600-8a64-d7ef260e75d3","title":"Mongoose-学习笔记","slug":"mongoose","markdown":"\n\n定义模式 Schema -> 定义模型 model -> 定义实例 -> 增查删改这个实例\n\n在模式中可以直接定义一些方法，使得使用模型生成的实例都继承了这些方法，可直接调用。\n\t\n- 快速开始\n\n        var mongoose = require('mongoose');\n\n        // 【模式】\n        var UserSchema = mongoose.Schema({\n          name: String,\n          age: Number\n        })\n\n        // 【方法】在模式中添加一个方法，则生成的实例中将可以直接调用这个方法\n        UserSchema.methods.say = function () {\n          var name = this.name;\n          if (name) {\n            console.log('我的名字是：', name);\n          } else {\n            console.log('我还没有名字');\n          }\n        };\n\n        // 【模型】使用模式定义一个模型\n        var User = mongoose.model('User', UserSchema);\n\n        // 【实例】使用模型定义一个实例\n        var newUser = new User({\n          name: '小赖',\n          age: 18  // 我年年十八\n        })\n        // 【实例】使用模型定义一个实例\n        var r = parseInt(Math.random() * 10 + 20);\n        var newUserRandom = new User({\n          name: '用户'+r,\n          age: r  //\n        })\n        // 实例中调用模式中定义好的方法\n        newUser.say(); // => '我的名字是：小赖'\n        newUserRandom.say();\n\n        // 【增】将实例保存到数据库\n        newUser.save(function (err, newUser) {\n          if (err) throw err;\n          console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUser);\n        });\n        // 【增】将实例保存到数据库\n        newUserRandom.save(function (err, newUser) {\n          if (err) throw err;\n          console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUserRandom);\n        });\n\n        // 【查】查询所有文档\n        User.find(function (err, users) {\n          if (err) throw err;\n          console.log('【查】当前数据库的所有用户是：\\n', users);\n        });\n        // 【查】限定条件查询\n        User.find({age: 20}, function (err, users) {\n          if (err) throw err;\n          console.log('查询到年龄为20的用户有：\\n', users);\n        })\n\n        // 连接数据库\n        mongoose.connect('mongodb://localhost/test');\n\n        // 获取连接\n        var db = mongoose.connection;\n\n        // 连接错误\n        db.on('error', function (err) {\n          console.log('连接失败：', err);\n        });\n\n        // 连接成功\n        db.on('open', function () {\n          console.log('连接成功！');\n        })\n        \n<!-- more -->\t\n                \n- 定义模式 Schema\n\t\n\t\t// new Schema(properties, options);\n\noptions 中的key为autoIndex/capped/collection/id/_id/read/safe/shardKey/strict/toJSON/toObject/versionKey\n\n模式中的数据类型，可以为：String/Number/Date/Buffer/Boolean/Mixed/ObjectId/Array\n        \n        var mongoose = require('mongoose');\n        var Schema = mongoose.Schema;\n\t\t\n\t\t// 定义一篇博文的模式\n        var articleSchema = new Schema({\n          title:  String,\n          author: String,\n          content:\tString,\n          comments: [{ author: String, content: String, date: Date }],\n          date: { type: Date, default: Date.now },\n          meta: {\n            votes: Number,\n            favs:  Number\n          }\n        }); \n        \n        // 后期添加模式属性\n        articleSchema.add({visited: 'string'})\n        \n        // 在模式中添加静态方法-供模型调用\n        articlesSchema.statics.findByAuthor = function (name, callback) {\n        \tthis.find({author: name}, callback)\n        };\n        \n        // 在模式中添加实例方法-供实例调用\n        articleSchema.methods.getInfo = function () {\n        \tconsole.log('文章标题是：', this.title);\n        \tconsole.log('文章作者是：', this.author);\n        \t// ... \n        };\n        \n        // 在模式中添加虚拟化方法-供实例调用\n        // 相当于实例中会存在一个新的description属性: \n        articleSchema.virtual('description').get(function () {\n        \treturn '作者'+ this.author + '写了一篇名为『' + this.title + '』的文章';\n        })\n        \n        \n- 定义模型 model\n\n使用模式定义模型\n\t\n\t\tvar Article = mongoose.model('Article', articleSchema);\n\t\t\n\t\t// 调用静态方法\n\t\tArticle.findByAuthor('小赖', function (err, articles) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('找到所有作者为小赖的文章：', articles);\n\t\t})\n\t\t\n- 生成实例\n\n使用模型生成实例，实例中可调用模式中定义好的方法\n\n\t\tvar newArticle = new Article({\n\t\t\ttitle: 'hello Mongoose',\n\t\t\tauthor: '小赖',\n\t\t\t... \n\t\t})\t\n\t\t\n\t\t// 调用实例方法\n\t\tnewArticle.getInfo();\n\t\t\n\t\t// 调用虚拟化方法\n\t\tvar desc = newArticle.description;\n\t\tconsole.log(desc); // => '小赖写了一篇名为『hello Mongoose』的文章'\n\n- 增查删改数据操作\n\t\t\n\t\t// 【增】\n\t\tnewArticle.save(function (err, newArticle) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('保存数据成功, 成功保存的数据是：\\n', newArticle);\n\t\t})\n\t\t// 想当于：\n\t\t// var newArc = {\n\t\t// \t title: 'hello Mongoose',\n\t\t//\t author: '小赖',\n\t\t//\t ... \n\t\t//}\n\t\t//Article.create(newArc, function (err, newArc) {\n\t\t//\t if (err) throw err;\n\t\t//\t console.log('保存数据成功, 成功保存的数据是：\\n', newArc);\n\t\t//})\n\t\t\n\t\t// 【删】\n\t\tArticle.remove({author: '小赖'}, function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('删除数据成功');\n\t\t})\n\t\t\n\t\t// 【查】\n\t\tArticle.find({ahthor: '小赖'}, function (err, articles) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('小赖写的文章有：', articles);\n\t\t})\n\t\t// 更多查询方法，见 http://mongoosejs.com/docs/api.html#model_Model.find\n\t\t// Model.find(conditions, [fields], [options], [callback])\n\t\t// Model.findById(id, [fields], [options], [callback])\n\t\t// Model.findByIdAndRemove(id, [options], [callback])\n\t\t// Model.findByIdAndUpdate(id, [update], [options], [callback])\n\t\t// Model.findOne(conditions, [fields], [options], [callback])\n\t\t// Model.findOneAndRemove(conditions, [options], [callback])\n\t\t// Model.findOneAndUpdate([conditions], [update], [options], [callback])\n\t\t\n\n\n 注意：静态方法和实例方法都定义在模式上，但前者由模型调用，后者由实例调用。\t\t\n\t\n### 参考资料\n\n- [Mongoo manual](http://docs.mongodb.org/manual/)\n\n- [Mongoose guide](http://mongoosejs.com/docs/guide.html)\n\n- [Mongoose aip](http://mongoosejs.com/docs/api.html)\n\n \n       \n       \n","html":"<p>定义模式 Schema -> 定义模型 model -> 定义实例 -> 增查删改这个实例</p>\n\n<p>在模式中可以直接定义一些方法，使得使用模型生成的实例都继承了这些方法，可直接调用。</p>\n\n<ul>\n<li><p>快速开始</p>\n\n<pre><code>var mongoose = require('mongoose');\n\n\n// 【模式】\nvar UserSchema = mongoose.Schema({\n  name: String,\n  age: Number\n})\n\n\n// 【方法】在模式中添加一个方法，则生成的实例中将可以直接调用这个方法\nUserSchema.methods.say = function () {\n  var name = this.name;\n  if (name) {\n    console.log('我的名字是：', name);\n  } else {\n    console.log('我还没有名字');\n  }\n};\n\n\n// 【模型】使用模式定义一个模型\nvar User = mongoose.model('User', UserSchema);\n\n\n// 【实例】使用模型定义一个实例\nvar newUser = new User({\n  name: '小赖',\n  age: 18  // 我年年十八\n})\n// 【实例】使用模型定义一个实例\nvar r = parseInt(Math.random() * 10 + 20);\nvar newUserRandom = new User({\n  name: '用户'+r,\n  age: r  //\n})\n// 实例中调用模式中定义好的方法\nnewUser.say(); // =&gt; '我的名字是：小赖'\nnewUserRandom.say();\n\n\n// 【增】将实例保存到数据库\nnewUser.save(function (err, newUser) {\n  if (err) throw err;\n  console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUser);\n});\n// 【增】将实例保存到数据库\nnewUserRandom.save(function (err, newUser) {\n  if (err) throw err;\n  console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUserRandom);\n});\n\n\n// 【查】查询所有文档\nUser.find(function (err, users) {\n  if (err) throw err;\n  console.log('【查】当前数据库的所有用户是：\\n', users);\n});\n// 【查】限定条件查询\nUser.find({age: 20}, function (err, users) {\n  if (err) throw err;\n  console.log('查询到年龄为20的用户有：\\n', users);\n})\n\n\n// 连接数据库\nmongoose.connect('mongodb://localhost/test');\n\n\n// 获取连接\nvar db = mongoose.connection;\n\n\n// 连接错误\ndb.on('error', function (err) {\n  console.log('连接失败：', err);\n});\n\n\n// 连接成功\ndb.on('open', function () {\n  console.log('连接成功！');\n})\n</code></pre></li>\n</ul>\n\n<!-- more -->    \n\n<ul>\n<li><p>定义模式 Schema</p>\n\n<pre><code>// new Schema(properties, options);\n</code></pre></li>\n</ul>\n\n<p>options 中的key为autoIndex/capped/collection/id/_id/read/safe/shardKey/strict/toJSON/toObject/versionKey</p>\n\n<p>模式中的数据类型，可以为：String/Number/Date/Buffer/Boolean/Mixed/ObjectId/Array</p>\n\n<pre><code>    var mongoose = require('mongoose');\n    var Schema = mongoose.Schema;\n\n    // 定义一篇博文的模式\n    var articleSchema = new Schema({\n      title:  String,\n      author: String,\n      content:    String,\n      comments: [{ author: String, content: String, date: Date }],\n      date: { type: Date, default: Date.now },\n      meta: {\n        votes: Number,\n        favs:  Number\n      }\n    }); \n\n    // 后期添加模式属性\n    articleSchema.add({visited: 'string'})\n\n    // 在模式中添加静态方法-供模型调用\n    articlesSchema.statics.findByAuthor = function (name, callback) {\n        this.find({author: name}, callback)\n    };\n\n    // 在模式中添加实例方法-供实例调用\n    articleSchema.methods.getInfo = function () {\n        console.log('文章标题是：', this.title);\n        console.log('文章作者是：', this.author);\n        // ... \n    };\n\n    // 在模式中添加虚拟化方法-供实例调用\n    // 相当于实例中会存在一个新的description属性: \n    articleSchema.virtual('description').get(function () {\n        return '作者'+ this.author + '写了一篇名为『' + this.title + '』的文章';\n    })\n</code></pre>\n\n<ul>\n<li>定义模型 model</li>\n</ul>\n\n<p>使用模式定义模型</p>\n\n<pre><code>    var Article = mongoose.model('Article', articleSchema);\n\n    // 调用静态方法\n    Article.findByAuthor('小赖', function (err, articles) {\n        if (err) throw err;\n        console.log('找到所有作者为小赖的文章：', articles);\n    })\n</code></pre>\n\n<ul>\n<li>生成实例</li>\n</ul>\n\n<p>使用模型生成实例，实例中可调用模式中定义好的方法</p>\n\n<pre><code>    var newArticle = new Article({\n        title: 'hello Mongoose',\n        author: '小赖',\n        ... \n    })  \n\n    // 调用实例方法\n    newArticle.getInfo();\n\n    // 调用虚拟化方法\n    var desc = newArticle.description;\n    console.log(desc); // =&gt; '小赖写了一篇名为『hello Mongoose』的文章'\n</code></pre>\n\n<ul>\n<li><p>增查删改数据操作</p>\n\n<pre><code>// 【增】\nnewArticle.save(function (err, newArticle) {\n    if (err) throw err;\n    console.log('保存数据成功, 成功保存的数据是：\\n', newArticle);\n})\n// 想当于：\n// var newArc = {\n//   title: 'hello Mongoose',\n//   author: '小赖',\n//   ... \n//}\n//Article.create(newArc, function (err, newArc) {\n//   if (err) throw err;\n//   console.log('保存数据成功, 成功保存的数据是：\\n', newArc);\n//})\n\n\n// 【删】\nArticle.remove({author: '小赖'}, function (err) {\n    if (err) throw err;\n    console.log('删除数据成功');\n})\n\n\n// 【查】\nArticle.find({ahthor: '小赖'}, function (err, articles) {\n    if (err) throw err;\n    console.log('小赖写的文章有：', articles);\n})\n// 更多查询方法，见 http://mongoosejs.com/docs/api.html#model_Model.find\n// Model.find(conditions, [fields], [options], [callback])\n// Model.findById(id, [fields], [options], [callback])\n// Model.findByIdAndRemove(id, [options], [callback])\n// Model.findByIdAndUpdate(id, [update], [options], [callback])\n// Model.findOne(conditions, [fields], [options], [callback])\n// Model.findOneAndRemove(conditions, [options], [callback])\n// Model.findOneAndUpdate([conditions], [update], [options], [callback])\n</code></pre>\n\n<p>注意：静态方法和实例方法都定义在模式上，但前者由模型调用，后者由实例调用。        </p></li>\n</ul>\n\n<h3 id=\"\">参考资料</h3>\n\n<ul>\n<li><p><a href=\"http://docs.mongodb.org/manual/\">Mongoo manual</a></p></li>\n<li><p><a href=\"http://mongoosejs.com/docs/guide.html\">Mongoose guide</a></p></li>\n<li><p><a href=\"http://mongoosejs.com/docs/api.html\">Mongoose aip</a></p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400696573000,"created_by":1,"updated_at":1400696573000,"updated_by":1,"published_at":1400696573000,"published_by":1},{"id":532,"uuid":"33024e98-e61e-43f5-adf1-3de6b1ade476","title":"NODEJS-Buffer对象","slug":"node-buffer","markdown":"\n \n\n- 构造一个指定大小的 buffer\n\n\t\tvar newBuffer = new Buffer(1024);\n\t\t// var len = newBuffer.length;\n- 用指定值初始化 buffer 的内容\n\n\t\t// 填充第10字节开始的内容为 1 \n\t\tnewBuffer.fill(1, 10);\n\t\t// 填充第10~20字节的内容为 2 \n\t\tnewBuffer.fill(2, 10, 20);\n\t\t\n- 用数组初始化 buffer 的内容\n\t\t\n\t\t// 用数组 [0, 1, 2] 初始化\n\t\tvar newBuffer = newBuffer([0, 1, 2]) \n\t\t\n- 用字符串初始化 buffer 的内容\n\n\t\t// 用字符串 'xiaolai' 初始化\n\t\tvar newBuffer = new Buffer('xiaolai');\n\t\t// 指定编码, 默认为 utf8，可选 ascii/utf8/utf16le/ucs2/base64/hex 等编码格式\n\t\t// var newBuffer = new Buffer('xiaolai', 'utf8');\n\n<!--more-->\n\t\t\n- 取出 buffer 中的字节\t\t\n\t\t\n\t\t// 取出第2~4个字节\n\t\tvar buff = newBuffer.slice(2, 4);\t\n\n- 将 buffer 转化为字符串\n\n\t\t// Buffer.toString([encoding], [start], [end])\n\t\t// 默认以uft-8 编码，将 buffer 转化为字符串\n\t\tvar str = newbuffer.toString();\n\t\t// 以uft-8 编码，将第4~10字节转化为字符串\n\t\tvar str = newbuffer.toString('utf8', 4, 10);\n\t\n- 将字符串写入已有的 buffer 中\n\n\t\t// Buffer.write(string, [offset], [length], [encoding]);\n\t\t// 在 newBuffer 的第3个字节后插入长度为3的字符串 \"赖\"\n\t\tnewBuffer.write('赖', 3, 3)\t\n\t\t\n- 使用 string_decoder 模块解决中文被截断乱码的问题\n\n\t使用场景：在 utf-8 编码中，『赖小赖』这三个字占用9个字节，如果将这九个字节分为两个buffer，一个5字节另一个4字节，分别打印时就会乱码了（因为一个汉子占用3字节）. 在遇上长字符串时虽然可以将多个这样的buffer使用concact()方法合并后再调用toString()方法输出，但性能不好。\n\n\t\t// 使用 string_decoder 模块解决这个问题\n\t\tvar StringDecoder = require('string_decoder').StringDecoder;\n\t\tvar decoder = new StringDecoder();\n\t\t// 分别解码\n\t\tdecoder.write(str1); // '赖'\n\t\tdecoder.write(str2); // '小赖'\n\t\t\n- 使用 JSON.stringify() 将 buffer 转换为字符串\n\n\t\tvar newBuffer = new Buffer('我叫赖小赖');\n\t\tvar json = JSON.stringify(newBuffer);\n\t\t//使用 JSON.parse() 将转化后的字符串转化为数组\n\t\tvar arr = JSON.parse(json);\n\t\t\n- 复制 buffer 到另一个 buffer\n\n\t\t// Buffer.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])\n\t\tvar oldBuffer = new Buffer('我叫赖小赖');\n\t\tvar newBuffer = new Buffer(1024);\n\t\t// 将 oldBuffer 复制到 newBuffer;\n\t\toldBuffer.copy(newBuffer);\t\n\n- Buffer.isBuffer(object) 判断是否为 Buffer对象\t\t\t\n\n\t\tvar isObjBuffer = Buffer.isBuffer(obj);\n\t\t\n- Buffer.byteLength(string, [encoding]) 计算字符串的字节数\n\n\t\tvar str = '赖小赖';\n\t\tvar byteLen = Buffer.byteLength(str);\t\n\n- Buffer.concat(BufferList, [totalLength]) 将多个 Buffer 合并为一个\n\n\t\tvar str1 = new Buffer('我');\t\n\t\tvar str2 = new Buffer('叫');\t\n\t\tvar str3 = new Buffer('小');\t\n\t\tvar str4 = new Buffer('赖');\n\t\tvar str5 = Buffer.concat([str1, str2, str3, str4]); \n\t\tconsole.log(str5.toString()); // \"我叫小赖\"\t\n\t\n\n\t\n\t\t\t\n\t\n\n\n\t\t\t\n\t","html":"<ul>\n<li><p>构造一个指定大小的 buffer</p>\n\n<pre><code>var newBuffer = new Buffer(1024);\n// var len = newBuffer.length;\n</code></pre></li>\n<li><p>用指定值初始化 buffer 的内容</p>\n\n<pre><code>// 填充第10字节开始的内容为 1 \nnewBuffer.fill(1, 10);\n// 填充第10~20字节的内容为 2 \nnewBuffer.fill(2, 10, 20);\n</code></pre></li>\n<li><p>用数组初始化 buffer 的内容</p>\n\n<pre><code>// 用数组 [0, 1, 2] 初始化\nvar newBuffer = newBuffer([0, 1, 2]) \n</code></pre></li>\n<li><p>用字符串初始化 buffer 的内容</p>\n\n<pre><code>// 用字符串 'xiaolai' 初始化\nvar newBuffer = new Buffer('xiaolai');\n// 指定编码, 默认为 utf8，可选 ascii/utf8/utf16le/ucs2/base64/hex 等编码格式\n// var newBuffer = new Buffer('xiaolai', 'utf8');\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<ul>\n<li><p>取出 buffer 中的字节        </p>\n\n<pre><code>// 取出第2~4个字节\nvar buff = newBuffer.slice(2, 4);   \n</code></pre></li>\n<li><p>将 buffer 转化为字符串</p>\n\n<pre><code>// Buffer.toString([encoding], [start], [end])\n// 默认以uft-8 编码，将 buffer 转化为字符串\nvar str = newbuffer.toString();\n// 以uft-8 编码，将第4~10字节转化为字符串\nvar str = newbuffer.toString('utf8', 4, 10);\n</code></pre></li>\n<li><p>将字符串写入已有的 buffer 中</p>\n\n<pre><code>// Buffer.write(string, [offset], [length], [encoding]);\n// 在 newBuffer 的第3个字节后插入长度为3的字符串 \"赖\"\nnewBuffer.write('赖', 3, 3)  \n</code></pre></li>\n<li><p>使用 string_decoder 模块解决中文被截断乱码的问题</p>\n\n<p>使用场景：在 utf-8 编码中，『赖小赖』这三个字占用9个字节，如果将这九个字节分为两个buffer，一个5字节另一个4字节，分别打印时就会乱码了（因为一个汉子占用3字节）. 在遇上长字符串时虽然可以将多个这样的buffer使用concact()方法合并后再调用toString()方法输出，但性能不好。</p>\n\n<pre><code>// 使用 string_decoder 模块解决这个问题\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar decoder = new StringDecoder();\n// 分别解码\ndecoder.write(str1); // '赖'\ndecoder.write(str2); // '小赖'\n</code></pre></li>\n<li><p>使用 JSON.stringify() 将 buffer 转换为字符串</p>\n\n<pre><code>var newBuffer = new Buffer('我叫赖小赖');\nvar json = JSON.stringify(newBuffer);\n//使用 JSON.parse() 将转化后的字符串转化为数组\nvar arr = JSON.parse(json);\n</code></pre></li>\n<li><p>复制 buffer 到另一个 buffer</p>\n\n<pre><code>// Buffer.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])\nvar oldBuffer = new Buffer('我叫赖小赖');\nvar newBuffer = new Buffer(1024);\n// 将 oldBuffer 复制到 newBuffer;\noldBuffer.copy(newBuffer);  \n</code></pre></li>\n<li><p>Buffer.isBuffer(object) 判断是否为 Buffer对象            </p>\n\n<pre><code>var isObjBuffer = Buffer.isBuffer(obj);\n</code></pre></li>\n<li><p>Buffer.byteLength(string, [encoding]) 计算字符串的字节数</p>\n\n<pre><code>var str = '赖小赖';\nvar byteLen = Buffer.byteLength(str);   \n</code></pre></li>\n<li><p>Buffer.concat(BufferList, [totalLength]) 将多个 Buffer 合并为一个</p>\n\n<pre><code>var str1 = new Buffer('我'); \nvar str2 = new Buffer('叫'); \nvar str3 = new Buffer('小'); \nvar str4 = new Buffer('赖');\nvar str5 = Buffer.concat([str1, str2, str3, str4]); \nconsole.log(str5.toString()); // \"我叫小赖\" \n</code></pre></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399670382000,"created_by":1,"updated_at":1399670382000,"updated_by":1,"published_at":1399670382000,"published_by":1},{"id":533,"uuid":"ed953601-4a54-4637-ad86-d971c116ab21","title":"NODEJS-fs模块操作文件系统","slug":"node-fs","markdown":"\n  \n## 使用 fs模块 对文件/目录进行操作\n\n- 读取文件内容\n\t\t\n\t\t// fs.readFile(filename, [options], callback) \n\t\t// options 中的 flag 默认为 r，表示读取文件\n\t\tfs.readFile('test.txt', function (err, data) {\n\t\t\tif(err) throw err;\n\t\t\tconsole.log('文件内容是：', data);\n\t\t})\n\t\t\n\t\t\n\t\t// fs.readFileSync(filename, [options]) \n\t\t// 同步方式读取\n\t\ttry {\n\t\t\tvar data = fs.readFileSync('test.txt');\n\t\t\tconsole.log('文件内容是：', data);\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\n<!--more-->\n\t\n\toptions 中的 flag 取值：r/r+/rs/w/wx/w+/wx+/a/ax/a+/ax+\n\n\toptions 中的 encoding 取值：utf8/ascii/base64\n\t\n- 写入文件内容\n\n\t\t// fs.writeFile(filename, data, [options], callback)\n\t\t// options 中的 flag 默认为 w，表示写入文件，mode 默认为 0666（可读写的读写权限）\n\t\tfs.writeFile('test.txt', '我是被写入的内容', function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('成功写入.')\n\t\t})\t\t\n\t\t\n\t\t// 同步方式写入\n\t\tfs.writeFile(filename, data, [options])\n\t\t\n\t\t// 将 data 添加到文件底部, flag 默认为 a\n\t\tfs.appendFile(filename, data, [options], callback)\n\t\t// 同步方式添加\n\t\tfs.appendFileSync(filename, data, [options])\n\t\n\toptions 中的 flag 和 encoding 与上同。\n\t\n\toptions 中的 mode 为表示读写权限的数字，默认为 0666 可读写\n\t\n\t写入的 data 可以是一个 Buffer\t\n\t\n- 在指定位置读写文件\n\n\t\tfs.open(filename, flags, [mode], function (err, fd){\n\t\t\t// 读\n\t\t\tfs.read(fd, buffer, offset, length, position, function(err, bytesRead, buffer){})\n\t\t\t// 写\n\t\t\tfs.write(fd, buffer, offset, length, position, function(err, written, buffer){})\n\t\t\t// 关闭\n\t\t\tfs.close(fd)\n\t\t})\n\t\t\n\n- 创建目录\n\n\t\t// fs.mkdir(path, [mode], callback)\n\t\t// mode 默认为 0777，表示可读可写\n\t\tfs.mkdir('./testDir', function (err) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('目录创建成功')\n\t\t})\t\n- 读取目录\n\n\t\tfs.readdir('./testDir', function (err, files) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('读取目录失败')\n\t\t\t}\n\t\t\tconsole.log(files);\n\t\t})\t\n\t\t\n- 查看文件/目录信息\n\n\t\t// fs.fstat('testDir', function (err, stats) {\n\t\tfs.stat('testFile.txt', function (err, stats) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('读取文件信息失败')\n\t\t\t}\t\t\t\n\t\t\t// stats 是一个 Fs.Stats 对象\n\t\t\tconsole.log(stats);\n\t\t\t\n\t\t\tconsole.log('是否为文件：', stats.isFile);\n\t\t\tconsole.log('是否为目录：', stats.isDictionary);\n\t\t\tconsole.log('读写权限是：', stats.mode);\n\t\t\tconsole.log('文件大小是：', stats.size);\n\t\t\tconsole.log('访问时间是：', stats.atime);\n\t\t\tconsole.log('修改时间是：', stats.mtime);\n\t\t\tconsole.log('创建时间是：', stats.ctime);\n\t\t})\t\n\n- 检查文件/目录是否存在\n\n\t\tfs.exists('./testFile.txt', function (exists) {\n\t\t\tconsole.log('testFile.txt是否存在：', exists);\n\t\t})\t\n\n- 获取文件的绝对路径\n\n\t\tfs.realpath('./testFile.txt', function (err, resolvedPath) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('文件的绝对路径是：', resolvedPath);\n\t\t})\n\t\t\n- 修改文件时间\n\n\t\t// fs.utimes(path, atime, mtime, callback)\n\t\tfs.utimes('./testFile.txt', new Date(), new Date(), function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('修改失败')\n\t\t\t}\n\t\t\tconsole.log('修改成功');\n\t\t})\t\n\t\n- 修改文件/目录的读取权限\n\n\t\t// fs.chmod(path, mode, callback)\n\t\t// 0600 表示所有者可读写，其他人不可\n\t\tfs.chmod('./testFile.txt', 0600, function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('修改失败');\n\t\t\t}\n\t\t\tconsole.log('修改成功');\n\t\t})\n\t\n- 移动/重命名文件\n\n\t\t// fs.rename(oldPath, newPath, callback);\t\t// oldPath 与 newPath 所在目录相同但文件名不同时，重命名\n\t\t// oldPath 与 newPath 所在目录不相同时，移动；若文件名不同，则移动后重命名\n\t\tfs.rename('./testFile.txt', './test/testNewFile.txt', function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('文件移动失败');\t\t\n\t\t\t}\n\t\t\tconsole.log('文件移动成功');\n\t\t})\n\t\t\n- 创建和删除硬连接\n\n\t新创建的硬连接与旧的硬连接会指向相同文件\n\t\n\t删除的硬连接若是最后一个，则删除这个文件\n\t\n\t\t// 创建\n\t\t// fs.link(srcPath, dstPath, callback);\n\t\tfs.line('./testFile.txt', './test/testNewFile.txt', function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('创建硬连接失败');\n\t\t\t}\n\t\t\tconsole.log('创建硬连接成功');\n\t\t})\t\n\t\t// 删除\n\t\tfs.unlink(path, callback);\n\n- 截断文件\n\n\t清除文件内容，后修改文件尺寸的操作\n\t\n\t\tfs.truncate(filename, len, callback)\n\t\t\n- 删除空目录\n\n\t\tfs.rmdir(path, callback);\n\t\t\n- 监视文件/目录\n\n\t\t// fs.watchFile(filename, [options], listener)\n\t\t// options 中的 interval 指多久检查一次，这里设定了 1小时\n\t\tfs.watchFile('./testFile.txt', {interval: 60*60*1000}, function (curr, prev) {\n\t\t\tif (Date.parse(prev.ctime) == 0) {\n\t\t\t\tconsole.log('文件被创建');\n\t\t\t} else if (Date.parse(curr.ctime) == 0) {\n\t\t\t\tconsole.log('文件被删除');\n\t\t\t} else if (Date.parse(prev.mtime) != Date.parse(curr.mtime)\n\t\t\t\tconsole.log('文件被修改');\n\t\t\t})\n\t\t})\t\t\t\n\t\t// 取消监视, 不指定listener则清空所有监视\n\t\tfs.unwatchFile(filename, [listener])\n\n- 使用 ReadStream对象 读取文件\n\n\t\t// 创建\n\t\t// fs.createReadStream(path, [options])\n\t\t// options 可填的key有：flags/encoding/autoClose/start/end\n\t\tvar file = fs.createReadStream('./testFile.txt');\n\t\tvar body = '';\n\t\t// 监听\n\t\tfile.on('open', function (fd) {\n\t\t\tconsole.log('文件被打开，开始读取...');\n\t\t});\n\t\tfile.on('data', function (data) {\n\t\t\tconsole.log('正在读取数据...');\n\t\t\tbody += data;\n\t\t});\n\t\tfile.on('end', function(){\n\t\t\tconsole.log('文件被读取完毕：');\n\t\t\tconsole.log(body);\n\t\t});\n\t\tfile.on('close', function () {\n\t\t\tconsole.log('文件已关闭');\n\t\t})\n\t\tfile.on('error', function (err) {\n\t\t\tconsole.log('文件读取出错');\n\t\t})\n\t\t\n\t\t// 手动出发暂停/恢复读取文件\n\t\t// file.pause();\n\t\t// file.resume();\n\n- 使用 WriteStream对象 写入文件\n\n\t\t// 创建\n\t\t// var writable = fs.createWriteStream(path, [options])\n\t\t// options 可填的key有：flags/encoding/start\n\t\t\n\t\t// writable.write(chunk, [encoding], [callback])\t\t// chunk 可为 Buffer/string\n\t\t\n\t\t// writable.end([chunk], [encoding], [callback])\n\t\t// 调用end方法结束写入\n\t\t\n\t\t// 将 file1.txt 的内容写入 file2.txt\n\t\tvar file1 = fs.createReadStream('./file1.txt');\n\t\tvar file2 = fs.creatWriteStream('./file2.txt');\n\t\tfile1.on('data', function (data) {\n\t\t\tfile2.write(data);\n\t\t});\n\t\tfile1.on('end', function () {\n\t\t\tfile2.end(function() {\n\t\t\t\tconsole.log('文件写入完成');\n\t\t\t\tconsole.log('共写入的 %d 字节数据', file2.bytesWritten);\n\t\t\t});\n\t\t});\t\t\n\t\n\t\n\t\t// 使用 pipe方法 写入数据\n\t\t// readStream.pipe(destination, [options])\n\t\tvar file1 = fs.createReadStream('./file1.txt');\n\t\tvar file2 = fs.createWriteStream('./file2.txt');\n\t\t// options 中的 end 设置为 false 表示不会自动关闭文件\n\t\tfile1.pipe(file2, {end: false});\n\t\t// 手动关闭\n\t\tfile1.on('end', function () {\n\t\t\t// 这样可以继续写入数据再关闭\n\t\t\tfile2.end('我是被继续写入的数据');\n\t\t});\n\t\t\n\t\t// 取消写入\n\t\t// readStream.unpipe([destination])\n\t\t\n\n## 使用 path模块 对路径进行操作\t\n\n\t\t// 将非标准路径转化为标准路径\n\t\tvar unStdPath = './..//testFile.txt';\n\t\tvar stdPath = path.normalize(unStdPath);\n\t\t\n\t\t// 将多个字符串拼接\n\t\tvar newPath = path.join(__dirname, 'aaa', 'bbb', 'ccc');\n\t\t\n\t\t// 解析出绝对路径\n\t\tpath.resolve(path1, [path2])\t\n\t\t\n\t\t// 找出两个路径间的关系\n\t\tpath.relative(from, to)\n\t\t\n\t\t// 获取某路径中的目录名\n\t\tpath.dirname(path1)\n\t\t\n\t\t// 获取某路径中的文件名，去除 ext后缀\t\t\n\t\tpath.basename(path1, [ext])\n\t\t\n\t\t// 获取某路径中的拓展名\n\t\tpath.extname(path1)\n\t\n\n\t\t\t\n\t\n\t\t\n\t\t\n\t\n\n\t\t\t\t\n\t\t\n\t\t\t\n\t\n\t\t\n","html":"<h2 id=\"fs\">使用 fs模块 对文件/目录进行操作</h2>\n\n<ul>\n<li><p>读取文件内容</p>\n\n<pre><code>// fs.readFile(filename, [options], callback) \n// options 中的 flag 默认为 r，表示读取文件\nfs.readFile('test.txt', function (err, data) {\n    if(err) throw err;\n    console.log('文件内容是：', data);\n})\n\n\n// fs.readFileSync(filename, [options]) \n// 同步方式读取\ntry {\n    var data = fs.readFileSync('test.txt');\n    console.log('文件内容是：', data);\n} catch (err) {\n    throw err;\n}\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<pre><code>options 中的 flag 取值：r/r+/rs/w/wx/w+/wx+/a/ax/a+/ax+\n\noptions 中的 encoding 取值：utf8/ascii/base64\n</code></pre>\n\n<ul>\n<li><p>写入文件内容</p>\n\n<pre><code>// fs.writeFile(filename, data, [options], callback)\n// options 中的 flag 默认为 w，表示写入文件，mode 默认为 0666（可读写的读写权限）\nfs.writeFile('test.txt', '我是被写入的内容', function (err) {\n    if (err) throw err;\n    console.log('成功写入.')\n})      \n\n\n// 同步方式写入\nfs.writeFile(filename, data, [options])\n\n\n// 将 data 添加到文件底部, flag 默认为 a\nfs.appendFile(filename, data, [options], callback)\n// 同步方式添加\nfs.appendFileSync(filename, data, [options])\n</code></pre>\n\n<p>options 中的 flag 和 encoding 与上同。</p>\n\n<p>options 中的 mode 为表示读写权限的数字，默认为 0666 可读写</p>\n\n<p>写入的 data 可以是一个 Buffer   </p></li>\n<li><p>在指定位置读写文件</p>\n\n<pre><code>fs.open(filename, flags, [mode], function (err, fd){\n    // 读\n    fs.read(fd, buffer, offset, length, position, function(err, bytesRead, buffer){})\n    // 写\n    fs.write(fd, buffer, offset, length, position, function(err, written, buffer){})\n    // 关闭\n    fs.close(fd)\n})\n</code></pre></li>\n<li><p>创建目录</p>\n\n<pre><code>// fs.mkdir(path, [mode], callback)\n// mode 默认为 0777，表示可读可写\nfs.mkdir('./testDir', function (err) {\n    if (err) {\n        throw err;\n    }\n    console.log('目录创建成功')\n})  \n</code></pre></li>\n<li><p>读取目录</p>\n\n<pre><code>fs.readdir('./testDir', function (err, files) {\n    if (err) {\n        console.log('读取目录失败')\n    }\n    console.log(files);\n})  \n</code></pre></li>\n<li><p>查看文件/目录信息</p>\n\n<pre><code>// fs.fstat('testDir', function (err, stats) {\nfs.stat('testFile.txt', function (err, stats) {\n    if (err) {\n        console.log('读取文件信息失败')\n    }           \n    // stats 是一个 Fs.Stats 对象\n    console.log(stats);\n\n\n<pre><code>console.log('是否为文件：', stats.isFile);\nconsole.log('是否为目录：', stats.isDictionary);\nconsole.log('读写权限是：', stats.mode);\nconsole.log('文件大小是：', stats.size);\nconsole.log('访问时间是：', stats.atime);\nconsole.log('修改时间是：', stats.mtime);\nconsole.log('创建时间是：', stats.ctime);\n</code></pre>\n\n})  \n</code></pre></li>\n<li><p>检查文件/目录是否存在</p>\n\n<pre><code>fs.exists('./testFile.txt', function (exists) {\n    console.log('testFile.txt是否存在：', exists);\n})  \n</code></pre></li>\n<li><p>获取文件的绝对路径</p>\n\n<pre><code>fs.realpath('./testFile.txt', function (err, resolvedPath) {\n    if (err) {\n        throw err;\n    }\n    console.log('文件的绝对路径是：', resolvedPath);\n})\n</code></pre></li>\n<li><p>修改文件时间</p>\n\n<pre><code>// fs.utimes(path, atime, mtime, callback)\nfs.utimes('./testFile.txt', new Date(), new Date(), function (err) {\n    if (err) {\n        console.log('修改失败')\n    }\n    console.log('修改成功');\n})  \n</code></pre></li>\n<li><p>修改文件/目录的读取权限</p>\n\n<pre><code>// fs.chmod(path, mode, callback)\n// 0600 表示所有者可读写，其他人不可\nfs.chmod('./testFile.txt', 0600, function (err) {\n    if (err) {\n        console.log('修改失败');\n    }\n    console.log('修改成功');\n})\n</code></pre></li>\n<li><p>移动/重命名文件</p>\n\n<pre><code>// fs.rename(oldPath, newPath, callback);       // oldPath 与 newPath 所在目录相同但文件名不同时，重命名\n// oldPath 与 newPath 所在目录不相同时，移动；若文件名不同，则移动后重命名\nfs.rename('./testFile.txt', './test/testNewFile.txt', function (err) {\n    if (err) {\n        console.log('文件移动失败');      \n    }\n    console.log('文件移动成功');\n})\n</code></pre></li>\n<li><p>创建和删除硬连接</p>\n\n<p>新创建的硬连接与旧的硬连接会指向相同文件</p>\n\n<p>删除的硬连接若是最后一个，则删除这个文件</p>\n\n<pre><code>// 创建\n// fs.link(srcPath, dstPath, callback);\nfs.line('./testFile.txt', './test/testNewFile.txt', function (err) {\n    if (err) {\n        console.log('创建硬连接失败');\n    }\n    console.log('创建硬连接成功');\n})  \n// 删除\nfs.unlink(path, callback);\n</code></pre></li>\n<li><p>截断文件</p>\n\n<p>清除文件内容，后修改文件尺寸的操作</p>\n\n<pre><code>fs.truncate(filename, len, callback)\n</code></pre></li>\n<li><p>删除空目录</p>\n\n<pre><code>fs.rmdir(path, callback);\n</code></pre></li>\n<li><p>监视文件/目录</p>\n\n<pre><code>// fs.watchFile(filename, [options], listener)\n// options 中的 interval 指多久检查一次，这里设定了 1小时\nfs.watchFile('./testFile.txt', {interval: 60*60*1000}, function (curr, prev) {\n    if (Date.parse(prev.ctime) == 0) {\n        console.log('文件被创建');\n    } else if (Date.parse(curr.ctime) == 0) {\n        console.log('文件被删除');\n    } else if (Date.parse(prev.mtime) != Date.parse(curr.mtime)\n        console.log('文件被修改');\n    })\n})          \n// 取消监视, 不指定listener则清空所有监视\nfs.unwatchFile(filename, [listener])\n</code></pre></li>\n<li><p>使用 ReadStream对象 读取文件</p>\n\n<pre><code>// 创建\n// fs.createReadStream(path, [options])\n// options 可填的key有：flags/encoding/autoClose/start/end\nvar file = fs.createReadStream('./testFile.txt');\nvar body = '';\n// 监听\nfile.on('open', function (fd) {\n    console.log('文件被打开，开始读取...');\n});\nfile.on('data', function (data) {\n    console.log('正在读取数据...');\n    body += data;\n});\nfile.on('end', function(){\n    console.log('文件被读取完毕：');\n    console.log(body);\n});\nfile.on('close', function () {\n    console.log('文件已关闭');\n})\nfile.on('error', function (err) {\n    console.log('文件读取出错');\n})\n\n\n// 手动出发暂停/恢复读取文件\n// file.pause();\n// file.resume();\n</code></pre></li>\n<li><p>使用 WriteStream对象 写入文件</p>\n\n<pre><code>// 创建\n// var writable = fs.createWriteStream(path, [options])\n// options 可填的key有：flags/encoding/start\n\n\n// writable.write(chunk, [encoding], [callback])        // chunk 可为 Buffer/string\n\n\n// writable.end([chunk], [encoding], [callback])\n// 调用end方法结束写入\n\n\n// 将 file1.txt 的内容写入 file2.txt\nvar file1 = fs.createReadStream('./file1.txt');\nvar file2 = fs.creatWriteStream('./file2.txt');\nfile1.on('data', function (data) {\n    file2.write(data);\n});\nfile1.on('end', function () {\n    file2.end(function() {\n        console.log('文件写入完成');\n        console.log('共写入的 %d 字节数据', file2.bytesWritten);\n    });\n});     \n\n\n// 使用 pipe方法 写入数据\n// readStream.pipe(destination, [options])\nvar file1 = fs.createReadStream('./file1.txt');\nvar file2 = fs.createWriteStream('./file2.txt');\n// options 中的 end 设置为 false 表示不会自动关闭文件\nfile1.pipe(file2, {end: false});\n// 手动关闭\nfile1.on('end', function () {\n    // 这样可以继续写入数据再关闭\n    file2.end('我是被继续写入的数据');\n});\n\n\n// 取消写入\n// readStream.unpipe([destination])\n</code></pre></li>\n</ul>\n\n<h2 id=\"path\">使用 path模块 对路径进行操作</h2>\n\n<pre><code>    // 将非标准路径转化为标准路径\n    var unStdPath = './..//testFile.txt';\n    var stdPath = path.normalize(unStdPath);\n\n    // 将多个字符串拼接\n    var newPath = path.join(__dirname, 'aaa', 'bbb', 'ccc');\n\n    // 解析出绝对路径\n    path.resolve(path1, [path2])    \n\n    // 找出两个路径间的关系\n    path.relative(from, to)\n\n    // 获取某路径中的目录名\n    path.dirname(path1)\n\n    // 获取某路径中的文件名，去除 ext后缀      \n    path.basename(path1, [ext])\n\n    // 获取某路径中的拓展名\n    path.extname(path1)\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399670382000,"created_by":1,"updated_at":1399670382000,"updated_by":1,"published_at":1399670382000,"published_by":1},{"id":534,"uuid":"45312907-717e-45e9-b3b4-5b3764d6a6fa","title":"NODEJS-编写命令行脚本","slug":"node-cli","markdown":"\n\n\n# 在Shell中运行Node程序\n\n方法1 - 指定node程序和需要运行的脚本：\n\t\n\t\t$ node app.js\n\t\t\n方法2 - 使用 #! 将文件声明为可执行文件：\n\n\t\t// app.js #!表示调用解释器，执行 /usr/local/bin/node 的指令\n\t\n\t\t// 静态设置node程序路径 通过 $ which node 查询到\n\t\t#!/usr/local/bin/node\t\t\n\t\tconsole.log('Hello Lai')\n\t\t\n\t\t// 动态设置node程序路径，使用 env 指令查找 PATH 环境变量存储的 node 路径\n\t\t#!/usr/bin/env node\n\t\tconsole.log('Hello Lai')\n\t\t\n同时记得要将文件权限改为可执行：\n\n\t\t$ chmod 755 app.js\n\t\t// 或\n\t\t$ chmod +x app.js\n\t\t\n接着直接运行脚本就可以了：\n\n\t\t$ ./app.js\n\t\t\n<!-- more -->\n\t\t\n# 向脚本传递参数\n\n方法1 - 在指定node程序时，直接传入参数：\n\n\t\t// app.js\n\t\tconsole.log(process.argv)\n\n\t\t// 启动程序时传参\n\t\t$ node app.js \"argv1\" \"argv2\" \"argv3...\" \n\t\t\t\t\n方法2 - 使用 #! 启动时，参数会直接传递给程序\n\t\t\n\t\t// app.js\n\t\t#!/usr/local/bin/node\t\t\n\t\tconsole.log(process.argv);\n\t\t\n\t\t// 执行脚本时自动传入\n\t\t$ ./app.js \"argv1\" \"argv2\" \"argv3...\"\n\t\t\n\n\t\t\n# 使用同步方式处理文件\n\n命令行脚本，同步方式处理非常重要。\n\n\n# 处理标准输入和输出\n\nNode 中的 console.log 和 console.error 等价于：\n\n\t\tprocess.stdout.write(text + '\\n');\n\t\tprocess.stderr.write(text + '\\n');\n\t\t\n\n- 缓冲输入输出\n\n\t即逐行输入输出，按下Enter回车键才从数据流中读取数据，通过 readable 事件实现：\n\t\n\t\tprocess.stdin.on('readable', function () {\n\t\t\tvar data = process.stdin.read();\n\t\t\t\n\t\t\tconsole.log('输入的是：', data);\n\t\t})\t\t\n\t\t\n\t默认情况下，输入流处于暂停状态，调用 resume 函数 才能从输入流中接收数据\n\t\n\t\tprocess.stdin.resume();\n\t\t\n\n\t示例 - 将逐行输入的字符串进行md5处理后再输出：\n\t\n\t\tprocess.stdout.write('Hello 小赖！\\n');\n\t\tprocess.stdout.write('按 Ctrl+C 或输入空行退出\\n');\n\t\tprocess.stdout.write('请输入：');\n\t\t\n\t\tprocess.stdin.on('readable', function () {\n\t\t\tvar data = process.stdin.read();\n\t\t\tif (data == null) return;\n\t\t\t// 输入空行退出\n\t\t\tif (data == '\\n') process.exit(0);\n\t\t\t\n\t\t\t// 依赖模块\n\t\t\tvar hash = require('crypto').createHash('md5');\n\t\t\thash.update(data);\n\t\t\t\n\t\t\tprocess.stdout.write('加密后: ' + hash.digest('hex') + '\\n');\n\t\t\n\t\t\t// 继续输入\n\t\t\tprocess.stdout.write('\\n请继续输入：');\n\t\t});\n\t\t\n\t\t// 设置编码\n\t\tprocess.stdin.setEncoding('utf8');\n\t\t// resume 方法可保证只有用户手动才能终止程序\n\t\tprocess.stdin.resume();\t\n\t\t\t\t\t\t\n- 无缓冲输入输出\n\n\t即逐字输入输出，需要开启stdin.setRawMode来启动原始模式\n\t\n      \t#!/usr/bin/env node\n      \t\n  \t\tprocess.stdout.write('Hello 小赖！\\n');\n  \t\tprocess.stdout.write('按 Ctrl+C 或输入空行退出\\n');\n  \t\tprocess.stdout.write('请输入：');\n\n  \t\tprocess.stdin.on('readable', function () {\n  \t\t\tvar data = process.stdin.read();\n        // console.log(data);\n\n        if (data == null) return;\n\n        // 未启用原始模式\n        if (!process.stdin.isRaw) {\n          if (data == '\\n') {\n            process.exit(0);\n          }\n\n          process.stdout.write('请选择一个加密类型 ');\n          process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n          process.stdout.write('\\n请选择数字[1-4]：');\n\n          // 打开原始模式\n          process.stdin.setRawMode(true);\n        // 启用原始模式\n        } else {\n          var alg;\n          // 未按下 CTRL+C\n          if (data != '^C') {\n            var c = parseInt(data);\n            switch (c) {\n            case 1: alg = 'md5'; break;\n            case 2: alg = 'sha1'; break;\n            case 3: alg = 'sha256'; break;\n            case 4: alg = 'sha512'; break;\n            }\n\n            // 使用用户选择的算法进行加密\n            if (alg) {\n              // 依赖模块\n              var hash = require('crypto').createHash(alg);\n              hash.update(data);\n              process.stdout.write('使用'+ alg +'加密后: ' + hash.digest('hex') + '\\n');\n              // 继续输入\n              process.stdout.write('\\n请继续输入：');\n              // 关闭原始模式\n              process.stdin.setRawMode(false);\n            } else {\n              // 未输入算法类型\n              process.stdout.write('请选择一个加密类型 ');\n              process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n              process.stdout.write('\\n请选择数字[1-4]：');\n            }\n          // 按下 CTRL+C 退出\n          } else {\n            process.stdout.write('\\n请输入：');\n            // 关闭原始模式\n            process.stdin.setRawMode(false);\n          }\n        }\n      });\n\n  \t\t// 设置编码\n  \t\tprocess.stdin.setEncoding('utf8');\n  \t\t// 继续\n  \t\tprocess.stdin.resume();\n\t\t\t\n\n# 使用 readline 模块\n\n使用这个模块来逐行读取文件\n\n\t官方样例：\n\t\n\t\tvar readline = require('readline');\n\t\tvar rl = readline(\"./somefile.txt\");\n\t    rl.on(\"line\", function (line){\n\t\t    //do something with the line of text\n\t\t});\n\t    rl.on('error', function (e){\n\t\t   //something went wrong\n\t    });\t\t\n\n\n\n# 使用 conmmander 模块\n\n方便快速构建命令行工具\n\n#!/usr/bin/env node\n\n\t官方样例：\n\t\n\t\t/**\n\t\t * Module dependencies.\n\t\t */\n\n\t\tvar program = require('commander');\n\n\t\tprogram\n\t\t  .version('0.0.1')\n\t\t  .option('-p, --peppers', 'Add peppers')\n\t\t  .option('-P, --pineapple', 'Add pineapple')\n\t\t  .option('-b, --bbq', 'Add bbq sauce')\n\t\t  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n\t\t  .parse(process.argv);\n\n\t\tconsole.log('you ordered a pizza with:');\n\t\tif (program.peppers) console.log('  - peppers');\n\t\tif (program.pineapple) console.log('  - pineapple');\n\t\tif (program.bbq) console.log('  - bbq');\n\t\tconsole.log('  - %s cheese', program.cheese);\n\t\t\n\t使用 conmmander 模块，调用Github的API写一个简单的 repo 查询工具：\n\n        #!/usr/bin/env node\n\n        // 使用 commander 模块快速构建命令行工具应用\n        // 使用 request 模块发起网络请求\n        // 使用 chalk 模块美化命令行输出\n        var program = require('commander');\n        var request = require('request');\n        var chalk = require('chalk');\n\n        program\n          .version('0.0.1')\n          .usage('[options] <keywords>')\n          .option('-o, --owner [name]', 'Filter by the repositories owner')\n          .option('-l, --language [language]', 'Filter by the repositories language')\n          .option('-f, --full', 'Full output without any styling')\n          .parse(process.argv);\n\n        // console.log(program.args.length)\n        // 未输入参数，则输出帮助\n        if (!program.args.length) {\n          program.help();\n          // 带错误退出\n          process.exit(1);\n        } else {\n          var keywords = program.args;\n          var url = 'https://api.github.com/search/repositories?sort=stars&order=desc&q='+keywords;\n\n          // 处理输入的 --option\n          if(program.owner) {\n                url = url + '+user:' + program.owner;\n          }\n\n          if(program.language) {\n              url = url + '+language:' + program.language;\n          }\n\n\n          // console.log('Keywords: ' + program.args);\n          var options = {\n            method: 'GET',\n            headers: {\n              'User-Agent': 'laispace'\n            },\n            url: url\n          }\n          request(options, function (err, res, data) {\n            if (err) {\n              console.log('Error: ' + err);\n            } else if (!err && res.statusCode == 200) {\n              var body = JSON.parse(data);\n              console.log('查询结果 '+ body.items.length +'\\n');\n              if (program.full) {\n                // 无过滤输出\n                console.log(body);\n              } else {\n                  for(var i = 0; i < body.items.length; i++) {\n                    console.log(chalk.cyan.bold.underline('Name: ' + body.items[i].name));\n                    console.log(chalk.magenta.bold('Owner: ' + body.items[i].owner.login));\n                    console.log(chalk.grey('Desc: ' + body.items[i].description));\n                    console.log(chalk.grey('Clone url: ' + body.items[i].clone_url + '\\n'));\n                  }\n\n                  // 无错误退出\n                  process.exit(0);\n              }\n            }\n          });\n\n        }\n\n\t记得将gitsearch.js的权限修改为可执行.\n\t\n\t测试命令：\n\t\t\n\t\t// repo名为lai的repo\n\t\t$ ./gitsearch.js lai\n\t\t// 作者为laispace\n\t\t$ ./gitsearch.js lai -o laispace\n\t\t// 语言分类为 javascript\n\t\t$ ./gitsearch.js lai -o laispace -l javascript\n\t\t// 不过滤输出\n\t\t$ ./gitsearch.js lai -o laispace -l javascript -f\n\t\t// 将结果复制到剪贴板\n\t\t$ ./gitsearch.js lai -o laispace | pbcopy\t\t// 将结果分页输出（vim模式）\n\t\t$ ./gitsearch.js lai -o laispace | less\n\t\t// 将结果正则匹配后输出，这里将输出匹配有 'node' 的信息\n\t\t$ ./gitsearch.js lai -o laispace | grep node\n\t\t\n\t\t\n\t\t\t\t\t\n### 参考资料\n\n1. [readline 模块](https://www.npmjs.org/package/readline)\n2. [commander 模块](https://github.com/visionmedia/commander.js/)\n3. [chalk 模块](https://www.npmjs.org/package/chalk)\n4. [Gtihub API](https://developer.github.com/v3/)\n4. [Command-line utilities with Node.js](http://cruft.io/posts/node-command-line-utilities/)\n\t\n\t\t\n\t\t\n\n\n\t\t\t\t\n\t\t\n\n\t\t\t\t\t\t","html":"<h1 id=\"shellnode\">在Shell中运行Node程序</h1>\n\n<p>方法1 - 指定node程序和需要运行的脚本：</p>\n\n<pre><code>    $ node app.js\n</code></pre>\n\n<p>方法2 - 使用 #! 将文件声明为可执行文件：</p>\n\n<pre><code>    // app.js #!表示调用解释器，执行 /usr/local/bin/node 的指令\n\n    // 静态设置node程序路径 通过 $ which node 查询到\n    #!/usr/local/bin/node       \n    console.log('Hello Lai')\n\n    // 动态设置node程序路径，使用 env 指令查找 PATH 环境变量存储的 node 路径\n    #!/usr/bin/env node\n    console.log('Hello Lai')\n</code></pre>\n\n<p>同时记得要将文件权限改为可执行：</p>\n\n<pre><code>    $ chmod 755 app.js\n    // 或\n    $ chmod +x app.js\n</code></pre>\n\n<p>接着直接运行脚本就可以了：</p>\n\n<pre><code>    $ ./app.js\n</code></pre>\n\n<!-- more -->\n\n<h1 id=\"\">向脚本传递参数</h1>\n\n<p>方法1 - 在指定node程序时，直接传入参数：</p>\n\n<pre><code>    // app.js\n    console.log(process.argv)\n\n    // 启动程序时传参\n    $ node app.js \"argv1\" \"argv2\" \"argv3...\" \n</code></pre>\n\n<p>方法2 - 使用 #! 启动时，参数会直接传递给程序</p>\n\n<pre><code>    // app.js\n    #!/usr/local/bin/node       \n    console.log(process.argv);\n\n    // 执行脚本时自动传入\n    $ ./app.js \"argv1\" \"argv2\" \"argv3...\"\n</code></pre>\n\n<h1 id=\"\">使用同步方式处理文件</h1>\n\n<p>命令行脚本，同步方式处理非常重要。</p>\n\n<h1 id=\"\">处理标准输入和输出</h1>\n\n<p>Node 中的 console.log 和 console.error 等价于：</p>\n\n<pre><code>    process.stdout.write(text + '\\n');\n    process.stderr.write(text + '\\n');\n</code></pre>\n\n<ul>\n<li><p>缓冲输入输出</p>\n\n<p>即逐行输入输出，按下Enter回车键才从数据流中读取数据，通过 readable 事件实现：</p>\n\n<pre><code>process.stdin.on('readable', function () {\n    var data = process.stdin.read();\n\n\n<pre><code>console.log('输入的是：', data);\n</code></pre>\n\n})      \n</code></pre>\n\n<p>默认情况下，输入流处于暂停状态，调用 resume 函数 才能从输入流中接收数据</p>\n\n<pre><code>process.stdin.resume();\n</code></pre>\n\n<p>示例 - 将逐行输入的字符串进行md5处理后再输出：</p>\n\n<pre><code>process.stdout.write('Hello 小赖！\\n');\nprocess.stdout.write('按 Ctrl+C 或输入空行退出\\n');\nprocess.stdout.write('请输入：');\n\n\nprocess.stdin.on('readable', function () {\n    var data = process.stdin.read();\n    if (data == null) return;\n    // 输入空行退出\n    if (data == '\\n') process.exit(0);\n\n\n<pre><code>// 依赖模块\nvar hash = require('crypto').createHash('md5');\nhash.update(data);\n\n\nprocess.stdout.write('加密后: ' + hash.digest('hex') + '\\n');\n\n\n// 继续输入\nprocess.stdout.write('\\n请继续输入：');\n</code></pre>\n\n});\n\n\n// 设置编码\nprocess.stdin.setEncoding('utf8');\n// resume 方法可保证只有用户手动才能终止程序\nprocess.stdin.resume(); \n</code></pre></li>\n<li><p>无缓冲输入输出</p>\n\n<p>即逐字输入输出，需要开启stdin.setRawMode来启动原始模式</p>\n\n<pre><code>  #!/usr/bin/env node\n\n\n  process.stdout.write('Hello 小赖！\\n');\n  process.stdout.write('按 Ctrl+C 或输入空行退出\\n');\n  process.stdout.write('请输入：');\n\n\n  process.stdin.on('readable', function () {\n      var data = process.stdin.read();\n// console.log(data);\n\n\nif (data == null) return;\n\n\n// 未启用原始模式\nif (!process.stdin.isRaw) {\n  if (data == '\\n') {\n    process.exit(0);\n  }\n\n\n  process.stdout.write('请选择一个加密类型 ');\n  process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n  process.stdout.write('\\n请选择数字[1-4]：');\n\n\n  // 打开原始模式\n  process.stdin.setRawMode(true);\n// 启用原始模式\n} else {\n  var alg;\n  // 未按下 CTRL+C\n  if (data != '^C') {\n    var c = parseInt(data);\n    switch (c) {\n    case 1: alg = 'md5'; break;\n    case 2: alg = 'sha1'; break;\n    case 3: alg = 'sha256'; break;\n    case 4: alg = 'sha512'; break;\n    }\n\n\n<pre><code>// 使用用户选择的算法进行加密\nif (alg) {\n  // 依赖模块\n  var hash = require('crypto').createHash(alg);\n  hash.update(data);\n  process.stdout.write('使用'+ alg +'加密后: ' + hash.digest('hex') + '\\n');\n  // 继续输入\n  process.stdout.write('\\n请继续输入：');\n  // 关闭原始模式\n  process.stdin.setRawMode(false);\n} else {\n  // 未输入算法类型\n  process.stdout.write('请选择一个加密类型 ');\n  process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n  process.stdout.write('\\n请选择数字[1-4]：');\n}\n</code></pre>\n\n  // 按下 CTRL+C 退出\n  } else {\n    process.stdout.write('\\n请输入：');\n    // 关闭原始模式\n    process.stdin.setRawMode(false);\n  }\n}\n</code></pre>\n\n<p>});</p>\n\n<pre><code>  // 设置编码\n  process.stdin.setEncoding('utf8');\n  // 继续\n  process.stdin.resume();\n</code></pre></li>\n</ul>\n\n<h1 id=\"readline\">使用 readline 模块</h1>\n\n<p>使用这个模块来逐行读取文件</p>\n\n<pre><code>官方样例：\n\n    var readline = require('readline');\n    var rl = readline(\"./somefile.txt\");\n    rl.on(\"line\", function (line){\n        //do something with the line of text\n    });\n    rl.on('error', function (e){\n       //something went wrong\n    });     \n</code></pre>\n\n<h1 id=\"conmmander\">使用 conmmander 模块</h1>\n\n<p>方便快速构建命令行工具</p>\n\n<h1 id=\"usrbinenvnode\">!/usr/bin/env node</h1>\n\n<pre><code>官方样例：\n\n    /**\n     * Module dependencies.\n     */\n\n    var program = require('commander');\n\n    program\n      .version('0.0.1')\n      .option('-p, --peppers', 'Add peppers')\n      .option('-P, --pineapple', 'Add pineapple')\n      .option('-b, --bbq', 'Add bbq sauce')\n      .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n      .parse(process.argv);\n\n    console.log('you ordered a pizza with:');\n    if (program.peppers) console.log('  - peppers');\n    if (program.pineapple) console.log('  - pineapple');\n    if (program.bbq) console.log('  - bbq');\n    console.log('  - %s cheese', program.cheese);\n\n使用 conmmander 模块，调用Github的API写一个简单的 repo 查询工具：\n\n    #!/usr/bin/env node\n\n    // 使用 commander 模块快速构建命令行工具应用\n    // 使用 request 模块发起网络请求\n    // 使用 chalk 模块美化命令行输出\n    var program = require('commander');\n    var request = require('request');\n    var chalk = require('chalk');\n\n    program\n      .version('0.0.1')\n      .usage('[options] &lt;keywords&gt;')\n      .option('-o, --owner [name]', 'Filter by the repositories owner')\n      .option('-l, --language [language]', 'Filter by the repositories language')\n      .option('-f, --full', 'Full output without any styling')\n      .parse(process.argv);\n\n    // console.log(program.args.length)\n    // 未输入参数，则输出帮助\n    if (!program.args.length) {\n      program.help();\n      // 带错误退出\n      process.exit(1);\n    } else {\n      var keywords = program.args;\n      var url = 'https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q='+keywords;\n\n      // 处理输入的 --option\n      if(program.owner) {\n            url = url + '+user:' + program.owner;\n      }\n\n      if(program.language) {\n          url = url + '+language:' + program.language;\n      }\n\n\n      // console.log('Keywords: ' + program.args);\n      var options = {\n        method: 'GET',\n        headers: {\n          'User-Agent': 'laispace'\n        },\n        url: url\n      }\n      request(options, function (err, res, data) {\n        if (err) {\n          console.log('Error: ' + err);\n        } else if (!err &amp;&amp; res.statusCode == 200) {\n          var body = JSON.parse(data);\n          console.log('查询结果 '+ body.items.length +'\\n');\n          if (program.full) {\n            // 无过滤输出\n            console.log(body);\n          } else {\n              for(var i = 0; i &lt; body.items.length; i++) {\n                console.log(chalk.cyan.bold.underline('Name: ' + body.items[i].name));\n                console.log(chalk.magenta.bold('Owner: ' + body.items[i].owner.login));\n                console.log(chalk.grey('Desc: ' + body.items[i].description));\n                console.log(chalk.grey('Clone url: ' + body.items[i].clone_url + '\\n'));\n              }\n\n              // 无错误退出\n              process.exit(0);\n          }\n        }\n      });\n\n    }\n\n记得将gitsearch.js的权限修改为可执行.\n\n测试命令：\n\n    // repo名为lai的repo\n    $ ./gitsearch.js lai\n    // 作者为laispace\n    $ ./gitsearch.js lai -o laispace\n    // 语言分类为 javascript\n    $ ./gitsearch.js lai -o laispace -l javascript\n    // 不过滤输出\n    $ ./gitsearch.js lai -o laispace -l javascript -f\n    // 将结果复制到剪贴板\n    $ ./gitsearch.js lai -o laispace | pbcopy      // 将结果分页输出（vim模式）\n    $ ./gitsearch.js lai -o laispace | less\n    // 将结果正则匹配后输出，这里将输出匹配有 'node' 的信息\n    $ ./gitsearch.js lai -o laispace | grep node\n</code></pre>\n\n<h3 id=\"\">参考资料</h3>\n\n<ol>\n<li><a href=\"https://www.npmjs.org/package/readline\">readline 模块</a>  </li>\n<li><a href=\"https://github.com/visionmedia/commander.js/\">commander 模块</a>  </li>\n<li><a href=\"https://www.npmjs.org/package/chalk\">chalk 模块</a>  </li>\n<li><a href=\"https://developer.github.com/v3/\">Gtihub API</a>  </li>\n<li><a href=\"http://cruft.io/posts/node-command-line-utilities/\">Command-line utilities with Node.js</a></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1401873138000,"created_by":1,"updated_at":1401873138000,"updated_by":1,"published_at":1401873138000,"published_by":1},{"id":535,"uuid":"ce5493c3-6ee1-451e-8faa-65021d67a188","title":"NODEJS-进程与子进程","slug":"node-child-progress","markdown":"\n\n在操作系统中，每一个程序都是一个进程类的实例对象。\n\n# 进程信息\n\n在 NodeJS 中，使用 process 代表 NodeJS 应用程序。\n\n## 进程属性\n\n\t\t// 执行程序的绝对路径\n\t\tprocess.execPath\n\t\t\n\t\t// NodeJS版本号\n\t\tprocess.version\n\t\t\n\t\t// NodeJS 及其依赖的版本号\n\t\tprocess.versions\n\t\t\n\t\t// 运行平台\n\t\tprocess.platform\n\t\t\n\t\t// 一个标准输入流对象\n\t\tprocess.stdin\n\t\t// 恢复读取标准输入流数据\n\t\tprocess.stdin.resume()\n\t\t\n\t\t// 一个标准输出流对象\n\t\tprocess.stdout\n\t\t\n\t\t// 一个标准错误流对象\n\t\tprocess.stderr\n\t\t\n\t\t// 参数列表\n\t\tprocess.argv\n\t\t\n\t\t// 环境变量\n\t\tprocess.env\n\t\t\n\t\t// 配置信息\n\t\tprocess.config\n\t\t\n\t\t// 进程 id\n\t\tprocess.pid\n\t\t\n\t\t// 命令行窗口的标题\n\t\tprocess.title\n\t\t\n\t\t// 处理器架构\n\t\tprocess.arch\n\n<!-- more -->\t\t\n\t\n## 进程方法：\n\t\n\t\t// 进程内存使用量\n\t\tprocess.memoryUsage()\t\t\n\t\t\n\t\t// 将callback函数推迟执行\n\t\tprocess.nextTick(callback)\n\t\t// 示例：\n\t\tvar fs = require('fs');\n\t\tvar finish = function () {\n\t\t\tconsole.log('文件读取完成')\n\t\t}\n\t\tprocess.nextTick(finish);\n\t\tconsole.log(fs.readFileSync('./test.txt').toString());\n\t\t\n\t\t// 发出 SIGABRT 新号，终止进程\t\n\t\tprocess.abort()\n\t\t\n\t\t// 改变程序使用的当前目录\n\t\tprocess.chdir(directory)\n\t\t\n\t\t// 返回当前目录\n\t\tprocess.cwd()\n\t\t\n\t\t// 退出程序进程，code 为 0 表示正常退出\n\t\tprocess.exit([code])\n\t\t\n\t\t// 获取 group id\n\t\tprocess.getgid()\n\t\t// 设置\n\t\tprocess.setgid(id)\n\t\t\n\t\t// 获取 user id\n\t\tprocess.getuid()\n\t\t// 设置\n\t\tprocess.setuid(id)\n\t\t\n\t\t// 获取附属组 id 构成的数组\n\t\tprocess.getgroups()\n\t\t// 设置\n\t\tprocess.setgroups(groups)\n\t\t\n\t\t// 指定归属组来初始化 /etc/group 组列表\n\t\tprocess.initgroups(user, extra_group)\n\t\t\n\t\t// 向一个进程发送信号, signal 默认为 SIGTERM 表示终止进程\n\t\tprocess.kill(pid, [signal])\n\t\t\n\t\t// 读取或修改运行程序进程的文件的权限掩码\n\t\tprocess.unmash([mask])\n\t\t\n\t\t// 读取程序当前运行时间\n\t\tprocess.uptime()\n\t\t\n\t\t// 测试一个代码段的运行时间\n\t\tprocess.hrtime()\n\t\t// 示例：\n\t\tvar fs = require('fs');\n\t\tvar time = process.hrtime();\n\t\tvar data = fs.readFileSync('./test.txt');\n\t\tvar diff = process.hrtime(time);\n\t\tconsole.log('读取文件耗费%d纳秒', diff[0] * 1e9 + diff[1])\n\t\t\n## 进程事件：\n\t\n\t\t// exit - 进程退出时触发\n\t\tprocess.on('exit', function () {\n\t\t\tconsole.log('进程已退出');\n\t\t});\n\t\t// 手动退出进程\n\t\tprocess.exit();\n\t\t\n\t\t// uncaughtException - 未捕获异常\n\t\tprocess.on('uncaughtException', function (err) {\n\t\t\tconsole.log('未捕获异常：', err);\n\t\t});\n\t\t// 调用一个未定义的函数\n\t\tnonExectentFunction();\n\t\t\n\t\t// 其他信号事件, 如 SIGINT\n\t\tprocess.on('SIGINT', function () {\n\t\t\tconsole.log('捕获到SIGINT信号');\n\t\t});\n\t\tprocess.stdin.resume();\n\n\t\t\n\n# 系统信息\n\n此外，可以使用os模块来访问类似的操作系统信息：\n\n\t\t// 临时文件目录\n\t\tos.tmpdir()   \n\t\t \n\t\t// CPU的字节序\n\t\tos.endianness()\n\t\t\n\t\t// 计算机名\n\t\tos.hostname\n\t\t\n\t\t// 操作系统类型\n\t\tos.type\n\t\t\n\t\t// 操作系统平台\n\t\tos.platform\n\t\t\n\t\t// CPS架构\n\t\tos.arch()\n\t\t\n\t\t// 操作系统版本号\n\t\tos.release()\n\t\t\n\t\t// 系统当前运行时间\n\t\tos.uptime()\n\t\t\n\t\t// 1、5、15分钟的系统平均负载\n\t\tos.loadavg()\n\t\t\n\t\t// 系统总内存，以字节为单位\n\t\tos.totalmem()\n\t\t\n\t\t// 系统空闲内存\n\t\tos.freemem()\n\t\t\n\t\t// CPS信息\n\t\tos.cpus()\n\t\t\n\t\t// 系统中所有网络接口\n\t\tos.networkInterfaces()\n\t\t\n\t\t// 系统使用的换行符\n\t\tos.EOL \t\t\n\t\t\n\t\t\n\n# 使用 child_process 模块开启子进程\n\n子进程间共享内存空间，也可通过共享端口将请求分配给多个子进程来处理。\n\n## 使用 spawn 方法开启子进程\n\n\t\tchild_process.spawn(command, [args], [options])\n\t\t\n\t\tcommand 指定运行命令\n\t\t\n\t\targs 数组，指定运行该命令时使用的参数\n\t\t\n\t\toptions\t对象，指定开启子进程时使用的选项\n\t\t\n\t\t// 默认值为：\n\t\toptions = {\n\t\t\tcwd: undefined,\n\t\t\tenv: process.env\n\t\t}\n\t\t\n\t\toptions = {\n\t\t\tcwd: 字符串，指定子进程的当前工作目录\n\t\t\tstdio: 字符串或三元素数组，设置标准输入输出\n\t\t\tenv: 对象，指定环境变量\n\t\t\tdetached: 布尔值默认为false，是否设定为进程组中的组长进程\n\t\t\tuid: 数值，指定 user id\n\t\t\tgid: 数值，指定 group id\n\t\t}\n\t\t\n\t\toptions.stdio = 'ignore'\n\t\t等同于：\n\t\toptions.stdio = ['ignore', 'ignore', 'ignore'];\n\n\t\toptions.stdio = 'pipe'\n\t\t等同于：\n\t\toptions.stdio = ['pipe', 'pipe', 'pipe'];\n\n\t\toptions.stdio = 'inherit'\n\t\t等同于：\n\t\toptions.stdio = [process.stdin, process.stdout, process.stderr];\n\t\t或：\n\t\toptions.stdio = [0, 1, 2];\n\t\t\n\t\toptions.stdio 中的数组元素可为：\n\t\tpipe 在父子进程间创建管道\n\t\tipc 在父子进程间创建专用于传递消息或文件描述符的IPC通道\n\t\tignore 不为子进程设置文件描述符\n\t\t\n\t\tStream对象 指定父子进程共享一个终端设备、文件、端口或管道\n\t\t\n\t\tnull或undefined 使用默认值\n\t\t\n\n\tspawn 方式示例：\n\t\n\t\tvar cp = require('child_process');\n\t\t\n\t\t// TODO\n\t\t// p239 代码清单 9-13\n\t\t\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","html":"<p>在操作系统中，每一个程序都是一个进程类的实例对象。</p>\n\n<h1 id=\"\">进程信息</h1>\n\n<p>在 NodeJS 中，使用 process 代表 NodeJS 应用程序。</p>\n\n<h2 id=\"\">进程属性</h2>\n\n<pre><code>    // 执行程序的绝对路径\n    process.execPath\n\n    // NodeJS版本号\n    process.version\n\n    // NodeJS 及其依赖的版本号\n    process.versions\n\n    // 运行平台\n    process.platform\n\n    // 一个标准输入流对象\n    process.stdin\n    // 恢复读取标准输入流数据\n    process.stdin.resume()\n\n    // 一个标准输出流对象\n    process.stdout\n\n    // 一个标准错误流对象\n    process.stderr\n\n    // 参数列表\n    process.argv\n\n    // 环境变量\n    process.env\n\n    // 配置信息\n    process.config\n\n    // 进程 id\n    process.pid\n\n    // 命令行窗口的标题\n    process.title\n\n    // 处理器架构\n    process.arch\n</code></pre>\n\n<!-- more -->        \n\n<h2 id=\"\">进程方法：</h2>\n\n<pre><code>    // 进程内存使用量\n    process.memoryUsage()       \n\n    // 将callback函数推迟执行\n    process.nextTick(callback)\n    // 示例：\n    var fs = require('fs');\n    var finish = function () {\n        console.log('文件读取完成')\n    }\n    process.nextTick(finish);\n    console.log(fs.readFileSync('./test.txt').toString());\n\n    // 发出 SIGABRT 新号，终止进程   \n    process.abort()\n\n    // 改变程序使用的当前目录\n    process.chdir(directory)\n\n    // 返回当前目录\n    process.cwd()\n\n    // 退出程序进程，code 为 0 表示正常退出\n    process.exit([code])\n\n    // 获取 group id\n    process.getgid()\n    // 设置\n    process.setgid(id)\n\n    // 获取 user id\n    process.getuid()\n    // 设置\n    process.setuid(id)\n\n    // 获取附属组 id 构成的数组\n    process.getgroups()\n    // 设置\n    process.setgroups(groups)\n\n    // 指定归属组来初始化 /etc/group 组列表\n    process.initgroups(user, extra_group)\n\n    // 向一个进程发送信号, signal 默认为 SIGTERM 表示终止进程\n    process.kill(pid, [signal])\n\n    // 读取或修改运行程序进程的文件的权限掩码\n    process.unmash([mask])\n\n    // 读取程序当前运行时间\n    process.uptime()\n\n    // 测试一个代码段的运行时间\n    process.hrtime()\n    // 示例：\n    var fs = require('fs');\n    var time = process.hrtime();\n    var data = fs.readFileSync('./test.txt');\n    var diff = process.hrtime(time);\n    console.log('读取文件耗费%d纳秒', diff[0] * 1e9 + diff[1])\n</code></pre>\n\n<h2 id=\"\">进程事件：</h2>\n\n<pre><code>    // exit - 进程退出时触发\n    process.on('exit', function () {\n        console.log('进程已退出');\n    });\n    // 手动退出进程\n    process.exit();\n\n    // uncaughtException - 未捕获异常\n    process.on('uncaughtException', function (err) {\n        console.log('未捕获异常：', err);\n    });\n    // 调用一个未定义的函数\n    nonExectentFunction();\n\n    // 其他信号事件, 如 SIGINT\n    process.on('SIGINT', function () {\n        console.log('捕获到SIGINT信号');\n    });\n    process.stdin.resume();\n</code></pre>\n\n<h1 id=\"\">系统信息</h1>\n\n<p>此外，可以使用os模块来访问类似的操作系统信息：</p>\n\n<pre><code>    // 临时文件目录\n    os.tmpdir()   \n\n    // CPU的字节序\n    os.endianness()\n\n    // 计算机名\n    os.hostname\n\n    // 操作系统类型\n    os.type\n\n    // 操作系统平台\n    os.platform\n\n    // CPS架构\n    os.arch()\n\n    // 操作系统版本号\n    os.release()\n\n    // 系统当前运行时间\n    os.uptime()\n\n    // 1、5、15分钟的系统平均负载\n    os.loadavg()\n\n    // 系统总内存，以字节为单位\n    os.totalmem()\n\n    // 系统空闲内存\n    os.freemem()\n\n    // CPS信息\n    os.cpus()\n\n    // 系统中所有网络接口\n    os.networkInterfaces()\n\n    // 系统使用的换行符\n    os.EOL      \n</code></pre>\n\n<h1 id=\"child_process\">使用 child_process 模块开启子进程</h1>\n\n<p>子进程间共享内存空间，也可通过共享端口将请求分配给多个子进程来处理。</p>\n\n<h2 id=\"spawn\">使用 spawn 方法开启子进程</h2>\n\n<pre><code>    child_process.spawn(command, [args], [options])\n\n    command 指定运行命令\n\n    args 数组，指定运行该命令时使用的参数\n\n    options 对象，指定开启子进程时使用的选项\n\n    // 默认值为：\n    options = {\n        cwd: undefined,\n        env: process.env\n    }\n\n    options = {\n        cwd: 字符串，指定子进程的当前工作目录\n        stdio: 字符串或三元素数组，设置标准输入输出\n        env: 对象，指定环境变量\n        detached: 布尔值默认为false，是否设定为进程组中的组长进程\n        uid: 数值，指定 user id\n        gid: 数值，指定 group id\n    }\n\n    options.stdio = 'ignore'\n    等同于：\n    options.stdio = ['ignore', 'ignore', 'ignore'];\n\n    options.stdio = 'pipe'\n    等同于：\n    options.stdio = ['pipe', 'pipe', 'pipe'];\n\n    options.stdio = 'inherit'\n    等同于：\n    options.stdio = [process.stdin, process.stdout, process.stderr];\n    或：\n    options.stdio = [0, 1, 2];\n\n    options.stdio 中的数组元素可为：\n    pipe 在父子进程间创建管道\n    ipc 在父子进程间创建专用于传递消息或文件描述符的IPC通道\n    ignore 不为子进程设置文件描述符\n\n    Stream对象 指定父子进程共享一个终端设备、文件、端口或管道\n\n    null或undefined 使用默认值\n\n\nspawn 方式示例：\n\n    var cp = require('child_process');\n\n    // TODO\n    // p239 代码清单 9-13\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1401979249000,"created_by":1,"updated_at":1401979249000,"updated_by":1,"published_at":1401979249000,"published_by":1},{"id":536,"uuid":"9e329d81-2da5-4353-836c-442733126eb0","title":"NODEJS-常用模块","slug":"node-modules","markdown":"\n\n## dns模块 解析域名\n\n- dns.resolve() 将一个域名解析为一组DNS记录\n\n- dns.reverse() 将一个IP地址饥饿虚伪一组域名\n\n- dns.lookup() 将一个域名转换为一个IP地址 \n\n\t\t// rrtype即记录类型，默认为A，可选 A/AAAA/CNAME/MX/TXT/SRV/PTR/NS\n\t\t// A 将IPV4地址映射为域名\n\t\t// AAAA 将IPV6地址映射为域名\n\t\t// CNAME 别名解析，如 laispace.com 是 www.laispace.com 的别名\n\t\t// MX 邮件服务器解析\n\t\t// dns.resolve(domain, [rrtype], callback)\n\t\tvar dns = require('dns');\n\t\tvar domain = 'www.laispace.com';\n\t\tdns.resolve(domain, 'A', function (err, addresses) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('域名解析结果为：\\n', addresses);\n\t\t})\n\n<!--more-->\n\t\n\t更便捷的方法：\t\t\n\t\n\t\t// 解析 A 记录\n\t\tdns.resolve4(domain, callback)\n\t\t// 解析 AAAA 记录\n\t\tdns.resolve6(domain, callback)\n\t\t// 解析 CNAME 记录\n\t\tdns.resolveCname(domain, callback)\n\t\t// 解析 MX 记录\n\t\tdns.resolveMx(domain, callback)\n\t\t// 解析 TXT 记录\n\t\tdns.resolveTxt(domain, callback)\n\t\t// 解析 SRV 记录\n\t\tdns.resolveSrv(domain, callback)\n\t\t// 解析 NS 记录\n\t\tdns.resolveNs(domain, callback)\n\t\t\n\tdns.resolve() 回调中返回的是 一组地址数组 addresses\n\t\n\tdns.lookup() 则返回 addresses 中的第一个：\n\t\n\t\t// family 默认为 null，即可取IPV4或IPV6， 若为 4 或 6，则取为 IPV4 或 IPV6\n\t\t// dns.lookup(domain, [family], function (err, address, family) {})\n\t\tvar dns = require('dns');\n\t\tvar domain = 'www.laispace.com';\n\t\tdns.lookup(domain, 4, function (err, address) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('域名解析结果为：\\n', address)\n\t\t})\t\n\n\tdns.reverse() 则反过来解析IP地址为域名：\n\t\n\t\t// dns.reverse(ip, callback)\n\t\tvar dns = require('dns');\n\t\tvar ip = '173.194.127.82';\n\t\tdns.reverse(ip, function (err, domains) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('IP解析结果为：\\n', domains);\n\t\t})\t\t\n\n## os模块 获取操作系统信息\n\n\t// 临时文件目录\n\tos.tmpdir()\t\n\t\n\t// CPU的字节序\n\tos.endianness()\n\t\n\t// 计算机名\n\tos.hostname\n\t\n\t// 操作系统类型\n\tos.type\n\t\n\t// 操作系统平台\n\tos.platform\n\t\n\t// CPS架构\n\tos.arch()\n\t\n\t// 操作系统版本号\n\tos.release()\n\t\n\t// 系统当前运行时间\n\tos.uptime()\n\t\n\t// 1、5、15分钟的系统平均负载\n\tos.loadavg()\n\t\n\t// 系统总内存，以字节为单位\n\tos.totalmem()\n\t\n\t// 系统空闲内存\n\tos.freemem()\n\t\n\t// CPS信息\n\tos.cpus()\n\t\n\t// 系统中所有网络接口\n\tos.networkInterfaces()\n\t\n\t// 系统使用的换行符\n\tos.EOL \n\t\t\n\t\t\n## util 模块 一些实用方法\n\n\t\t// 格式化字符串\n\t\t// util.format(format, [...])\n\t\tutil.format('输入%d个参数，分别为%s, %s和%s', 3, 'lai', 'xiao', 'lai');\n\t\t%s 字符串参数\n\t\t%d 数值参数\n\t\t%j JSON对象\n\t\t% 一个百分号\n\t\t\n\t\t// debug输出标准错误流，同步方法，阻塞线程\n\t\t// util.debug(string)\n\t\tutil.debug('出现错误！');\n\t\t\n\t\t// error输出标准错误流，也是同步方法，阻塞线程\n\t\t// util.error([...])\n\t\tutil.error(['error1', 'error2', 'error3'])\n\t\t\n\t\t// puts输出标准输出流，也是同步方法，阻塞线程\n\t\t// util.puts([...])\n\t\tutil.puts(['ouput1', 'output2', 'output3'])\n\t\t\n\t\t// print输出标准输出流，也是同步方法，阻塞线程，输出后不产生新行\n\t\t// util.print([...])\n\t\tutil.puts(['ouput1', 'output2', 'output3'])\n\t\t\n\t\t// log输出标准输出流，前面会自动加上系统时间\n\t\t// util.log(string)\n\t\tutil.log('Hello Lai!')\n\t\t\n\t\t// inspect输出一个对象信息\n\t\t// util.inspect(object, [options])\n\t\tvar obj = {\n\t\t\tname: '小赖1',\n\t\t\tchild: {\n\t\t\t\tname: '小赖2',\n\t\t\t\tchild: {\n\t\t\t\t\tname: '小赖3'\n\t\t\t\t}\n\t\t\t},\n\t\t\tsayHi: function () {console.log('Hi Lai!')}\n\t\t}\n\t\tutil.inspect(obj, {showHidden: true});\n\t\t// options = {\n\t\t//\tshowHidden: 布尔值默认false，是否显示对象的不可枚举属性\n\t\t//\tdepth: 整数，指定查看对象的信息的深度\n\t\t//\tcolors: 布尔值默认false，是否输出时应用颜色高亮\n\t\t//\tcustomInspect: 布尔值默认为true，是否在查看对象信息时调用自定义的Inspect方法\n\t\t// }\n\t\t// 设置inspect的默认颜色\n\t\tutil.inspect.styles = {\n\t\t\tnumber: 'yellow',\n\t\t\tboolean: 'yellow',\n\t\t\tstring: 'green',\n\t\t\tdate: 'magenta',\n\t\t\tregexp: 'red',\n\t\t\tnull: 'bold',\n\t\t\tundefined: 'grey',\n\t\t\tspecial: 'cyan'\n\t\t}\n\t\t\n\t\t// isArray 判断数组\n\t\t// util.isArray(object)\n\t\tutil.isArray([1, 2, 3]);\n\t\t\n\t\t// isRegExp 判断正则\n\t\t// util.isRegExp(object)\n\t\tutil.isRegExp(/a regexp/);\n\t\t\n\t\t// isDate 判断日期\n\t\t// util.isDate(object)\n\t\tutil.isDate(new Date());\n\t\t\n\t\t// isError 判断错误\n\t\t// util.isError(object)\n\t\tutil.isError(new Error());\n\t\t\n\t\t// inherits 将父类方法继承给子类\n\t\t// util.inherits(constructor, superConstructor)\n\t\tvar util = require('util');\n\t\tfunction Father() {}\n\t\tFather.prototype = {\n\t\t\tsayHi: function () {\n\t\t\t\tconsole.log('Hi Lai');\n\t\t\t}\n\t\t}\t\t\n\t\tfunction Child() {}\n\t\t// 继承方法\n\t\tutil.inherits(Child, Father);\n\t\t// 生成实例\n\t\tvar child = new Child()\n\t\tchild.sayHi(); // => 'Hi Lai'\n\t\t\n## validator模块 客户端/服务器端验证\n\n\t\t// 使用 npm 或者 bower 安装：\n\t\t$ npm install validator\n\t\t// 或者 \n\t\t$ bower install validator-js\n\t\t\n\t\t// 使用示例：\n\t\t// 服务器端\n\t\tvar validator = require('validator');\n\t\tvalidator.isEmail('foo@bar.com'); //=> true\n\t\t\n\t\t// 客户端\n\t\t<script type=\"text/javascript\" src=\"validator.min.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t  validator.isEmail('foo@bar.com'); //=> true\n\t\t</script>\n\n[地址](https://github.com/chriso/validator.js\n)\t\t\n\t\n\t\t\n\t\t\n\t\t\n\n\n\t\n\t\n","html":"<h2 id=\"dns\">dns模块 解析域名</h2>\n\n<ul>\n<li><p>dns.resolve() 将一个域名解析为一组DNS记录</p></li>\n<li><p>dns.reverse() 将一个IP地址饥饿虚伪一组域名</p></li>\n<li><p>dns.lookup() 将一个域名转换为一个IP地址 </p>\n\n<pre><code>// rrtype即记录类型，默认为A，可选 A/AAAA/CNAME/MX/TXT/SRV/PTR/NS\n// A 将IPV4地址映射为域名\n// AAAA 将IPV6地址映射为域名\n// CNAME 别名解析，如 laispace.com 是 www.laispace.com 的别名\n// MX 邮件服务器解析\n// dns.resolve(domain, [rrtype], callback)\nvar dns = require('dns');\nvar domain = 'www.laispace.com';\ndns.resolve(domain, 'A', function (err, addresses) {\n    if (err) {\n        throw err;\n    }\n    console.log('域名解析结果为：\\n', addresses);\n})\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<pre><code>更便捷的方法：     \n\n    // 解析 A 记录\n    dns.resolve4(domain, callback)\n    // 解析 AAAA 记录\n    dns.resolve6(domain, callback)\n    // 解析 CNAME 记录\n    dns.resolveCname(domain, callback)\n    // 解析 MX 记录\n    dns.resolveMx(domain, callback)\n    // 解析 TXT 记录\n    dns.resolveTxt(domain, callback)\n    // 解析 SRV 记录\n    dns.resolveSrv(domain, callback)\n    // 解析 NS 记录\n    dns.resolveNs(domain, callback)\n\ndns.resolve() 回调中返回的是 一组地址数组 addresses\n\ndns.lookup() 则返回 addresses 中的第一个：\n\n    // family 默认为 null，即可取IPV4或IPV6， 若为 4 或 6，则取为 IPV4 或 IPV6\n    // dns.lookup(domain, [family], function (err, address, family) {})\n    var dns = require('dns');\n    var domain = 'www.laispace.com';\n    dns.lookup(domain, 4, function (err, address) {\n        if (err) {\n            throw err;\n        }\n        console.log('域名解析结果为：\\n', address)\n    })  \n\ndns.reverse() 则反过来解析IP地址为域名：\n\n    // dns.reverse(ip, callback)\n    var dns = require('dns');\n    var ip = '173.194.127.82';\n    dns.reverse(ip, function (err, domains) {\n        if (err) {\n            throw err;\n        }\n        console.log('IP解析结果为：\\n', domains);\n    })      \n</code></pre>\n\n<h2 id=\"os\">os模块 获取操作系统信息</h2>\n\n<pre><code>// 临时文件目录\nos.tmpdir() \n\n// CPU的字节序\nos.endianness()\n\n// 计算机名\nos.hostname\n\n// 操作系统类型\nos.type\n\n// 操作系统平台\nos.platform\n\n// CPS架构\nos.arch()\n\n// 操作系统版本号\nos.release()\n\n// 系统当前运行时间\nos.uptime()\n\n// 1、5、15分钟的系统平均负载\nos.loadavg()\n\n// 系统总内存，以字节为单位\nos.totalmem()\n\n// 系统空闲内存\nos.freemem()\n\n// CPS信息\nos.cpus()\n\n// 系统中所有网络接口\nos.networkInterfaces()\n\n// 系统使用的换行符\nos.EOL \n</code></pre>\n\n<h2 id=\"util\">util 模块 一些实用方法</h2>\n\n<pre><code>    // 格式化字符串\n    // util.format(format, [...])\n    util.format('输入%d个参数，分别为%s, %s和%s', 3, 'lai', 'xiao', 'lai');\n    %s 字符串参数\n    %d 数值参数\n    %j JSON对象\n    % 一个百分号\n\n    // debug输出标准错误流，同步方法，阻塞线程\n    // util.debug(string)\n    util.debug('出现错误！');\n\n    // error输出标准错误流，也是同步方法，阻塞线程\n    // util.error([...])\n    util.error(['error1', 'error2', 'error3'])\n\n    // puts输出标准输出流，也是同步方法，阻塞线程\n    // util.puts([...])\n    util.puts(['ouput1', 'output2', 'output3'])\n\n    // print输出标准输出流，也是同步方法，阻塞线程，输出后不产生新行\n    // util.print([...])\n    util.puts(['ouput1', 'output2', 'output3'])\n\n    // log输出标准输出流，前面会自动加上系统时间\n    // util.log(string)\n    util.log('Hello Lai!')\n\n    // inspect输出一个对象信息\n    // util.inspect(object, [options])\n    var obj = {\n        name: '小赖1',\n        child: {\n            name: '小赖2',\n            child: {\n                name: '小赖3'\n            }\n        },\n        sayHi: function () {console.log('Hi Lai!')}\n    }\n    util.inspect(obj, {showHidden: true});\n    // options = {\n    //  showHidden: 布尔值默认false，是否显示对象的不可枚举属性\n    //  depth: 整数，指定查看对象的信息的深度\n    //  colors: 布尔值默认false，是否输出时应用颜色高亮\n    //  customInspect: 布尔值默认为true，是否在查看对象信息时调用自定义的Inspect方法\n    // }\n    // 设置inspect的默认颜色\n    util.inspect.styles = {\n        number: 'yellow',\n        boolean: 'yellow',\n        string: 'green',\n        date: 'magenta',\n        regexp: 'red',\n        null: 'bold',\n        undefined: 'grey',\n        special: 'cyan'\n    }\n\n    // isArray 判断数组\n    // util.isArray(object)\n    util.isArray([1, 2, 3]);\n\n    // isRegExp 判断正则\n    // util.isRegExp(object)\n    util.isRegExp(/a regexp/);\n\n    // isDate 判断日期\n    // util.isDate(object)\n    util.isDate(new Date());\n\n    // isError 判断错误\n    // util.isError(object)\n    util.isError(new Error());\n\n    // inherits 将父类方法继承给子类\n    // util.inherits(constructor, superConstructor)\n    var util = require('util');\n    function Father() {}\n    Father.prototype = {\n        sayHi: function () {\n            console.log('Hi Lai');\n        }\n    }       \n    function Child() {}\n    // 继承方法\n    util.inherits(Child, Father);\n    // 生成实例\n    var child = new Child()\n    child.sayHi(); // =&gt; 'Hi Lai'\n</code></pre>\n\n<h2 id=\"validator\">validator模块 客户端/服务器端验证</h2>\n\n<pre><code>    // 使用 npm 或者 bower 安装：\n    $ npm install validator\n    // 或者 \n    $ bower install validator-js\n\n    // 使用示例：\n    // 服务器端\n    var validator = require('validator');\n    validator.isEmail('foo@bar.com'); //=&gt; true\n\n    // 客户端\n    &lt;script type=\"text/javascript\" src=\"validator.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      validator.isEmail('foo@bar.com'); //=&gt; true\n    &lt;/script&gt;\n</code></pre>\n\n<p>[地址](https://github.com/chriso/validator.js\n)        </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400060545000,"created_by":1,"updated_at":1400060545000,"updated_by":1,"published_at":1400060545000,"published_by":1},{"id":537,"uuid":"f307cbd4-09e1-4377-bb0d-4e1064360562","title":"Ubuntu下部署nodejs+mongodb","slug":"ubuntuxia-bu-shu-nodejsmongodb","markdown":"\n\n> 捣鼓阿里云上的VPS，入门Linux，记录一下部署 NodeJs+MongoDB 的过程\n\n1. [Ubuntu下安装NodeJS](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os)\n\n\t在 Ubuntu 12.04 ~ 13.04 中，默认安装的的 Node 版本是 0.6.x的\n\n\t\t$ sudo apt-get install nodejs\n\t\t$ sudo apt-get install npm\n\t\t$ node -v\n\t\t\n\t而在 Ubuntu 13.10 ~ 14.04 中则是 0.10.x 版本\n\t\n\t我的版本是旧版，所以需要使用这种方式来安装：\n\t\n\t\t$ sudo apt-get install software-properties-common\n\t\t$ sudo apt-get install python-software-properties\n\t\t// 安装以上两个包后才会有下面这个 add-apt-repository 命令：\n\t\t$ sudo add-apt-repository ppa:chris-lea/node.js\n\t\t$ sudo apt-get update\n\t\t$ sudo apt-get install python-software-properties python g++ make nodejs\n\t\t\n\n2. [Linux下安装MongoDB](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-linux/)\n\n<!-- more -->\n\n\t需要先导入mongodb.org的公钥到Ubuntu的包管理系统\n\t\n\t\t$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\t\n\t接着创建 /etc/apt/sources.list.d/mongodb.list 列表文件\n\t\n\t\t$ echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n\t\t\n\t然后先更新包管理系统\n\t\n\t\t$ sudp apt-get update\n\t\t\n\t更新完毕就可以安装 Mongodb-org 这个包了\n\t\n\t\t$ sudo apt-get install mongodb-org\n\t\n\t建立存放数据库的目录\n\t\t\n\t\t$ mkdir -p /data/db\n\t\n\t启动MongoDB\t\n\t\t\n\t\t$ sudo /usr/bin/mongod --dbpath /data/db\n\t\n\t启动 mongo shell \n\t\n\t\t$ /usr/bin/mongo\n\t\n\t\t// 建立一个新的数据库\n\t\t$ use newDb\n\t\t// 创建一个 users 集合并往集合中插入数据\n\t\t$ db.users.insert({name: '小赖', age: 18});\n\t\t// 查看是否插入成功\n\t\t$ db.users.find()\n\t\t// 显示 { \"_id\" : ObjectId(\"5381a71b30f9768d2d0a53e2\"), \"name\" : \"小赖\", \"age\" : 18 }\n\t\t// 成功！\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\t\t\n","html":"<blockquote>\n  <p>捣鼓阿里云上的VPS，入门Linux，记录一下部署 NodeJs+MongoDB 的过程</p>\n</blockquote>\n\n<ol>\n<li><p><a href=\"https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os\">Ubuntu下安装NodeJS</a></p>\n\n<p>在 Ubuntu 12.04 ~ 13.04 中，默认安装的的 Node 版本是 0.6.x的</p>\n\n<pre><code>$ sudo apt-get install nodejs\n$ sudo apt-get install npm\n$ node -v\n</code></pre>\n\n<p>而在 Ubuntu 13.10 ~ 14.04 中则是 0.10.x 版本</p>\n\n<p>我的版本是旧版，所以需要使用这种方式来安装：</p>\n\n<pre><code>$ sudo apt-get install software-properties-common\n$ sudo apt-get install python-software-properties\n// 安装以上两个包后才会有下面这个 add-apt-repository 命令：\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install python-software-properties python g++ make nodejs\n</code></pre></li>\n<li><p><a href=\"http://docs.mongodb.org/manual/tutorial/install-mongodb-on-linux/\">Linux下安装MongoDB</a></p></li>\n</ol>\n\n<!-- more -->\n\n<pre><code>需要先导入mongodb.org的公钥到Ubuntu的包管理系统\n\n    $ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n接着创建 /etc/apt/sources.list.d/mongodb.list 列表文件\n\n    $ echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n\n然后先更新包管理系统\n\n    $ sudp apt-get update\n\n更新完毕就可以安装 Mongodb-org 这个包了\n\n    $ sudo apt-get install mongodb-org\n\n建立存放数据库的目录\n\n    $ mkdir -p /data/db\n\n启动MongoDB   \n\n    $ sudo /usr/bin/mongod --dbpath /data/db\n\n启动 mongo shell \n\n    $ /usr/bin/mongo\n\n    // 建立一个新的数据库\n    $ use newDb\n    // 创建一个 users 集合并往集合中插入数据\n    $ db.users.insert({name: '小赖', age: 18});\n    // 查看是否插入成功\n    $ db.users.find()\n    // 显示 { \"_id\" : ObjectId(\"5381a71b30f9768d2d0a53e2\"), \"name\" : \"小赖\", \"age\" : 18 }\n    // 成功！\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1401032796000,"created_by":1,"updated_at":1401032796000,"updated_by":1,"published_at":1401032796000,"published_by":1},{"id":538,"uuid":"ed4288ce-320e-44d7-b720-984620f5e466","title":"web前端开发入门提高 js书籍","slug":"web-books","markdown":"\n\n<div class=\"entry\" style=\"padding: 0px; margin: 0px; list-style: none; border: none; line-height: 28px; word-break: break-all; word-wrap: break-word; text-indent: 10px; color: #666666; font-family: tahoma, arial, 宋体; font-size: 12px; background-color: #f3f3f2;\">\n\n**\nWEB前端研发工程师**，在国内算是一个朝阳职业，这个领域没有学校的正规教育，大多数人都是靠自己自学成才。本文主要介绍一些_web开发_的书籍，目的是给想了解JavaScript或者是刚接触JavaScript的朋友，介绍如何通过循序渐进的看书来学习javascript。\n\n一. 入门级 ：就是有一定的基础(比如最常见的HTML标签及其属性、事件、方法;最常见的CSS属性;基础的JavaScript编程能力)，能够完成一些简单的WEB前端需求。\n\n　　推荐：《_JavaScript dom 编程艺术_》\n\n　　理由：此书绝对是入门的好书，本人也是在接触JS一段时间后才看的这本书。此书从JS的历史 – JS基础语法知识 – DOM介绍和简单的使用。\n\n　　评价：简洁，实用，详细，易懂，书不厚，相信很快就能看完。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073035.html\n\n二.初级开发：不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程，就是这个级别的特征。\n\n　　推荐：《javascript高级程序设计》(第二版)\n\n　　理由：这本书的作者是 Nicholas C.Zakas ,博客地址是 http://www.nczonline.net/ ,大家可以去多关注，雅虎的前端工程师，是YUI的代码贡献者，可想而知这本书得含金量，他出的书都广受好评。这本书已经出了第二版，而且与第一版相比内容更新很大，直接第二版就行。不要被书名的“高级”唬住，只要有JS基础语法知识和DOM基础知识就行，而且本书开始阶段还是介绍JS和DOM的语法知识。\n\n　　评论：重点推荐一下第五章(类型),第六章(OOP),第七章(匿名),多看几遍,至少要完全看明白，能为以后进阶打好基础，个人感觉这几章是本书的精华所在。这本书在入门的时候看节奏会快了一些，所以不建议初学者看，可是相对于我一会要介绍的书又算基础一点，所以建议先阅读完这本书，对浏览器兼容和语法知识有一定了解之后再往下阅读。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073036.htm\n\n　　推荐：《高性能 JavaScript》《JavaScript语言精粹》\n\n　　理由：先看的是《高性能JS》，这本书还是 Nicholas C.Zakas 所著，经典之作，书中大量举例了各种不同写法的JavaScript在浏览器中的性能情况，对规范JavaScript代码和提升性能有很好的帮助，最后提到了很多工具和性能测试的方法，都是灰常灰常有实际作用的，看得出作者很厚道(好吧,偶承认了,偶是他的粉丝)^_^,记忆最深的一句话:”如果 JavaScript 执行了几秒钟,那么很可能是你做错了什么”;；\n\n　　　　《语言精髓》和《高性能》有少部分关键知识都重复提到了，可是为什么要推荐这本书，因为本书对JS语言本质的描述太棒了，这是一本介绍JavaScript语言本质的权威书籍，从 “对象”，“函数”，“继承”，“数组”等等多个重要知识着手。我补一句话 – 本书需要反复阅读。\n\n　　评论：都是好书，都很薄，而且所说的内容只要有基础都不难。相信读完之后会对JS又有新的认识，且对以后的代码规范和浏览器差异性等高级问题有了新的认识，如果读完之后会有种被灌顶的感觉，那么恭喜你，你离中级不远了。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073044.html\n\n三.中级开发：“中级开发人员的标志就是在高级开发或架构师较少的指导下高质量的完成工作，并对产品或项目有自己的想法与理解”。\n\n　　强烈推荐：《JavaScript DOM高级程序设计》\n\n　　理由：此书灰常犀利，本人一共看了近半年的时间，已反复阅读多次。说实话，这本书的翻译一般，代码也有少许错误，可是这不影响这本书的强大，通过学习本书，可以理解一个JS的库如何产生，自己动手写一个简单的自己的JS库，如果你打算研究其他的JS库或者正在研究其他的JS库，那么这本书会使你的理解达到新的高度，进阶高级必读，写库必读。\n\n　　评论：异常强大的一本JS巨作，此书不薄，强烈推荐。\n\n下载地址: 收集中\n\n　　强烈推荐：《JavaScript设计模式》\n\n　　理由：异常生猛的一本书，看书名带“设计模式”就知道，这本书想要读明白有点困难，本人自己感觉，只要某书一带“模式”这两字，反正就简单不了。本书对JS的“模仿接口”，“封装”，“继承”，“链式调用”，“工厂模式”等各种具体的设计模式及其在JavaScript 语言中的应用进行了详细的介绍，运用设计模式使代码更模块化、更高效并且更易维护。\n\n　　评论：书不厚，可真的是内容丰富且高深，强烈建议购买。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073049.html\n\n　　推荐：《高性能网站建设指南》《高性能网站建设进阶指南》\n\n　　理由：在读完前几本书之后我们对前端的性能和自己的代码的效率已经达到相当的高度了，然后我们在接触一些前端工程师的一些精髓。本书对HTTP请求，CDN，内容缓存和一些web开发中常见问题进行讲解。\n\n　　评论：书都不厚，可是说的都是比较实用的东西，可是用不用的上还得看个人和项目需要了。\n\n　　以上就是整理WEB前端开发前辈们的一些JS相关书籍，朋友会问，为什么就只介绍的中级的，那么高级看的书在哪？有木有高级的书？进阶高级程序员之路又在哪？说下我自己的看法和对年轻朋友的建议吧，说的不好或不对请原谅，其实我也才真正工作两年多：\n\n　　　　1.主要是工作经验问题。达到一定程度以后真的合适的书很难找了，更多只有在工作中总结和积累。工作的越久碰到过的问题也就越多，^_^。所以一般说高级程序员一般都是至少都3年以上的工作经验，没办法，实践才出真理。\n\n　　　　2.我觉得高级web前端灰常有必要总结一个自己的JS库，不管大小，总归有一套自己的东西（嘿嘿，如果认真的实践过《JS DOM高级》的内容，估计有一套JS库的原型了）。\n\n　　　　3.前端有必要懂得和熟悉一本服务端语言，其实计算机语言很多语法大致都差不多，不同的就是内置的方法和属性，所以去熟悉一门语言并不难。\n\n　　　　4.许多年轻人都有眼高手低的毛病，我也一样，例如，有的人认为自己编起程序来很顺手，不用查手册，说写就写，很熟练，几乎什么程序都能编出来，就认为自己对这种语言很精通了。其实对于一门语言的掌握程度是不可深测的，对于语言掌握其实是一个无止尽的过程，没有终点。编写时间的长短和编写熟练程度，仅仅是精通语言表现的一个方面。更重要的是程序员要掌握这个语言的适用范围，整体构架，语法规则、功能分类等基础理论方面的知识，并能利用这方面的知识，用最科学的方法去解决现实中各种项目的各个问题。\n\n</div>\n&nbsp;\n\n[原文链接](http://www.jqueryba.com/826.html)","html":"<div class=\"entry\" style=\"padding: 0px; margin: 0px; list-style: none; border: none; line-height: 28px; word-break: break-all; word-wrap: break-word; text-indent: 10px; color: #666666; font-family: tahoma, arial, 宋体; font-size: 12px; background-color: #f3f3f2;\">\n\n**\nWEB前端研发工程师**，在国内算是一个朝阳职业，这个领域没有学校的正规教育，大多数人都是靠自己自学成才。本文主要介绍一些_web开发_的书籍，目的是给想了解JavaScript或者是刚接触JavaScript的朋友，介绍如何通过循序渐进的看书来学习javascript。\n\n一. 入门级 ：就是有一定的基础(比如最常见的HTML标签及其属性、事件、方法;最常见的CSS属性;基础的JavaScript编程能力)，能够完成一些简单的WEB前端需求。\n\n　　推荐：《_JavaScript dom 编程艺术_》\n\n　　理由：此书绝对是入门的好书，本人也是在接触JS一段时间后才看的这本书。此书从JS的历史 – JS基础语法知识 – DOM介绍和简单的使用。\n\n　　评价：简洁，实用，详细，易懂，书不厚，相信很快就能看完。\n\n下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073035.html\">http://www.kuaipan.cn/file/id_66867997939073035.html</a>\n\n二.初级开发：不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程，就是这个级别的特征。\n\n　　推荐：《javascript高级程序设计》(第二版)\n\n　　理由：这本书的作者是 Nicholas C.Zakas ,博客地址是 <a href=\"http://www.nczonline.net/\">http://www.nczonline.net/</a> ,大家可以去多关注，雅虎的前端工程师，是YUI的代码贡献者，可想而知这本书得含金量，他出的书都广受好评。这本书已经出了第二版，而且与第一版相比内容更新很大，直接第二版就行。不要被书名的“高级”唬住，只要有JS基础语法知识和DOM基础知识就行，而且本书开始阶段还是介绍JS和DOM的语法知识。\n\n　　评论：重点推荐一下第五章(类型),第六章(OOP),第七章(匿名),多看几遍,至少要完全看明白，能为以后进阶打好基础，个人感觉这几章是本书的精华所在。这本书在入门的时候看节奏会快了一些，所以不建议初学者看，可是相对于我一会要介绍的书又算基础一点，所以建议先阅读完这本书，对浏览器兼容和语法知识有一定了解之后再往下阅读。\n\n下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073036.htm\">http://www.kuaipan.cn/file/id_66867997939073036.htm</a>\n\n　　推荐：《高性能 JavaScript》《JavaScript语言精粹》\n\n　　理由：先看的是《高性能JS》，这本书还是 Nicholas C.Zakas 所著，经典之作，书中大量举例了各种不同写法的JavaScript在浏览器中的性能情况，对规范JavaScript代码和提升性能有很好的帮助，最后提到了很多工具和性能测试的方法，都是灰常灰常有实际作用的，看得出作者很厚道(好吧,偶承认了,偶是他的粉丝)^_^,记忆最深的一句话:”如果 JavaScript 执行了几秒钟,那么很可能是你做错了什么”;；\n\n　　　　《语言精髓》和《高性能》有少部分关键知识都重复提到了，可是为什么要推荐这本书，因为本书对JS语言本质的描述太棒了，这是一本介绍JavaScript语言本质的权威书籍，从 “对象”，“函数”，“继承”，“数组”等等多个重要知识着手。我补一句话 – 本书需要反复阅读。\n\n　　评论：都是好书，都很薄，而且所说的内容只要有基础都不难。相信读完之后会对JS又有新的认识，且对以后的代码规范和浏览器差异性等高级问题有了新的认识，如果读完之后会有种被灌顶的感觉，那么恭喜你，你离中级不远了。\n\n下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073044.html\">http://www.kuaipan.cn/file/id_66867997939073044.html</a>\n\n三.中级开发：“中级开发人员的标志就是在高级开发或架构师较少的指导下高质量的完成工作，并对产品或项目有自己的想法与理解”。\n\n　　强烈推荐：《JavaScript DOM高级程序设计》\n\n　　理由：此书灰常犀利，本人一共看了近半年的时间，已反复阅读多次。说实话，这本书的翻译一般，代码也有少许错误，可是这不影响这本书的强大，通过学习本书，可以理解一个JS的库如何产生，自己动手写一个简单的自己的JS库，如果你打算研究其他的JS库或者正在研究其他的JS库，那么这本书会使你的理解达到新的高度，进阶高级必读，写库必读。\n\n　　评论：异常强大的一本JS巨作，此书不薄，强烈推荐。\n\n下载地址: 收集中\n\n　　强烈推荐：《JavaScript设计模式》\n\n　　理由：异常生猛的一本书，看书名带“设计模式”就知道，这本书想要读明白有点困难，本人自己感觉，只要某书一带“模式”这两字，反正就简单不了。本书对JS的“模仿接口”，“封装”，“继承”，“链式调用”，“工厂模式”等各种具体的设计模式及其在JavaScript 语言中的应用进行了详细的介绍，运用设计模式使代码更模块化、更高效并且更易维护。\n\n　　评论：书不厚，可真的是内容丰富且高深，强烈建议购买。\n\n下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073049.html\">http://www.kuaipan.cn/file/id_66867997939073049.html</a>\n\n　　推荐：《高性能网站建设指南》《高性能网站建设进阶指南》\n\n　　理由：在读完前几本书之后我们对前端的性能和自己的代码的效率已经达到相当的高度了，然后我们在接触一些前端工程师的一些精髓。本书对HTTP请求，CDN，内容缓存和一些web开发中常见问题进行讲解。\n\n　　评论：书都不厚，可是说的都是比较实用的东西，可是用不用的上还得看个人和项目需要了。\n\n　　以上就是整理WEB前端开发前辈们的一些JS相关书籍，朋友会问，为什么就只介绍的中级的，那么高级看的书在哪？有木有高级的书？进阶高级程序员之路又在哪？说下我自己的看法和对年轻朋友的建议吧，说的不好或不对请原谅，其实我也才真正工作两年多：\n\n　　　　1.主要是工作经验问题。达到一定程度以后真的合适的书很难找了，更多只有在工作中总结和积累。工作的越久碰到过的问题也就越多，^_^。所以一般说高级程序员一般都是至少都3年以上的工作经验，没办法，实践才出真理。\n\n　　　　2.我觉得高级web前端灰常有必要总结一个自己的JS库，不管大小，总归有一套自己的东西（嘿嘿，如果认真的实践过《JS DOM高级》的内容，估计有一套JS库的原型了）。\n\n　　　　3.前端有必要懂得和熟悉一本服务端语言，其实计算机语言很多语法大致都差不多，不同的就是内置的方法和属性，所以去熟悉一门语言并不难。\n\n　　　　4.许多年轻人都有眼高手低的毛病，我也一样，例如，有的人认为自己编起程序来很顺手，不用查手册，说写就写，很熟练，几乎什么程序都能编出来，就认为自己对这种语言很精通了。其实对于一门语言的掌握程度是不可深测的，对于语言掌握其实是一个无止尽的过程，没有终点。编写时间的长短和编写熟练程度，仅仅是精通语言表现的一个方面。更重要的是程序员要掌握这个语言的适用范围，整体构架，语法规则、功能分类等基础理论方面的知识，并能利用这方面的知识，用最科学的方法去解决现实中各种项目的各个问题。\n\n</div>  \n\n<p>&nbsp;</p>\n\n<p><a href=\"http://www.jqueryba.com/826.html\">原文链接</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1353455998000,"created_by":1,"updated_at":1353455998000,"updated_by":1,"published_at":1353455998000,"published_by":1},{"id":539,"uuid":"70dc120c-1cd0-4bbf-a1cf-281e39e6d596","title":"wordpress for SAE 搬家心得","slug":"migrate-from-wordpress-to-sae","markdown":"\n\n原来[laispace.com](http://www.laispace.com) 用的便宜香港空间，速度实在太慢忍受不了了！小赖尝试将wordpress从自己主机上搬迁到SAE上，提高访问速度，总结步骤如下：\n\n1.备份文章内容\n\n进入laispace【后台】-【工具】-【导出】，选择【所有内容】-【下载导出的文件】生成一个laispace.xml文件到本地\n\n2.备份数据库内容\n\n进入laispace phpMyAdmin 【数据库名】-【导出】，生成一个laispace.sql文件到本地\n\n<!-- more -->\n\n3.SAE上安装wordpress\n\nSAE上安装worpress有很多权限问题，所以不能直接安装wordpress.org下载的安装包，需要在这里下载[WordPress for SAE](http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1 \"点击进入SAE下载wordpress\")安装\n\n4.SAE上导入文章等数据\n\n安装[WordPress for SAE](http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1 \"点击进入SAE下载wordpress\")成功后，进入sae wordpress【后台】-【工具】-【导入】，选择【Wordpress】将步骤2中的laipace.xml上传并导入，这一步可导入wordpress的文章内容等信息\n\n5.SAE上导入wordpress设置\n\nwordpress的很多设置是保存在数据库中的，单纯按步骤1备份只能备份文章的内容，要包括后台设置（如导航栏设置，用户信息）整站搬迁，需要进入SAE账户后台[http://sae.sina.com.cn/](http://sae.sina.com.cn/) 【服务管理】-【MySQL】-【SQL管理】-【管理SQL】，将步骤2中的laispace.sql上传并导入，这一步可导入评论、链接、标签、用户信息等详细设置\n\n6.修改博客路径SiteUrl\n\n紧接着步骤5，在数据库中找到数据表wp_options，将siteurl从http://www.laispace.com 修改为 http://xiaolai.sinaapp.com\n\n这一步可让博客里的相对链接跳转正确\n\n7.使用SVN上传插件、主题、附件\n\n前面说到，Wordpress for SAE限制了很多权限，无法直接在上面安装主题、插件等，需要自己备份laispace中的plugins、themes、uploads上传到SAE中，方法是使用SVN。先用FTP工具从laispace主机中将wp-content文件夹中的plugins、themes、uploads打包下载到本地，再使用SVN将这几个文件夹覆盖到Wordpress for SAE中，然后进入wordpress后台，启用主题、配置插件。注意，这里的uploads文件夹是使用laispace时上传的附件，将其上传到Wordpress for SAE后，才能在文章中正确显示那些附件（如图片）。PS：如此上传附件可能麻烦，可考虑SAE的Storge服务或者其他的云存储服务。\n\n经此折腾，我就把laispace.com整站搬迁到xiaolai.sinaapp.com啦！SAE好处多多，最大的亮点当然访问速度是比我使用收费的香港空间快多了（该死的校园网，还不能访问这个香港空间）！\n\n8.添加独立域名\n\n在SAE应用后台中进行【独立域名设置】，把www.laispace.com绑定到SAE的服务器中，这么一来输入www.laispace.com就可以跳转到托管到SAE上的wordpress但链接仍显示www.laispace.com了，但设置这个的时候发现，在我的域名设置中（万网域名），能将www.laispace.com或abc.laispace.com等域名CNAME到SAE服务器，但万网不提供给我的主域名laispace.com CNAME解析，即浏览器栏直接输入laispace.com将不能访问！这可是个致命的问题。\n\n9.修改DNS解析\n\ngoogle了好久，发现dnspod的域名解析服务，于是在[dnspod官网](www.dnspod.cn)注册后，获得dnspod的域名DNS，然后到万网【域名管理】-【域名DNS修改】，将万网的DNS修改为dnspod的DNS，直接在dnspod中管理域名解析。将主域名laispace.com CNAME到SAE服务器上，这么一来，输入地址laispace.com就可以直接访问了！\n\n说明，写此文时小赖安装的Wordpress for SAE版本是 SAE 3.4.1 测试版\n\n附一些参考资料：\n\nSAE官网 [http://sae.sina.com.cn](http://sae.sina.com.cn/)\n\nWordpress for SAE 官方 [http://wp4sae.org/](http://wp4sae.org/)\n\nSAE部署SVN指南 [http://sae.sina.com.cn/?m=devcenter&amp;catId=212](http://sae.sina.com.cn/?m=devcenter&amp;catId=212)","html":"<p>原来<a href=\"http://www.laispace.com\">laispace.com</a> 用的便宜香港空间，速度实在太慢忍受不了了！小赖尝试将wordpress从自己主机上搬迁到SAE上，提高访问速度，总结步骤如下：</p>\n\n<p>1.备份文章内容</p>\n\n<p>进入laispace【后台】-【工具】-【导出】，选择【所有内容】-【下载导出的文件】生成一个laispace.xml文件到本地</p>\n\n<p>2.备份数据库内容</p>\n\n<p>进入laispace phpMyAdmin 【数据库名】-【导出】，生成一个laispace.sql文件到本地</p>\n\n<!-- more -->\n\n<p>3.SAE上安装wordpress</p>\n\n<p>SAE上安装worpress有很多权限问题，所以不能直接安装wordpress.org下载的安装包，需要在这里下载<a href=\"http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1\" title=\"点击进入SAE下载wordpress\">WordPress for SAE</a>安装</p>\n\n<p>4.SAE上导入文章等数据</p>\n\n<p>安装<a href=\"http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1\" title=\"点击进入SAE下载wordpress\">WordPress for SAE</a>成功后，进入sae wordpress【后台】-【工具】-【导入】，选择【Wordpress】将步骤2中的laipace.xml上传并导入，这一步可导入wordpress的文章内容等信息</p>\n\n<p>5.SAE上导入wordpress设置</p>\n\n<p>wordpress的很多设置是保存在数据库中的，单纯按步骤1备份只能备份文章的内容，要包括后台设置（如导航栏设置，用户信息）整站搬迁，需要进入SAE账户后台<a href=\"http://sae.sina.com.cn/\">http://sae.sina.com.cn/</a> 【服务管理】-【MySQL】-【SQL管理】-【管理SQL】，将步骤2中的laispace.sql上传并导入，这一步可导入评论、链接、标签、用户信息等详细设置</p>\n\n<p>6.修改博客路径SiteUrl</p>\n\n<p>紧接着步骤5，在数据库中找到数据表wp_options，将siteurl从<a href=\"http://www.laispace.com\">http://www.laispace.com</a> 修改为 <a href=\"http://xiaolai.sinaapp.com\">http://xiaolai.sinaapp.com</a></p>\n\n<p>这一步可让博客里的相对链接跳转正确</p>\n\n<p>7.使用SVN上传插件、主题、附件</p>\n\n<p>前面说到，Wordpress for SAE限制了很多权限，无法直接在上面安装主题、插件等，需要自己备份laispace中的plugins、themes、uploads上传到SAE中，方法是使用SVN。先用FTP工具从laispace主机中将wp-content文件夹中的plugins、themes、uploads打包下载到本地，再使用SVN将这几个文件夹覆盖到Wordpress for SAE中，然后进入wordpress后台，启用主题、配置插件。注意，这里的uploads文件夹是使用laispace时上传的附件，将其上传到Wordpress for SAE后，才能在文章中正确显示那些附件（如图片）。PS：如此上传附件可能麻烦，可考虑SAE的Storge服务或者其他的云存储服务。</p>\n\n<p>经此折腾，我就把laispace.com整站搬迁到xiaolai.sinaapp.com啦！SAE好处多多，最大的亮点当然访问速度是比我使用收费的香港空间快多了（该死的校园网，还不能访问这个香港空间）！</p>\n\n<p>8.添加独立域名</p>\n\n<p>在SAE应用后台中进行【独立域名设置】，把www.laispace.com绑定到SAE的服务器中，这么一来输入www.laispace.com就可以跳转到托管到SAE上的wordpress但链接仍显示www.laispace.com了，但设置这个的时候发现，在我的域名设置中（万网域名），能将www.laispace.com或abc.laispace.com等域名CNAME到SAE服务器，但万网不提供给我的主域名laispace.com CNAME解析，即浏览器栏直接输入laispace.com将不能访问！这可是个致命的问题。</p>\n\n<p>9.修改DNS解析</p>\n\n<p>google了好久，发现dnspod的域名解析服务，于是在<a href=\"www.dnspod.cn\">dnspod官网</a>注册后，获得dnspod的域名DNS，然后到万网【域名管理】-【域名DNS修改】，将万网的DNS修改为dnspod的DNS，直接在dnspod中管理域名解析。将主域名laispace.com CNAME到SAE服务器上，这么一来，输入地址laispace.com就可以直接访问了！</p>\n\n<p>说明，写此文时小赖安装的Wordpress for SAE版本是 SAE 3.4.1 测试版</p>\n\n<p>附一些参考资料：</p>\n\n<p>SAE官网 <a href=\"http://sae.sina.com.cn/\">http://sae.sina.com.cn</a></p>\n\n<p>Wordpress for SAE 官方 <a href=\"http://wp4sae.org/\">http://wp4sae.org/</a></p>\n\n<p>SAE部署SVN指南 <a href=\"http://sae.sina.com.cn/?m=devcenter&amp;catId=212\">http://sae.sina.com.cn/?m=devcenter&amp;catId=212</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1370427617000,"created_by":1,"updated_at":1370427617000,"updated_by":1,"published_at":1370427617000,"published_by":1},{"id":540,"uuid":"8072fdeb-5e38-4b29-9987-85239c1fc49f","title":"《JavaScript精粹》笔记","slug":"javascriptjing-cui-bi-ji","markdown":"\n\n#2.1空白\n\n用空格来分隔字符序列,使代码美观\n<pre class=\"brush:javascript\">var that = this;</pre>\njavascript的两种注释，注释一定要精确地描述代码。\n\njavascript中的/*注释*/对代码来说并不安全，故用//来代替。\n\n&nbsp;\n\n#2.2标示符\n\njavascript不允许用保留字来命名变量、参数和属性。\n\n即标示符用于语句、变量、参数、属性名和标记。\n\n&nbsp;\n\n#2.3数字\n\n1.javascript只有单一的数字类型（64位的浮点数），避免了短整数溢出的问题和音数字类型导致的错误。\n\nNaN不等于任何值，可用函数isNaN(number)来检测。\n\n2.数字拥有方法。Math包含一套作用于数字的方法。\n\n&nbsp;\n\n#2.4字符串\n\n1.javascript创建的字符都是16位的（Unicode字符集）。\n\n2.javascript没有字符类型，要显示一个字符，只需要创建一个仅包含字符的字符串。\n\n3.转义字符允许把正常情况下不被允许的字符插入到字符串中，如\"\\u0041\"代表十六进制的数字\n\n4.字符串是不可变的，一旦被创建就无法改变，但能通过 + 运算符去连接其他字符串而得到新的字符串\n\n'c' + 'a' + 't' === 'cat'是true（包含完全相同的字符且字符顺序相同）\n\n5.字符串存在一些方法，如：\n<pre class=\"brush:javascript\">' cat '.toUpperCase() === 'CAT'</pre>\n&nbsp;\n\n#2.5语句\n\nweb浏览器缺少链接器，故javascript把语句抛入一个公共的全局名字空间中。\n\n1.var语句呗用在函数内部时，定义了这个函数的私有变量。\n\n2.switch、while、for和do语句允许有一个可选的前置标签（label），配合break使用\n\n3.javascript的代码块不会创建新的作用域，因此变量应该被定义在函数的顶端而不是代码块中\n\n4.以下值为假值（falsy）:\n\nfalse/null/undefined/空字符串 ' ' /数字 0 /数字 NaN\n\n其余所有值当做真值，包括true/\"false\"以及所有的对象\n\n#2.6表达式\n\n&nbsp;\n\n#2.7字面量\n\n&nbsp;\n\n#2.8函数\n\n&nbsp;\n\n&nbsp;\n\n#3对象\n\n数字/字符串/布尔值拥有方法,但都是不可变的.\n\njavascript中的对象是可变的键控集合(keyed collections)\n\njavascript中的对象是无类别的(class-free),对新属性的名字和值没有约束.\n\n对象适合收集和管理数据,可包含其他对象,容易表示成树形或图形结构.\n\njavascript包括一个原型链特性,允许对象继承.正确使用它能减少对象初始化的时间和内存消耗.\n\n#3.1对象字面量\n\n1.对象字面量就是包围在一对花括号中的 \" 名/值 \" 对.\n\n2.对象字面量中，若属性名是一个合法的标示符且不是保留字，并不强制要求用引号括住属性名。故用“first-name”是必须的，但是否括住first_name则是可选的。\n\n3.逗号用来分隔多个\"名/值\"对.\n\n4.属性的值可以从包括另一个对象字面量在内的任意表达式中获得，对象是可嵌套的：\n<pre class=\"brush:javascript\">var flight = {\n\nairline: \"Oceanic\",\n\nnumber: 815,\n\ndeparture: {\n\nIATA: \"SYD\",\n\ntime: \"2012-08-25 11:12\",\n\ncity: \"Guangzhou\"\n\n},\n\narrial: {\n\nIATA: \"LAX\",\n\ntime: \"2012-08-25 23:24\",\n\ncity: \"Nanjing\"\n\n}\n\n};</pre>\n&nbsp;\n\n#3.2检索\n\n1.采用在[ ]后缀中括住一个字符串表达式的方式。\n\n2.优先考虑  . 表示法（更紧凑且可读性好）。\n<pre class=\"brush:javascript\">stooges[\"first-name\"]\n\nflight.departure.IATA</pre>\n&nbsp;\n\n3.检索一个并不存在的成员元素的值，则返回undefined值。\n\n4.||运算符可用来填充默认值\n<pre class=\"brush:javascript\">var middle = stooges[\"middle-name\"] || \"(none)\";\n\nvar status = flight.status || \"unknown\";</pre>\n&nbsp;\n\n5.检索一个undefined值会导致TypeError异常，但可用 &amp;&amp; 运算符来避免错误\n<div>\n<pre class=\"brush:other\">flight.equipment //undefined\n\nflight.equipment.model  //throw \"TypeError\"\n\nflight.equipment &amp;&amp; flight.equipment.model  //undefined</pre>\n&nbsp;\n\n</div>\n#3.3更新\n\n对象中的值通过赋值语句来更新。\n\n&nbsp;\n\n#3.4引用\n\n对象通过引用来传递，但永远不会被拷贝。\n\n&nbsp;\n\n&nbsp;\n\n#3.5原型\n\n1.所有通过对象字面量创建的对象都连接到Object.prototype这个对象。\n\n2.javascript提供的实现机制复杂而杂乱，但其实可以被明显地简化 。\n\n3.给Object增加一个beget方法，创建一个使用原对象作为其原型的新对象。\n\n4.原型连接在更新时是不起作用的，当对某个对象做出改变时，不会触及该对象的原型。\n\n5.原型连接只在检索值的时候才被用到。\n\n6.若想要的属性完全不存在于原型链中，结果就是undefined值，这个过程称为【委托】\n\n7.原型关系是动态的，若将新属性添加到原型中，该属性会立刻对所有基于该原型创建的对象可见。\n\n&nbsp;\n\n#3.6反射\n\n1.typeof操作确定属性的类型：\n<div>\n<pre class=\"brush:other\">typeof flight.number // ' number '\n\ntypeof flight.status // ' string '\n\ntypeof flight.arrival // ' object '\n\ntypeof flight.manifest // ' undefined '</pre>\n&nbsp;\n\n</div>\n2.做反射的目标是数据，故应意识到一些值可能会是函数\n\n3.hasOwnProperty方法：若对象拥有独有的属性，将返回true。该方法不会检查原型链。\n<div>\n<pre class=\"brush:other\">flight.hasOwnProperty( 'number' )  //true\n\nflight.hasOwnProperty('constructor') //false</pre>\n&nbsp;\n\n</div>\n#3.7枚举\n\n1.for in 语句用来遍历对象中的所有属性名。\n\n2.for in 语句会枚举所有属性，包括原型中的属性\n\n3.用hasOwnProperty方法做过滤器过滤掉不想要的值，用typeof来排除函数：\n<pre class=\"brush:javascript\">var name;\n\nfor (name in another_stooge) {\n\nif (typeof another_stooge[name] !== 'function') {\n\ndocument.writeln(name + ': ' + another_stooge[name]);\n\n}\n\n}</pre>\n&nbsp;\n\n4.属性名出线的顺序是不确定的，故要对任何可能出线的顺序有所准备。\n\n5.要以特定顺序出线，则避免使用for in 语句，而是创建一个数组，在其中以正确的顺序包含属性名：\n<pre class=\"brush:javascript\">var i;\n\nvar properties = ['first-name','middle-name','last-name','profession'];\n\nfor (i=0;i&lt;properties.length; i +=1) {\n\ndocument.writeln(properties[i] + ': ' +another_stooge[properties[i]]);\n\n}</pre>\n&nbsp;\n\n#3.8删除\n\ndelete运算符用来删除对象的属性，移除对象中确定包含的属性，不会触及原型链中的任何对象。\n\n删除对象的属性可能会让来自原型链中的属性浮现出来:\n<pre class=\"brush:javascript\">another_stooge.nickname //'nickname1'\n\n//删除another_stooge中的nickname属性，从而暴露出原型的nickname属性\n\ndelete another_stooge.nickname;\n\nanother_stooge.nickname //'nickname0'</pre>\n&nbsp;\n\n#3.9减少全局变量污染\n\n全局变量削弱的程序的灵活性，故应该避免。\n\n1.最小化使用全局变量的一个方法是在应用中值创建唯一一个全局变量：\n<pre class=\"brush:javascript\">var MYAPP = {};</pre>\n&nbsp;\n\n该变量此时变成应用的容器，只要把多个全局变量都整理在一个名称空间下，将能降低一其他应用程序、组建或类库之间产生糟糕的相互影响。\n\n&nbsp;\n\n2.用闭包来进行信息隐藏的方式，是另一个减少全局污染的方法。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n#4\n\n#4.1函数对象\n\n1.对象是\"名/值\"对的集合并拥有一个连到原型对象的隐藏连接。\n\n2.对象字面量产生的对象连接到Object.prototype,函数对象连接到Function.prototype.\n\n3.每个函数在创建时附有两个隐藏属性：函数的上下文和实现函数行为的代码。\n\n4.每个函数对象创建时也附带有一个prorotype属性，它的值是一个拥有construction属性并且值为该函数的对象。\n\n5.注意函数是对象，拥有对象的一些性质如方法等。\n\n6.函数的与众不同之处在于它们可以被调用。javascript在创建一个函数对象时，会设置一个“调用”属性。\n\n&nbsp;\n\n#4.2函数字面量\n\n1.通过函数字面量来创建函数对象：\n<pre class=\"brush:javascript\">var add = function (a,b) {\n\nreturn a + b;\n\n};//创建一个名为add得到变量并把两个数字相加的函数赋值给它。</pre>\n&nbsp;\n\n2.通过函数字面量创建的函数对象包含一个连到外部上下文的连接，这称为闭包","html":"<h1 id=\"21\">2.1空白</h1>\n\n<p>用空格来分隔字符序列,使代码美观</p>\n\n<pre class=\"brush:javascript\">var that = this;</pre>  \n\n<p>javascript的两种注释，注释一定要精确地描述代码。</p>\n\n<p>javascript中的/<em>注释</em>/对代码来说并不安全，故用//来代替。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"22\">2.2标示符</h1>\n\n<p>javascript不允许用保留字来命名变量、参数和属性。</p>\n\n<p>即标示符用于语句、变量、参数、属性名和标记。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"23\">2.3数字</h1>\n\n<p>1.javascript只有单一的数字类型（64位的浮点数），避免了短整数溢出的问题和音数字类型导致的错误。</p>\n\n<p>NaN不等于任何值，可用函数isNaN(number)来检测。</p>\n\n<p>2.数字拥有方法。Math包含一套作用于数字的方法。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"24\">2.4字符串</h1>\n\n<p>1.javascript创建的字符都是16位的（Unicode字符集）。</p>\n\n<p>2.javascript没有字符类型，要显示一个字符，只需要创建一个仅包含字符的字符串。</p>\n\n<p>3.转义字符允许把正常情况下不被允许的字符插入到字符串中，如\"\\u0041\"代表十六进制的数字</p>\n\n<p>4.字符串是不可变的，一旦被创建就无法改变，但能通过 + 运算符去连接其他字符串而得到新的字符串</p>\n\n<p>'c' + 'a' + 't' <mark>= 'cat'是true（包含完全相同的字符且字符顺序相同）</p>\n\n<p>5.字符串存在一些方法，如：  </p>\n\n<pre class=\"brush:javascript\">' cat '.toUpperCase() </mark>= 'CAT'</pre>  \n\n<p>&nbsp;</p>\n\n<h1 id=\"25\">2.5语句</h1>\n\n<p>web浏览器缺少链接器，故javascript把语句抛入一个公共的全局名字空间中。</p>\n\n<p>1.var语句呗用在函数内部时，定义了这个函数的私有变量。</p>\n\n<p>2.switch、while、for和do语句允许有一个可选的前置标签（label），配合break使用</p>\n\n<p>3.javascript的代码块不会创建新的作用域，因此变量应该被定义在函数的顶端而不是代码块中</p>\n\n<p>4.以下值为假值（falsy）:</p>\n\n<p>false/null/undefined/空字符串 ' ' /数字 0 /数字 NaN</p>\n\n<p>其余所有值当做真值，包括true/\"false\"以及所有的对象</p>\n\n<h1 id=\"26\">2.6表达式</h1>\n\n<p>&nbsp;</p>\n\n<h1 id=\"27\">2.7字面量</h1>\n\n<p>&nbsp;</p>\n\n<h1 id=\"28\">2.8函数</h1>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"3\">3对象</h1>\n\n<p>数字/字符串/布尔值拥有方法,但都是不可变的.</p>\n\n<p>javascript中的对象是可变的键控集合(keyed collections)</p>\n\n<p>javascript中的对象是无类别的(class-free),对新属性的名字和值没有约束.</p>\n\n<p>对象适合收集和管理数据,可包含其他对象,容易表示成树形或图形结构.</p>\n\n<p>javascript包括一个原型链特性,允许对象继承.正确使用它能减少对象初始化的时间和内存消耗.</p>\n\n<h1 id=\"31\">3.1对象字面量</h1>\n\n<p>1.对象字面量就是包围在一对花括号中的 \" 名/值 \" 对.</p>\n\n<p>2.对象字面量中，若属性名是一个合法的标示符且不是保留字，并不强制要求用引号括住属性名。故用“first-name”是必须的，但是否括住first_name则是可选的。</p>\n\n<p>3.逗号用来分隔多个\"名/值\"对.</p>\n\n<p>4.属性的值可以从包括另一个对象字面量在内的任意表达式中获得，对象是可嵌套的：  </p>\n\n<pre class=\"brush:javascript\">var flight = {\n\nairline: \"Oceanic\",\n\nnumber: 815,\n\ndeparture: {\n\nIATA: \"SYD\",\n\ntime: \"2012-08-25 11:12\",\n\ncity: \"Guangzhou\"\n\n},\n\narrial: {\n\nIATA: \"LAX\",\n\ntime: \"2012-08-25 23:24\",\n\ncity: \"Nanjing\"\n\n}\n\n};</pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"32\">3.2检索</h1>\n\n<p>1.采用在[ ]后缀中括住一个字符串表达式的方式。</p>\n\n<p>2.优先考虑  . 表示法（更紧凑且可读性好）。  </p>\n\n<pre class=\"brush:javascript\">stooges[\"first-name\"]\n\nflight.departure.IATA</pre>  \n\n<p>&nbsp;</p>\n\n<p>3.检索一个并不存在的成员元素的值，则返回undefined值。</p>\n\n<p>4.||运算符可用来填充默认值  </p>\n\n<pre class=\"brush:javascript\">var middle = stooges[\"middle-name\"] || \"(none)\";\n\nvar status = flight.status || \"unknown\";</pre>  \n\n<p>&nbsp;</p>\n\n<p>5.检索一个undefined值会导致TypeError异常，但可用 &amp;&amp; 运算符来避免错误  </p>\n\n<div>  \n<pre class=\"brush:other\">flight.equipment //undefined\n\nflight.equipment.model  //throw \"TypeError\"\n\nflight.equipment &amp;&amp; flight.equipment.model  //undefined</pre>  \n&nbsp;\n\n</div>  \n\n<h1 id=\"33\">3.3更新</h1>\n\n<p>对象中的值通过赋值语句来更新。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"34\">3.4引用</h1>\n\n<p>对象通过引用来传递，但永远不会被拷贝。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"35\">3.5原型</h1>\n\n<p>1.所有通过对象字面量创建的对象都连接到Object.prototype这个对象。</p>\n\n<p>2.javascript提供的实现机制复杂而杂乱，但其实可以被明显地简化 。</p>\n\n<p>3.给Object增加一个beget方法，创建一个使用原对象作为其原型的新对象。</p>\n\n<p>4.原型连接在更新时是不起作用的，当对某个对象做出改变时，不会触及该对象的原型。</p>\n\n<p>5.原型连接只在检索值的时候才被用到。</p>\n\n<p>6.若想要的属性完全不存在于原型链中，结果就是undefined值，这个过程称为【委托】</p>\n\n<p>7.原型关系是动态的，若将新属性添加到原型中，该属性会立刻对所有基于该原型创建的对象可见。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"36\">3.6反射</h1>\n\n<p>1.typeof操作确定属性的类型：  </p>\n\n<div>  \n<pre class=\"brush:other\">typeof flight.number // ' number '\n\ntypeof flight.status // ' string '\n\ntypeof flight.arrival // ' object '\n\ntypeof flight.manifest // ' undefined '</pre>  \n&nbsp;\n\n</div>  \n\n<p>2.做反射的目标是数据，故应意识到一些值可能会是函数</p>\n\n<p>3.hasOwnProperty方法：若对象拥有独有的属性，将返回true。该方法不会检查原型链。  </p>\n\n<div>  \n<pre class=\"brush:other\">flight.hasOwnProperty( 'number' )  //true\n\nflight.hasOwnProperty('constructor') //false</pre>  \n&nbsp;\n\n</div>  \n\n<h1 id=\"37\">3.7枚举</h1>\n\n<p>1.for in 语句用来遍历对象中的所有属性名。</p>\n\n<p>2.for in 语句会枚举所有属性，包括原型中的属性</p>\n\n<p>3.用hasOwnProperty方法做过滤器过滤掉不想要的值，用typeof来排除函数：  </p>\n\n<pre class=\"brush:javascript\">var name;\n\nfor (name in another_stooge) {\n\nif (typeof another_stooge[name] !== 'function') {\n\ndocument.writeln(name + ': ' + another_stooge[name]);\n\n}\n\n}</pre>\n\n<p>&nbsp;</p>\n\n<p>4.属性名出线的顺序是不确定的，故要对任何可能出线的顺序有所准备。</p>\n\n<p>5.要以特定顺序出线，则避免使用for in 语句，而是创建一个数组，在其中以正确的顺序包含属性名：  </p>\n\n<pre class=\"brush:javascript\">var i;\n\nvar properties = ['first-name','middle-name','last-name','profession'];\n\nfor (i=0;i&lt;properties.length; i +=1) {\n\ndocument.writeln(properties[i] + ': ' +another_stooge[properties[i]]);\n\n}</pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"38\">3.8删除</h1>\n\n<p>delete运算符用来删除对象的属性，移除对象中确定包含的属性，不会触及原型链中的任何对象。</p>\n\n<p>删除对象的属性可能会让来自原型链中的属性浮现出来:</p>\n\n<pre class=\"brush:javascript\">another_stooge.nickname //'nickname1'\n\n//删除another_stooge中的nickname属性，从而暴露出原型的nickname属性\n\ndelete another_stooge.nickname;\n\nanother_stooge.nickname //'nickname0'</pre>  \n\n<p>&nbsp;</p>\n\n<h1 id=\"39\">3.9减少全局变量污染</h1>\n\n<p>全局变量削弱的程序的灵活性，故应该避免。</p>\n\n<p>1.最小化使用全局变量的一个方法是在应用中值创建唯一一个全局变量：  </p>\n\n<pre class=\"brush:javascript\">var MYAPP = {};</pre>  \n\n<p>&nbsp;</p>\n\n<p>该变量此时变成应用的容器，只要把多个全局变量都整理在一个名称空间下，将能降低一其他应用程序、组建或类库之间产生糟糕的相互影响。</p>\n\n<p>&nbsp;</p>\n\n<p>2.用闭包来进行信息隐藏的方式，是另一个减少全局污染的方法。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"4\">4</h1>\n\n<h1 id=\"41\">4.1函数对象</h1>\n\n<p>1.对象是\"名/值\"对的集合并拥有一个连到原型对象的隐藏连接。</p>\n\n<p>2.对象字面量产生的对象连接到Object.prototype,函数对象连接到Function.prototype.</p>\n\n<p>3.每个函数在创建时附有两个隐藏属性：函数的上下文和实现函数行为的代码。</p>\n\n<p>4.每个函数对象创建时也附带有一个prorotype属性，它的值是一个拥有construction属性并且值为该函数的对象。</p>\n\n<p>5.注意函数是对象，拥有对象的一些性质如方法等。</p>\n\n<p>6.函数的与众不同之处在于它们可以被调用。javascript在创建一个函数对象时，会设置一个“调用”属性。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"42\">4.2函数字面量</h1>\n\n<p>1.通过函数字面量来创建函数对象：  </p>\n\n<pre class=\"brush:javascript\">var add = function (a,b) {\n\nreturn a + b;\n\n};//创建一个名为add得到变量并把两个数字相加的函数赋值给它。</pre>\n\n<p>&nbsp;</p>\n\n<p>2.通过函数字面量创建的函数对象包含一个连到外部上下文的连接，这称为闭包</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1345941306000,"created_by":1,"updated_at":1345941306000,"updated_by":1,"published_at":1345941306000,"published_by":1},{"id":541,"uuid":"3b5f8263-56fd-43a3-9822-6780c08a229e","title":"《锋利的JQuery》笔记","slug":"feng-li-de-jquery-bi-ji","markdown":"\n\n<div><span>  #1.2 JQ的特点\n</span>1.轻量级--压缩后只有30K（用Packer）、18K（用Gzip）2.强大的选择器--兼容CSS1到CSS3的选择器并可自定义选择器3.出色的DOM操作的封装\n\n4.可靠的事件处理机制\n\n5.完善的Ajax--所有Ajax操作封装到了函数$.ajax()里\n\n6.不污染顶级变量--JQ只建立一个Jquery的对象，所有函数都在该对象下\n\n7.出色的浏览器兼容性\n\n8.链式操作方式--一组操作，可以直接连写而无重复获取对象\n\n9.隐式迭代\n\n10.行为层与结构层的分离--可用选择器选中元素直接添加事件；后期维护方便\n\n11.丰富的插件支持\n\n12.完善的文档\n\n13.开源\n<div></div>\n<div>#1.32 在JQ库中，$就是JQ一个简写形式，如$(\"#foo\")就代表JQuery(\"#foo\")</div>\n\n$(document).ready(function(){\n\n//...\n\n});\n\n可简写为：\n\n$(function(){\n\n//...\n\n});\n\n&nbsp;\n\n#1.3.3统一代码风格，方便日后维护\n\n1.链式操作风格\n\n1）对于同一个对象不超过三个操作的，直接写成一行。\n\n如$(\"li\").show().unbind(\"click\");\n\n2)对于同一个对象的较多操作，建议每行写一个操作。\n\n行数过多则可以功能块来换行\n\n3）对于多个对象的少量操作，可以每个对象写一行，若涉及子元素则适当缩进。\n\n4）对于多对象的较多操作，则结合第2、3条。\n\n2.给代码添加注释，否则很难看懂代码\n<div></div>\n<div>#1.4.1了解区分JQ和DOM对象的区别</div>\n1.DOM对象\n\n每一份DOM都可以表示成一棵树。\n\nDOM对象可以使用JS中的方法，通过getElementsByTagName或getElementById来获取元素节点（DOM对象）\n\n2.JQ对象\n\nJQ对象就是通过JQ包装DOM对象后产生的对象。\n\n只有JQ对象才能使用JQ的方法。\n\n在JQ对象中不能使用DOM对象的任何方法，反之亦然。\n<div></div>\n<div>#1.4.2 JQ对象和DOM对象的相互转换</div>\n约定定义变量的风格是：获取的对象是JQ对象，则加前缀$.\n\n获取的对象是DOM对象不加前缀$.\n\n1.JQ对象转换成DOM对象\n\n1）若JQ对象是一个数组对象，则通过[index]的方法得到相应的DOM对象\n\n2）通过get(index)方法得到相应的DOM对象\n\n2.DOM对象转换成JQ对象\n\n用$()将DOM对象包装就可以获得相应的JQ对象\n\n我们平时用到的JQ对象都是通过$()函数制造的。\n<div></div>\n<div>#1.6  开发工具推荐</div>\n\n1.DW\n\n支持提示JQ代码,在http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP\n\n2.Aptana\n\n是Ajax开发IDE\n\n3.JQueryWTP和Spket插件\n\n装在Eclipse上的插件\n\n4.Visual Studio 2008\n\n#1.7\n\n1）CSS选择器复习\n\n标签选择器\n\nE{\n\nCSS规则\n\n}\n\nID选择器\n\n#ID{\n\nCSS规则\n\n}\n\n类选择器\n\nE.className{\n\nCSS规则\n\n}\n\n群组选择器\n\nE1，E2，E3{\n\nCSS规则\n\n}\n\n后代选择器\n\nE F{\n\nCSS规则\n\n}\n\n通配符\n\n*{\n\nCSS规则\n\n}\n\n其他选择器：伪类选择器\n\nE：Pseudo-Elements{\n\nCSS规则\n\n}\n\n     子选择器\n\nE&gt;F{\n\nCSS规则\n\n}\n\n     临近选择器\n\nE+F{\n\nCSS规则\n\n}\n\n     属性选择器\n\nE[attr]{\n\nCSS规则\n\n}\n\n注意，目前并不是所有的浏览器都支持【其他选择器】\n<div></div>\n<div>2）学习JQ选择器</div>\nJQ中的选择器完全继承了CSS的风格\n\n简洁写法：$()作为一个选择器函数\n\n如$(\"#ID\")代替了document.ElementsByTagName()\n\n扩浏览器兼容：不像CSS，JQ选择器不用考虑浏览器是否支持这些选择器\n<div></div>\n<div>JQ选择器的分类</div>\n1)基本选择器/\n\n通过id/class/标签名来查找DOM元素\n\n注意id只能使用一次\n\n2）层次选择器/\n\n3）过滤选择器/\n\n以冒号（：）开头，分为基本过滤、内容过滤、可见性过滤、属性过滤、子元素过滤盒表单对象过滤\n\n4）表单选择器\n\n&nbsp;\n\n#2.5.1 选择器中含有特殊符号的注意事项\n\n1）.选择器中含有\".\" \"#\" \"(\" \"]\"等字符时,需要用转义字符\"\\\\\"(注意是两个反斜杠)\n\n2).JQ1.3.1以后的版本都不能在属性名前加“@”\n\n3)选择器中添加空格可能产生严重错误\n<div></div>\n<div>#2.7其他选择器</div>\n1.JQ选择器是可以进一步拓展的\n\n1）[MoreSelectors for jQuery](http://plugins%2cjquery.com/project/moreSelectors) 这插件用于增加更多的选择器\n\n2）[Basic XPath](http://plugins.jquery.com/project/xpath)插件（使用人数不多且降低了选择器匹配的效率）\n\n2.使用其他CSS选择器的方法\n\n1）document.getElementsBySelector()","html":"<div><span>  #1.2 JQ的特点  \n</span>1.轻量级--压缩后只有30K（用Packer）、18K（用Gzip）2.强大的选择器--兼容CSS1到CSS3的选择器并可自定义选择器3.出色的DOM操作的封装\n\n4.可靠的事件处理机制\n\n5.完善的Ajax--所有Ajax操作封装到了函数$.ajax()里\n\n6.不污染顶级变量--JQ只建立一个Jquery的对象，所有函数都在该对象下\n\n7.出色的浏览器兼容性\n\n8.链式操作方式--一组操作，可以直接连写而无重复获取对象\n\n9.隐式迭代\n\n10.行为层与结构层的分离--可用选择器选中元素直接添加事件；后期维护方便\n\n11.丰富的插件支持\n\n12.完善的文档\n\n13.开源  \n<div></div>  \n\n<div>#1.32 在JQ库中，$就是JQ一个简写形式，如$(\"#foo\")就代表JQuery(\"#foo\")</div>\n\n<p>$(document).ready(function(){</p>\n\n<p>//...</p>\n\n<p>});</p>\n\n<p>可简写为：</p>\n\n<p>$(function(){</p>\n\n<p>//...</p>\n\n<p>});</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"133\">1.3.3统一代码风格，方便日后维护</h1>\n\n<p>1.链式操作风格</p>\n\n<p>1）对于同一个对象不超过三个操作的，直接写成一行。</p>\n\n<p>如$(\"li\").show().unbind(\"click\");</p>\n\n<p>2)对于同一个对象的较多操作，建议每行写一个操作。</p>\n\n<p>行数过多则可以功能块来换行</p>\n\n<p>3）对于多个对象的少量操作，可以每个对象写一行，若涉及子元素则适当缩进。</p>\n\n<p>4）对于多对象的较多操作，则结合第2、3条。</p>\n\n<p>2.给代码添加注释，否则很难看懂代码  </p>\n\n<div></div>  \n\n<div>#1.4.1了解区分JQ和DOM对象的区别</div>  \n\n<p>1.DOM对象</p>\n\n<p>每一份DOM都可以表示成一棵树。</p>\n\n<p>DOM对象可以使用JS中的方法，通过getElementsByTagName或getElementById来获取元素节点（DOM对象）</p>\n\n<p>2.JQ对象</p>\n\n<p>JQ对象就是通过JQ包装DOM对象后产生的对象。</p>\n\n<p>只有JQ对象才能使用JQ的方法。</p>\n\n<p>在JQ对象中不能使用DOM对象的任何方法，反之亦然。</p>\n\n<div></div>  \n\n<div>#1.4.2 JQ对象和DOM对象的相互转换</div>  \n\n<p>约定定义变量的风格是：获取的对象是JQ对象，则加前缀$.</p>\n\n<p>获取的对象是DOM对象不加前缀$.</p>\n\n<p>1.JQ对象转换成DOM对象</p>\n\n<p>1）若JQ对象是一个数组对象，则通过[index]的方法得到相应的DOM对象</p>\n\n<p>2）通过get(index)方法得到相应的DOM对象</p>\n\n<p>2.DOM对象转换成JQ对象</p>\n\n<p>用$()将DOM对象包装就可以获得相应的JQ对象</p>\n\n<p>我们平时用到的JQ对象都是通过$()函数制造的。</p>\n\n<div></div>  \n\n<div>#1.6  开发工具推荐</div>\n\n<p>1.DW</p>\n\n<p>支持提示JQ代码,在<a href=\"http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP\">http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP</a></p>\n\n<p>2.Aptana</p>\n\n<p>是Ajax开发IDE</p>\n\n<p>3.JQueryWTP和Spket插件</p>\n\n<p>装在Eclipse上的插件</p>\n\n<p>4.Visual Studio 2008</p>\n\n<h1 id=\"17\">1.7</h1>\n\n<p>1）CSS选择器复习</p>\n\n<p>标签选择器</p>\n\n<p>E{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>ID选择器</p>\n\n<h1 id=\"id\">ID{</h1>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>类选择器</p>\n\n<p>E.className{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>群组选择器</p>\n\n<p>E1，E2，E3{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>后代选择器</p>\n\n<p>E F{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>通配符</p>\n\n<p>*{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>其他选择器：伪类选择器</p>\n\n<p>E：Pseudo-Elements{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>     子选择器</p>\n\n<p>E&gt;F{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>     临近选择器</p>\n\n<p>E+F{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>     属性选择器</p>\n\n<p>E[attr]{</p>\n\n<p>CSS规则</p>\n\n<p>}</p>\n\n<p>注意，目前并不是所有的浏览器都支持【其他选择器】</p>\n\n<div></div>  \n\n<div>2）学习JQ选择器</div>  \n\n<p>JQ中的选择器完全继承了CSS的风格</p>\n\n<p>简洁写法：$()作为一个选择器函数</p>\n\n<p>如$(\"#ID\")代替了document.ElementsByTagName()</p>\n\n<p>扩浏览器兼容：不像CSS，JQ选择器不用考虑浏览器是否支持这些选择器</p>\n\n<div></div>  \n\n<div>JQ选择器的分类</div>  \n\n<p>1)基本选择器/</p>\n\n<p>通过id/class/标签名来查找DOM元素</p>\n\n<p>注意id只能使用一次</p>\n\n<p>2）层次选择器/</p>\n\n<p>3）过滤选择器/</p>\n\n<p>以冒号（：）开头，分为基本过滤、内容过滤、可见性过滤、属性过滤、子元素过滤盒表单对象过滤</p>\n\n<p>4）表单选择器</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"251\">2.5.1 选择器中含有特殊符号的注意事项</h1>\n\n<p>1）.选择器中含有\".\" \"#\" \"(\" \"]\"等字符时,需要用转义字符\"\\\"(注意是两个反斜杠)</p>\n\n<p>2).JQ1.3.1以后的版本都不能在属性名前加“@”</p>\n\n<p>3)选择器中添加空格可能产生严重错误  </p>\n\n<div></div>  \n\n<div>#2.7其他选择器</div>  \n\n<p>1.JQ选择器是可以进一步拓展的</p>\n\n<p>1）<a href=\"http://plugins%2cjquery.com/project/moreSelectors\">MoreSelectors for jQuery</a> 这插件用于增加更多的选择器</p>\n\n<p>2）<a href=\"http://plugins.jquery.com/project/xpath\">Basic XPath</a>插件（使用人数不多且降低了选择器匹配的效率）</p>\n\n<p>2.使用其他CSS选择器的方法</p>\n\n<p>1）document.getElementsBySelector()</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1342217516000,"created_by":1,"updated_at":1342217516000,"updated_by":1,"published_at":1342217516000,"published_by":1},{"id":542,"uuid":"30c4ffd8-f585-4816-b4e7-07228a8af95e","title":"【译】ES6 Generators（1）基础篇","slug":"es6-generators-1","markdown":"\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/es6-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n*generator* 即生成器，是 ES6 中众多特性中的一种，是一个新的函数类型。\n\n这篇文章旨在介绍 generator 的基础知识，以及告诉你在 JS 的未来，他们为何如此重要。\n\n# 运行直到完成 (Run-To-Completion)\n\n为了理清这个新的函数类型和其他函数类型有何区别，我们首先需要了解 『run to completion』 的概念。\n\n我们知道 JS 是单线程的，所以一旦一个函数开始执行，排在队列后边的函数就必须等待这个函数执行完毕。\n\n举个栗子：\n\n```\nsetTimeout(function(){\n    console.log(\"Hello World\");\n},1);\n\nfunction foo() {\n    // 注意: 永远不要使用这种超长的循环，这里只是为了演示方便\n    for (var i=0; i<=1E10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n// 0..1E10\n// \"Hello World\"\n\n```\n\n在这段代码中，我们先执行了 `foo()` 然后执行 `setTimeout`，而 `foo()` 中的 for 循环将花费超长的时间才能完成。\n\n只有等待这个漫长的循环结束后，`setTimeout` 中的 `console.log('Hello World')` 才能执行。\n\n如果 `foo()` 函数能够被中断会怎样呢？\n\n这是多线程编程语言的挑战，但我们并不需要考虑这个，因为 JS 是单线程的。\n\n# 运行可被中止 (Run..Stop..Run)\n\n使用 ES6 的生成器特性，我们有了一种新的函数类型：\n\n允许这个函数的执行被中断一次或多次，在中断的期间我们可以去做其他操作，完成后再回来恢复这个函数的执行。\n\n如果你了解过其他并发型或多线程的语言的话，你可能知道『协作(cooperative)』：\n\n在一个函数执行期间，允许执行中断，在中断期间与其他代码进行协作。\n\nES6 生成器函数在并发行为中体现了这种『协作』的特性。\n\n在生成器函数体中，我们可以使用一个新的 `yield` 关键字在内部来中断函数的执行。\n\n需要注意的是，生成器并不能恢复自己中断的执行，我们需要一个额外的控制来恢复函数的执行。\n\n所以，一个生成器函数能够被中断和重启。那生成器函数中断自己的执行后，怎么才知道何时恢复执行呢？\n\n我们可以使用 `yield` 来对外发送中断的信号，当外部返回信号时再恢复函数的执行。\n\n# 生成器的语法\n\n我们可以这样声明一个生成器函数：\n\n```\nfunction *foo() {\n    // ...\n}\n```\n\n注意这里的星号(*)即声明了这个函数是属于生成器类型的函数。\n\n生成器函数大多数功能与普通函数没有区别，只有一部分新颖的语法需要学习。\n\n先介绍一个 `yield` 关键字：\n\n`yield ___` 也叫做 『yield 表达式』，当我们重启生成器时，会向函数内部传值，这个值为对应的 `yield ___` 表达式的计算结果。\n\n举个栗子：\n\n```\nfunction *foo() {\n    var x = 1 + (yield \"foo\");\n    console.log(x);\n}\n```\n\n在这段代码中， `yield \"foo\"` 表达式将在函数中断时，向外部发送 \"foo\" 这个值，且当这个生成器重启时，外部传入的值将作为这个表达式的结果：\n\n在这里，外部传入的值将会与 `1` 进行相加操作，然后赋值给 `x`。\n\n看到双向通信的特点了么？我们在生成器内部向外发送 \"foo\" 然后中断函数执行，然后当生成器接收到外部传入一个值时，生成器将重启，函数将恢复执行。\n\n如果我们只是向中止函数而不对外传值时，只使用 `yield` 即可：\n\n```\n// 注意: `foo(..)` 在这里并不是一个生成器\nfunction foo(x) {\n    console.log(\"x: \" + x);\n}\n\nfunction *bar() {\n    yield; // 只是中断，而不向外传值\n    foo( yield ); // 当外部传回一个值时，将执行 foo() 操作\n}\n```\n\n# 生成器迭代器(Generator Iterator)\n\n迭代器是一种设计模式，定义了一种特殊的行为：\n\n我们通过 `next()` 来获取一组有序的值。\n\n举个栗子：我们有个数组为 [1, 2, 3, 4, 5]，第一次调用 `next()` 将返回 1，第二次调用 `next()` 将返回 2，以此类推，当数组内的值都返回完毕时，继续调用 `next()`将返回 null 或 false。\n\n为了从外部控制生成器函数，我们使用生成器迭代器(generator iterator)来实现，举个栗子：\n\n```\nfunction *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\n```\n我们先定义了一个生成器函数 `foo()`，接着我们调用它一次来生成一个迭代器：\n\n```\nvar it = foo();\n```\n\n你可能会疑问为啥我们不是使用 `new` 关键字即 `var it = new foo()` 来生成迭代器？好吧，这语法背后比较复杂已经超出了我们的讨论范围了。\n\n接下来我们就可以使用这个迭代器了：\n\n```\nconsole.log( it.next() ); // { value: 1, done: false }\n```\n\n这里的 `it.next()` 返回 `{ value: 1, done: false }`，其中的 `value: 1` 是 `yield 1` 返回的值，而 `done: false` 表示生成器函数还没有迭代完成。\n\n继续调用 `it.next()` 进行迭代：\n\n```\nconsole.log( it.next() ); // { value:2, done:false }\nconsole.log( it.next() ); // { value:3, done:false }\nconsole.log( it.next() ); // { value:4, done:false }\nconsole.log( it.next() ); // { value:5, done:false }\n```\n\n注意我们迭代到值为 `5`时，`done` 还是为 `false`，是因为这时候生成器函数并未处于完成状态，我们再调用一次看看：\n\n```\nconsole.log( it.next() ); // { value:undefined, done:true }\n```\n\n这时候我们已经执行完了所有的 `yield ___` 表达式，所以 `done` 已经为 `true`。\n\n你可能会好奇的是：如果我们在一个生成器函数中使用了 `return`，我们在外部还能获取到 `yield` 的值么？\n\n*答案可以是：能*\n\n```\nfunction *foo() {\n    yield 1;\n    return 2;\n}\n\nvar it = foo();\n\nconsole.log( it.next() ); // { value:1, done:false }\nconsole.log( it.next() ); // { value:2, done:true }\n```\n\n让我们看看当我们使用迭代器时，生成器怎么对外传值，以及怎么接收外部传入的值：\n\n```\nfunction *foo(x) {\n    var y = 2 * (yield (x + 1));\n    var z = yield (y / 3);\n    return (x + y + z);\n}\n\nvar it = foo( 5 );\n\n// 注意：这里没有给 `it.next()` 传值\nconsole.log( it.next() );       // { value:6, done:false }\nconsole.log( it.next( 12 ) );   // { value:8, done:false }\nconsole.log( it.next( 13 ) );   // { value:42, done:true }\n```\n\n我们传入参数 `5` 先初始化了一个迭代器。\n\n第一个 `next()` 中没有传递参数进去，因为这个生成器函数中没有对应的 `yield` 来接收参数，所以如果我们在第一个 `next()` 强制传参进去的话，什么都不会发生。\n第一个 `yield (x+1)` 将返回 `value: 6` 到外部，此时生成器未迭代完毕，所以同时返回 `done: false` 。\n\n第二个 `next(12)` 中我们传递了参数 `12` 进去，则表达式 `yield(x+1)` 会被赋值为 12，相当于：\n\n```\nvar x = 5;\nvar y = 2 * 12; // => 24\n```\n\n第二个 `yield (y/3)` 将返回 `value: 8` 到外部，此时生成器未迭代完毕，所以同时返回 `done: false` 。\n\n同理，在第三个 `next(13)` 中我们传递了参数 `13` 进去，则表达式 `yield(y/3)` 会被赋值为 13，相当于：\n\n```\nvar x = 5\nvar y = 24;\nvar z = 13;\n```\n第三个 `yield`并不存在，所以会 `return (x + y + z)` 即返回 `value: 42` 到外部，此时生成器已迭代完毕，所以同时返回 `done: true` 。\n\n*答案也可以是：不能！*\n\n依赖  `return` 从生成器中返回一个值并不好，因为当生成器遇见了 `for..of` 循环的时候，被返回的值将会被丢弃，举个栗子：\n\n```\nfunction *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n    return 6;\n}\n\nfor (var v of foo()) {\n    console.log( v );\n}\n// 1 2 3 4 5\n\nconsole.log( v ); // 仍然是 `5`, 而不是 `6` \n```\n\n看到了吧？由 `foo()` 创建的迭代器会被 `foo..of` 循环自动捕获，且会自动进行一个接一个的迭代，直到遇到 `done: true`，就结束了，并没有处理 `return` 的值。\n\n所以，`for..of` 循环会忽略被返回的 `6`，同时因为没有暴露出 `next()` 方法，`for..of` 循环就不能用于我们在中断生成器的期间，对生成器进行传值的场景。\n\n# 总结\n\n看了以上 ES6 Generators 的基础知识，很自然地就会想我们在什么场景下会用到这个新颖的生成器呢？\n\n当然有很多的场景能发挥生成器的这些特性了，这篇文章只是抛砖引玉，我们将继续深入挖掘生成器的魔力！\n\n当你在最新的 Chrome nightly 或 canary 版，或 Firefox nightly版，甚至在 v0.11+ 版本的 node （带 --harmony 开启 ES6 功能）中运行了以上这些代码片段后，我们可能会产生以下疑问：\n\n1. 怎么进行错误处理呢？\n2. 一个生成器怎么调用另一个生成器呢？\n3. 怎么异步地使用生成器呢？\n\n别担心，请听下回分解：）","html":"<blockquote>\n  <p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/es6-generators\">原文地址</a></p>\n  \n  <p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n\n<p><em>generator</em> 即生成器，是 ES6 中众多特性中的一种，是一个新的函数类型。</p>\n\n<p>这篇文章旨在介绍 generator 的基础知识，以及告诉你在 JS 的未来，他们为何如此重要。</p>\n\n<h1 id=\"runtocompletion\">运行直到完成 (Run-To-Completion)</h1>\n\n<p>为了理清这个新的函数类型和其他函数类型有何区别，我们首先需要了解 『run to completion』 的概念。</p>\n\n<p>我们知道 JS 是单线程的，所以一旦一个函数开始执行，排在队列后边的函数就必须等待这个函数执行完毕。</p>\n\n<p>举个栗子：</p>\n\n<pre><code>setTimeout(function(){  \n    console.log(\"Hello World\");\n},1);\n\nfunction foo() {  \n    // 注意: 永远不要使用这种超长的循环，这里只是为了演示方便\n    for (var i=0; i&lt;=1E10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();  \n// 0..1E10\n// \"Hello World\"\n</code></pre>\n\n<p>在这段代码中，我们先执行了 <code>foo()</code> 然后执行 <code>setTimeout</code>，而 <code>foo()</code> 中的 for 循环将花费超长的时间才能完成。</p>\n\n<p>只有等待这个漫长的循环结束后，<code>setTimeout</code> 中的 <code>console.log('Hello World')</code> 才能执行。</p>\n\n<p>如果 <code>foo()</code> 函数能够被中断会怎样呢？</p>\n\n<p>这是多线程编程语言的挑战，但我们并不需要考虑这个，因为 JS 是单线程的。</p>\n\n<h1 id=\"runstoprun\">运行可被中止 (Run..Stop..Run)</h1>\n\n<p>使用 ES6 的生成器特性，我们有了一种新的函数类型：</p>\n\n<p>允许这个函数的执行被中断一次或多次，在中断的期间我们可以去做其他操作，完成后再回来恢复这个函数的执行。</p>\n\n<p>如果你了解过其他并发型或多线程的语言的话，你可能知道『协作(cooperative)』：</p>\n\n<p>在一个函数执行期间，允许执行中断，在中断期间与其他代码进行协作。</p>\n\n<p>ES6 生成器函数在并发行为中体现了这种『协作』的特性。</p>\n\n<p>在生成器函数体中，我们可以使用一个新的 <code>yield</code> 关键字在内部来中断函数的执行。</p>\n\n<p>需要注意的是，生成器并不能恢复自己中断的执行，我们需要一个额外的控制来恢复函数的执行。</p>\n\n<p>所以，一个生成器函数能够被中断和重启。那生成器函数中断自己的执行后，怎么才知道何时恢复执行呢？</p>\n\n<p>我们可以使用 <code>yield</code> 来对外发送中断的信号，当外部返回信号时再恢复函数的执行。</p>\n\n<h1 id=\"\">生成器的语法</h1>\n\n<p>我们可以这样声明一个生成器函数：</p>\n\n<pre><code>function *foo() {  \n    // ...\n}\n</code></pre>\n\n<p>注意这里的星号(*)即声明了这个函数是属于生成器类型的函数。</p>\n\n<p>生成器函数大多数功能与普通函数没有区别，只有一部分新颖的语法需要学习。</p>\n\n<p>先介绍一个 <code>yield</code> 关键字：</p>\n\n<p><code>yield ___</code> 也叫做 『yield 表达式』，当我们重启生成器时，会向函数内部传值，这个值为对应的 <code>yield ___</code> 表达式的计算结果。</p>\n\n<p>举个栗子：</p>\n\n<pre><code>function *foo() {  \n    var x = 1 + (yield \"foo\");\n    console.log(x);\n}\n</code></pre>\n\n<p>在这段代码中， <code>yield \"foo\"</code> 表达式将在函数中断时，向外部发送 \"foo\" 这个值，且当这个生成器重启时，外部传入的值将作为这个表达式的结果：</p>\n\n<p>在这里，外部传入的值将会与 <code>1</code> 进行相加操作，然后赋值给 <code>x</code>。</p>\n\n<p>看到双向通信的特点了么？我们在生成器内部向外发送 \"foo\" 然后中断函数执行，然后当生成器接收到外部传入一个值时，生成器将重启，函数将恢复执行。</p>\n\n<p>如果我们只是向中止函数而不对外传值时，只使用 <code>yield</code> 即可：</p>\n\n<pre><code>// 注意: `foo(..)` 在这里并不是一个生成器\nfunction foo(x) {  \n    console.log(\"x: \" + x);\n}\n\nfunction *bar() {  \n    yield; // 只是中断，而不向外传值\n    foo( yield ); // 当外部传回一个值时，将执行 foo() 操作\n}\n</code></pre>\n\n<h1 id=\"generatoriterator\">生成器迭代器(Generator Iterator)</h1>\n\n<p>迭代器是一种设计模式，定义了一种特殊的行为：</p>\n\n<p>我们通过 <code>next()</code> 来获取一组有序的值。</p>\n\n<p>举个栗子：我们有个数组为 [1, 2, 3, 4, 5]，第一次调用 <code>next()</code> 将返回 1，第二次调用 <code>next()</code> 将返回 2，以此类推，当数组内的值都返回完毕时，继续调用 <code>next()</code>将返回 null 或 false。</p>\n\n<p>为了从外部控制生成器函数，我们使用生成器迭代器(generator iterator)来实现，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\n</code></pre>\n\n<p>我们先定义了一个生成器函数 <code>foo()</code>，接着我们调用它一次来生成一个迭代器：</p>\n\n<pre><code>var it = foo();  \n</code></pre>\n\n<p>你可能会疑问为啥我们不是使用 <code>new</code> 关键字即 <code>var it = new foo()</code> 来生成迭代器？好吧，这语法背后比较复杂已经超出了我们的讨论范围了。</p>\n\n<p>接下来我们就可以使用这个迭代器了：</p>\n\n<pre><code>console.log( it.next() ); // { value: 1, done: false }  \n</code></pre>\n\n<p>这里的 <code>it.next()</code> 返回 <code>{ value: 1, done: false }</code>，其中的 <code>value: 1</code> 是 <code>yield 1</code> 返回的值，而 <code>done: false</code> 表示生成器函数还没有迭代完成。</p>\n\n<p>继续调用 <code>it.next()</code> 进行迭代：</p>\n\n<pre><code>console.log( it.next() ); // { value:2, done:false }  \nconsole.log( it.next() ); // { value:3, done:false }  \nconsole.log( it.next() ); // { value:4, done:false }  \nconsole.log( it.next() ); // { value:5, done:false }  \n</code></pre>\n\n<p>注意我们迭代到值为 <code>5</code>时，<code>done</code> 还是为 <code>false</code>，是因为这时候生成器函数并未处于完成状态，我们再调用一次看看：</p>\n\n<pre><code>console.log( it.next() ); // { value:undefined, done:true }  \n</code></pre>\n\n<p>这时候我们已经执行完了所有的 <code>yield ___</code> 表达式，所以 <code>done</code> 已经为 <code>true</code>。</p>\n\n<p>你可能会好奇的是：如果我们在一个生成器函数中使用了 <code>return</code>，我们在外部还能获取到 <code>yield</code> 的值么？</p>\n\n<p><em>答案可以是：能</em></p>\n\n<pre><code>function *foo() {  \n    yield 1;\n    return 2;\n}\n\nvar it = foo();\n\nconsole.log( it.next() ); // { value:1, done:false }  \nconsole.log( it.next() ); // { value:2, done:true }  \n</code></pre>\n\n<p>让我们看看当我们使用迭代器时，生成器怎么对外传值，以及怎么接收外部传入的值：</p>\n\n<pre><code>function *foo(x) {  \n    var y = 2 * (yield (x + 1));\n    var z = yield (y / 3);\n    return (x + y + z);\n}\n\nvar it = foo( 5 );\n\n// 注意：这里没有给 `it.next()` 传值\nconsole.log( it.next() );       // { value:6, done:false }  \nconsole.log( it.next( 12 ) );   // { value:8, done:false }  \nconsole.log( it.next( 13 ) );   // { value:42, done:true }  \n</code></pre>\n\n<p>我们传入参数 <code>5</code> 先初始化了一个迭代器。</p>\n\n<p>第一个 <code>next()</code> 中没有传递参数进去，因为这个生成器函数中没有对应的 <code>yield</code> 来接收参数，所以如果我们在第一个 <code>next()</code> 强制传参进去的话，什么都不会发生。\n第一个 <code>yield (x+1)</code> 将返回 <code>value: 6</code> 到外部，此时生成器未迭代完毕，所以同时返回 <code>done: false</code> 。</p>\n\n<p>第二个 <code>next(12)</code> 中我们传递了参数 <code>12</code> 进去，则表达式 <code>yield(x+1)</code> 会被赋值为 12，相当于：</p>\n\n<pre><code>var x = 5;  \nvar y = 2 * 12; // =&gt; 24  \n</code></pre>\n\n<p>第二个 <code>yield (y/3)</code> 将返回 <code>value: 8</code> 到外部，此时生成器未迭代完毕，所以同时返回 <code>done: false</code> 。</p>\n\n<p>同理，在第三个 <code>next(13)</code> 中我们传递了参数 <code>13</code> 进去，则表达式 <code>yield(y/3)</code> 会被赋值为 13，相当于：</p>\n\n<pre><code>var x = 5  \nvar y = 24;  \nvar z = 13;  \n</code></pre>\n\n<p>第三个 <code>yield</code>并不存在，所以会 <code>return (x + y + z)</code> 即返回 <code>value: 42</code> 到外部，此时生成器已迭代完毕，所以同时返回 <code>done: true</code> 。</p>\n\n<p><em>答案也可以是：不能！</em></p>\n\n<p>依赖  <code>return</code> 从生成器中返回一个值并不好，因为当生成器遇见了 <code>for..of</code> 循环的时候，被返回的值将会被丢弃，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n    return 6;\n}\n\nfor (var v of foo()) {  \n    console.log( v );\n}\n// 1 2 3 4 5\n\nconsole.log( v ); // 仍然是 `5`, 而不是 `6`  \n</code></pre>\n\n<p>看到了吧？由 <code>foo()</code> 创建的迭代器会被 <code>foo..of</code> 循环自动捕获，且会自动进行一个接一个的迭代，直到遇到 <code>done: true</code>，就结束了，并没有处理 <code>return</code> 的值。</p>\n\n<p>所以，<code>for..of</code> 循环会忽略被返回的 <code>6</code>，同时因为没有暴露出 <code>next()</code> 方法，<code>for..of</code> 循环就不能用于我们在中断生成器的期间，对生成器进行传值的场景。</p>\n\n<h1 id=\"\">总结</h1>\n\n<p>看了以上 ES6 Generators 的基础知识，很自然地就会想我们在什么场景下会用到这个新颖的生成器呢？</p>\n\n<p>当然有很多的场景能发挥生成器的这些特性了，这篇文章只是抛砖引玉，我们将继续深入挖掘生成器的魔力！</p>\n\n<p>当你在最新的 Chrome nightly 或 canary 版，或 Firefox nightly版，甚至在 v0.11+ 版本的 node （带 --harmony 开启 ES6 功能）中运行了以上这些代码片段后，我们可能会产生以下疑问：</p>\n\n<ol>\n<li>怎么进行错误处理呢？  </li>\n<li>一个生成器怎么调用另一个生成器呢？  </li>\n<li>怎么异步地使用生成器呢？</li>\n</ol>\n\n<p>别担心，请听下回分解：）</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1411843545000,"created_by":1,"updated_at":1411843545000,"updated_by":1,"published_at":1411843545000,"published_by":1},{"id":543,"uuid":"5811ec57-2407-4f69-81bf-72b34ade5ce0","title":"【译】ES6 Generators（2）深入篇","slug":"es6-generators-2","markdown":"\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/es6-generators-dive)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n如果你仍然对 ES6 Generators 不熟悉的话，建议你先阅读并运行 [【译】ES6 Generators 基础篇（1）]() 中的代码片段，理解了生成器的基础知识后，就可以阅读这篇文章了解更多的细节啦。\n\n# 错误处理\n\nES6 中生成器的其中一个强大的特点就是：函数内部的代码编写风格是同步的，即使外部的迭代控制过程可能是异步的。\n\n也就是说，我们可以简单地对错误进行处理，类似我们熟悉的 `try..catch` 语法，举个栗子：\n\n```\nfunction *foo() {\n    try {\n        var x = yield 3;\n        console.log( \"x: \" + x ); // 如果出错，这里可能永远不会执行\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n    }\n}\n```\n\n即使这个生成器可能会在 `yield 3` 处中断，当接收到外部传入的错误时，`try..catch` 将会捕获到。\n\n具体一个错误是怎样传入生成器的呢，举个栗子：\n\n```\nvar it = foo();\n\nvar res = it.next(); // { value:3, done:false }\n\n// 我们在这里不调用 it.next() 传值进去，而是触发一个错误\nit.throw( \"Oops!\" ); // Error: Oops!\n```\n\n我们可以使用 `throw()` 方法产生错误传进生成器中，那么在生成器中断的地方，即 `yield 3` 处会产生错误，然后被 `try..catch` 捕获。\n\n注意：如果我们使用 `throw()` 方法产生一个错误传进生成器中，但没有对应的 `try..catch` 对错误进行捕获的话，这个错误将会被传出去，外部如果不对错误进行捕获的话，则会抛出异常：\n\n```\n\nfunction *foo() { }\n\nvar it = foo();\n// 在外部进行捕获\ntry {\n    it.throw( \"Oops!\" );\n}\ncatch (err) {\n    console.log( \"Error: \" + err ); // Error: Oops!\n}\n```\n\n当然，我们也可以进行反方向的错误捕获：\n\n```\nfunction *foo() {\n    var x = yield 3;\n    var y = x.toUpperCase(); // 若 x 不是字符串的话，将抛出TypeError 错误\n    yield y;\n}\n\nvar it = foo();\n\nit.next(); // { value:3, done:false }\n\ntry {\n    it.next( 42 ); // `42` 是数字没有 `toUpperCase()` 方法，所以会出错\n}\ncatch (err) {\n    console.log( err ); // 捕获到 TypeError 错误\n}\n```\n\n# 生成器委托\n\n另一个我们想做的可能是在一个生成器中调用另一个生成器。\n\n我并不是指在一个生成器中初始化另一个生成器，而是说我们可以将一个生成器的迭代器控制交给另一个生成器。\n\n为了实现委托，我们需要用到 `yield` 关键字的另一种形式：`yield *`，举个栗子：\n\n```\nfunction *foo() {\n    yield 3;\n    yield 4;\n}\n\nfunction *bar() {\n    yield 1;\n    yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    yield 5;\n}\n\nfor (var v of bar()) {\n    console.log( v );\n}\n// 1 2 3 4 5\n```\n\n以上这段代码应该通俗易懂：当生成器 `bar()` 迭代到 `yield 2` 时，先将控制权交给了另一个生成器 `foo()`迭代完后再将控制权收回，继续进行迭代。\n\n这里使用了 `for..of` 循环进行示例，正如在基础篇我们知道 `for..of` 循环中没有暴露出 `next()` 方法来传递值到生成器中，所以我们可以用手动的方式：\n\n```\nfunction *foo() {\n    var z = yield 3;\n    var w = yield 4;\n    console.log( \"z: \" + z + \", w: \" + w );\n}\n\nfunction *bar() {\n    var x = yield 1;\n    var y = yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    var v = yield 5;\n    console.log( \"x: \" + x + \", y: \" + y + \", v: \" + v );\n}\n\nvar it = bar();\n\nit.next();      // { value:1, done:false }\nit.next( \"X\" ); // { value:2, done:false }\nit.next( \"Y\" ); // { value:3, done:false }\nit.next( \"Z\" ); // { value:4, done:false }\nit.next( \"W\" ); // { value:5, done:false }\n// z: Z, w: W\n\nit.next( \"V\" ); // { value:undefined, done:true }\n// x: X, y: Y, v: V\n```\n\n尽管我们在这里只展示了一层的委托关系，但具体场景中我们当然可以使用多层的嵌套。\n\n一个 `yield *` 技巧是，我们可以从被委托的生成器（比如示例中的 `foo()`） 获取到返回值，举个栗子：\n\n```\nfunction *foo() {\n    yield 2;\n    yield 3;\n    return \"foo\"; // 返回一个值给 `yield*` 表达式\n}\n\nfunction *bar() {\n    yield 1;\n    var v = yield *foo();\n    console.log( \"v: \" + v );\n    yield 4;\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }\nit.next(); // { value:2, done:false }\nit.next(); // { value:3, done:false }\nit.next(); // \"v: foo\"   { value:4, done:false } 注意：在这里获取到了返回的值\nit.next(); // { value:undefined, done:true }\n```\n\n`yield *foo()` 得到了 `bar()` 的控制权，完成了自己的迭代操作后，返回了一个 `v: foo` 值 给`bar()` ，然后 `bar()` 再继续迭代下去。\n\n`yield` 和 `yield *` 表达式的一个有趣的区别是：在 `yield` 中，返回值在 `next()` 中传入的，而在 `yield *` 中，返回值是在 `return` 中传入的。\n\n此外，我们也可以在委托的生成器中进行双向的错误绑定，举个栗子：\n\n```\nfunction *foo() {\n    try {\n        yield 2;\n    }\n    catch (err) {\n        console.log( \"foo caught: \" + err );\n    }\n\n    yield; // 中断\n\n    // 现在抛出另一个错误\n    throw \"Oops!\";\n}\n\nfunction *bar() {\n    yield 1;\n    try {\n        yield *foo();\n    }\n    catch (err) {\n        console.log( \"bar caught: \" + err );\n    }\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }\nit.next(); // { value:2, done:false }\n\nit.throw( \"Uh oh!\" ); // 将会在 `foo()` 内部捕获\n// foo caught: Uh oh!\n\nit.next(); // { value:undefined, done:true }  --> 这里没有错误\n// bar caught: Oops!\n```\n\n`throw( \"Uh oh!\" )` 在代理给 `foo()` 的过程中，抛了个错误进去，所以错误在 `foo()` 中被捕获。\n\n同理，`throw \"Oops!\"`  在 `foo()` 内部抛出的错误，将会传回给 `bar()` 后，被 `bar()` 中的 `try..catch` 捕获到。\n\n# 总结\n\n生成器有着同步方式的编写语法，意味着我么可以使用 `try..catch` 在 `yield` 表达式中进行错误处理。\n\n生成器迭代器中也有一个 `throw()` 方法用于在中断期间向生成器内部传入一个错误，这个错误能被生成器内部的 `try..catch` 捕获。\n\n`yield *` 允许我们将迭代器的控制权从当前的生成器中委托给另一个生成器。好处是 `yield *` 扮演了在生成器间传递消息和错误的角色。\n\n了解了这么多，还有一个很重要的问题没有解决：\n\n怎么异步地使用生成器呢？\n\n关键是要实现这么一个机制：在异步环境中，当迭代器的 `next()` 方法被调用，我们需要定位到生成器中断的地方重新启动。\n\n别担心，请听下回分解：）","html":"<blockquote>\n  <p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/es6-generators-dive\">原文地址</a></p>\n  \n  <p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n\n<p>如果你仍然对 ES6 Generators 不熟悉的话，建议你先阅读并运行 <a href=\"\">【译】ES6 Generators 基础篇（1）</a> 中的代码片段，理解了生成器的基础知识后，就可以阅读这篇文章了解更多的细节啦。</p>\n\n<h1 id=\"\">错误处理</h1>\n\n<p>ES6 中生成器的其中一个强大的特点就是：函数内部的代码编写风格是同步的，即使外部的迭代控制过程可能是异步的。</p>\n\n<p>也就是说，我们可以简单地对错误进行处理，类似我们熟悉的 <code>try..catch</code> 语法，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    try {\n        var x = yield 3;\n        console.log( \"x: \" + x ); // 如果出错，这里可能永远不会执行\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n    }\n}\n</code></pre>\n\n<p>即使这个生成器可能会在 <code>yield 3</code> 处中断，当接收到外部传入的错误时，<code>try..catch</code> 将会捕获到。</p>\n\n<p>具体一个错误是怎样传入生成器的呢，举个栗子：</p>\n\n<pre><code>var it = foo();\n\nvar res = it.next(); // { value:3, done:false }\n\n// 我们在这里不调用 it.next() 传值进去，而是触发一个错误\nit.throw( \"Oops!\" ); // Error: Oops!  \n</code></pre>\n\n<p>我们可以使用 <code>throw()</code> 方法产生错误传进生成器中，那么在生成器中断的地方，即 <code>yield 3</code> 处会产生错误，然后被 <code>try..catch</code> 捕获。</p>\n\n<p>注意：如果我们使用 <code>throw()</code> 方法产生一个错误传进生成器中，但没有对应的 <code>try..catch</code> 对错误进行捕获的话，这个错误将会被传出去，外部如果不对错误进行捕获的话，则会抛出异常：</p>\n\n<pre><code>function *foo() { }\n\nvar it = foo();  \n// 在外部进行捕获\ntry {  \n    it.throw( \"Oops!\" );\n}\ncatch (err) {  \n    console.log( \"Error: \" + err ); // Error: Oops!\n}\n</code></pre>\n\n<p>当然，我们也可以进行反方向的错误捕获：</p>\n\n<pre><code>function *foo() {  \n    var x = yield 3;\n    var y = x.toUpperCase(); // 若 x 不是字符串的话，将抛出TypeError 错误\n    yield y;\n}\n\nvar it = foo();\n\nit.next(); // { value:3, done:false }\n\ntry {  \n    it.next( 42 ); // `42` 是数字没有 `toUpperCase()` 方法，所以会出错\n}\ncatch (err) {  \n    console.log( err ); // 捕获到 TypeError 错误\n}\n</code></pre>\n\n<h1 id=\"\">生成器委托</h1>\n\n<p>另一个我们想做的可能是在一个生成器中调用另一个生成器。</p>\n\n<p>我并不是指在一个生成器中初始化另一个生成器，而是说我们可以将一个生成器的迭代器控制交给另一个生成器。</p>\n\n<p>为了实现委托，我们需要用到 <code>yield</code> 关键字的另一种形式：<code>yield *</code>，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    yield 3;\n    yield 4;\n}\n\nfunction *bar() {  \n    yield 1;\n    yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    yield 5;\n}\n\nfor (var v of bar()) {  \n    console.log( v );\n}\n// 1 2 3 4 5\n</code></pre>\n\n<p>以上这段代码应该通俗易懂：当生成器 <code>bar()</code> 迭代到 <code>yield 2</code> 时，先将控制权交给了另一个生成器 <code>foo()</code>迭代完后再将控制权收回，继续进行迭代。</p>\n\n<p>这里使用了 <code>for..of</code> 循环进行示例，正如在基础篇我们知道 <code>for..of</code> 循环中没有暴露出 <code>next()</code> 方法来传递值到生成器中，所以我们可以用手动的方式：</p>\n\n<pre><code>function *foo() {  \n    var z = yield 3;\n    var w = yield 4;\n    console.log( \"z: \" + z + \", w: \" + w );\n}\n\nfunction *bar() {  \n    var x = yield 1;\n    var y = yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    var v = yield 5;\n    console.log( \"x: \" + x + \", y: \" + y + \", v: \" + v );\n}\n\nvar it = bar();\n\nit.next();      // { value:1, done:false }  \nit.next( \"X\" ); // { value:2, done:false }  \nit.next( \"Y\" ); // { value:3, done:false }  \nit.next( \"Z\" ); // { value:4, done:false }  \nit.next( \"W\" ); // { value:5, done:false }  \n// z: Z, w: W\n\nit.next( \"V\" ); // { value:undefined, done:true }  \n// x: X, y: Y, v: V\n</code></pre>\n\n<p>尽管我们在这里只展示了一层的委托关系，但具体场景中我们当然可以使用多层的嵌套。</p>\n\n<p>一个 <code>yield *</code> 技巧是，我们可以从被委托的生成器（比如示例中的 <code>foo()</code>） 获取到返回值，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    yield 2;\n    yield 3;\n    return \"foo\"; // 返回一个值给 `yield*` 表达式\n}\n\nfunction *bar() {  \n    yield 1;\n    var v = yield *foo();\n    console.log( \"v: \" + v );\n    yield 4;\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }  \nit.next(); // { value:2, done:false }  \nit.next(); // { value:3, done:false }  \nit.next(); // \"v: foo\"   { value:4, done:false } 注意：在这里获取到了返回的值  \nit.next(); // { value:undefined, done:true }  \n</code></pre>\n\n<p><code>yield *foo()</code> 得到了 <code>bar()</code> 的控制权，完成了自己的迭代操作后，返回了一个 <code>v: foo</code> 值 给<code>bar()</code> ，然后 <code>bar()</code> 再继续迭代下去。</p>\n\n<p><code>yield</code> 和 <code>yield *</code> 表达式的一个有趣的区别是：在 <code>yield</code> 中，返回值在 <code>next()</code> 中传入的，而在 <code>yield *</code> 中，返回值是在 <code>return</code> 中传入的。</p>\n\n<p>此外，我们也可以在委托的生成器中进行双向的错误绑定，举个栗子：</p>\n\n<pre><code>function *foo() {  \n    try {\n        yield 2;\n    }\n    catch (err) {\n        console.log( \"foo caught: \" + err );\n    }\n\n    yield; // 中断\n\n    // 现在抛出另一个错误\n    throw \"Oops!\";\n}\n\nfunction *bar() {  \n    yield 1;\n    try {\n        yield *foo();\n    }\n    catch (err) {\n        console.log( \"bar caught: \" + err );\n    }\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }  \nit.next(); // { value:2, done:false }\n\nit.throw( \"Uh oh!\" ); // 将会在 `foo()` 内部捕获  \n// foo caught: Uh oh!\n\nit.next(); // { value:undefined, done:true }  --&gt; 这里没有错误  \n// bar caught: Oops!\n</code></pre>\n\n<p><code>throw( \"Uh oh!\" )</code> 在代理给 <code>foo()</code> 的过程中，抛了个错误进去，所以错误在 <code>foo()</code> 中被捕获。</p>\n\n<p>同理，<code>throw \"Oops!\"</code>  在 <code>foo()</code> 内部抛出的错误，将会传回给 <code>bar()</code> 后，被 <code>bar()</code> 中的 <code>try..catch</code> 捕获到。</p>\n\n<h1 id=\"\">总结</h1>\n\n<p>生成器有着同步方式的编写语法，意味着我么可以使用 <code>try..catch</code> 在 <code>yield</code> 表达式中进行错误处理。</p>\n\n<p>生成器迭代器中也有一个 <code>throw()</code> 方法用于在中断期间向生成器内部传入一个错误，这个错误能被生成器内部的 <code>try..catch</code> 捕获。</p>\n\n<p><code>yield *</code> 允许我们将迭代器的控制权从当前的生成器中委托给另一个生成器。好处是 <code>yield *</code> 扮演了在生成器间传递消息和错误的角色。</p>\n\n<p>了解了这么多，还有一个很重要的问题没有解决：</p>\n\n<p>怎么异步地使用生成器呢？</p>\n\n<p>关键是要实现这么一个机制：在异步环境中，当迭代器的 <code>next()</code> 方法被调用，我们需要定位到生成器中断的地方重新启动。</p>\n\n<p>别担心，请听下回分解：）</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1411929945000,"created_by":1,"updated_at":1411929945000,"updated_by":1,"published_at":1411929945000,"published_by":1},{"id":544,"uuid":"85f8c122-bdf3-40cd-9b70-c779f7040819","title":"【译】ES6 Generators（3）异步篇","slug":"es6-generators-3","markdown":"\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/async-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n生成器提供了同步方式编写的代码风格，这就允许我们隐藏异步的实现细节。\n\n我们就可以用一种非常自然的方式来表达程序的执行流程，避免了同时处理异步代码的语法和陷阱。\n\n换句话说，我们利用生成器从内到外、从外到内双向传值的特点，将不同的值的处理交给了不同的生成器逻辑，只需要关心获取到特定的值进行某种操作，而无需关心特定的值如何产生（通过`netx()` 将值的产生逻辑委托出去）。\n\n这么一来，异步处理的优点以及易读的代码结合到一起，就加强了我们程序的可维护性。\n\n# 最简单的异步\n\n举个栗子，假定我们已经有了以下代码：\n\n```\nfunction makeAjaxCall(url,cb) {\n    // 执行一个 ajax 请求\n    // 请求完成后执行 `cb(result)` \n}\n\nmakeAjaxCall( \"http://some.url.1\", function(result1){\n    var data = JSON.parse( result1 );\n\n    makeAjaxCall( \"http://some.url.2/?id=\" + data.id, function(result2){\n        var resp = JSON.parse( result2 );\n        console.log( \"我们请求到的数据是: \" + resp.value );\n    });\n} );\n```\n\n使用简单的生成器来表达的话，就像这样：\n\n```\nfunction request(url) {\n   // 调用这个普通函数来隐藏异步处理的细节\n   // 使用 `it.next()` 来恢复调用这个普通函数的生成器函数的迭代器\n    makeAjaxCall( url, function(response){\n        // 异步获取到数据后，给生成器发送 `response` 信号\n        it.next( response );\n    } );\n    // 注意: 这里没有返回值\n}\n\nfunction *main() {\n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nvar it = main();\nit.next(); // 开始迭代\n```\n\n`request()` 这个工具函数只是将我们的异步请求数据的代码进行了封装，需要注意的是在回调函数中调用了生成器的 `next()` 方法。\n\n当我们使用 `var it = main();` 创建了一个迭代器后，紧接着使用 `it.next();` 开始迭代，这时候遇到第一个 `yield` 中断了生成器，转而执行 `request( \"http://some.url.1\" )`\n\n当 `request( \"http://some.url.1\" )` 异步获取到数据后，在回调函数中调用 `it.next(response)` 将 `response` 传回给生成器刚刚中断的地方，生成器将继续迭代。\n\n这里的亮点就是，我们在生成器中无需关心异步请求的数据如何获取，我们只知道调用了  `request()` 后，当需要的数据获取到了，就会通知生成器继续迭代。\n\n这么一来在生成器中我们使用同步方式的编写风格，其实我们获取到了异步数据！\n\n同理，当我们继续调用 `it.next()` 时，会遇到第二个 `yield` 中断迭代，发出第二个请求 `yield request( \"http://some.url.2?id=\" + data.id )` 异步获取到数据后再恢复迭代，我们依旧不用关心异步获取数据的细节了，多爽！\n\n以上这段代码中，`request()` 请求的是异步 AJAX 请求，但如果我们后续改变程序给 AJAX 设置了缓存了，获取数据会先从缓存中获取，这时候没有执行真正的 AJAX 请求就不能在回调函数中调用 `it.next(response)` 来恢复生成器的中断了啊！\n\n没关系，我们可以使用一个小技巧来解决这个问题，举个栗子：\n\n```\n// 给 AJAX 设置缓存\nvar cache = {};\n\nfunction request(url) {\n    // 请求已被缓存\n    if (cache[url]) {\n        // 使用 setTimeout 来模拟异步操作\n        setTimeout( function(){\n            it.next( cache[url] );\n        }, 0 );\n    }\n    // 请求未被缓存，发出真正的请求\n    else {\n        makeAjaxCall( url, function(resp){\n            cache[url] = resp;\n            it.next( resp );\n        } );\n    }\n}\n```\n\n看，当我们给我们的程序添加了 AJAX 缓存机制甚至其他异步操作的优化时，我们只改变了  `request()` 这个工具函数的逻辑，而无需改动调用这个工具函数获取数据的生成器：\n```\nvar result1 = yield request( \"http://some.url.1\" );\nvar data = JSON.parse( result1 );\n..\n```\n在生成器中，我们还是像以前一样调用 `request()` 就能获取到需要的异步数据，无需关心获取数据的细节实现！\n\n这就是将异步操作当做一个细节实现抽象出来后展现出的魔力了！\n\n# 更好的异步\n\n上面介绍的异步方案对于简单的异步生成器来说工作良好，但用途有限，我们需要一个更强大的异步方案：使用 Promises.\n\n如果你对 ES6 Promises 有迷惑的话，我建议你先读 [我写的介绍 Promises 的文章](http://blog.getify.com/promises-part-1/)\n\n我们的代码目前有个严重的问题：回调多了会产生多重嵌套（即回调地狱）。\n\n此外，我们目前还缺乏的东西有：\n\n1. 清晰的错误处理逻辑。我们使用 AJAX 的回调可能会检测到一个错误，然后使用 `it.throw()` 将错误传回给生成器，在生成器中则使用 `try..catch` 来捕获错误。\n    一来我们需要猜测我们可能发生错误且手动添加对应的错误处理函数，二来我们的错误处理代码没法重复使用。\n\n2. 如果 `makeAjaxCall()` 函数不受我们控制，调用了多次回调的话，也会多次触发回调中的 `it.next()` ，生成器就会变得非常混乱。\n\n    处理和阻止这种问题需要大量的手动工作，也非常不方便。\n\n3. 有时候我们需要 『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）。而生成器中的 `yield` 并不支持两个或多个同时进行。\n    \n以上这些问题都可以用手动编写代码的方式来解决，但谁会想每次都重新编写类似的重复的代码呢？\n\n我们需要一个更好的可信任、可重复使用的方案来支持我们基于生成器编写异步的代码。\n\n怎么实现？使用 Promises ！\n\n我们将原来的代码加入 Promises 的特性：\n\n```\nfunction request(url) {\n    // 注意: 这里返回的是一个 promise\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } );\n}\n```\n\n`request()` 函数中创建了一个 promise 实例，一旦 AJAX 请求完成，这个实例将会被 `resolved`。\n\n我们接着将这个实例返回，这样它就能够被 `yield` 了。\n\n接下来我们需要一个工具来控制我们生成器的迭代器，接收返回的 promise 实例，然后再通过 `next()` 来恢复生成器的中断：\n\n```\n// 执行异步的生成器\n// 注意: 这是简化的版本，没有处理错误\nfunction runGenerator(g) {\n    // 注意：我们使用 `g()` 自动初始化了迭代器\n    var it = g(), ret;\n\n    // 异步地迭代\n    (function iterate(val){\n        ret = it.next( val );\n\n        // 迭代未完成\n        if (!ret.done) {\n            // 判断是否为 promise 对象，如果没有 `then()` 方法则不是\n            if (\"then\" in ret.value) {\n                // 等待 promise 返回\n                ret.value.then( iterate );\n            }\n            // 如果不是 promise 实例，则说明直接返回了一个值\n            else {\n                // 使用 `setTimeout` 模拟异步操作\n                setTimeout( function(){\n                    iterate( ret.value );\n                }, 0 );\n            }\n        }\n    })();\n}\n```\n\n注意：我们在 `runGenerator()` 中先生成了一个迭代器 `var it = g()`，然后我们会执行这个迭代器直到它完成(`done: true`)。\n\n接着我们就可以使用这个 `runGenerator()` 了：\n\n```\nrunGenerator( function *main(){\n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n```\n\n我们通过生成不同的 promise 实例，分别对这些实例进行 `yield`，不同的实例等待自己的 promise 被 `resolve` 后再执行对应的操作。\n\n这么一来，我们只需要同时生成不同的 promise 实例，就可以『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）了。\n\n既然我们使用了 promises 来管理生成器中处理异步的代码，我们就解决了只有在回调中才能实现的功能，这就避免了回调嵌套了。\n\n使用 Generotos + Promises 的优点是：\n\n1. 我们可以使用内建的错误处理机制。虽然这没有在上面的代码片段中展示出来，但其实很简单：\n\n    监听 promise 中的错误，使用 `it.throw()` 把错误抛出，然后在生成器中使用 `try..catch` 进行捕获和处理即可。\n\n2. 我们可以使用到 Promises 提供的 [control/trustability](http://blog.getify.com/promises-part-2/#uninversion) 特性。\n\n3. Promises 提供了大量处理多并行且复杂的任务的特性。\n    \n    举个栗子：`yield Promise.all([ .. ])` 方法接收一组 promise 组成的数组作为参数，然后 `yield` 一个 promise 提供给生成器处理，这个 promise 会等待数组里所有 promise 完成。当我们得到 `yield` 后的 promise 时，说明传进去的数组中的所有 promise 都已经完成，且是按照他们被传入的顺序完成的。\n\n首先，我们体验一下错误处理：\n\n```\n// 假设1: `makeAjaxCall(..)` 第一个参数判断是否有错误产生\n// 假设2: `runGenerator(..)` 能捕获并处理错误\n\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, function(err,text){\n            // 如果出错，则 reject 这个 promise\n            if (err) reject( err );\n            // 否则，resolve 这个 promise\n            else resolve( text );\n        } );\n    } );\n}\n\nrunGenerator( function *main(){\n    // 捕获第一个请求的错误\n    try {\n        var result1 = yield request( \"http://some.url.1\" );\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var data = JSON.parse( result1 );\n    \n    // 捕获第二个请求的错误\n    try {\n        var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    } catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n```\n\n如果一个 promise 被 `reject` 或遇到其他错误的话，将使用 `it.throw()` (代码片段中没有展示出来)抛出一个生成器的错误，这个错误能被 `try..catch` 捕获。\n\n再举个使用 Promises 管理更复杂的异步操作的栗子：\n\n```\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } )\n    // 对 promise 返回的字符串进行后处理操作\n    .then( function(text){\n        // 是否为一个重定向链接\n        if (/^https?:\\/\\/.+/.test( text )) {\n            // 是的话对向新链接发送请求\n            return request( text );\n        }\n        // 否则，返回字符串\n        else {\n            return text;\n        }\n    } );\n}\n\nrunGenerator( function *main(){\n    var search_terms = yield Promise.all( [\n        request( \"http://some.url.1\" ),\n        request( \"http://some.url.2\" ),\n        request( \"http://some.url.3\" )\n    ] );\n\n    var search_results = yield request(\n        \"http://some.url.4?search=\" + search_terms.join( \"+\" )\n    );\n    var resp = JSON.parse( search_results );\n\n    console.log( \"Search results: \" + resp.value );\n} );\n\n```\n\n`Promise.all([ .. ])` 构造了一个 promise ，等待数组中三个 promise 的完成，这个 promise 会被 `yield` 给 `runGenerator()` 生成器，然后这个生成器就可以恢复迭代。\n\n# 使用其他的 Promise 类库\n\n在上面的代码片段中，我们自己编写了 `runGenerator()` 函数来提供 Generators + Promises 的功能，其实我们也可以使用社区里优秀的类库，举几个栗子： [Q](https://github.com/kriskowal/q) 、[Co](https://github.com/visionmedia/co)、 [asynquence](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 等\n\n接下来我会简要地介绍下 [asynquence](http://github.com/getify/asynquence) 中的 [runner插件](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 。如果你感兴趣的话，可以阅读我写的[两篇深入理解 asynquence 的博文](http://davidwalsh.name/asynquence-part-1/)。\n\n首先，asynquence 提供了回调函数中错误为第一参数的编写风格(error-first style)，举个栗子：\n\n```\nfunction request(url) {\n    return ASQ( function(done){\n        // 传进一个以错误为第一参数的回调函数\n        makeAjaxCall( url, done.errfcb );\n    } );\n}\n```\n\n接着，asynquence 的 runner 插件会接收一个生成器作为参数，这个生成器可以处理传入的数据处理后再传出来，而所有的的错误会自动地传递：\n\n```\n// 我们使用 `getSomeValues()` 来产生一组 promise，并链式地进行异步操作\ngetSomeValues()\n\n// 现在使用一个生成器来处理接收到的数据\n.runner( function*(token){\n    var value1 = token.messages[0];\n    var value2 = token.messages[1];\n    var value3 = token.messages[2];\n\n    // 并行地执行三个 AJAX 请求\n    // 注意: `ASQ().all(..)` 就像之前提过的 `Promise.all(..)`\n    var msgs = yield ASQ().all(\n        request( \"http://some.url.1?v=\" + value1 ),\n        request( \"http://some.url.2?v=\" + value2 ),\n        request( \"http://some.url.3?v=\" + value3 )\n    );\n\n    // 当三个请求都执行完毕后，进入下一步\n    yield (msgs[0] + msgs[1] + msgs[2]);\n} )\n\n// 现在使用前面的生成器返回的值作为参数继续发送 AJAX 请求\n.seq( function(msg){\n    return request( \"http://some.url.4?msg=\" + msg );\n} )\n\n// 完成了一系列请求后，我们就获取到了想要的数据\n.val( function(result){\n    console.log( result ); // 获取数据成功!\n} )\n\n// 如果产生错误，则抛出\n.or( function(err) {\n    console.log( \"Error: \" + err );\n} );\n```\n\n# ES7 async\n\n在 ES7 草案中有一个提议，建议采用另一种新的 `async` 函数类型。\n\n使用这种函数，我们可以向外部发出 promises，然后使用 `async` 函数自动地将这些 promises 连接起来，当 promises 完成的时候，就会恢复 `async` 函数自己的中断（不需要在繁杂的迭代器中手动恢复）。\n\n这个提议如果被采纳的话，可能会像这样：\n\n```\nasync function main() {\n    var result1 = await request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = await request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nmain();\n```\n\n我们使用 `async` 声明了这种异步函数类型，然后使用 `main()` 直接调用这个函数，而不用像使用 `runGenerator()` 或 `ASQ().runner()` 一样进行包装。\n\n此外，我们没有使用 `yield` 关键字，而是使用了新的 `await` 关键字来声明等待 `await` 后面的 promise 的完成。\n\n# 总结\n\n一言以蔽之：Generators + Promises 的组合，强大且优雅地用同步编码风格实现了复杂的异步控制操作。\n\n使用一些简单的工具类库，比如上面提到的 [Q](https://github.com/kriskowal/q) 、[Co](https://github.com/visionmedia/co)、 [asynquence](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 等，我们可以更方便地实现这些操作。\n\n可以预见在不久的将来，当 ES7+ 发布的时候，我们使用 `async` 函数甚至可以无需使用一些类库支撑就可以实现原生的异步生成器了！\n\n\n(译注：本文是第三篇文章，其实还有最后一篇是讲述并发式生成器的实现思路，涉及到 CSP 的相关概念，原文中引用了比较多的东西，读起来比较晦涩难懂，怕翻译出来与原文作者想要表达的东西相差太远，就先放一边了，感兴趣的可以直接[查看原文](http://davidwalsh.name/concurrent-generators)。\n欢迎大牛接力)","html":"<blockquote>\n  <p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/async-generators\">原文地址</a></p>\n  \n  <p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n\n<p>生成器提供了同步方式编写的代码风格，这就允许我们隐藏异步的实现细节。</p>\n\n<p>我们就可以用一种非常自然的方式来表达程序的执行流程，避免了同时处理异步代码的语法和陷阱。</p>\n\n<p>换句话说，我们利用生成器从内到外、从外到内双向传值的特点，将不同的值的处理交给了不同的生成器逻辑，只需要关心获取到特定的值进行某种操作，而无需关心特定的值如何产生（通过<code>netx()</code> 将值的产生逻辑委托出去）。</p>\n\n<p>这么一来，异步处理的优点以及易读的代码结合到一起，就加强了我们程序的可维护性。</p>\n\n<h1 id=\"\">最简单的异步</h1>\n\n<p>举个栗子，假定我们已经有了以下代码：</p>\n\n<pre><code>function makeAjaxCall(url,cb) {  \n    // 执行一个 ajax 请求\n    // 请求完成后执行 `cb(result)` \n}\n\nmakeAjaxCall( \"http://some.url.1\", function(result1){  \n    var data = JSON.parse( result1 );\n\n    makeAjaxCall( \"http://some.url.2/?id=\" + data.id, function(result2){\n        var resp = JSON.parse( result2 );\n        console.log( \"我们请求到的数据是: \" + resp.value );\n    });\n} );\n</code></pre>\n\n<p>使用简单的生成器来表达的话，就像这样：</p>\n\n<pre><code>function request(url) {  \n   // 调用这个普通函数来隐藏异步处理的细节\n   // 使用 `it.next()` 来恢复调用这个普通函数的生成器函数的迭代器\n    makeAjaxCall( url, function(response){\n        // 异步获取到数据后，给生成器发送 `response` 信号\n        it.next( response );\n    } );\n    // 注意: 这里没有返回值\n}\n\nfunction *main() {  \n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nvar it = main();  \nit.next(); // 开始迭代  \n</code></pre>\n\n<p><code>request()</code> 这个工具函数只是将我们的异步请求数据的代码进行了封装，需要注意的是在回调函数中调用了生成器的 <code>next()</code> 方法。</p>\n\n<p>当我们使用 <code>var it = main();</code> 创建了一个迭代器后，紧接着使用 <code>it.next();</code> 开始迭代，这时候遇到第一个 <code>yield</code> 中断了生成器，转而执行 <code>request( \"http://some.url.1\" )</code></p>\n\n<p>当 <code>request( \"http://some.url.1\" )</code> 异步获取到数据后，在回调函数中调用 <code>it.next(response)</code> 将 <code>response</code> 传回给生成器刚刚中断的地方，生成器将继续迭代。</p>\n\n<p>这里的亮点就是，我们在生成器中无需关心异步请求的数据如何获取，我们只知道调用了  <code>request()</code> 后，当需要的数据获取到了，就会通知生成器继续迭代。</p>\n\n<p>这么一来在生成器中我们使用同步方式的编写风格，其实我们获取到了异步数据！</p>\n\n<p>同理，当我们继续调用 <code>it.next()</code> 时，会遇到第二个 <code>yield</code> 中断迭代，发出第二个请求 <code>yield request( \"http://some.url.2?id=\" + data.id )</code> 异步获取到数据后再恢复迭代，我们依旧不用关心异步获取数据的细节了，多爽！</p>\n\n<p>以上这段代码中，<code>request()</code> 请求的是异步 AJAX 请求，但如果我们后续改变程序给 AJAX 设置了缓存了，获取数据会先从缓存中获取，这时候没有执行真正的 AJAX 请求就不能在回调函数中调用 <code>it.next(response)</code> 来恢复生成器的中断了啊！</p>\n\n<p>没关系，我们可以使用一个小技巧来解决这个问题，举个栗子：</p>\n\n<pre><code>// 给 AJAX 设置缓存\nvar cache = {};\n\nfunction request(url) {  \n    // 请求已被缓存\n    if (cache[url]) {\n        // 使用 setTimeout 来模拟异步操作\n        setTimeout( function(){\n            it.next( cache[url] );\n        }, 0 );\n    }\n    // 请求未被缓存，发出真正的请求\n    else {\n        makeAjaxCall( url, function(resp){\n            cache[url] = resp;\n            it.next( resp );\n        } );\n    }\n}\n</code></pre>\n\n<p>看，当我们给我们的程序添加了 AJAX 缓存机制甚至其他异步操作的优化时，我们只改变了  <code>request()</code> 这个工具函数的逻辑，而无需改动调用这个工具函数获取数据的生成器：</p>\n\n<pre><code>var result1 = yield request( \"http://some.url.1\" );  \nvar data = JSON.parse( result1 );  \n..\n</code></pre>\n\n<p>在生成器中，我们还是像以前一样调用 <code>request()</code> 就能获取到需要的异步数据，无需关心获取数据的细节实现！</p>\n\n<p>这就是将异步操作当做一个细节实现抽象出来后展现出的魔力了！</p>\n\n<h1 id=\"\">更好的异步</h1>\n\n<p>上面介绍的异步方案对于简单的异步生成器来说工作良好，但用途有限，我们需要一个更强大的异步方案：使用 Promises.</p>\n\n<p>如果你对 ES6 Promises 有迷惑的话，我建议你先读 <a href=\"http://blog.getify.com/promises-part-1/\">我写的介绍 Promises 的文章</a></p>\n\n<p>我们的代码目前有个严重的问题：回调多了会产生多重嵌套（即回调地狱）。</p>\n\n<p>此外，我们目前还缺乏的东西有：</p>\n\n<ol>\n<li><p>清晰的错误处理逻辑。我们使用 AJAX 的回调可能会检测到一个错误，然后使用 <code>it.throw()</code> 将错误传回给生成器，在生成器中则使用 <code>try..catch</code> 来捕获错误。 <br />\n一来我们需要猜测我们可能发生错误且手动添加对应的错误处理函数，二来我们的错误处理代码没法重复使用。</p></li>\n<li><p>如果 <code>makeAjaxCall()</code> 函数不受我们控制，调用了多次回调的话，也会多次触发回调中的 <code>it.next()</code> ，生成器就会变得非常混乱。</p>\n\n<p>处理和阻止这种问题需要大量的手动工作，也非常不方便。</p></li>\n<li><p>有时候我们需要 『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）。而生成器中的 <code>yield</code> 并不支持两个或多个同时进行。</p></li>\n</ol>\n\n<p>以上这些问题都可以用手动编写代码的方式来解决，但谁会想每次都重新编写类似的重复的代码呢？</p>\n\n<p>我们需要一个更好的可信任、可重复使用的方案来支持我们基于生成器编写异步的代码。</p>\n\n<p>怎么实现？使用 Promises ！</p>\n\n<p>我们将原来的代码加入 Promises 的特性：</p>\n\n<pre><code>function request(url) {  \n    // 注意: 这里返回的是一个 promise\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } );\n}\n</code></pre>\n\n<p><code>request()</code> 函数中创建了一个 promise 实例，一旦 AJAX 请求完成，这个实例将会被 <code>resolved</code>。</p>\n\n<p>我们接着将这个实例返回，这样它就能够被 <code>yield</code> 了。</p>\n\n<p>接下来我们需要一个工具来控制我们生成器的迭代器，接收返回的 promise 实例，然后再通过 <code>next()</code> 来恢复生成器的中断：</p>\n\n<pre><code>// 执行异步的生成器\n// 注意: 这是简化的版本，没有处理错误\nfunction runGenerator(g) {  \n    // 注意：我们使用 `g()` 自动初始化了迭代器\n    var it = g(), ret;\n\n    // 异步地迭代\n    (function iterate(val){\n        ret = it.next( val );\n\n        // 迭代未完成\n        if (!ret.done) {\n            // 判断是否为 promise 对象，如果没有 `then()` 方法则不是\n            if (\"then\" in ret.value) {\n                // 等待 promise 返回\n                ret.value.then( iterate );\n            }\n            // 如果不是 promise 实例，则说明直接返回了一个值\n            else {\n                // 使用 `setTimeout` 模拟异步操作\n                setTimeout( function(){\n                    iterate( ret.value );\n                }, 0 );\n            }\n        }\n    })();\n}\n</code></pre>\n\n<p>注意：我们在 <code>runGenerator()</code> 中先生成了一个迭代器 <code>var it = g()</code>，然后我们会执行这个迭代器直到它完成(<code>done: true</code>)。</p>\n\n<p>接着我们就可以使用这个 <code>runGenerator()</code> 了：</p>\n\n<pre><code>runGenerator( function *main(){  \n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n</code></pre>\n\n<p>我们通过生成不同的 promise 实例，分别对这些实例进行 <code>yield</code>，不同的实例等待自己的 promise 被 <code>resolve</code> 后再执行对应的操作。</p>\n\n<p>这么一来，我们只需要同时生成不同的 promise 实例，就可以『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）了。</p>\n\n<p>既然我们使用了 promises 来管理生成器中处理异步的代码，我们就解决了只有在回调中才能实现的功能，这就避免了回调嵌套了。</p>\n\n<p>使用 Generotos + Promises 的优点是：</p>\n\n<ol>\n<li><p>我们可以使用内建的错误处理机制。虽然这没有在上面的代码片段中展示出来，但其实很简单：</p>\n\n<p>监听 promise 中的错误，使用 <code>it.throw()</code> 把错误抛出，然后在生成器中使用 <code>try..catch</code> 进行捕获和处理即可。</p></li>\n<li><p>我们可以使用到 Promises 提供的 <a href=\"http://blog.getify.com/promises-part-2/#uninversion\">control/trustability</a> 特性。</p></li>\n<li><p>Promises 提供了大量处理多并行且复杂的任务的特性。</p>\n\n<p>举个栗子：<code>yield Promise.all([ .. ])</code> 方法接收一组 promise 组成的数组作为参数，然后 <code>yield</code> 一个 promise 提供给生成器处理，这个 promise 会等待数组里所有 promise 完成。当我们得到 <code>yield</code> 后的 promise 时，说明传进去的数组中的所有 promise 都已经完成，且是按照他们被传入的顺序完成的。</p></li>\n</ol>\n\n<p>首先，我们体验一下错误处理：</p>\n\n<pre><code>// 假设1: `makeAjaxCall(..)` 第一个参数判断是否有错误产生\n// 假设2: `runGenerator(..)` 能捕获并处理错误\n\nfunction request(url) {  \n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, function(err,text){\n            // 如果出错，则 reject 这个 promise\n            if (err) reject( err );\n            // 否则，resolve 这个 promise\n            else resolve( text );\n        } );\n    } );\n}\n\nrunGenerator( function *main(){  \n    // 捕获第一个请求的错误\n    try {\n        var result1 = yield request( \"http://some.url.1\" );\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var data = JSON.parse( result1 );\n\n    // 捕获第二个请求的错误\n    try {\n        var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    } catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n</code></pre>\n\n<p>如果一个 promise 被 <code>reject</code> 或遇到其他错误的话，将使用 <code>it.throw()</code> (代码片段中没有展示出来)抛出一个生成器的错误，这个错误能被 <code>try..catch</code> 捕获。</p>\n\n<p>再举个使用 Promises 管理更复杂的异步操作的栗子：</p>\n\n<pre><code>function request(url) {  \n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } )\n    // 对 promise 返回的字符串进行后处理操作\n    .then( function(text){\n        // 是否为一个重定向链接\n        if (/^https?:\\/\\/.+/.test( text )) {\n            // 是的话对向新链接发送请求\n            return request( text );\n        }\n        // 否则，返回字符串\n        else {\n            return text;\n        }\n    } );\n}\n\nrunGenerator( function *main(){  \n    var search_terms = yield Promise.all( [\n        request( \"http://some.url.1\" ),\n        request( \"http://some.url.2\" ),\n        request( \"http://some.url.3\" )\n    ] );\n\n    var search_results = yield request(\n        \"http://some.url.4?search=\" + search_terms.join( \"+\" )\n    );\n    var resp = JSON.parse( search_results );\n\n    console.log( \"Search results: \" + resp.value );\n} );\n</code></pre>\n\n<p><code>Promise.all([ .. ])</code> 构造了一个 promise ，等待数组中三个 promise 的完成，这个 promise 会被 <code>yield</code> 给 <code>runGenerator()</code> 生成器，然后这个生成器就可以恢复迭代。</p>\n\n<h1 id=\"promise\">使用其他的 Promise 类库</h1>\n\n<p>在上面的代码片段中，我们自己编写了 <code>runGenerator()</code> 函数来提供 Generators + Promises 的功能，其实我们也可以使用社区里优秀的类库，举几个栗子： <a href=\"https://github.com/kriskowal/q\">Q</a> 、<a href=\"https://github.com/visionmedia/co\">Co</a>、 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\">asynquence</a> 等</p>\n\n<p>接下来我会简要地介绍下 <a href=\"http://github.com/getify/asynquence\">asynquence</a> 中的 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\">runner插件</a> 。如果你感兴趣的话，可以阅读我写的<a href=\"http://davidwalsh.name/asynquence-part-1/\">两篇深入理解 asynquence 的博文</a>。</p>\n\n<p>首先，asynquence 提供了回调函数中错误为第一参数的编写风格(error-first style)，举个栗子：</p>\n\n<pre><code>function request(url) {  \n    return ASQ( function(done){\n        // 传进一个以错误为第一参数的回调函数\n        makeAjaxCall( url, done.errfcb );\n    } );\n}\n</code></pre>\n\n<p>接着，asynquence 的 runner 插件会接收一个生成器作为参数，这个生成器可以处理传入的数据处理后再传出来，而所有的的错误会自动地传递：</p>\n\n<pre><code>// 我们使用 `getSomeValues()` 来产生一组 promise，并链式地进行异步操作\ngetSomeValues()\n\n// 现在使用一个生成器来处理接收到的数据\n.runner( function*(token){\n    var value1 = token.messages[0];\n    var value2 = token.messages[1];\n    var value3 = token.messages[2];\n\n    // 并行地执行三个 AJAX 请求\n    // 注意: `ASQ().all(..)` 就像之前提过的 `Promise.all(..)`\n    var msgs = yield ASQ().all(\n        request( \"http://some.url.1?v=\" + value1 ),\n        request( \"http://some.url.2?v=\" + value2 ),\n        request( \"http://some.url.3?v=\" + value3 )\n    );\n\n    // 当三个请求都执行完毕后，进入下一步\n    yield (msgs[0] + msgs[1] + msgs[2]);\n} )\n\n// 现在使用前面的生成器返回的值作为参数继续发送 AJAX 请求\n.seq( function(msg){\n    return request( \"http://some.url.4?msg=\" + msg );\n} )\n\n// 完成了一系列请求后，我们就获取到了想要的数据\n.val( function(result){\n    console.log( result ); // 获取数据成功!\n} )\n\n// 如果产生错误，则抛出\n.or( function(err) {\n    console.log( \"Error: \" + err );\n} );\n</code></pre>\n\n<h1 id=\"es7async\">ES7 async</h1>\n\n<p>在 ES7 草案中有一个提议，建议采用另一种新的 <code>async</code> 函数类型。</p>\n\n<p>使用这种函数，我们可以向外部发出 promises，然后使用 <code>async</code> 函数自动地将这些 promises 连接起来，当 promises 完成的时候，就会恢复 <code>async</code> 函数自己的中断（不需要在繁杂的迭代器中手动恢复）。</p>\n\n<p>这个提议如果被采纳的话，可能会像这样：</p>\n\n<pre><code>async function main() {  \n    var result1 = await request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = await request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nmain();  \n</code></pre>\n\n<p>我们使用 <code>async</code> 声明了这种异步函数类型，然后使用 <code>main()</code> 直接调用这个函数，而不用像使用 <code>runGenerator()</code> 或 <code>ASQ().runner()</code> 一样进行包装。</p>\n\n<p>此外，我们没有使用 <code>yield</code> 关键字，而是使用了新的 <code>await</code> 关键字来声明等待 <code>await</code> 后面的 promise 的完成。</p>\n\n<h1 id=\"\">总结</h1>\n\n<p>一言以蔽之：Generators + Promises 的组合，强大且优雅地用同步编码风格实现了复杂的异步控制操作。</p>\n\n<p>使用一些简单的工具类库，比如上面提到的 <a href=\"https://github.com/kriskowal/q\">Q</a> 、<a href=\"https://github.com/visionmedia/co\">Co</a>、 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\">asynquence</a> 等，我们可以更方便地实现这些操作。</p>\n\n<p>可以预见在不久的将来，当 ES7+ 发布的时候，我们使用 <code>async</code> 函数甚至可以无需使用一些类库支撑就可以实现原生的异步生成器了！</p>\n\n<p>(译注：本文是第三篇文章，其实还有最后一篇是讲述并发式生成器的实现思路，涉及到 CSP 的相关概念，原文中引用了比较多的东西，读起来比较晦涩难懂，怕翻译出来与原文作者想要表达的东西相差太远，就先放一边了，感兴趣的可以直接<a href=\"http://davidwalsh.name/concurrent-generators\">查看原文</a>。\n欢迎大牛接力)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1412016345000,"created_by":1,"updated_at":1412016345000,"updated_by":1,"published_at":1412016345000,"published_by":1},{"id":545,"uuid":"d4383e47-0f3e-4eeb-8430-03525ad10ff0","title":"【译】ES6 Generators（4）并发篇","slug":"es6-generators-4","markdown":"\n\n注意：这篇文章没翻译完，可以先看[原文](http://davidwalsh.name/async-generators)\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/concurrent-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n我们最好的主题是探索前沿的东西，接下来的概念可能会听起来有点懵，但一想到在未来这些东西会大派用场，想想都有点小激动呢！\n\n\n这篇文章的主题受到 [David Nolen](http://github.com/swannodette) [@swannodette](http://twitter.com/swannodette) 的鼓舞，他写了介绍 CSP 的一些文章：\n\n- [Communicating Sequential Processes](http://swannodette.github.io/2013/07/12/communicating-sequential-processes/)\n- [ES6 Generators Deliver Go Style Concurrency](http://swannodette.github.io/2013/08/24/es6-generators-and-csp/)\n- [Extracting Processes](http://swannodette.github.io/2013/07/31/extracting-processes/)\n\n当然，你也可以继续阅读这篇文章，听我娓娓道来并发式生成器的介绍。\n\n我尝试了 Go 语言风格的 CSP API 的实现。当然比我更聪明的同行可能会看到我在这个探索中所遗漏的地方，我会持续不断地探索和尝试，并坚持和你们分享我所发现的东西。\n\n# 了解 CSP (Communicating Sequential Processes)\n\nCSP 这个概念来自 Tony Hoare的《[Communicating Sequential Processes](http://www.usingcsp.com/)》一书。\n\n这是一个非常深的计算机理论，我并不打算以太多晦涩难懂的计算机专业术语，而是轻松地介绍它。\n\n## 『sequential』 即顺序\n\n这是描述 ES6 生成器中单线程行为和同步风格代码的另一种方式。\n\n还记得一个生成器的语法么？\n\n```\nfunction *main() {\n    var x = yield 1;\n    var y = yield x;\n    var z = yield (y * 2);\n}\n```\n\n这里的每一个表达式是按序执行，`yield` 关键字虽然指明了生成器中断和恢复的地方，但并没有改变生成器函数中从上到下执行的顺序，对吧？\n\n## 『Processes』 即进程\n\n每一个生成器表现得就像是一个虚拟的进程，它可以自己中断，向其他生成器(进程)传递信号，且能从其他生成器(进程)接收信号后，恢复自己的执行流程。\n\n如果生成器能够访问共享的内存空间的话（也就是能访问除自己内部的本地变量外的自由变量），它就不是那么独立了。\n\n假设我们有一个不访问外部变量的生成器函数，那么它在理论上就可以执行自己的进程。\n\n但我们通常同时有多个生成器(多进程)绑定在一起，需要彼此间协作以完成任务。\n\n那我们为什么要将生成器分离为多个，而不是合在一起呢？因为我们要做到 *功能与关注点的分离(separation of capabilities/concerns)* 。\n\n假定我们将 XYZ 任务分离为连续的子任务 X, Y, Z 分别实现，就增加了程序的维护性。举个栗子：\n\n```\n// 原来是这样\nfunction XYZ() {\n    console.log('x');\n    console.log('y');\n    console.log('z');\n}\n// 可以拆分为：\nfunction X() {\n    console.log('x');\n    Y();\n}\nfunction Y() {\n    console.log('y');\n    Z();\n}\nfunction Z() {\n    console.log('z');\n}\n```\n将功能进行模块化划分，增大了程序的可维护性。\n\n同理，对于多生成器(多进程)来说，我们也可以这么做。\n\n## 『communicating』 即通信\n\n生成器(进程)之间互相协作，就需要一个通信频道(communication channel)来传递消息。\n\n实际上，我们并不一定需要在通信频道上传递消息来实现通信，我们可以通过移交控制权的方式来实现。\n\n为什么要通过移交控制权的方式呢？主要是因为 JS 是一个单线程的语言。\n\n单线程意味着同一时刻只能执行一个任务，其他任务排在队列里被挂起(或者说是中断)，等待队列前面的任务完成才能恢复自己的执行。\n\n多个独立的生成器(线程)能够协作和通信好像不是很现实，将多个生成器分离以实现松耦合的目标看似美好但好像不切实际。\n\n可能我是错的，但我并没有找到实现任意两个生成器绑定到一起实现 CSP 匹配的方法。要实现这种设计的话，两个生成器或许需要一个通信协议来支撑。\n\n# JS 中的 CSP \n\n这里有几个应用于 JS 的 CSP 理论探索。\n\n前面提到的 David Nolen 有几个有趣的项目，包括 [Om](https://github.com/swannodette/om)、[core.async](http://www.hakkalabs.co/articles/core-async-a -clojure-library/)。\n\n[Koa](http://koajs.com/) 也有一个有趣的实现，主要是通过它的 `use()` 方法。\n\n还有一个类似 core.async/Go CSP  API 实现的 [js-csp](https://github.com/ubolonton/js-csp)。\n\n你可以去了解这几个项目用 JS 实现的不同的 CSP。\n\n## asynquence 中 CSP 的实现\n\n我已经有 asynquence 的 runner() 插件来处理[异步的生成器操作](http://davidwalsh.name/async-generators/#rungenerator-library-utility)，所以我在这里尝试实现了 CSP 功能。\n\n我需要解决的第一个问题是：我们怎么知道哪一个生成器即将接管控制权呢？\n\n我们可以让每一个生成器都有一些特定的属性如 ID 来告知其他生成器的话，这样做好像比较繁琐笨重。\n\n在经过各种实验后，我选择了一种循环调度的方法：如果我们要将 A, B, C 三个生成器连接起来，且 A 会得到控制权，接着 A 发出 `yield` 信号将控制权移交给 B, 再接着 B 发出 `yield` 信号将控制权移交给 C，最后 C 再把控制权移交给 A，形成一个循环。\n\n但我们怎么精确地实现控制呢？有明确的 API 么？同样，在经过很多实验后，我使用了一个巧妙的办法，与 [Koa 中实现的类似](http://koajs.com/#cascading)：\n\n每一个生成器都有一个指向共享的令牌(token)，对这个令牌  `yield` 后就会发出一个移交控制的信号。\n\n未完待续。。。http://davidwalsh.name/concurrent-generators\n\n\n\n\n\n","html":"<p>注意：这篇文章没翻译完，可以先看<a href=\"http://davidwalsh.name/async-generators\">原文</a></p>\n\n<blockquote>\n  <p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/concurrent-generators\">原文地址</a></p>\n  \n  <p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n\n<p>我们最好的主题是探索前沿的东西，接下来的概念可能会听起来有点懵，但一想到在未来这些东西会大派用场，想想都有点小激动呢！</p>\n\n<p>这篇文章的主题受到 <a href=\"http://github.com/swannodette\">David Nolen</a> <a href=\"http://twitter.com/swannodette\">@swannodette</a> 的鼓舞，他写了介绍 CSP 的一些文章：</p>\n\n<ul>\n<li><a href=\"http://swannodette.github.io/2013/07/12/communicating-sequential-processes/\">Communicating Sequential Processes</a></li>\n<li><a href=\"http://swannodette.github.io/2013/08/24/es6-generators-and-csp/\">ES6 Generators Deliver Go Style Concurrency</a></li>\n<li><a href=\"http://swannodette.github.io/2013/07/31/extracting-processes/\">Extracting Processes</a></li>\n</ul>\n\n<p>当然，你也可以继续阅读这篇文章，听我娓娓道来并发式生成器的介绍。</p>\n\n<p>我尝试了 Go 语言风格的 CSP API 的实现。当然比我更聪明的同行可能会看到我在这个探索中所遗漏的地方，我会持续不断地探索和尝试，并坚持和你们分享我所发现的东西。</p>\n\n<h1 id=\"cspcommunicatingsequentialprocesses\">了解 CSP (Communicating Sequential Processes)</h1>\n\n<p>CSP 这个概念来自 Tony Hoare的《<a href=\"http://www.usingcsp.com/\">Communicating Sequential Processes</a>》一书。</p>\n\n<p>这是一个非常深的计算机理论，我并不打算以太多晦涩难懂的计算机专业术语，而是轻松地介绍它。</p>\n\n<h2 id=\"sequential\">『sequential』 即顺序</h2>\n\n<p>这是描述 ES6 生成器中单线程行为和同步风格代码的另一种方式。</p>\n\n<p>还记得一个生成器的语法么？</p>\n\n<pre><code>function *main() {  \n    var x = yield 1;\n    var y = yield x;\n    var z = yield (y * 2);\n}\n</code></pre>\n\n<p>这里的每一个表达式是按序执行，<code>yield</code> 关键字虽然指明了生成器中断和恢复的地方，但并没有改变生成器函数中从上到下执行的顺序，对吧？</p>\n\n<h2 id=\"processes\">『Processes』 即进程</h2>\n\n<p>每一个生成器表现得就像是一个虚拟的进程，它可以自己中断，向其他生成器(进程)传递信号，且能从其他生成器(进程)接收信号后，恢复自己的执行流程。</p>\n\n<p>如果生成器能够访问共享的内存空间的话（也就是能访问除自己内部的本地变量外的自由变量），它就不是那么独立了。</p>\n\n<p>假设我们有一个不访问外部变量的生成器函数，那么它在理论上就可以执行自己的进程。</p>\n\n<p>但我们通常同时有多个生成器(多进程)绑定在一起，需要彼此间协作以完成任务。</p>\n\n<p>那我们为什么要将生成器分离为多个，而不是合在一起呢？因为我们要做到 <em>功能与关注点的分离(separation of capabilities/concerns)</em> 。</p>\n\n<p>假定我们将 XYZ 任务分离为连续的子任务 X, Y, Z 分别实现，就增加了程序的维护性。举个栗子：</p>\n\n<pre><code>// 原来是这样\nfunction XYZ() {  \n    console.log('x');\n    console.log('y');\n    console.log('z');\n}\n// 可以拆分为：\nfunction X() {  \n    console.log('x');\n    Y();\n}\nfunction Y() {  \n    console.log('y');\n    Z();\n}\nfunction Z() {  \n    console.log('z');\n}\n</code></pre>\n\n<p>将功能进行模块化划分，增大了程序的可维护性。</p>\n\n<p>同理，对于多生成器(多进程)来说，我们也可以这么做。</p>\n\n<h2 id=\"communicating\">『communicating』 即通信</h2>\n\n<p>生成器(进程)之间互相协作，就需要一个通信频道(communication channel)来传递消息。</p>\n\n<p>实际上，我们并不一定需要在通信频道上传递消息来实现通信，我们可以通过移交控制权的方式来实现。</p>\n\n<p>为什么要通过移交控制权的方式呢？主要是因为 JS 是一个单线程的语言。</p>\n\n<p>单线程意味着同一时刻只能执行一个任务，其他任务排在队列里被挂起(或者说是中断)，等待队列前面的任务完成才能恢复自己的执行。</p>\n\n<p>多个独立的生成器(线程)能够协作和通信好像不是很现实，将多个生成器分离以实现松耦合的目标看似美好但好像不切实际。</p>\n\n<p>可能我是错的，但我并没有找到实现任意两个生成器绑定到一起实现 CSP 匹配的方法。要实现这种设计的话，两个生成器或许需要一个通信协议来支撑。</p>\n\n<h1 id=\"jscsp\">JS 中的 CSP</h1>\n\n<p>这里有几个应用于 JS 的 CSP 理论探索。</p>\n\n<p>前面提到的 David Nolen 有几个有趣的项目，包括 <a href=\"https://github.com/swannodette/om\">Om</a>、<a href=\"http://www.hakkalabs.co/articles/core-async-a -clojure-library/\">core.async</a>。</p>\n\n<p><a href=\"http://koajs.com/\">Koa</a> 也有一个有趣的实现，主要是通过它的 <code>use()</code> 方法。</p>\n\n<p>还有一个类似 core.async/Go CSP  API 实现的 <a href=\"https://github.com/ubolonton/js-csp\">js-csp</a>。</p>\n\n<p>你可以去了解这几个项目用 JS 实现的不同的 CSP。</p>\n\n<h2 id=\"asynquencecsp\">asynquence 中 CSP 的实现</h2>\n\n<p>我已经有 asynquence 的 runner() 插件来处理<a href=\"http://davidwalsh.name/async-generators/#rungenerator-library-utility\">异步的生成器操作</a>，所以我在这里尝试实现了 CSP 功能。</p>\n\n<p>我需要解决的第一个问题是：我们怎么知道哪一个生成器即将接管控制权呢？</p>\n\n<p>我们可以让每一个生成器都有一些特定的属性如 ID 来告知其他生成器的话，这样做好像比较繁琐笨重。</p>\n\n<p>在经过各种实验后，我选择了一种循环调度的方法：如果我们要将 A, B, C 三个生成器连接起来，且 A 会得到控制权，接着 A 发出 <code>yield</code> 信号将控制权移交给 B, 再接着 B 发出 <code>yield</code> 信号将控制权移交给 C，最后 C 再把控制权移交给 A，形成一个循环。</p>\n\n<p>但我们怎么精确地实现控制呢？有明确的 API 么？同样，在经过很多实验后，我使用了一个巧妙的办法，与 <a href=\"http://koajs.com/#cascading\">Koa 中实现的类似</a>：</p>\n\n<p>每一个生成器都有一个指向共享的令牌(token)，对这个令牌  <code>yield</code> 后就会发出一个移交控制的信号。</p>\n\n<p>未完待续。。。<a href=\"http://davidwalsh.name/concurrent-generators\">http://davidwalsh.name/concurrent-generators</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1412102745000,"created_by":1,"updated_at":1412102745000,"updated_by":1,"published_at":1412102745000,"published_by":1},{"id":546,"uuid":"97c50340-d368-45f5-a6b9-7444ac62f06d","title":"【译】HTML5 prefetch","slug":"html5-prefetch","markdown":"\n\n> 声明：此文带着自己的理解，不完全按原文翻译，[原文地址](https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d)\n\nprefetch 即预加载，在用户需要前我们就将所需的资源加载完毕。\n\n# 有了浏览器缓存，为何还需要预加载？\n\n- 用户可能是第一次访问网站，此时还无缓存\n- 用户可能清空了缓存\n- 缓存可能已经过期，资源将重新加载\n- 用户访问的缓存文件可能不是最新的，需要重新加载\n\n# Chrome 的预加载技术\n\n现在的 chrome 聪明到根据你的浏览记录，预测到你可能访问或搜索哪些网站，在你打开网站之前就加载好了一些资源了。\n举个栗子，当你在搜索框输入 \"amaz\" 时，它猜测到你可能要访问 amazon.com，可能就帮你加载了这个网站的一些资源。\n如果这个预测算法精准的话，就能大大地提高用户的浏览体验了。\n\n# DNS prefetch\n\n我们知道，当我们访问一个网站如 www.amazon.com 时，需要将这个域名先转化为对应的 IP 地址，这是一个非常耗时的过程。\n\nDNS prefetch 分析这个页面需要的资源所在的域名，浏览器空闲时提前将这些域名转化为 IP 地址，真正请求资源时就避免了上述这个过程的时间。\n\n```\n<meta http-equiv='x-dns-prefetch-control' content='on'>\n<link rel='dns-prefetch' href='http://g-ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://z-ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://completion.amazon.com'>\n<link rel='dns-prefetch' href='http://fls-na.amazon.com'>\n```\n\n应用场景1：我们的资源存在在不同的 CDN 中，那提前声明好这些资源的域名，就可以节省请求发生时产生的域名解析的时间。\n应用场景2：如果我们知道用户接下来的操作一定会发起一起资源的请求，那就可以将这个资源进行 DNS-Prefetch，加强用户体验。\n\n# Resource prefetch\n\n在 Chrome 下，我们可以用 link标签声明特定文件的预加载：\n\n```\n<link rel='subresource' href='critical.js'>\n<link rel='subresource' href='main.css'>\n\n<link rel='prefetch' href='secondary.js'>\n```\n\n在 Firefox 中或用 meta 标签声明：\n\n```\n<meta http-equiv=\"Link\" content=\"<critical.js>; rel=prefetch\">\n```\n\nrel='subresource' 表示当前页面必须加载的资源，应该放到页面最顶端先加载，有最高的优先级。\n\nrel='prefetch' 表示当 subresource 所有资源都加载完后，开始预加载这里指定的资源，有最低的优先级。\n\n注意：只有可缓存的资源才进行预加载，否则浪费资源！\n\n# Pre render\n\n前面说到的预解析DNS、预加载资源已经够强悍了有木有，可还有更厉害的预渲染（Pre-rendering）！\n\n预渲染意味着我们提前加载好用户即将访问的下一个页面，否则进行预渲染这个页面将浪费资源，慎用！\n\n```\n<link rel='prerender' href='http://www.pagetoprerender.com'>\n```\n\nrel='prerender' 表示浏览器会帮我们渲染但隐藏指定的页面，一旦我们访问这个页面，则秒开了！\n\n在 Firefox 中或用 rel='next' 来声明\n\n```\n<link rel=\"next\" href=\"http://www.pagetoprerender.com\">\n```\n\n# 不是所有的资源都可以预加载\n\n当资源为以下列表中的资源时，将阻止预渲染操作：\n\n- URL 中包含下载资源\n- 页面中包含音频、视频\n- POST、PUT 和 DELETE 操作的 ajax 请求\n- HTTP 认证(Authentication)\n- HTTPS 页面\n- 含恶意软件的页面\n- 弹窗页面\n- 占用资源很多的页面\n- 打开了 chrome developer tools 开发工具\n\n# 手动触发预渲染操作\n\n在 head 中强势插入 link[rel='prerender'] 即可：\n\n```\nvar hint =document.createElement(\"link\")\nhint.setAttribute(“rel”,”prerender”)\nhint.setAttribute(“href”,”next-page.html”)\ndocument.getElementsByTagName(“head”)[0].appendChild(hint)\n```\n\n# 兼容性\n\n这么好用的特性，当然要考虑各浏览器的兼容程度了(哭：\n\nIE9 支持 DNS pre-fetching 但管它叫 prefetch。\n\nIE10+ 中 dns-prefetch 和 prefetch 是等价的。\n\n其他方面的测试，目前还没有很好的方案，暂且只能通过查看浏览器是否缓存来测试。 \n\n在 Chrome 中打开了 chrome developer tools 开发工具会阻止页面的预渲染，所以我们看不到这个过程，但可以在 chrome://cache/ 或 chrome://net-internals/#prerender 中查看。\n\nFirefox 可以在 about:cache 中查看。\n\n# 警告\n\n> 这些特定还是实验性质的，将来可能改变。\n> \n> 权利越大，责任越大，不要滥用！\n\n\n### 参考链接\n\n- [html5-prefetch](https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d)\n\n- [MDN Controlling DNS prefetching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Controlling_DNS_prefetching)\n\n- [MDN Link prefetching FAQ](https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ)","html":"<blockquote>\n  <p>声明：此文带着自己的理解，不完全按原文翻译，<a href=\"https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d\">原文地址</a></p>\n</blockquote>\n\n<p>prefetch 即预加载，在用户需要前我们就将所需的资源加载完毕。</p>\n\n<h1 id=\"\">有了浏览器缓存，为何还需要预加载？</h1>\n\n<ul>\n<li>用户可能是第一次访问网站，此时还无缓存</li>\n<li>用户可能清空了缓存</li>\n<li>缓存可能已经过期，资源将重新加载</li>\n<li>用户访问的缓存文件可能不是最新的，需要重新加载</li>\n</ul>\n\n<h1 id=\"chrome\">Chrome 的预加载技术</h1>\n\n<p>现在的 chrome 聪明到根据你的浏览记录，预测到你可能访问或搜索哪些网站，在你打开网站之前就加载好了一些资源了。\n举个栗子，当你在搜索框输入 \"amaz\" 时，它猜测到你可能要访问 amazon.com，可能就帮你加载了这个网站的一些资源。\n如果这个预测算法精准的话，就能大大地提高用户的浏览体验了。</p>\n\n<h1 id=\"dnsprefetch\">DNS prefetch</h1>\n\n<p>我们知道，当我们访问一个网站如 www.amazon.com 时，需要将这个域名先转化为对应的 IP 地址，这是一个非常耗时的过程。</p>\n\n<p>DNS prefetch 分析这个页面需要的资源所在的域名，浏览器空闲时提前将这些域名转化为 IP 地址，真正请求资源时就避免了上述这个过程的时间。</p>\n\n<pre><code>&lt;meta http-equiv='x-dns-prefetch-control' content='on'&gt;  \n&lt;link rel='dns-prefetch' href='http://g-ecx.images-amazon.com'&gt;  \n&lt;link rel='dns-prefetch' href='http://z-ecx.images-amazon.com'&gt;  \n&lt;link rel='dns-prefetch' href='http://ecx.images-amazon.com'&gt;  \n&lt;link rel='dns-prefetch' href='http://completion.amazon.com'&gt;  \n&lt;link rel='dns-prefetch' href='http://fls-na.amazon.com'&gt;  \n</code></pre>\n\n<p>应用场景1：我们的资源存在在不同的 CDN 中，那提前声明好这些资源的域名，就可以节省请求发生时产生的域名解析的时间。\n应用场景2：如果我们知道用户接下来的操作一定会发起一起资源的请求，那就可以将这个资源进行 DNS-Prefetch，加强用户体验。</p>\n\n<h1 id=\"resourceprefetch\">Resource prefetch</h1>\n\n<p>在 Chrome 下，我们可以用 link标签声明特定文件的预加载：</p>\n\n<pre><code>&lt;link rel='subresource' href='critical.js'&gt;  \n&lt;link rel='subresource' href='main.css'&gt;\n\n&lt;link rel='prefetch' href='secondary.js'&gt;  \n</code></pre>\n\n<p>在 Firefox 中或用 meta 标签声明：</p>\n\n<pre><code>&lt;meta http-equiv=\"Link\" content=\"&lt;critical.js&gt;; rel=prefetch\"&gt;  \n</code></pre>\n\n<p>rel='subresource' 表示当前页面必须加载的资源，应该放到页面最顶端先加载，有最高的优先级。</p>\n\n<p>rel='prefetch' 表示当 subresource 所有资源都加载完后，开始预加载这里指定的资源，有最低的优先级。</p>\n\n<p>注意：只有可缓存的资源才进行预加载，否则浪费资源！</p>\n\n<h1 id=\"prerender\">Pre render</h1>\n\n<p>前面说到的预解析DNS、预加载资源已经够强悍了有木有，可还有更厉害的预渲染（Pre-rendering）！</p>\n\n<p>预渲染意味着我们提前加载好用户即将访问的下一个页面，否则进行预渲染这个页面将浪费资源，慎用！</p>\n\n<pre><code>&lt;link rel='prerender' href='http://www.pagetoprerender.com'&gt;  \n</code></pre>\n\n<p>rel='prerender' 表示浏览器会帮我们渲染但隐藏指定的页面，一旦我们访问这个页面，则秒开了！</p>\n\n<p>在 Firefox 中或用 rel='next' 来声明</p>\n\n<pre><code>&lt;link rel=\"next\" href=\"http://www.pagetoprerender.com\"&gt;  \n</code></pre>\n\n<h1 id=\"\">不是所有的资源都可以预加载</h1>\n\n<p>当资源为以下列表中的资源时，将阻止预渲染操作：</p>\n\n<ul>\n<li>URL 中包含下载资源</li>\n<li>页面中包含音频、视频</li>\n<li>POST、PUT 和 DELETE 操作的 ajax 请求</li>\n<li>HTTP 认证(Authentication)</li>\n<li>HTTPS 页面</li>\n<li>含恶意软件的页面</li>\n<li>弹窗页面</li>\n<li>占用资源很多的页面</li>\n<li>打开了 chrome developer tools 开发工具</li>\n</ul>\n\n<h1 id=\"\">手动触发预渲染操作</h1>\n\n<p>在 head 中强势插入 link[rel='prerender'] 即可：</p>\n\n<pre><code>var hint =document.createElement(\"link\")  \nhint.setAttribute(“rel”,”prerender”)  \nhint.setAttribute(“href”,”next-page.html”)  \ndocument.getElementsByTagName(“head”)[0].appendChild(hint)  \n</code></pre>\n\n<h1 id=\"\">兼容性</h1>\n\n<p>这么好用的特性，当然要考虑各浏览器的兼容程度了(哭：</p>\n\n<p>IE9 支持 DNS pre-fetching 但管它叫 prefetch。</p>\n\n<p>IE10+ 中 dns-prefetch 和 prefetch 是等价的。</p>\n\n<p>其他方面的测试，目前还没有很好的方案，暂且只能通过查看浏览器是否缓存来测试。 </p>\n\n<p>在 Chrome 中打开了 chrome developer tools 开发工具会阻止页面的预渲染，所以我们看不到这个过程，但可以在 chrome://cache/ 或 chrome://net-internals/#prerender 中查看。</p>\n\n<p>Firefox 可以在 about:cache 中查看。</p>\n\n<h1 id=\"\">警告</h1>\n\n<blockquote>\n  <p>这些特定还是实验性质的，将来可能改变。</p>\n  \n  <p>权利越大，责任越大，不要滥用！</p>\n</blockquote>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><p><a href=\"https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d\">html5-prefetch</a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Controlling_DNS_prefetching\">MDN Controlling DNS prefetching</a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\">MDN Link prefetching FAQ</a></p></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1407782745000,"created_by":1,"updated_at":1407782745000,"updated_by":1,"published_at":1407782745000,"published_by":1},{"id":547,"uuid":"4fbd5bff-4455-40f2-8887-0b5656e938f8","title":"一通懒觉引发的心理革命","slug":"-tong-lan-jue-yin-fa-de-xin-li-ge-ming","markdown":"\n\n一通五点多睡到九点的懒觉，没有如往日一样的罪恶感。反反复复醒醒睡睡，也许，这么多天来的问题有了答案。写此日志，仅为日后提醒自己。\n\n&nbsp;\n\n★痴狂于“大学！” 迷茫以“大学？”\n\n高一的时候，“要是我能考上二本就好了。”\n\n高二的时候，“如果考上二本，同时又比二本的人多几十分不是很吃亏？”\n\n高三的时候，“明年六月，你会挽雕弓如满月！”\n\n一步步的追求，的确换来今日华园芬芳。\n\n可如今大一的时候，“读大学，究竟为了什么？”\n\n考后狂欢着，让一个单纯的自己憧憬精彩的大学，痴狂地以为能够指点江山。\n\n可，你错了！\n\n八月加入<span style=\"font-family: 'Times New Roman';\">CCPS</span> <span style=\"font-family: 宋体;\">的时候，一道问题是“你会因为自己是农村孩子而感到自卑或骄傲吗？”我重重地写下，“骄傲不可能，自卑不需要！”</span>\n\n这实则是多么可笑？带着傲气野心，却又发现没有资本炫耀。这是自负，还是自卑？不，自负与自卑的共性在于，你没有对自己进行合理定位。\n\n你信誓旦旦地在日志里写下“从现在出发”后进军华园，却猛然发现你的雄心大志荡然无存。\n\n因为，人才济济，草根一个，你有何资本？\n\n因为，纷呈复杂，社会一个，你为何天真？\n\n★迷茫于“大学？” 尝试以“大学？！”\n\n☆关于坚持\n\n噢，你没有任何资本，如果你再不改变，你将被撕扯得面目全非。\n\n你有努力，尽管你知道，努力不一定会有成效。正如下午<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">突如其来的打击让你以为你根本就不是编程的料。</span>\n\n可你还是安慰自己，不努力就一定没有成效。\n\n不可笑。\n\n☆关于幸福\n\n当你哭着没有新鞋子穿的时候，却发现其实别人没有脚。\n\n你承认你对大学的憧憬被击得支离破碎，你无法原谅自己，因而特立独行了一个学期，尽管你知道，这不是你一贯的风格。\n\n可静，却给了你另一个世界。\n\n你可以惬意地逛逛大学城，或骑车，或慢跑；\n\n你可以大声地叫师傅“打四两！”，然后又将慢慢把一份汤喝个精光；\n\n你可以舒坦地泡上一整天的图书馆，或抱着一本书，或打开了电脑；\n\n静谧、思索，紧密联系。\n\n有伴同行是幸福，因喧闹，欢笑；无伴独行是幸福，因安静，思考。\n\n渐渐发现，你既喜欢一群人的狂欢，狂欢里的歇斯底里，又喜欢一个人的孤单，孤单中的自我满足。\n\n渐渐发现，从小到大没看过任何小说的自己，爱上了宅在图书馆某个角落捧一缕《密色阳光》在《平凡的世界里》品读人生中的《傲慢与偏见》；\n\n渐渐发现，从未认真关注过这个社会的自己，会时常打开网页去窥探这个难以形容的世界，或感动于某个故事，或愤慨于某社会不公，更甚为<span style=\"font-family: 'Times New Roman';\">WK</span> <span style=\"font-family: 宋体;\">村民感到担忧；</span>\n\n渐渐发现，你喜欢上了这个世界，出于内心的喜爱，于是你有了携单反出游的小梦想。\n\n☆关于理想\n\n理想很丰满，现实很骨感。\n\n雄心大志的荡然无存是历史必然，因为你意识到这是对自己的不合理安排。\n\n某师兄说：“大学，就是不断尝试，直到找到自己的生存方式。”尝试是美好的，因为你永远不知道下一颗巧克力是什么味道。可代价是惨痛的，你永远不知道尝试后你会失去什么。\n\n所以，当你尝试后，你坚定了自己的方向，然后告诉自己，你的道路可以被毁灭，但你的理想不会剥夺！\n\n你不想乖乖地读完大学，就业，结婚，生子，养老。你有一个脱离现实束缚的追求，尽管你知道可能性更大的残酷结果会让你一无所有。可理想，你甚至自己都无权利剥夺！\n\n于是，你安慰自己，只要在老年回首时，不会因碌碌无为而悔恨就可。（“为而无果亦是为”，不是么？”）\n\n&nbsp;\n\n&nbsp;\n\n☆关于思考\n\n与其诅咒黑暗，不如点亮蜡烛。\n\n还记得你曾经肆无忌惮地谴责这浮躁的社会吗？\n\n噢，对，你发现浮躁的其实是自己。\n\n不是风动，不是幡动，而是心动了吧？\n\n你需要静静地思考。\n\n不，你不能用“思考”这神圣的词！\n\n因为，你口口声声地说“独立之思想，自由之精神。”“学习就是在别人思想的指导下建立起自己的思想”，可你却没有做到。\n\n你会“旁征博引”？你会“长篇大论”？\n\n其实，你这是在高谈阔论，你只会信口雌黄！\n\n所以，你修养还不厚，你还需阅读，思索，沉淀。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n★尝试于“大学？！” 坚定以信念\n\n伴随着这两天“该死”的期末考试，一个学期就将结束。你基本荒废了你这学期的学业，可你又获得了进步。（提出此矛盾命题，因人是矛盾体，对否？）\n\n你到现在还不会编程，你一直拥有挂科的风险；\n\n你一直用定式思维去学习，无法变通，所以你始终没有获得学习进步；\n\n你没有积极主动地融入你的班级，没有促进班集体建设；\n\n可，你就学会了用心去体验生活，关注社会。你可以以此来搪塞、安慰自己。\n\n&nbsp;\n\n☆提点坚持\n\n坚持你喜欢的，你认为对的。读大学，就不该为了学分绩点而读千篇一律的课程，<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">和工图挂就挂嘛！</span>\n\n坚持你阅读的，兴趣使然的。过日子，就该随性而为不是嘛！\n\n坚持攒钱，买个单反。高三你不是攒钱买上手机了嘛！现在还行！\n\n坚持运动，额，两天没跑内环愧疚下先。这体质，一耽搁可就一生不变了。\n\n一言以蔽之，“取舍得当，坚持该坚持的”。\n<div></div>\n后记--\n\n谢谢华园静谧的图书馆给我提供了场所可以天天舒适地懒睡。此文有意写之，原无意公布，可又有点分享的私心。不为展示，只为日后回览提醒愚昧的自己。","html":"<p>一通五点多睡到九点的懒觉，没有如往日一样的罪恶感。反反复复醒醒睡睡，也许，这么多天来的问题有了答案。写此日志，仅为日后提醒自己。</p>\n\n<p>&nbsp;</p>\n\n<p>★痴狂于“大学！” 迷茫以“大学？”</p>\n\n<p>高一的时候，“要是我能考上二本就好了。”</p>\n\n<p>高二的时候，“如果考上二本，同时又比二本的人多几十分不是很吃亏？”</p>\n\n<p>高三的时候，“明年六月，你会挽雕弓如满月！”</p>\n\n<p>一步步的追求，的确换来今日华园芬芳。</p>\n\n<p>可如今大一的时候，“读大学，究竟为了什么？”</p>\n\n<p>考后狂欢着，让一个单纯的自己憧憬精彩的大学，痴狂地以为能够指点江山。</p>\n\n<p>可，你错了！</p>\n\n<p>八月加入<span style=\"font-family: 'Times New Roman';\">CCPS</span> <span style=\"font-family: 宋体;\">的时候，一道问题是“你会因为自己是农村孩子而感到自卑或骄傲吗？”我重重地写下，“骄傲不可能，自卑不需要！”</span></p>\n\n<p>这实则是多么可笑？带着傲气野心，却又发现没有资本炫耀。这是自负，还是自卑？不，自负与自卑的共性在于，你没有对自己进行合理定位。</p>\n\n<p>你信誓旦旦地在日志里写下“从现在出发”后进军华园，却猛然发现你的雄心大志荡然无存。</p>\n\n<p>因为，人才济济，草根一个，你有何资本？</p>\n\n<p>因为，纷呈复杂，社会一个，你为何天真？</p>\n\n<p>★迷茫于“大学？” 尝试以“大学？！”</p>\n\n<p>☆关于坚持</p>\n\n<p>噢，你没有任何资本，如果你再不改变，你将被撕扯得面目全非。</p>\n\n<p>你有努力，尽管你知道，努力不一定会有成效。正如下午<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">突如其来的打击让你以为你根本就不是编程的料。</span></p>\n\n<p>可你还是安慰自己，不努力就一定没有成效。</p>\n\n<p>不可笑。</p>\n\n<p>☆关于幸福</p>\n\n<p>当你哭着没有新鞋子穿的时候，却发现其实别人没有脚。</p>\n\n<p>你承认你对大学的憧憬被击得支离破碎，你无法原谅自己，因而特立独行了一个学期，尽管你知道，这不是你一贯的风格。</p>\n\n<p>可静，却给了你另一个世界。</p>\n\n<p>你可以惬意地逛逛大学城，或骑车，或慢跑；</p>\n\n<p>你可以大声地叫师傅“打四两！”，然后又将慢慢把一份汤喝个精光；</p>\n\n<p>你可以舒坦地泡上一整天的图书馆，或抱着一本书，或打开了电脑；</p>\n\n<p>静谧、思索，紧密联系。</p>\n\n<p>有伴同行是幸福，因喧闹，欢笑；无伴独行是幸福，因安静，思考。</p>\n\n<p>渐渐发现，你既喜欢一群人的狂欢，狂欢里的歇斯底里，又喜欢一个人的孤单，孤单中的自我满足。</p>\n\n<p>渐渐发现，从小到大没看过任何小说的自己，爱上了宅在图书馆某个角落捧一缕《密色阳光》在《平凡的世界里》品读人生中的《傲慢与偏见》；</p>\n\n<p>渐渐发现，从未认真关注过这个社会的自己，会时常打开网页去窥探这个难以形容的世界，或感动于某个故事，或愤慨于某社会不公，更甚为<span style=\"font-family: 'Times New Roman';\">WK</span> <span style=\"font-family: 宋体;\">村民感到担忧；</span></p>\n\n<p>渐渐发现，你喜欢上了这个世界，出于内心的喜爱，于是你有了携单反出游的小梦想。</p>\n\n<p>☆关于理想</p>\n\n<p>理想很丰满，现实很骨感。</p>\n\n<p>雄心大志的荡然无存是历史必然，因为你意识到这是对自己的不合理安排。</p>\n\n<p>某师兄说：“大学，就是不断尝试，直到找到自己的生存方式。”尝试是美好的，因为你永远不知道下一颗巧克力是什么味道。可代价是惨痛的，你永远不知道尝试后你会失去什么。</p>\n\n<p>所以，当你尝试后，你坚定了自己的方向，然后告诉自己，你的道路可以被毁灭，但你的理想不会剥夺！</p>\n\n<p>你不想乖乖地读完大学，就业，结婚，生子，养老。你有一个脱离现实束缚的追求，尽管你知道可能性更大的残酷结果会让你一无所有。可理想，你甚至自己都无权利剥夺！</p>\n\n<p>于是，你安慰自己，只要在老年回首时，不会因碌碌无为而悔恨就可。（“为而无果亦是为”，不是么？”）</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>☆关于思考</p>\n\n<p>与其诅咒黑暗，不如点亮蜡烛。</p>\n\n<p>还记得你曾经肆无忌惮地谴责这浮躁的社会吗？</p>\n\n<p>噢，对，你发现浮躁的其实是自己。</p>\n\n<p>不是风动，不是幡动，而是心动了吧？</p>\n\n<p>你需要静静地思考。</p>\n\n<p>不，你不能用“思考”这神圣的词！</p>\n\n<p>因为，你口口声声地说“独立之思想，自由之精神。”“学习就是在别人思想的指导下建立起自己的思想”，可你却没有做到。</p>\n\n<p>你会“旁征博引”？你会“长篇大论”？</p>\n\n<p>其实，你这是在高谈阔论，你只会信口雌黄！</p>\n\n<p>所以，你修养还不厚，你还需阅读，思索，沉淀。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>★尝试于“大学？！” 坚定以信念</p>\n\n<p>伴随着这两天“该死”的期末考试，一个学期就将结束。你基本荒废了你这学期的学业，可你又获得了进步。（提出此矛盾命题，因人是矛盾体，对否？）</p>\n\n<p>你到现在还不会编程，你一直拥有挂科的风险；</p>\n\n<p>你一直用定式思维去学习，无法变通，所以你始终没有获得学习进步；</p>\n\n<p>你没有积极主动地融入你的班级，没有促进班集体建设；</p>\n\n<p>可，你就学会了用心去体验生活，关注社会。你可以以此来搪塞、安慰自己。</p>\n\n<p>&nbsp;</p>\n\n<p>☆提点坚持</p>\n\n<p>坚持你喜欢的，你认为对的。读大学，就不该为了学分绩点而读千篇一律的课程，<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">和工图挂就挂嘛！</span></p>\n\n<p>坚持你阅读的，兴趣使然的。过日子，就该随性而为不是嘛！</p>\n\n<p>坚持攒钱，买个单反。高三你不是攒钱买上手机了嘛！现在还行！</p>\n\n<p>坚持运动，额，两天没跑内环愧疚下先。这体质，一耽搁可就一生不变了。</p>\n\n<p>一言以蔽之，“取舍得当，坚持该坚持的”。</p>\n\n<div></div>  \n\n<p>后记--</p>\n\n<p>谢谢华园静谧的图书馆给我提供了场所可以天天舒适地懒睡。此文有意写之，原无意公布，可又有点分享的私心。不为展示，只为日后回览提醒愚昧的自己。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1325036732000,"created_by":1,"updated_at":1450415087157,"updated_by":1,"published_at":1325036732000,"published_by":1},{"id":548,"uuid":"c4fc4e70-cf67-433a-a26e-bacef5a81641","title":"人在囧途","slug":"ren-zai-jiong-tu","markdown":"\n\n笑了一场荒诞，荒诞地笑。\n\n看完《[人在囧途](http://movie.douban.com/subject/10574622/)2》，忽的想起三年前看的《[人在囧途](http://movie.douban.com/subject/4237879/)1》。\n\n&nbsp;\n\n三年前-那时我未满十八岁，我笑了一场荒诞。捧腹于李成功（徐铮饰演）与牛耿（王宝强饰演）一路回家的囧，我想这只不过是一出喜庆片罢了，不可能在生活上演。耿直憨厚的牛耿一只乌鸦嘴，伴随被情人逼迫回家与老婆摊牌的李成功，在回家路上上演了一场荒诞的戏。\n\n对，2010的我认为这是荒诞的，不可能在现实上演。殊不知，我只是离现实太远。\n\n&nbsp;\n\n三年后-此刻我弱冠之年，我荒诞地笑了。依旧捧腹于徐朗（徐峥饰演）与王宝（王宝强饰演）寻扎 Mr周 的泰囧之路，故事依旧荒诞离奇，我开始想，这不会仅仅是一出贺岁片了，很可能就在生活重演。一路曲折之后，徐朗回到原点。\n\n对，2012的我认为这并不离奇，甚至在生活重现。\n\n&nbsp;\n\n三年的囧途，我似乎回到了原点。\n\n要是我能跟王宝一样有多好：去泰国看人妖，却不知道人妖原来是男的；去泰国看泰姬陵，却不知道泰姬陵在印度。可他知道，谁也不可以伤害他的家人，要给家人种上一棵健康树。\n\n只有他，真正懂得生活，因为他不曾想太多，只是那么活。\n\n简单地活。\n\n不，这只是一出戏。\n\n不，这不是一出戏。\n\n&nbsp;","html":"<p>笑了一场荒诞，荒诞地笑。</p>\n\n<p>看完《<a href=\"http://movie.douban.com/subject/10574622/\">人在囧途</a>2》，忽的想起三年前看的《<a href=\"http://movie.douban.com/subject/4237879/\">人在囧途</a>1》。</p>\n\n<p>&nbsp;</p>\n\n<p>三年前-那时我未满十八岁，我笑了一场荒诞。捧腹于李成功（徐铮饰演）与牛耿（王宝强饰演）一路回家的囧，我想这只不过是一出喜庆片罢了，不可能在生活上演。耿直憨厚的牛耿一只乌鸦嘴，伴随被情人逼迫回家与老婆摊牌的李成功，在回家路上上演了一场荒诞的戏。</p>\n\n<p>对，2010的我认为这是荒诞的，不可能在现实上演。殊不知，我只是离现实太远。</p>\n\n<p>&nbsp;</p>\n\n<p>三年后-此刻我弱冠之年，我荒诞地笑了。依旧捧腹于徐朗（徐峥饰演）与王宝（王宝强饰演）寻扎 Mr周 的泰囧之路，故事依旧荒诞离奇，我开始想，这不会仅仅是一出贺岁片了，很可能就在生活重演。一路曲折之后，徐朗回到原点。</p>\n\n<p>对，2012的我认为这并不离奇，甚至在生活重现。</p>\n\n<p>&nbsp;</p>\n\n<p>三年的囧途，我似乎回到了原点。</p>\n\n<p>要是我能跟王宝一样有多好：去泰国看人妖，却不知道人妖原来是男的；去泰国看泰姬陵，却不知道泰姬陵在印度。可他知道，谁也不可以伤害他的家人，要给家人种上一棵健康树。</p>\n\n<p>只有他，真正懂得生活，因为他不曾想太多，只是那么活。</p>\n\n<p>简单地活。</p>\n\n<p>不，这只是一出戏。</p>\n\n<p>不，这不是一出戏。</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356220412000,"created_by":1,"updated_at":1356220412000,"updated_by":1,"published_at":1356220412000,"published_by":1},{"id":549,"uuid":"f6e2e851-1bf2-47fd-a674-8e25996e23b4","title":"使用 workspace 和 source map 功能在 chrome 中修改并保存文件","slug":"workspace","markdown":"\n\n1. 创建测试文件\n\n   创建 test/test.html，引入 test/test.css \n\n2. 打开本地服务器\n    \n    这时候审查 test.html 的页面元素修改其 css 属性并不会生效。\n\n3. 建立本地和服务器的文件映射\n\n    1. 打开 chrome dev tools\n    2. 设置 Workspace，添加文件夹 test/\n    3. 双击这个新增的文件夹，增加映射\n        \n        URL prefix 填写浏览器地址栏对应的服务器根目录\n\n        Folder path 填写本地文件夹的路径\n\n4. 审查元素，修改 test.html 中的元素的 css 属性\n\n    用编辑器打开 test.css 就会发现修改保存到了文件中了。\n\n\n5. 使用 Sass 更进一步\n    \n    上述方法能直接将我们在浏览器中对 css 的修改保存到本地文件中，\n\n    但我们可能不是直接编写 css 文件，而是使用了 Sass/Less 等预编译工具，这时候 source map 功能就派上用场了。\n\n6. 配置 source map 让 chrome 支持 Sass \n\n    小赖使用的是 Webstorm 的 Sass 插件，其能监听 scss 文件的改变，自动生成新的 css 文件。\n\n    但默认一个 scss 文件只会生成对应的 css 文件，我们按以上的方法在浏览器中只能修改 css 文件，而不能修改源 scss 文件。\n\n    解决方法是：\n\n        1. 修改 webstorm 的 sass 插件配置\n            \n                --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n            \n            修改为：\n\n                --sourcemap --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n            \n            这时候 test.scss 在自动编译时不仅会生成 test.css 文件，还会生成 test.css.map 文件\n\n        2. 开启 chrome 的 source map 功能\n\n                打开 dev tools 后，勾选 General->Enable CSS source maps \n\n    这时候，我们审查 test.html 中的元素，则会看到对应的 test.scss 文件\n    \n    但在浏览器中修改 css 属性时，实际上修改的是 test.scss 编译生成的 test.css 文件。\n\n    我们希望直接修改的是 test.scss 文件，这时候点击 dev tools 中的 Source，找到对应的 test.scss 文件修改后 cmd + s 保存即可。\n\n7. 第6点其实有点鸡肋\n\n    目前 source map 能让我们在浏览器中修改 css 属性后保存到对应的 css 文件中。\n\n    而要修改 Sass 文件只能借 Workspace 功能在 Source 面板中修改后保存，但这时候修改的 Sass 文件并不会自动编译为对应的 css 文件。\n\n    在浏览器中修改 Sass 文件保存到本地后，浏览器中的 css 并没有即时改变。\n\n\n\n\n\n\n    \n","html":"<ol>\n<li><p>创建测试文件</p>\n\n<p>创建 test/test.html，引入 test/test.css </p></li>\n<li><p>打开本地服务器</p>\n\n<p>这时候审查 test.html 的页面元素修改其 css 属性并不会生效。</p></li>\n<li><p>建立本地和服务器的文件映射</p>\n\n<ol><li>打开 chrome dev tools</li>\n<li>设置 Workspace，添加文件夹 test/</li>\n<li><p>双击这个新增的文件夹，增加映射</p>\n\n<p>URL prefix 填写浏览器地址栏对应的服务器根目录</p>\n\n<p>Folder path 填写本地文件夹的路径</p></li></ol></li>\n<li><p>审查元素，修改 test.html 中的元素的 css 属性</p>\n\n<p>用编辑器打开 test.css 就会发现修改保存到了文件中了。</p></li>\n<li><p>使用 Sass 更进一步</p>\n\n<p>上述方法能直接将我们在浏览器中对 css 的修改保存到本地文件中，</p>\n\n<p>但我们可能不是直接编写 css 文件，而是使用了 Sass/Less 等预编译工具，这时候 source map 功能就派上用场了。</p></li>\n<li><p>配置 source map 让 chrome 支持 Sass </p>\n\n<p>小赖使用的是 Webstorm 的 Sass 插件，其能监听 scss 文件的改变，自动生成新的 css 文件。</p>\n\n<p>但默认一个 scss 文件只会生成对应的 css 文件，我们按以上的方法在浏览器中只能修改 css 文件，而不能修改源 scss 文件。</p>\n\n<p>解决方法是：</p>\n\n<pre><code>1. 修改 webstorm 的 sass 插件配置\n\n\n<pre><code>    --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n\n\n修改为：\n\n\n    --sourcemap --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n\n\n这时候 test.scss 在自动编译时不仅会生成 test.css 文件，还会生成 test.css.map 文件\n</code></pre>\n\n2. 开启 chrome 的 source map 功能\n\n\n<pre><code>    打开 dev tools 后，勾选 General-&amp;gt;Enable CSS source maps \n</code></pre>\n\n</code></pre>\n\n<p>这时候，我们审查 test.html 中的元素，则会看到对应的 test.scss 文件</p>\n\n<p>但在浏览器中修改 css 属性时，实际上修改的是 test.scss 编译生成的 test.css 文件。</p>\n\n<p>我们希望直接修改的是 test.scss 文件，这时候点击 dev tools 中的 Source，找到对应的 test.scss 文件修改后 cmd + s 保存即可。</p></li>\n<li><p>第6点其实有点鸡肋</p>\n\n<p>目前 source map 能让我们在浏览器中修改 css 属性后保存到对应的 css 文件中。</p>\n\n<p>而要修改 Sass 文件只能借 Workspace 功能在 Source 面板中修改后保存，但这时候修改的 Sass 文件并不会自动编译为对应的 css 文件。</p>\n\n<p>在浏览器中修改 Sass 文件保存到本地后，浏览器中的 css 并没有即时改变。</p></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1409585612000,"created_by":1,"updated_at":1409585612000,"updated_by":1,"published_at":1409585612000,"published_by":1},{"id":550,"uuid":"e676a915-eeaa-4422-b03e-5c9d9c9680ad","title":"使用 CSS3 实现模糊效果","slug":"css3-blur","markdown":"\n\n使用一个filter属性就可以实现很赞的模糊效果。\n\t\n\tfilter: blur(3px);\n\n这在制作一些弹出框的背景效果时非常有用，加以动画效果则更佳：）\n\n<!-- more -->\n\n<iframe width=\"100%\" height=\"600\" src=\"http://jsfiddle.net/laiqs2011/BKdzX/2/embedded/result,html,css,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>","html":"<p>使用一个filter属性就可以实现很赞的模糊效果。</p>\n\n<pre><code>filter: blur(3px);\n</code></pre>\n\n<p>这在制作一些弹出框的背景效果时非常有用，加以动画效果则更佳：）</p>\n\n<!-- more -->\n\n<iframe width=\"100%\" height=\"600\" src=\"http://jsfiddle.net/laiqs2011/BKdzX/2/embedded/result,html,css,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406315179000,"created_by":1,"updated_at":1406315179000,"updated_by":1,"published_at":1406315179000,"published_by":1},{"id":551,"uuid":"592900a2-4292-41a7-a5b4-b9b3b95711f3","title":"使用 FormData 模拟表单控件","slug":"formdata","markdown":"\n\n\n- 创建一个新的 FormData 对象，然后使用 append() 添加字段：\n\n\t\tvar form = new FormData();\n\t\tform.append('name', 'xiaolai');\n\t\tform.append('age', 18);\n\t\t// 使用 ajax 发送\n\t\tvar req = new XMLHttpRequest();\n\t\treq.open('POST', 'http://laispace.com/test');\n\t\treq.send(form);\n\n\tFormData.append(key, value)中 value 可以是string/Blob对象/File对象\n\t\n- 利用已有的 form 创建 FormData 对象进行格式化\n\n\t\tvar myForm = document.getElementById('myForm');\n\t\tvar form = new FormData(myForm);\n\n\t继续使用 FormData.append() 添加字段，或使用 ajax 发送表单\n\t\n- 异步上传文件\n\n\t若 myForm 中有用户选择的文件，要进行异步上传：\n\t\n\t\tvar req = new XMLHttpRequest();\n\t\treq.open('POST', 'http://laispace.com/test', true);\n\t\treq.onload = function (e) {\n\t\t\tif (req.status === 200) {\n\t\t\t\tconsole.log('文件已成功上传！')\n\t\t\t} else {\n\t\t\t\tconsole.log('啊噢~ 文件上传失败！')\n\t\t\t}\n\t\t}\t\n\t\t\n<!-- more -->\n\n\n\t\n\t\n\t\n\t\n[参考资料](https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects)\n\n","html":"<ul>\n<li><p>创建一个新的 FormData 对象，然后使用 append() 添加字段：</p>\n\n<pre><code>var form = new FormData();\nform.append('name', 'xiaolai');\nform.append('age', 18);\n// 使用 ajax 发送\nvar req = new XMLHttpRequest();\nreq.open('POST', 'http://laispace.com/test');\nreq.send(form);\n</code></pre>\n\n<p>FormData.append(key, value)中 value 可以是string/Blob对象/File对象</p></li>\n<li><p>利用已有的 form 创建 FormData 对象进行格式化</p>\n\n<pre><code>var myForm = document.getElementById('myForm');\nvar form = new FormData(myForm);\n</code></pre>\n\n<p>继续使用 FormData.append() 添加字段，或使用 ajax 发送表单</p></li>\n<li><p>异步上传文件</p>\n\n<p>若 myForm 中有用户选择的文件，要进行异步上传：</p>\n\n<pre><code>var req = new XMLHttpRequest();\nreq.open('POST', 'http://laispace.com/test', true);\nreq.onload = function (e) {\n    if (req.status === 200) {\n        console.log('文件已成功上传！')\n    } else {\n        console.log('啊噢~ 文件上传失败！')\n    }\n}   \n</code></pre></li>\n</ul>\n\n<!-- more -->\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects\">参考资料</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399670382000,"created_by":1,"updated_at":1399670382000,"updated_by":1,"published_at":1399670382000,"published_by":1},{"id":552,"uuid":"a3306b6c-8b5c-415a-81ec-915392676d96","title":"使用net模块创建TCP服务器","slug":"node-net","markdown":"\n\n- 创建TCP服务器\n\n\t\tvar server = net.createServer([options], [connectionListener])\n\t\t// 相当于: \n\t\t// var server = net.createServer([options]);\n\t\t// server.on('connection', connectionListener);\n\t\n\t方法1：\t\t\n\t\n\t\t// 监听端口\n\t\t// port 若为0则分配随机端口号\n\t\t// host 缺省则监听来自任何ipv4地址的客户端连接\n\t\t// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\n\t\tserver.listen(port, [host], [backlog], [callback])\n\t\t\n\t方法2：\t\n\t\t\n\t\t// 监听指定路径\n\t\tserver.listen(path, [callback])\n\t\t\n\t方法3：\n\t\n\t\t// 监听socket句柄\n\t\tserver.listen(handle, [callback])\n\t\t\n\t以上三种方法的 callback 可改写为：\n\t\n\t\tserver.on('listening', function () {\n\t\t\t// callback code here\n\t\t})\t\n\t\t\t\t\n<!--more-->\n\t\t\n\t示例：\n\t\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function(socket) {\n\t\t\tconsole.log('客户端与服务器的连接已建立');\n\t\t\t\n\t\t\tconsole.log('socket信息是：', socket.address())\n\t\t\t\n\t\t\t// 获取客户端与服务器的连接数\n\t\t\tserver.getConnections(function(err, count) {\n\t\t\t\tconsole.log('当前连接数为：', count);\n\t\t\t\t// 设置最大连接数，超过这个连接数后，客户端将无法得到响应\n\t\t\t\tserver.maxConnections = 2;\n\t\t\t\tconsole.log('最大连接数为：', server.maxConnections);\n\t\t\t})\n\t\t\t\n\t\t\t// 关闭服务器，不再接收所有连接\n\t\t\t// server.close(function() {\n\t\t\t//\tconsole.log('服务器已关闭');\n\t\t\t// })\n\t\t\t\n\t\t});\n\t\tserver.listen(1234, 'localhost', function() {\n\t\t\tconsole.log('正在监听端口1234');\n\t\t\tconsole.log('server信息是：', server.address())\n\t\t});\n\t\tserver.on('error', function(e) {\n\t\t\t// 端口被占用\n\t\t\tif (e.code == 'EADDRINUSE') {\n\t\t\t\tconsole.log('error: 端口已被占用');\n\t\t\t}\n\t\t\t\n\t\t})\n\t\t\n\t\n\t处理socket连接\n\n\t\tvar net =require('net');\n\t\tvar server = net.createServer();\n\t\tserver.on('connection', function(socket) {\n\t\t\tconsole.log('socket信息是：', socket.address());\n\n\t\t\t// 监听socket连接\n\t\t\tsocket.on('data', function(data) {\n\t\t\t\tconsole.log('共接收到%d字节的数据：', socket.bytesRead);\n\t\t\t\t// data 默认是 buffer 流\n\t\t\t\t// 设定编码\n\t\t\t\t// socket.setEncoding('utf8');\n\t\t\t\t// 或使用 data.toString()\n\t\t\t\tconsole.log(data.toString());\n\t\t\t});\n\n\t\t\t// 监听关闭连接\n\t\t\tsocket.on('end', function () {\n\t\t\t\tconsole.log('连接被客户端关闭！');\n\t\t\t})\n\t\t\t//向客户端发送数据\n\t\t\tsocket.write('哈喽！这是来自服务器的数据！')\n\t\t});\n\n\t\tserver.listen(1234, 'localhost');\n\n\n\t将这段脚本存到 server.js 启动这段脚本 \n\t\n\t\t$ node server.js\n\t\n\t运行telnet并输入任意数据试试：\n\t\t\n\t\ttelnet localhost 1234\n\n\t\t\n\n- 创建TCP客户端\n\n\t\t\n\t\tvar socket = new net.Socket([options])\n\t\t// options.fd 文佳描述符\n\t\t// options.type 可选tcp4/tcp6/unix 指定协议\n\t\t\n\n\t方法1：\n\t\n\t\tsocket.on('connect', function(){\n\t\t\t// callback code here.\n\t\t})\n\n\t方法2：\t\t\n\n\t\tsockec.connect(path, [connectionListener])\n\t\t\n\t\tsocket.remoteAddress 远程地址\n\t\tsocket.remotePort 远程端口\n\t\tsocket.localAddress 本地地址\n\t\tlocalPort 本地端口\n\t\t\n\t写入数据：\n\t\n\t\tsocket.write(data, [encoding], [callback])\n\t\t\n\t示例：\n\t\n\n\t\tvar net = require('net');\n\t\tvar client = new net.Socket();\n\t\tclient.setEncoding('utf8');\n\n\t\tclient.connect(1234, 'localhost', function(){\n\t\t\tconsole.log('客户端已连接到服务器');\n\t\t\t// 向服务器发送数据\n\t\t\tclient.write('你好，我是来自客户端的消息！');\n\t\t\tconsole.log('已发送%d字节的数据', client.bytesWritten);\n\t\t\t// 关闭连接\n\t\t\t// client.end([data], [encoding])\n\t\t\t// client.end('客户端已关闭连接！')\n\t\t});\n\n\t\t// 监听数据接收\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log('客户端接收到来自服务器的数据：', data);\n\t\t});\n\n\t\t// 监听错误\n\t\tclient.on('error', function (e) {\n\t\t\tconsole.log('error: ', e);\n\t\t\t// 销毁这个错误的socket，确保不会被使用\n\t\t\tclient.destroy();\n\t\t})\n\n\t\n\t将这段代码另存为 client.js\n\t\n\t先启动上面的 server.js\n\t\n\t\t$ node server.js\n\t\t\n\t再新建终端窗口启动 client.js 进行通信\n\t\t\n\t\t$ node client.js\n\t\t\n\t\t\n- net模块判断IP地址\n\n\t\t// 判断输入是否为IP\n\t\tvar type = net.isIP(ip);\t\n\t\tswitch (type) {\n\t\t\tcase 0: \n\t\t\t\tconsole.log('不是一个IP');\n\t\t\t\tbreak;\n\t\t\tcase 4: \n\t\t\t\tconsole.log('是一个IPV4地址');\n\t\t\t\tbreak;\n\t\t\tcase 6: \n\t\t\t\tconsole.log('是一个IPV6地址');\n\t\t}\n\t\t\n\t\t// 判断是否为 IPV4地址\n\t\tnet.isIPV4(ip)\n\t\t\n\t\t// 判断是否为 IPV6地址\n\t\tnet.isIPV6(ip)\n\t\t\n- dgram 模块实现UDP通信\n\n\t服务器代码 udpServer.js ：\n\t\n\t\t\tvar dgram = require('dgram');\n\t\t\tvar server = dgram.createSocket('udp4');\n\t\t\tserver.on('message', function (msg, info) {\n\t\t\t\tconsole.log('收到客户端信息：', msg);\n\t\t\t\tconsole.log('客户端地址信息：', info);\n\t\t\t\t// 往客户端发送信息\n\t\t\t\tvar buff = new Buffer('已收到这条信息：', msg);\n\t\t\t\tserver.send(buf, 0, buf.length, info.port, info.address);\n\t\t\t})\t\n\t\t\t// 监听\n\t\t\tserver.on('listening', function () {\n\t\t\t\tconsole.log('正在监听：', server.address());\n\t\t\t});\n\t\t\t// 绑定端口\n\t\t\tserver.bind(12345, 'localhost');\n\t\t\t\n\t客户端代码 udpClient.js：\n\t\n\t\t\tvar dgram = require('dgram');\n\t\t\tvar message = new Buffer('哈喽！这是来自客户端的消息，我是小赖呦');\n\t\t\tvar client = dgram.createSocket('udp4');\n\t\t\t// 发送消息\n\t\t\tclient.send(message, 0, message.length, 12345, 'localhost', function (err, bytes) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('发送失败');\n\t\t\t\t}\n\t\t\t\tconsole.log('已发送%d字节的数据', butes);\n\t\t\t});\t\t\t\n\t\t\t// 监听\n\t\t\tclient.on('message', function (msg, info) {\n\t\t\t\tconsole.log('收到服务器信息：', msg);\n\t\t\t\tconsole.log('服务器地址信息：', info);\n\t\t\t})\n\t\t\t\n\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t","html":"<ul>\n<li><p>创建TCP服务器</p>\n\n<pre><code>var server = net.createServer([options], [connectionListener])\n// 相当于: \n// var server = net.createServer([options]);\n// server.on('connection', connectionListener);\n</code></pre>\n\n<p>方法1：        </p>\n\n<pre><code>// 监听端口\n// port 若为0则分配随机端口号\n// host 缺省则监听来自任何ipv4地址的客户端连接\n// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\nserver.listen(port, [host], [backlog], [callback])\n</code></pre>\n\n<p>方法2：    </p>\n\n<pre><code>// 监听指定路径\nserver.listen(path, [callback])\n</code></pre>\n\n<p>方法3：</p>\n\n<pre><code>// 监听socket句柄\nserver.listen(handle, [callback])\n</code></pre>\n\n<p>以上三种方法的 callback 可改写为：</p>\n\n<pre><code>server.on('listening', function () {\n    // callback code here\n})  \n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<pre><code>示例：\n\n    var net = require('net');\n    var server = net.createServer(function(socket) {\n        console.log('客户端与服务器的连接已建立');\n\n        console.log('socket信息是：', socket.address())\n\n        // 获取客户端与服务器的连接数\n        server.getConnections(function(err, count) {\n            console.log('当前连接数为：', count);\n            // 设置最大连接数，超过这个连接数后，客户端将无法得到响应\n            server.maxConnections = 2;\n            console.log('最大连接数为：', server.maxConnections);\n        })\n\n        // 关闭服务器，不再接收所有连接\n        // server.close(function() {\n        //  console.log('服务器已关闭');\n        // })\n\n    });\n    server.listen(1234, 'localhost', function() {\n        console.log('正在监听端口1234');\n        console.log('server信息是：', server.address())\n    });\n    server.on('error', function(e) {\n        // 端口被占用\n        if (e.code == 'EADDRINUSE') {\n            console.log('error: 端口已被占用');\n        }\n\n    })\n\n\n处理socket连接\n\n    var net =require('net');\n    var server = net.createServer();\n    server.on('connection', function(socket) {\n        console.log('socket信息是：', socket.address());\n\n        // 监听socket连接\n        socket.on('data', function(data) {\n            console.log('共接收到%d字节的数据：', socket.bytesRead);\n            // data 默认是 buffer 流\n            // 设定编码\n            // socket.setEncoding('utf8');\n            // 或使用 data.toString()\n            console.log(data.toString());\n        });\n\n        // 监听关闭连接\n        socket.on('end', function () {\n            console.log('连接被客户端关闭！');\n        })\n        //向客户端发送数据\n        socket.write('哈喽！这是来自服务器的数据！')\n    });\n\n    server.listen(1234, 'localhost');\n\n\n将这段脚本存到 server.js 启动这段脚本 \n\n    $ node server.js\n\n运行telnet并输入任意数据试试：\n\n    telnet localhost 1234\n</code></pre>\n\n<ul>\n<li><p>创建TCP客户端</p>\n\n<pre><code>var socket = new net.Socket([options])\n// options.fd 文佳描述符\n// options.type 可选tcp4/tcp6/unix 指定协议\n</code></pre>\n\n<p>方法1：</p>\n\n<pre><code>socket.on('connect', function(){\n    // callback code here.\n})\n</code></pre>\n\n<p>方法2：        </p>\n\n<pre><code>sockec.connect(path, [connectionListener])\n\n\nsocket.remoteAddress 远程地址\nsocket.remotePort 远程端口\nsocket.localAddress 本地地址\nlocalPort 本地端口\n</code></pre>\n\n<p>写入数据：</p>\n\n<pre><code>socket.write(data, [encoding], [callback])\n</code></pre>\n\n<p>示例：</p>\n\n<pre><code>var net = require('net');\nvar client = new net.Socket();\nclient.setEncoding('utf8');\n\n\nclient.connect(1234, 'localhost', function(){\n    console.log('客户端已连接到服务器');\n    // 向服务器发送数据\n    client.write('你好，我是来自客户端的消息！');\n    console.log('已发送%d字节的数据', client.bytesWritten);\n    // 关闭连接\n    // client.end([data], [encoding])\n    // client.end('客户端已关闭连接！')\n});\n\n\n// 监听数据接收\nclient.on('data', function (data) {\n    console.log('客户端接收到来自服务器的数据：', data);\n});\n\n\n// 监听错误\nclient.on('error', function (e) {\n    console.log('error: ', e);\n    // 销毁这个错误的socket，确保不会被使用\n    client.destroy();\n})\n</code></pre>\n\n<p>将这段代码另存为 client.js</p>\n\n<p>先启动上面的 server.js</p>\n\n<pre><code>$ node server.js\n</code></pre>\n\n<p>再新建终端窗口启动 client.js 进行通信</p>\n\n<pre><code>$ node client.js\n</code></pre></li>\n<li><p>net模块判断IP地址</p>\n\n<pre><code>// 判断输入是否为IP\nvar type = net.isIP(ip);    \nswitch (type) {\n    case 0: \n        console.log('不是一个IP');\n        break;\n    case 4: \n        console.log('是一个IPV4地址');\n        break;\n    case 6: \n        console.log('是一个IPV6地址');\n}\n\n\n// 判断是否为 IPV4地址\nnet.isIPV4(ip)\n\n\n// 判断是否为 IPV6地址\nnet.isIPV6(ip)\n</code></pre></li>\n<li><p>dgram 模块实现UDP通信</p>\n\n<p>服务器代码 udpServer.js ：</p>\n\n<pre><code>    var dgram = require('dgram');\n    var server = dgram.createSocket('udp4');\n    server.on('message', function (msg, info) {\n        console.log('收到客户端信息：', msg);\n        console.log('客户端地址信息：', info);\n        // 往客户端发送信息\n        var buff = new Buffer('已收到这条信息：', msg);\n        server.send(buf, 0, buf.length, info.port, info.address);\n    })  \n    // 监听\n    server.on('listening', function () {\n        console.log('正在监听：', server.address());\n    });\n    // 绑定端口\n    server.bind(12345, 'localhost');\n</code></pre>\n\n<p>客户端代码 udpClient.js：</p>\n\n<pre><code>    var dgram = require('dgram');\n    var message = new Buffer('哈喽！这是来自客户端的消息，我是小赖呦');\n    var client = dgram.createSocket('udp4');\n    // 发送消息\n    client.send(message, 0, message.length, 12345, 'localhost', function (err, bytes) {\n        if (err) {\n            console.log('发送失败');\n        }\n        console.log('已发送%d字节的数据', butes);\n    });         \n    // 监听\n    client.on('message', function (msg, info) {\n        console.log('收到服务器信息：', msg);\n        console.log('服务器地址信息：', info);\n    })\n</code></pre></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399812200000,"created_by":1,"updated_at":1399812200000,"updated_by":1,"published_at":1399812200000,"published_by":1},{"id":553,"uuid":"21349fe9-f5eb-4ec0-99bd-818d41801ae5","title":"写在2012暑假","slug":"xie-zai-2012shu-jia","markdown":"\n\n竟然有六天没写日记了。今天比较烦躁，今晚也不想看书，那就做个流水账放在来思碑吧。\n\n1.暑假当家\n\n2号考完试3号下午奔回家，4号去了医院，一直呆到8号奶奶出院，期间在医院病床边寸步不离，再一次感受到了健康的珍贵。\n\n这半个月以来，包揽家务，负责三餐（厨艺见长了哈哈）。白天基本是忙碌的，晚上闲下来看点书玩点电脑打个盹也就过去了。\n\n第一次深深感受到爷爷奶奶当家带大我们的艰辛。\n\n害怕的是【树欲静而风不止，子欲养而亲不待。】但愿二老安好，等到我立业的那天，用我挣的钱享福。\n\n2.CCPS&amp;&amp;UC\n\na）前天收到燕妮姐的邮件，叫我重新考虑宣传组组长一职，我竟然当即回复：接受挑战，尽力做好。\n\n之前之所以推脱，是因为刚加入新创办的UC俱乐部担任宣传部副部长，恐不能两头兼顾，担当不起。\n\n但其实就像当初犹豫再三才申请加入俱乐部一样，【与其后悔，不如遗憾。】\n\n也正如结果--成为UC的成员参与俱乐部创办初期的建设，【机会是自己把握的。】\n\n身兼二职，也就是说暑假回去，将会有很多事得承担。但希望自己的尽心投入，能收获汇报。\n\n【不逼自己一把，就不知道自己有多优秀。】对吧？\n\n我不能很自信我能做好，但我一定不能退缩不去尝试。\n\n所以，干吧！\n\nb）[文教夏令营](http://v.youku.com/v_show/id_XNDI3MTkzNzM2.html \"中华文教促进会宣传视频\")在即，但联络校方确定营会时间的事迟迟未定，让人着急。\n\n想起去年八月才加入文教，而今年却已经成为活动的负责人了。没有太多资深义工的帮助，校方联络、学生挑选面试、营会开展的工作由我们全\n\n权负责 的确是一个巨大的挑战，但也只能硬着头皮去完成了。\n\n谁知道我的成长少了这步，会有多么残缺呢？希望明后两天搞定校方的事，就全力开展工作。\n\n绝不能退缩，绝不能把活动搞砸，绝不能让文教失望！\n\n3.前端||网络\n\n打开Evernote的《2012暑假计划》，一一列举了期末写好计划在暑假完成的事项，明显感觉力不从心了。\n\n大一下没有专心学课内的东西，一天到晚净面对着电脑，查阅了很多资料、刷了很多的知乎、浏览了很多的招聘网站，试着去规划自己的职业方\n\n向。花了时间尝试了NA、前端，终于发现了自己喜欢的东西。但在这二者之间选择，却又有很多的东西需要去权衡。\n\n【喜欢一件事，心里总会惦记着。】期末面临挂科的风险，却还想把复习的时间拿来学习前端。现在回想起来，也许这就是与职业理想相关的内心渴望吧。\n\n在忙家务的间隙里，坚持多看书吧--争取暑假学完前端基础，多多实践。争取开学前完成自己的个人网站并坚持长期维护。\n\nHTML5，我来了！\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","html":"<p>竟然有六天没写日记了。今天比较烦躁，今晚也不想看书，那就做个流水账放在来思碑吧。</p>\n\n<p>1.暑假当家</p>\n\n<p>2号考完试3号下午奔回家，4号去了医院，一直呆到8号奶奶出院，期间在医院病床边寸步不离，再一次感受到了健康的珍贵。</p>\n\n<p>这半个月以来，包揽家务，负责三餐（厨艺见长了哈哈）。白天基本是忙碌的，晚上闲下来看点书玩点电脑打个盹也就过去了。</p>\n\n<p>第一次深深感受到爷爷奶奶当家带大我们的艰辛。</p>\n\n<p>害怕的是【树欲静而风不止，子欲养而亲不待。】但愿二老安好，等到我立业的那天，用我挣的钱享福。</p>\n\n<p>2.CCPS&amp;&amp;UC</p>\n\n<p>a）前天收到燕妮姐的邮件，叫我重新考虑宣传组组长一职，我竟然当即回复：接受挑战，尽力做好。</p>\n\n<p>之前之所以推脱，是因为刚加入新创办的UC俱乐部担任宣传部副部长，恐不能两头兼顾，担当不起。</p>\n\n<p>但其实就像当初犹豫再三才申请加入俱乐部一样，【与其后悔，不如遗憾。】</p>\n\n<p>也正如结果--成为UC的成员参与俱乐部创办初期的建设，【机会是自己把握的。】</p>\n\n<p>身兼二职，也就是说暑假回去，将会有很多事得承担。但希望自己的尽心投入，能收获汇报。</p>\n\n<p>【不逼自己一把，就不知道自己有多优秀。】对吧？</p>\n\n<p>我不能很自信我能做好，但我一定不能退缩不去尝试。</p>\n\n<p>所以，干吧！</p>\n\n<p>b）<a href=\"http://v.youku.com/v_show/id_XNDI3MTkzNzM2.html\" title=\"中华文教促进会宣传视频\">文教夏令营</a>在即，但联络校方确定营会时间的事迟迟未定，让人着急。</p>\n\n<p>想起去年八月才加入文教，而今年却已经成为活动的负责人了。没有太多资深义工的帮助，校方联络、学生挑选面试、营会开展的工作由我们全</p>\n\n<p>权负责 的确是一个巨大的挑战，但也只能硬着头皮去完成了。</p>\n\n<p>谁知道我的成长少了这步，会有多么残缺呢？希望明后两天搞定校方的事，就全力开展工作。</p>\n\n<p>绝不能退缩，绝不能把活动搞砸，绝不能让文教失望！</p>\n\n<p>3.前端||网络</p>\n\n<p>打开Evernote的《2012暑假计划》，一一列举了期末写好计划在暑假完成的事项，明显感觉力不从心了。</p>\n\n<p>大一下没有专心学课内的东西，一天到晚净面对着电脑，查阅了很多资料、刷了很多的知乎、浏览了很多的招聘网站，试着去规划自己的职业方</p>\n\n<p>向。花了时间尝试了NA、前端，终于发现了自己喜欢的东西。但在这二者之间选择，却又有很多的东西需要去权衡。</p>\n\n<p>【喜欢一件事，心里总会惦记着。】期末面临挂科的风险，却还想把复习的时间拿来学习前端。现在回想起来，也许这就是与职业理想相关的内心渴望吧。</p>\n\n<p>在忙家务的间隙里，坚持多看书吧--争取暑假学完前端基础，多多实践。争取开学前完成自己的个人网站并坚持长期维护。</p>\n\n<p>HTML5，我来了！</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1342566254000,"created_by":1,"updated_at":1342566254000,"updated_by":1,"published_at":1342566254000,"published_by":1},{"id":554,"uuid":"55554f6c-0210-4f87-9a3c-09d1a6a695f5","title":"创建HTTP/HTTPS服务器与客户端","slug":"node-create-http-n-https-client","markdown":"\n\n- 创建HTTP服务器\n\n\t方法1：\n\t\n\t\tvar server = http.createServer([requestListener])\n\t\t// requestListener = function (request, response) {\n\t\t\t// request 是一个 http.IncomingMessage对象\n\t\t\t// response 是一个 http.ServerResponse对象\n\t\t// }\n\t\n\t方法2：\n\t\n\t\tvar server = http.createServer();\n\t\t// 监听请求\n\t\tserver.on('request', function (request, response) {\n\t\t\t// callback code here.\n\t\t})\t\t\n\t\t// 监听端口\n\t\t// port 若为0则分配随机端口号\n\t\t// host 缺省则监听来自任何ipv4地址的客户端连接\n\t\t// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\n\t\tserver.listen(port, [host], [backlog], [callback])\n\t\t\n\t\t// 或\n\t\tserver.on('listening', function (request, response) {\n\t\t\t// callback code here.\n\t\t})\n\t\t\n<!--more-->\n\t\t\n\t示例：\n\t\n\t\tvar http = require('http');\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\t// console.log('客户端请求信息为：', req);\n\t\t\tconsole.log('客户端请求方法为：', req.method);\n\t\t\tconsole.log('客户端请求url为：', req.url);\n\t\t\tconsole.log('客户端请求头为：', req.headers);\n\t\t\tconsole.log('客户端请求HTTP版本为：', req.httpVersion);\n\t\t\t\n\t\t\t// 监听客户端发来的数据\n\t\t\treq.on('data', function (data) {\n\t\t\t\tconsole.log('服务器接收到数据：', data);\n\t\t\t});\n\t\t\treq.on('end', function () {\n\t\t\t\tconsole.log(\t\t\t\t'服务器接收数据完毕');\n\t\t\t})\n\t\t\t\n\t\t\t// 设置超时\n\t\t\tres.setTimeout(1000);\n\t\t\tres.on('timeout', function () {\n\t\t\t\tconsole.log('服务器响应超时');\n\t\t\t})\n\t\t\t// 监听关闭\n\t\t\tres.on('close', function () {\n\t\t\t\tconsole.log('连接被中断');\n\t\t\t})\n\t\t\t\n\t\t\t\n\t\t\t// 发送服务器端的响应数据\n\t\t\t// res.writeHead(statusCode, [reasonPhase], [headers])\n\t\t\t// starusCode 为HTTP状态码\n\t\t\t// reasonPhase 为状态码的描述信息\n\t\t\t// headers 指定响应头对象，或使用 res.setHeader(name, value) 单独设置\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.write('hello 赖小赖！\\n');\n\t\t\tres.write('hello 我是继续写入的赖小赖！\\n');\n\t\t\tres.write('hello 我是调皮的赖小赖！\\n');\n\t\t\t// 必须使用 end() 结束响应\n\t\t\tres.end('好吧，我不玩了，掰掰！', function () {\n\t\t\t\t// console.log('已结束响应');\n\t\t\t});\n\t\t});\n\t\t// 监听端口\n\t\tserver.listen(1234, 'localhost', function () {\n\t\t\tconsole.log('服务器正在监听端口1234');\n\t\n\t\t\t// 关闭服务器\n\t\t\t// server.close();\n\t\t});\n\t\t// 设置超时, 默认为2分钟，这里设定为1分钟\n\t\tserver.setTimeout(60*1000, function (socket) {\n\t\t\t// 超时后执行回调\n\t\t\t// console.log('服务器超时：', socket);\n\t\t})\n\t\t\n\t\t// 监听连接\n\t\tserver.on('connection', function (socket) {\n\t\t\tconsole.log('客户端连接已建立');\n\t\t})\n\t\t\n\t\t\n\t\t// 监听关闭\n\t\tserver.on('close', function () {\n\t\t\tconsole.log('服务器已被关闭');\n\t\t});\n\t\t// 监听错误\n\t\tserver.on('error', function(e) {\n\t\t\t// 端口被占用\n\t\t\tif (e.code == 'EADDRINUSE') {\n\t\t\t\tconsole.log('error: 端口已被占用');\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t使用 querystring模块 处理查询字符串\n\n\t\t- querystring.parse() 处理查询字符串\n\t\n\t\t// str为查询字符串\n\t\t// sep 设定查询字符串中的分隔符，默认为 &\n\t\t// eq 设定查询字符串中的分配符，默认为 = \n\t\t// querystring.parse(str, [sep], [eq], [options])\n\t\tvar str = 'name=xiaolai&age=18&sex=male';\n\t\tquerystring.parse(str);\n\t\t// 将输出 {\n\t\t//\tname: 'xiaolai',\n\t\t//\tage: 18,\n\t\t//\tsex: 'male'\n\t\t// }\n\t\t\n\t\t- querystring.stringify() 转换对象为查询字符串\n\t\t// querystring.stringify(obj, [sep], [eq])\n\t\tvar obj = {\n\t\t\tname: 'xiaolai',\n\t\t\tage: 18,\t// 好吧 就让我再年轻一次！！！\n\t\t\tsex: 'male'\n\t\t};\n\t\tvar str = querystring.stringify(obj);\n\t\t// 将输出 name=xiaolai&age=18&sex=male\n\t\t\n\t使用 url模块 处理完整的URL字符串\n\t\t\n\t\t- url.parse() 处理字符串\n\t\t\n\t\t// parseQueryString 默认为false, 为true时，将字符串中的查询字符串转化为对象\n\t\t// url.parse(str, [parseQueryString])\n\t\tvar str = 'http://user:pwd@laispace.com:80/user/xiaolai?age=18&sex=male#section1';\n\t\tvar strObj1 = url.parse(str);\n\t\tvar strObj2 = url.parse(str, true);\n\t\tconsole.log(strObj1, strObj2);\n\t\t// strObj1.query 为 'age=18&sex=male'\n\t\t// strObj2.query 为 {age: '18', sex: 'male'}\n\t\t\n\t\t- url.format() 转换对象为字符串\n\t\t\n\t\tvar str = url.format(strObj1);\n\t\tconsole.log(str);\n\t\t\n\t\t- url.resolve() 合并路径\n\n\t\t// url.resolve(form, to);\n\t\tvar str = url.resolve('http://laispace.com', 'user/xiaolai')\n\t\tconsole.log(str)/ =>'http://laispace.com/user/xiaolai'\n\t\t\n\n- 创建HTTP客户端\n\n\t\t// options 为对象，若为地址字符串则自动parse为对象\n\t\t// options.host 指定IP地址，默认为 localhost\n\t\t// options.hostname 默认为 localhost\n\t\t// options.port 指定端口\n\t\t// localAddress 指定专用于网络连接的本地端口\n\t\t// socketPath 指定目标Unix域端口\n\t\t// method 指定HTTP请求方法，默认为 GET\n\t\t// path 指定请求路径和查询字符串\n\t\t// headers 指定请求头对象\n\t\t// auth 指定认证信息，如 \"user: password\"\n\t\t// agent 指定代理，是一个 http.Agent对象\t\n\n\t\tvar req = http.request(options, function (response) {\n\t\t\t// response code here.\n\t\t})\t\n\t\t// 发送数据\n\t\treq.write(chunk, [encoding]);\n\t\t// 结束请求\n\t\treq.end([chunk], [encoding]);\n\t\t\n\t示例：\n\t\n\t\tvar http = require('http');\n\t\tvar options = {\n\t\t\thostname: 'www.laispace.com',\n\t\t\tpost: 80,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function (res) {\n\t\t\t// console.log('响应信息：', res);\n\t\t\tconsole.log('响应状态码：', res.statusCode);\n\t\t\tconsole.log('响应头：');\n\t\t\t// 设定编码\n\t\t\tres.setEncoding('utf8');\n\t\t\tvar body = '';\n\t\t\t// 监听响应数据\n\t\t\tres.on('data', function (chunk) {\n\t\t\t\tconsole.log('接收到响应数据：', chunk);\n\t\t\t\tbody += chunk;\n\t\t\t})\n\t\t\tres.on('end', function () {\n\t\t\t\t// console.log('响应数据已全部接受：', body);\n\t\t\t})\n\t\t})\n\t\t// 写入请求数据\n\t\t// req.write('Hello 我是小赖');\n\t\t// 发起请求\n\t\treq.end();\n\t\t\n\t\t// 监听错误，如访问一个不存在的地址时\n\t\treq.on('error', function (err) {\n\t\t\tif (err.code === 'ECONNRESET') {\n\t\t\t\tconsole.log('socket 端口超时')\n\t\t\t} else {\n\t\t\t\tconsole.log('请求发生错误：', err);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t// 设定超时\n\t\treq.setTimeout(1000, function () {\n\t\t\t// 终止请求\n\t\t\t// req.abort()\t\t\n\t\t})\t\n\t\n\t除了使用 http.request(options, callback) 外，\n\t\n\t也可以使用简化的 http.get(options, callback) ，\n\t\n\t其默认使用 GET 并会自动调用 end() 方法发起请求\n\t\n\n- 创建HTTP代理服务器\t\n\n\t\tvar http = require('http');\n\t\tvar url = require('url');\n\t\t// 建立代理服务器\n\t\tvar server = http.createServer(function (clientReq, clientRes) {\n\t\t\tvar url_parts = url.parse(clientReq.url);\n\t\t\tvar options = {\n\t\t\t\thost: 'www.laispace.com', // =>真正访问的网站host\n\t\t\t\tport: 80,\n\t\t\t\tpath: url_parts.pathname,\n\t\t\t\theaders: clientReq.headers\n\t\t\t};\n\t\t\t// 服务器代理客户端发起请求\n\t\t\tvar serverReq = http.get(options, function (serverRes) {\n\t\t\t\t// 代理服务器得到的响应返回给客户端\n\t\t\t\tclientRes.writeHead(serverRes.statusCode, serverRes.headers);\n\t\t\t\t// 代理服务器请求到的数据返回给客户端\n\t\t\t\tserverRes.pipe(clientRes);\n\t\t\t});\t\t\t\n\t\t\t// 将客户端请求\n\t\t\tclientReq.pipe(serverReq);\n\t\t});\n\t\tserver.listen(1234, 'localhost');\n\t\t\n\t保存这段代码到 test.js\n\t\n\t执行 $ node test.js\n\t\n\t浏览器访问 http://localhost:1234 则会访问到 www.laispace.com \n\t\n- 创建HTTPS服务器\t\n\n\tHTTPS 相比于 HTTP：\n\t\t\n\t\t- HTTPS服务器向CA申请证书\n\t\t\n\t\t- HTTPS传输的是经过SSL加密后的数据\n\t\t\n\t\t- HTTPS常用443端口，而HTTP常用80端口\n\t\t\n\tSSL简单介绍：\n\t\t\n\t\t- 私钥和公钥保存在服务器\n\t\t\n\t\t- 公钥发送到客户端，客户端端发送 消息msg1 给服务器\n\t\t\n\t\t- 服务器将 消息msg1 进行哈希运算得到 hash1字符串 并用私钥加密后发送 消息msg2 传回客户端\n\t\t\n\t\t- 客户端使用公钥解密 消息msg2 ，将 消息msg1 进行哈希运算得到 hash2字符串，与hash1字符串 进行比较\n\t\t\n\t\t- 若 hash1 与 hash2 相等则握手成功\n\t\t\n\t\t- 客户端选择加密算法和相应密钥，用公钥加密后发送给服务器\n\t\t\n\t\t- 服务器收到加密算法和响应密钥，开始与客户端传输数据\t\t\n\t1. 创建私钥：\n\t\n\t\t\t$ openssl genrsa -out privatekey.pem 1024\n\t\n\t2. 创建证书签名请求(Certificate Signing Request)文件：\n\t\n\t\t\t$ openssl req -new -key privatekey.pem -out certrequest.csr\n\n\t3. 获取证书：（这里是使用 openssl 创建的测试用的证书-访问网站会被警告，真正的证书要向CA申请）\n\t\t\n\t\t\t$ openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\n\t\n\t4. 创建pfx文件（为存储私钥、公钥和证书的一种格式）：\n\t\n\t\t\t$ openssl pkcs12 -export -in certificate.pem -inkey privatekey.pem -out certificate.pfx\n\t\t\t\n\t具备以上条件后，使用 https.createServer(options, [requestListener]) 创建HTTPS服务器：\n\t\n\t\tvar https = require('https');\n\t\tvar fs = require('fs');\n\n\t\tvar pk = fs.readFileSync('./privatekey.pem');\n\t\tvar pc = fs.readFileSync('./certificate.pem');\n\n\t\tvar options = {\n\t\t\tkey: pk,\n\t\t\tcert: pc\n\t\t};\n\t\tvar server = https.createServer(options, function (req, res) {\n\t\t\tres.write('Hello 赖小赖！');\n\t\t\tres.end();\n\t\t});\n\t\tserver.listen(1234, 'localhost', function () {\n\t\t\tconsole.log('HTTPS服务器已开启，正在监听端口1234');\n\t\t})\n\n- 创建HTTPS客户端\n\n\t\tvar https = require('https');\n\n\t\tvar options = {\n\t\t\thostname: 'npmjs.org',\n\t\t\tport: 443,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET',\n\t\t\tagent: false // 设置为false表示自动选择代理\n\t\t};\n\t\tvar req = https.request(options, function (res) {\n\t\t\tconsole.log('响应状态码：', res.statusCode);\n\t\t\tconsole.log('响应头：', res.headers);\n\t\t\t// 接收数据\n\t\t\tres.on('data', function (chunk) {\n\t\t\t\tconsole.log('响应内容：', chunk.toString());\n\t\t\t});\n\t\t});\n\t\t// 发送请求\n\t\treq.end();\n\t\t// 设置超时\n\t\treq.setTimeout(1000, function () {\n\t\t\tconsole.log('连接超时');\n\t\t\t// 终止请求\n\t\t\treq.abort();\n\t\t})\n\t\treq.on('error', function (err) {\n\t\t\tconsole.log('出错啦！')\n\t\t})\n\n\t除以上提出的区别外，HTTPS服务器的编写（如错误监听、设置超时、关闭服务器等）与HTTP服务器的编写方法基本相同，详见官方文档。\t\t\n\t\n\t默认是GET方法时，也可以使用 https.get(options, callback)，自动调用 end() 方法发起请求，这时HTTPS服务器编写也与HTTP服务器的编写方式相同，参见上文。\n\n\t\t\t\t\t\t\n\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n### 参考资料：\n\n1. [SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\t\t\t","html":"<ul>\n<li><p>创建HTTP服务器</p>\n\n<p>方法1：</p>\n\n<pre><code>var server = http.createServer([requestListener])\n// requestListener = function (request, response) {\n    // request 是一个 http.IncomingMessage对象\n    // response 是一个 http.ServerResponse对象\n// }\n</code></pre>\n\n<p>方法2：</p>\n\n<pre><code>var server = http.createServer();\n// 监听请求\nserver.on('request', function (request, response) {\n    // callback code here.\n})      \n// 监听端口\n// port 若为0则分配随机端口号\n// host 缺省则监听来自任何ipv4地址的客户端连接\n// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\nserver.listen(port, [host], [backlog], [callback])\n\n\n// 或\nserver.on('listening', function (request, response) {\n    // callback code here.\n})\n</code></pre></li>\n</ul>\n\n<!--more-->\n\n<pre><code>示例：\n\n    var http = require('http');\n    var server = http.createServer(function (req, res) {\n        // console.log('客户端请求信息为：', req);\n        console.log('客户端请求方法为：', req.method);\n        console.log('客户端请求url为：', req.url);\n        console.log('客户端请求头为：', req.headers);\n        console.log('客户端请求HTTP版本为：', req.httpVersion);\n\n        // 监听客户端发来的数据\n        req.on('data', function (data) {\n            console.log('服务器接收到数据：', data);\n        });\n        req.on('end', function () {\n            console.log(                '服务器接收数据完毕');\n        })\n\n        // 设置超时\n        res.setTimeout(1000);\n        res.on('timeout', function () {\n            console.log('服务器响应超时');\n        })\n        // 监听关闭\n        res.on('close', function () {\n            console.log('连接被中断');\n        })\n\n\n        // 发送服务器端的响应数据\n        // res.writeHead(statusCode, [reasonPhase], [headers])\n        // starusCode 为HTTP状态码\n        // reasonPhase 为状态码的描述信息\n        // headers 指定响应头对象，或使用 res.setHeader(name, value) 单独设置\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.write('hello 赖小赖！\\n');\n        res.write('hello 我是继续写入的赖小赖！\\n');\n        res.write('hello 我是调皮的赖小赖！\\n');\n        // 必须使用 end() 结束响应\n        res.end('好吧，我不玩了，掰掰！', function () {\n            // console.log('已结束响应');\n        });\n    });\n    // 监听端口\n    server.listen(1234, 'localhost', function () {\n        console.log('服务器正在监听端口1234');\n\n        // 关闭服务器\n        // server.close();\n    });\n    // 设置超时, 默认为2分钟，这里设定为1分钟\n    server.setTimeout(60*1000, function (socket) {\n        // 超时后执行回调\n        // console.log('服务器超时：', socket);\n    })\n\n    // 监听连接\n    server.on('connection', function (socket) {\n        console.log('客户端连接已建立');\n    })\n\n\n    // 监听关闭\n    server.on('close', function () {\n        console.log('服务器已被关闭');\n    });\n    // 监听错误\n    server.on('error', function(e) {\n        // 端口被占用\n        if (e.code == 'EADDRINUSE') {\n            console.log('error: 端口已被占用');\n        }\n    });\n\n\n使用 querystring模块 处理查询字符串\n\n    - querystring.parse() 处理查询字符串\n\n    // str为查询字符串\n    // sep 设定查询字符串中的分隔符，默认为 &amp;\n    // eq 设定查询字符串中的分配符，默认为 = \n    // querystring.parse(str, [sep], [eq], [options])\n    var str = 'name=xiaolai&amp;age=18&amp;sex=male';\n    querystring.parse(str);\n    // 将输出 {\n    //  name: 'xiaolai',\n    //  age: 18,\n    //  sex: 'male'\n    // }\n\n    - querystring.stringify() 转换对象为查询字符串\n    // querystring.stringify(obj, [sep], [eq])\n    var obj = {\n        name: 'xiaolai',\n        age: 18,    // 好吧 就让我再年轻一次！！！\n        sex: 'male'\n    };\n    var str = querystring.stringify(obj);\n    // 将输出 name=xiaolai&amp;age=18&amp;sex=male\n\n使用 url模块 处理完整的URL字符串\n\n    - url.parse() 处理字符串\n\n    // parseQueryString 默认为false, 为true时，将字符串中的查询字符串转化为对象\n    // url.parse(str, [parseQueryString])\n    var str = 'http://user:pwd@laispace.com:80/user/xiaolai?age=18&amp;sex=male#section1';\n    var strObj1 = url.parse(str);\n    var strObj2 = url.parse(str, true);\n    console.log(strObj1, strObj2);\n    // strObj1.query 为 'age=18&amp;sex=male'\n    // strObj2.query 为 {age: '18', sex: 'male'}\n\n    - url.format() 转换对象为字符串\n\n    var str = url.format(strObj1);\n    console.log(str);\n\n    - url.resolve() 合并路径\n\n    // url.resolve(form, to);\n    var str = url.resolve('http://laispace.com', 'user/xiaolai')\n    console.log(str)/ =&gt;'http://laispace.com/user/xiaolai'\n</code></pre>\n\n<ul>\n<li><p>创建HTTP客户端</p>\n\n<pre><code>// options 为对象，若为地址字符串则自动parse为对象\n// options.host 指定IP地址，默认为 localhost\n// options.hostname 默认为 localhost\n// options.port 指定端口\n// localAddress 指定专用于网络连接的本地端口\n// socketPath 指定目标Unix域端口\n// method 指定HTTP请求方法，默认为 GET\n// path 指定请求路径和查询字符串\n// headers 指定请求头对象\n// auth 指定认证信息，如 \"user: password\"\n// agent 指定代理，是一个 http.Agent对象  \n\n\nvar req = http.request(options, function (response) {\n    // response code here.\n})  \n// 发送数据\nreq.write(chunk, [encoding]);\n// 结束请求\nreq.end([chunk], [encoding]);\n</code></pre>\n\n<p>示例：</p>\n\n<pre><code>var http = require('http');\nvar options = {\n    hostname: 'www.laispace.com',\n    post: 80,\n    path: '/',\n    method: 'GET'\n};\nvar req = http.request(options, function (res) {\n    // console.log('响应信息：', res);\n    console.log('响应状态码：', res.statusCode);\n    console.log('响应头：');\n    // 设定编码\n    res.setEncoding('utf8');\n    var body = '';\n    // 监听响应数据\n    res.on('data', function (chunk) {\n        console.log('接收到响应数据：', chunk);\n        body += chunk;\n    })\n    res.on('end', function () {\n        // console.log('响应数据已全部接受：', body);\n    })\n})\n// 写入请求数据\n// req.write('Hello 我是小赖');\n// 发起请求\nreq.end();\n\n\n// 监听错误，如访问一个不存在的地址时\nreq.on('error', function (err) {\n    if (err.code === 'ECONNRESET') {\n        console.log('socket 端口超时')\n    } else {\n        console.log('请求发生错误：', err);\n    }\n\n\n});\n// 设定超时\nreq.setTimeout(1000, function () {\n    // 终止请求\n    // req.abort()      \n})  \n</code></pre>\n\n<p>除了使用 http.request(options, callback) 外，</p>\n\n<p>也可以使用简化的 http.get(options, callback) ，</p>\n\n<p>其默认使用 GET 并会自动调用 end() 方法发起请求</p></li>\n<li><p>创建HTTP代理服务器    </p>\n\n<pre><code>var http = require('http');\nvar url = require('url');\n// 建立代理服务器\nvar server = http.createServer(function (clientReq, clientRes) {\n    var url_parts = url.parse(clientReq.url);\n    var options = {\n        host: 'www.laispace.com', // =&gt;真正访问的网站host\n        port: 80,\n        path: url_parts.pathname,\n        headers: clientReq.headers\n    };\n    // 服务器代理客户端发起请求\n    var serverReq = http.get(options, function (serverRes) {\n        // 代理服务器得到的响应返回给客户端\n        clientRes.writeHead(serverRes.statusCode, serverRes.headers);\n        // 代理服务器请求到的数据返回给客户端\n        serverRes.pipe(clientRes);\n    });         \n    // 将客户端请求\n    clientReq.pipe(serverReq);\n});\nserver.listen(1234, 'localhost');\n</code></pre>\n\n<p>保存这段代码到 test.js</p>\n\n<p>执行 $ node test.js</p>\n\n<p>浏览器访问 <a href=\"http://localhost:1234\">http://localhost:1234</a> 则会访问到 www.laispace.com </p></li>\n<li><p>创建HTTPS服务器    </p>\n\n<p>HTTPS 相比于 HTTP：</p>\n\n<pre><code>- HTTPS服务器向CA申请证书\n\n\n- HTTPS传输的是经过SSL加密后的数据\n\n\n- HTTPS常用443端口，而HTTP常用80端口\n</code></pre>\n\n<p>SSL简单介绍：</p>\n\n<pre><code>- 私钥和公钥保存在服务器\n\n\n- 公钥发送到客户端，客户端端发送 消息msg1 给服务器\n\n\n- 服务器将 消息msg1 进行哈希运算得到 hash1字符串 并用私钥加密后发送 消息msg2 传回客户端\n\n\n- 客户端使用公钥解密 消息msg2 ，将 消息msg1 进行哈希运算得到 hash2字符串，与hash1字符串 进行比较\n\n\n- 若 hash1 与 hash2 相等则握手成功\n\n\n- 客户端选择加密算法和相应密钥，用公钥加密后发送给服务器\n\n\n- 服务器收到加密算法和响应密钥，开始与客户端传输数据     \n</code></pre>\n\n<ol><li><p>创建私钥：</p>\n\n<pre><code>$ openssl genrsa -out privatekey.pem 1024\n</code></pre></li>\n<li><p>创建证书签名请求(Certificate Signing Request)文件：</p>\n\n<pre><code>$ openssl req -new -key privatekey.pem -out certrequest.csr\n</code></pre></li>\n<li><p>获取证书：（这里是使用 openssl 创建的测试用的证书-访问网站会被警告，真正的证书要向CA申请）</p>\n\n<pre><code>$ openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\n</code></pre></li>\n<li><p>创建pfx文件（为存储私钥、公钥和证书的一种格式）：</p>\n\n<pre><code>$ openssl pkcs12 -export -in certificate.pem -inkey privatekey.pem -out certificate.pfx\n</code></pre></li></ol>\n\n<p>具备以上条件后，使用 https.createServer(options, [requestListener]) 创建HTTPS服务器：</p>\n\n<pre><code>var https = require('https');\nvar fs = require('fs');\n\n\nvar pk = fs.readFileSync('./privatekey.pem');\nvar pc = fs.readFileSync('./certificate.pem');\n\n\nvar options = {\n    key: pk,\n    cert: pc\n};\nvar server = https.createServer(options, function (req, res) {\n    res.write('Hello 赖小赖！');\n    res.end();\n});\nserver.listen(1234, 'localhost', function () {\n    console.log('HTTPS服务器已开启，正在监听端口1234');\n})\n</code></pre></li>\n<li><p>创建HTTPS客户端</p>\n\n<pre><code>var https = require('https');\n\n\nvar options = {\n    hostname: 'npmjs.org',\n    port: 443,\n    path: '/',\n    method: 'GET',\n    agent: false // 设置为false表示自动选择代理\n};\nvar req = https.request(options, function (res) {\n    console.log('响应状态码：', res.statusCode);\n    console.log('响应头：', res.headers);\n    // 接收数据\n    res.on('data', function (chunk) {\n        console.log('响应内容：', chunk.toString());\n    });\n});\n// 发送请求\nreq.end();\n// 设置超时\nreq.setTimeout(1000, function () {\n    console.log('连接超时');\n    // 终止请求\n    req.abort();\n})\nreq.on('error', function (err) {\n    console.log('出错啦！')\n})\n</code></pre>\n\n<p>除以上提出的区别外，HTTPS服务器的编写（如错误监听、设置超时、关闭服务器等）与HTTP服务器的编写方法基本相同，详见官方文档。       </p>\n\n<p>默认是GET方法时，也可以使用 https.get(options, callback)，自动调用 end() 方法发起请求，这时HTTPS服务器编写也与HTTP服务器的编写方式相同，参见上文。</p></li>\n</ul>\n\n<h3 id=\"\">参考资料：</h3>\n\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399887405000,"created_by":1,"updated_at":1399887405000,"updated_by":1,"published_at":1399887405000,"published_by":1},{"id":555,"uuid":"699c39bd-2d39-4c34-bcd3-aba91c1e5b45","title":"初探Javascript的Device API","slug":"device-api","markdown":"\n\n写这篇文时以下非常有用的device api并未被所有浏览器（特别是mobile browser）实现，期待各种新版本的新实现。\n\n需要用时，在 caniuse.com 查阅就知道当前这个api是否可用。\n\n&nbsp;\n\n<!-- more -->\n\n[javascript]\n\n// # 获取地理位置\n if (navigator.geolocation.getCurrentPosition) {\n navigator.geolocation.getCurrentPosition(function (position) {\n // 获取经纬度\n var lat = position.coords.latitude;\n var log = position.coords.longitude;\n\nalert('经纬度信息：', lat, ', ', log);\n });\n } else {\n console.log('啊噢~不支持 navigator.geolocation.getCurrentPosition 方法')\n }\n // # 监听设备旋转\n if (window.DeviceOrientationEvent) {\n // 添加监听\n window.addEventListener('deviceorientation', function (event) {\n // 获取从左到右的tilt\n var tiltLR = event.gamma;\n // 获取从前到后的tilt\n var tiltFB = event.beta;\n // 获取设备方向\n var direction = event.alpha;\n // console.log('设备方向信息：', tiltLR, tiltFB, direction);\n });\n } else {\n console.log('啊噢~ 不支持 window.DeviceOrientationEvent 方法');\n }\n // # 调用摄像头\n if (navigator.getUserMedia) {\n navigator.getUserMedia({\n video: true\n // 成功\n }, function (localMediaStream) {\n // 获取页面中的容器\n var vid = document.getElementById('camera-video');\n // 创建 URL对象\n vid.src = window.URL.createObjectURL(localMediaStream);\n // 失败\n }, function (err) {\n console.log('啊噢~调用摄像头失败：', err);\n });\n } else {\n console.log('啊噢~不支持 navigator.getUserMedia 方法')\n }\n\n// # 设置振动\n if (navigator.vibrate) {\n // 振动一秒\n navigator.vibrate(1000);\n\n// 振动几次\n navigator.vibrate([500, 250, 500]);\n } else {\n console.log('啊噢~ 不支持 navigator.vibrate 方法')\n }\n\n// # 感应环境亮度\n window.addEventListener('devicelight', function (event) {\n // 单位是 lux\n var lightLevel = event.value;\n console.log('环境亮度值是：', lightLevel);\n });\n\n// # 查看电源状态\n if (navigator.battery) {\n // 电量\n var level = navigator.battery.level;\n // 是否在充电\n var isCharging = navigator.battery.charging;\n // 还需多久才能充满电\n var chargingTime = navigator.battery.chargingTime;\n // 电源还能坚持多久\n var dischargingTime = navigator.battery.dischargingTime;\n\nconsole.log('电池状态：', level, isCharging, chargingTime, dischargingTime);\n } else {\n console.log('啊噢~ 不支持 navigator.battery 方法')\n }\n\n[/javascript]","html":"<p>写这篇文时以下非常有用的device api并未被所有浏览器（特别是mobile browser）实现，期待各种新版本的新实现。</p>\n\n<p>需要用时，在 caniuse.com 查阅就知道当前这个api是否可用。</p>\n\n<p>&nbsp;</p>\n\n<!-- more -->\n\n<p>[javascript]</p>\n\n<p>// # 获取地理位置\n if (navigator.geolocation.getCurrentPosition) {\n navigator.geolocation.getCurrentPosition(function (position) {\n // 获取经纬度\n var lat = position.coords.latitude;\n var log = position.coords.longitude;</p>\n\n<p>alert('经纬度信息：', lat, ', ', log); <br />\n });\n } else {\n console.log('啊噢~不支持 navigator.geolocation.getCurrentPosition 方法')\n }\n // # 监听设备旋转\n if (window.DeviceOrientationEvent) {\n // 添加监听\n window.addEventListener('deviceorientation', function (event) {\n // 获取从左到右的tilt\n var tiltLR = event.gamma;\n // 获取从前到后的tilt\n var tiltFB = event.beta;\n // 获取设备方向\n var direction = event.alpha;\n // console.log('设备方向信息：', tiltLR, tiltFB, direction);\n });\n } else {\n console.log('啊噢~ 不支持 window.DeviceOrientationEvent 方法');\n }\n // # 调用摄像头\n if (navigator.getUserMedia) {\n navigator.getUserMedia({\n video: true\n // 成功\n }, function (localMediaStream) {\n // 获取页面中的容器\n var vid = document.getElementById('camera-video');\n // 创建 URL对象\n vid.src = window.URL.createObjectURL(localMediaStream);\n // 失败\n }, function (err) {\n console.log('啊噢~调用摄像头失败：', err);\n });\n } else {\n console.log('啊噢~不支持 navigator.getUserMedia 方法')\n }</p>\n\n<p>// # 设置振动\n if (navigator.vibrate) {\n // 振动一秒\n navigator.vibrate(1000);</p>\n\n<p>// 振动几次\n navigator.vibrate([500, 250, 500]);\n } else {\n console.log('啊噢~ 不支持 navigator.vibrate 方法')\n }</p>\n\n<p>// # 感应环境亮度\n window.addEventListener('devicelight', function (event) {\n // 单位是 lux\n var lightLevel = event.value;\n console.log('环境亮度值是：', lightLevel);\n });</p>\n\n<p>// # 查看电源状态\n if (navigator.battery) {\n // 电量\n var level = navigator.battery.level;\n // 是否在充电\n var isCharging = navigator.battery.charging;\n // 还需多久才能充满电\n var chargingTime = navigator.battery.chargingTime;\n // 电源还能坚持多久\n var dischargingTime = navigator.battery.dischargingTime;</p>\n\n<p>console.log('电池状态：', level, isCharging, chargingTime, dischargingTime); <br />\n } else {\n console.log('啊噢~ 不支持 navigator.battery 方法')\n }</p>\n\n<p>[/javascript]</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1395275496000,"created_by":1,"updated_at":1395275496000,"updated_by":1,"published_at":1395275496000,"published_by":1},{"id":556,"uuid":"c8d0692c-397b-42e2-9863-99cf349de53d","title":"前端工具收集","slug":"web-tools-collection","markdown":"\n\n> 这里整理一些我自己用过且觉得好用的工具、类库的玩意~\n\n> 欢迎推荐更多好玩的给我：）\n\n# CSS 类\n\n- fontAwesome 海量可伸缩的字体图标\n\n示例：\n\n\t\t<link href=\"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t\t<!-- 显示不同尺寸的照相机(camera)图标 -->\n\t\t<i class=\"fa fa-camera-retro fa-lg\"></i> fa-lg\n\t\t<i class=\"fa fa-camera-retro fa-2x\"></i> fa-2x\n\t\t<i class=\"fa fa-camera-retro fa-3x\"></i> fa-3x\n\t\t<i class=\"fa fa-camera-retro fa-4x\"></i> fa-4x\n\t\t<i class=\"fa fa-camera-retro fa-5x\"></i> fa-5x\n\n链接：\n\n1. [http://fontawesome.io/](http://fontawesome.io/)\n2. [Github](https://github.com/FortAwesome/Font-Awesome)\t\t\n\t\t\n\n# 工具类\n\n- component 快速安装第三方类库\n\n示例：\n\n\t1. 安装 component\n\t\t\n\t\t$ npm install -g component\n\t\t\n\t2. 创建配置文件 component.json\n\t\t\n\t\t{\n\t\t  \"name\": \"getting-started-with-component\",\n\t\t  \"dependencies\": {\n\t\t    \"necolas/normalize.css\": \"^3.0.0\"  // 依赖normalize.css类库\n\t\t  },\n\t\t  \"scripts\": [\"index.js\"],\t// 引入自定义的js\n\t\t  \"styles\": [\"index.css\"]\t// 引入自定义的css\n\t\t}\n\t\t\n\t2. 创建 index.html\n\t\n\t\t// index.html 注意这里只有 build/build.css 和 build/build.js 文件\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t  <head>\n\t\t    <title>Getting Started with Component</title>\n\t\t    <link rel=\"stylesheet\" href=\"build/build.css\">\n\t\t  </head>\n\t\t  <body>\n\t\t    <h1>Getting Started with Component</h1>\n\t\t    <p class=\"blink\">Woo!</p>\n\t\t    <script src=\"build/build.js\"></script>\n\t\t  </body>\n\t\t</html>\t\n\t\t\n\t3. 创建 index.css\n\t\t* {\n \t\t\t box-sizing: border-box;\n\t\t}\n\t\t\n\t4. 创建 index.js\n\t\n\t\tconsole.log('Hello component！')\n\t\t\n\t5. 使用 build 命令进行构建\n\t\t\n\t\t$ component build\n\n\t6. 打开 index.html 看看吧：）\n\n\n链接：\n\n1. [http://component.io/](http://component.io/)\n2. [Guide](https://github.com/component/guide/blob/master/component/getting-started.md)\n\n\n\n\n\n\n\n","html":"<blockquote>\n  <p>这里整理一些我自己用过且觉得好用的工具、类库的玩意~</p>\n  \n  <p>欢迎推荐更多好玩的给我：）</p>\n</blockquote>\n\n<h1 id=\"css\">CSS 类</h1>\n\n<ul>\n<li>fontAwesome 海量可伸缩的字体图标</li>\n</ul>\n\n<p>示例：</p>\n\n<pre><code>    &lt;link href=\"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css\" rel=\"stylesheet\"&gt;\n    &lt;!-- 显示不同尺寸的照相机(camera)图标 --&gt;\n    &lt;i class=\"fa fa-camera-retro fa-lg\"&gt;&lt;/i&gt; fa-lg\n    &lt;i class=\"fa fa-camera-retro fa-2x\"&gt;&lt;/i&gt; fa-2x\n    &lt;i class=\"fa fa-camera-retro fa-3x\"&gt;&lt;/i&gt; fa-3x\n    &lt;i class=\"fa fa-camera-retro fa-4x\"&gt;&lt;/i&gt; fa-4x\n    &lt;i class=\"fa fa-camera-retro fa-5x\"&gt;&lt;/i&gt; fa-5x\n</code></pre>\n\n<p>链接：</p>\n\n<ol>\n<li><a href=\"http://fontawesome.io/\">http://fontawesome.io/</a>  </li>\n<li><a href=\"https://github.com/FortAwesome/Font-Awesome\">Github</a>        </li>\n</ol>\n\n<h1 id=\"\">工具类</h1>\n\n<ul>\n<li>component 快速安装第三方类库</li>\n</ul>\n\n<p>示例：</p>\n\n<pre><code>1. 安装 component\n\n    $ npm install -g component\n\n2. 创建配置文件 component.json\n\n    {\n      \"name\": \"getting-started-with-component\",\n      \"dependencies\": {\n        \"necolas/normalize.css\": \"^3.0.0\"  // 依赖normalize.css类库\n      },\n      \"scripts\": [\"index.js\"],  // 引入自定义的js\n      \"styles\": [\"index.css\"]   // 引入自定义的css\n    }\n\n2. 创建 index.html\n\n    // index.html 注意这里只有 build/build.css 和 build/build.js 文件\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;Getting Started with Component&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"build/build.css\"&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;h1&gt;Getting Started with Component&lt;/h1&gt;\n        &lt;p class=\"blink\"&gt;Woo!&lt;/p&gt;\n        &lt;script src=\"build/build.js\"&gt;&lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt; \n\n3. 创建 index.css\n    * {\n          box-sizing: border-box;\n    }\n\n4. 创建 index.js\n\n    console.log('Hello component！')\n\n5. 使用 build 命令进行构建\n\n    $ component build\n\n6. 打开 index.html 看看吧：）\n</code></pre>\n\n<p>链接：</p>\n\n<ol>\n<li><a href=\"http://component.io/\">http://component.io/</a>  </li>\n<li><a href=\"https://github.com/component/guide/blob/master/component/getting-started.md\">Guide</a></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400966555000,"created_by":1,"updated_at":1400966555000,"updated_by":1,"published_at":1400966555000,"published_by":1},{"id":557,"uuid":"db3ad736-6688-4e6e-981f-b1e7ef431734","title":"图片预加载和判断图片是否加载完成","slug":"lazy-load","markdown":"\n\n## 使用Image()对象预加载图片：\nvar imgsSrcArray = [src1, src2, src3, src4, src5];\n需要预加载这些图片，以便点击上一张或下一张按钮的时候，能显示对应的图片。\n使用JS自带的 Image对象 实现图片预加载：\n[javascript]\n var images= [];\n var len = imgsSrcArray.length;\n for(var i = 0; i &lt; len; i++) {\n           var img = new Image();\n                 img.src = imgsScrArray[i];\n           images.push(img)\n }\n [/javascript]\n\n这样就实现了将多个图片进行了预加载，缓存到了images数组里。\n\n## 使用img.onload，当图片加载完成时执行操作：\n[javascript]\n img.onload = function(){\n      // console.log(‘图片加载完成')\n };\n [/javascript]\n\n## 判断图片是否已经加载完成则：需要判断 img.complete属性是否为true：\nif (img.complete) {\n// 执行操作\n}\n\n## 优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数\n[javascript]\n var images = [];\n function preloadImgs() {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = preloadImgs.arguments[i];\n      }\n }\n [/javascript]\n\n// 或传入数组\n[javascript]\n var images = [];\n function preloadImgs(srcArray) {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = srcArray[i];\n      }\n }\n [/javascript]\n\n<!-- more -->\n\n## Image对象的其他方法：\nimg.onabort() 图片加载被中断时执行\nimg.onload()  图片加载成功时执行\nimg.onerror() 图片加载失败时执行\n\nImage对象的其他属性可见参考资料：\n[参考资料](<span style=\"text-decoration: underline;\">https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://www.zhihu.com/question/19871135</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://www.csdn.net/article/2013-10-15/2817187-3-ways-preload-images-css-javascript-ajax</span> )","html":"<h2 id=\"image\">使用Image()对象预加载图片：</h2>\n\n<p>var imgsSrcArray = [src1, src2, src3, src4, src5]; <br />\n需要预加载这些图片，以便点击上一张或下一张按钮的时候，能显示对应的图片。\n使用JS自带的 Image对象 实现图片预加载：\n[javascript]\n var images= [];\n var len = imgsSrcArray.length;\n for(var i = 0; i &lt; len; i++) {\n           var img = new Image();\n                 img.src = imgsScrArray[i];\n           images.push(img)\n }\n [/javascript]</p>\n\n<p>这样就实现了将多个图片进行了预加载，缓存到了images数组里。</p>\n\n<h2 id=\"imgonload\">使用img.onload，当图片加载完成时执行操作：</h2>\n\n<p>[javascript]\n img.onload = function(){\n      // console.log(‘图片加载完成')\n };\n [/javascript]</p>\n\n<h2 id=\"imgcompletetrue\">判断图片是否已经加载完成则：需要判断 img.complete属性是否为true：</h2>\n\n<p>if (img.complete) { <br />\n// 执行操作\n}</p>\n\n<h2 id=\"\">优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数</h2>\n\n<p>[javascript]\n var images = [];\n function preloadImgs() {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = preloadImgs.arguments[i];\n      }\n }\n [/javascript]</p>\n\n<p>// 或传入数组\n[javascript]\n var images = [];\n function preloadImgs(srcArray) {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = srcArray[i];\n      }\n }\n [/javascript]</p>\n\n<!-- more -->\n\n<h2 id=\"image\">Image对象的其他方法：</h2>\n\n<p>img.onabort() 图片加载被中断时执行 <br />\nimg.onload()  图片加载成功时执行 <br />\nimg.onerror() 图片加载失败时执行</p>\n\n<p>Image对象的其他属性可见参考资料： <br />\n<a href=\"span style=\"text-decoration: underline;\">https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement</span> \">参考资料</a>\n<a href=\"span style=\"text-decoration: underline;\">http://www.zhihu.com/question/19871135</span> \">参考资料</a>\n<a href=\"span style=\"text-decoration: underline;\">http://www.csdn.net/article/2013-10-15/2817187-3-ways-preload-images-css-javascript-ajax</span> \">参考资料</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1384371427000,"created_by":1,"updated_at":1384371427000,"updated_by":1,"published_at":1384371427000,"published_by":1},{"id":558,"uuid":"eaa67c64-3258-4b57-8fc6-96b59cda83dc","title":"圣诞贺卡-世界末日-冬至-想家","slug":"sheng-dan-he-qia-shi-jie-mo-ri-dong-zhi-xiang-jia","markdown":"\n\n花了几天时间，代表文教制作了一个圣诞贺卡送个热心的外国友人，向他们展示我们文教一年的成果和对他们表示感谢。\n\n对我而言，这算是一个“小项目”吧。\n\n涉水前端时间不长，没什么经验，写这些代码都是摸着石头过河，一步一步调兼容做出来的。\n\nLucy给的需求，相当于客户甲方了。也就是说，这是在客户提供需求的情况下，我自行设计制作出来的一份网站（虽然只是简单的静态页面，不涉及后台交互）。\n\n不清楚那些接受贺卡的人用什么浏览器，没敢多用H5的特性，并且对该死的低版本IE没有做很好的兼容，希望不会搞砸。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg \"2012-12-21_210840\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg)\n\n嗯，上[demo](http://www.chinepro.org/christmas2012/), [http://www.chinepro.org/christmas2012/](http://www.chinepro.org/christmas2012/)\n\n&nbsp;\n\n嗯，很明显，我的美感还是很欠佳，需要不断地弥补。\n\n今天是世界末日也是冬至，给爷爷打了电话，他说家里的汤圆好吃。今晚班里组织在三个宿舍打边炉吃汤圆，我没有去。\n\n&nbsp;\n\n树欲静而风不止，子欲养而亲不待。二老八十高龄，身体不好。\n\n我只想着家。\n\n呵呵，跑题了。\n\n&nbsp;","html":"<p>花了几天时间，代表文教制作了一个圣诞贺卡送个热心的外国友人，向他们展示我们文教一年的成果和对他们表示感谢。</p>\n\n<p>对我而言，这算是一个“小项目”吧。</p>\n\n<p>涉水前端时间不长，没什么经验，写这些代码都是摸着石头过河，一步一步调兼容做出来的。</p>\n\n<p>Lucy给的需求，相当于客户甲方了。也就是说，这是在客户提供需求的情况下，我自行设计制作出来的一份网站（虽然只是简单的静态页面，不涉及后台交互）。</p>\n\n<p>不清楚那些接受贺卡的人用什么浏览器，没敢多用H5的特性，并且对该死的低版本IE没有做很好的兼容，希望不会搞砸。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg\" alt=\"\" title=\"2012-12-21_210840\" /></a></p>\n\n<p>嗯，上<a href=\"http://www.chinepro.org/christmas2012/\">demo</a>, <a href=\"http://www.chinepro.org/christmas2012/\">http://www.chinepro.org/christmas2012/</a></p>\n\n<p>&nbsp;</p>\n\n<p>嗯，很明显，我的美感还是很欠佳，需要不断地弥补。</p>\n\n<p>今天是世界末日也是冬至，给爷爷打了电话，他说家里的汤圆好吃。今晚班里组织在三个宿舍打边炉吃汤圆，我没有去。</p>\n\n<p>&nbsp;</p>\n\n<p>树欲静而风不止，子欲养而亲不待。二老八十高龄，身体不好。</p>\n\n<p>我只想着家。</p>\n\n<p>呵呵，跑题了。</p>\n\n<p>&nbsp;</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1356124624000,"created_by":1,"updated_at":1356124624000,"updated_by":1,"published_at":1356124624000,"published_by":1},{"id":559,"uuid":"af2d4c6d-fec3-4c6f-b39c-3425205a4a6e","title":"坎坷大学路-大三下","slug":"kan-ke-da-xue-lu-da-san-xia","markdown":"\n\n# 前言1\n\n上一份鸡汤写的是自己的《<span style=\"text-decoration: underline;\">坎坷大学路</span>》，写在大三上学期。\n刚回去看了一下，感觉这份鸡汤对自己还是挺补的。\n如果你也喜欢这碗汤的话，别忘了我没有给你汤勺。\n\n每个人都应该拥有自己的汤勺，如果你没有，那就赶紧为自己打造一个。\n\n# 前言2\n\n昨天拿到阿里的实习生offer，部门老大说一般实习生进来就是个B类（Normal）但觉得你OK，为你申请了一个A类（即Top类），\n本来说今天还会有个高级技术官对我加多一轮审核，但意外的是今天下午部门老大又告诉我已经在审批我的入职了，只需要等hr来个电话确认一下。\n\n顿时欣喜若狂。\n原以为找个实习会挺艰辛的，所以我搜集了那么多面试题打算开刷。\n可没料到还没来得及准备，简历都还没完善，百度的前辈就给我发了offer，谈好了待遇。\n更幸运的是，等待很久的阿里终于来了二面，并在两天内就给我发了offer，喜出望外。\n\n来不及准备，就已经结束了。\n现在才发现，我其实一直在准备。\n而且还发现，我多了好几个选择。\n真是幸运。\n\n部门老大说：\n『放心，做了那么多年校招，我还没看偏过。』\n『是你自己的能力决定的啊。』\n\n我最喜欢的感觉莫过于受到前辈的肯定了。\n继续加油。\n\n# 前言3\n\n按我写日志的频率，半年会有一篇鸡汤文，当然这篇也不例外了。\n以下算是我对自己大学提前结束的一个总结，也算是给半年后的自己做个铺垫吧。\n\n不过，好像不懂得怎么写文章了，就用对几个关键字的解释作为佐料吧：）\n\n# 信仰\n\n『  嗨，小赖，你要知道：\n不设限，不止步，不屈服。』\n这对我而言，是真理，不论我处于什么行业。\n\n# 兴趣\n\n兴趣是最好的老师，菜鸟可以带着兴趣先飞，虽苦尤乐，乐此不疲。\n\n我一直坚信那句话：\n\n『大学就是不断尝试，直到找到自己的生存方式。』\n\n我对这句话的理解就是，在多种可能的探索下，找到结合自身性格、兴趣、甚至是职业发展的结合点。\n\n没有兴趣的驱动，我想我也不会对自己的职业发展有一个较好的把握了。\n\n# 专业\n\n这是高能线，我只知道大多数人都不会专业对口就业。\n\n理解这点，拓展视野就是不涉限了。\n\n# 成绩\n\n这也是高能线，说多无用，我只知道你得明白自己成绩为什么好或差。\n\n并且，除了成绩，你还得知道你还拥有什么或缺少什么。\n\n在当下中国，只有成绩的人一抓一大把，谁会稀罕你。\n\n除非你有亮点。\n\n# 职业\n\n『大学就是不断尝试，直到找到自己的生存方式。』\n\n这句话存在一个误区，即尝试太多后，若没有找到自己的定位，会不会因此对自己丧失信心呢？\n\n会，如果你不断尝试打手游还是打网游还是打单机还是打边炉，或者不断尝试泡各种妹子XD\n\n或者不会，如果你不断尝试探索自己的兴趣、专长，或者树立自己对自身所处行业的理解的话。\n\n你早点认识自己，理解你所在的行业的话，你就先飞起来吧，你飞高了谁会知道你其实是个笨鸟呢？\n\n嗨！我就是这只幸运的笨鸟。\n\n『一个人如果没有思想的话，那跟咸鱼有什么区别？』\n\n当然啦，有思想就能让咸鱼翻身啦：）\n\n笨鸟如果能学习到飞翔的方法，多扑腾扑腾翅膀就行了，比起那些不努力的人，根本轮不到他们拼天赋轮不到你心生自卑。\n\n# 生活\n\n不设限于视野，不止步于进步，不屈服于当下生活。\n\n前阵子看到 L·X 童鞋发的一个说说是这么写的：\n\n『当你月薪五千后 你就会觉得那些用iPhone土豪金的人没有装逼 当你月薪破万后 你就会觉得那些拿着单反的人也没有装逼 当你一年能赚50万后 你就会觉得那些奔驰宝马飙车党们也没有装逼 只是自己没能力。』\n\n卧槽！这是装逼后给大家的最好解释了。\n\n嫌别人装逼的话，就提高自己的水平，咱也装呗。\n\n自己在装逼的话，就提高自己的水平，提升逼格。\n\n# 超越\n\n永远要知道自己可以超越你心目中的牛人，永远相信只要努力，你就可以快一步达到这个目标。\n\n打败了你心目中的牛人，再找个不能望其项背的新神话，然后继续去尝试打败吧。\n\nYes, you can.\n\n感谢自己，感谢我的小伙伴，感谢赏识我的前辈。\n\n期待下个半年的自己又会有一个新的进步。","html":"<h1 id=\"1\">前言1</h1>\n\n<p>上一份鸡汤写的是自己的《<span style=\"text-decoration: underline;\">坎坷大学路</span>》，写在大三上学期。\n刚回去看了一下，感觉这份鸡汤对自己还是挺补的。\n如果你也喜欢这碗汤的话，别忘了我没有给你汤勺。</p>\n\n<p>每个人都应该拥有自己的汤勺，如果你没有，那就赶紧为自己打造一个。</p>\n\n<h1 id=\"2\">前言2</h1>\n\n<p>昨天拿到阿里的实习生offer，部门老大说一般实习生进来就是个B类（Normal）但觉得你OK，为你申请了一个A类（即Top类），\n本来说今天还会有个高级技术官对我加多一轮审核，但意外的是今天下午部门老大又告诉我已经在审批我的入职了，只需要等hr来个电话确认一下。</p>\n\n<p>顿时欣喜若狂。\n原以为找个实习会挺艰辛的，所以我搜集了那么多面试题打算开刷。\n可没料到还没来得及准备，简历都还没完善，百度的前辈就给我发了offer，谈好了待遇。\n更幸运的是，等待很久的阿里终于来了二面，并在两天内就给我发了offer，喜出望外。</p>\n\n<p>来不及准备，就已经结束了。\n现在才发现，我其实一直在准备。\n而且还发现，我多了好几个选择。\n真是幸运。</p>\n\n<p>部门老大说：\n『放心，做了那么多年校招，我还没看偏过。』\n『是你自己的能力决定的啊。』</p>\n\n<p>我最喜欢的感觉莫过于受到前辈的肯定了。\n继续加油。</p>\n\n<h1 id=\"3\">前言3</h1>\n\n<p>按我写日志的频率，半年会有一篇鸡汤文，当然这篇也不例外了。\n以下算是我对自己大学提前结束的一个总结，也算是给半年后的自己做个铺垫吧。</p>\n\n<p>不过，好像不懂得怎么写文章了，就用对几个关键字的解释作为佐料吧：）</p>\n\n<h1 id=\"\">信仰</h1>\n\n<p>『  嗨，小赖，你要知道：\n不设限，不止步，不屈服。』\n这对我而言，是真理，不论我处于什么行业。</p>\n\n<h1 id=\"\">兴趣</h1>\n\n<p>兴趣是最好的老师，菜鸟可以带着兴趣先飞，虽苦尤乐，乐此不疲。</p>\n\n<p>我一直坚信那句话：</p>\n\n<p>『大学就是不断尝试，直到找到自己的生存方式。』</p>\n\n<p>我对这句话的理解就是，在多种可能的探索下，找到结合自身性格、兴趣、甚至是职业发展的结合点。</p>\n\n<p>没有兴趣的驱动，我想我也不会对自己的职业发展有一个较好的把握了。</p>\n\n<h1 id=\"\">专业</h1>\n\n<p>这是高能线，我只知道大多数人都不会专业对口就业。</p>\n\n<p>理解这点，拓展视野就是不涉限了。</p>\n\n<h1 id=\"\">成绩</h1>\n\n<p>这也是高能线，说多无用，我只知道你得明白自己成绩为什么好或差。</p>\n\n<p>并且，除了成绩，你还得知道你还拥有什么或缺少什么。</p>\n\n<p>在当下中国，只有成绩的人一抓一大把，谁会稀罕你。</p>\n\n<p>除非你有亮点。</p>\n\n<h1 id=\"\">职业</h1>\n\n<p>『大学就是不断尝试，直到找到自己的生存方式。』</p>\n\n<p>这句话存在一个误区，即尝试太多后，若没有找到自己的定位，会不会因此对自己丧失信心呢？</p>\n\n<p>会，如果你不断尝试打手游还是打网游还是打单机还是打边炉，或者不断尝试泡各种妹子XD</p>\n\n<p>或者不会，如果你不断尝试探索自己的兴趣、专长，或者树立自己对自身所处行业的理解的话。</p>\n\n<p>你早点认识自己，理解你所在的行业的话，你就先飞起来吧，你飞高了谁会知道你其实是个笨鸟呢？</p>\n\n<p>嗨！我就是这只幸运的笨鸟。</p>\n\n<p>『一个人如果没有思想的话，那跟咸鱼有什么区别？』</p>\n\n<p>当然啦，有思想就能让咸鱼翻身啦：）</p>\n\n<p>笨鸟如果能学习到飞翔的方法，多扑腾扑腾翅膀就行了，比起那些不努力的人，根本轮不到他们拼天赋轮不到你心生自卑。</p>\n\n<h1 id=\"\">生活</h1>\n\n<p>不设限于视野，不止步于进步，不屈服于当下生活。</p>\n\n<p>前阵子看到 L·X 童鞋发的一个说说是这么写的：</p>\n\n<p>『当你月薪五千后 你就会觉得那些用iPhone土豪金的人没有装逼 当你月薪破万后 你就会觉得那些拿着单反的人也没有装逼 当你一年能赚50万后 你就会觉得那些奔驰宝马飙车党们也没有装逼 只是自己没能力。』</p>\n\n<p>卧槽！这是装逼后给大家的最好解释了。</p>\n\n<p>嫌别人装逼的话，就提高自己的水平，咱也装呗。</p>\n\n<p>自己在装逼的话，就提高自己的水平，提升逼格。</p>\n\n<h1 id=\"\">超越</h1>\n\n<p>永远要知道自己可以超越你心目中的牛人，永远相信只要努力，你就可以快一步达到这个目标。</p>\n\n<p>打败了你心目中的牛人，再找个不能望其项背的新神话，然后继续去尝试打败吧。</p>\n\n<p>Yes, you can.</p>\n\n<p>感谢自己，感谢我的小伙伴，感谢赏识我的前辈。</p>\n\n<p>期待下个半年的自己又会有一个新的进步。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1395954296000,"created_by":1,"updated_at":1395954296000,"updated_by":1,"published_at":1395954296000,"published_by":1},{"id":560,"uuid":"7447bcf6-9fc9-4906-a06e-1ea027094285","title":"坎坷大学路","slug":"kan-ke-da-xue-lu","markdown":"\n\n今天晚上UC俱乐部开了个分享会，难得停下来倾听别人的成长，几分感触。\nWT 分享了ACM竞赛的经验，现在保送到新加坡国立大学硕博连读5年，真是艳羡，不能望其项背。\nSZ  分享了Android的开发的体会，而我则给大家介绍了『前端』这个新词汇。\n\n说长也不长，说短亦不短，转眼现在已经大三。\n好像一直在瞎忙，忙得忘记停下来回头看看自己遇到了哪些坎，忘记停下来总结总结自己的教训。\n\n这篇文，就算是给自己一个安慰吧。\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png \"Screen Shot 2013-11-03 at 11.16.04 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png)[\n](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png)\n**# 教训**\n\n&gt; 教训1：大学生谓之『大』，异于『小』学生，异于『中』学生。\n大学生该有『大』的风范，该有高等教育背景下的专业素养，比如：你应该用你的专业视觉去剖析社会现象，而非做盲目从众的五毛党。\n\n&gt; 教训2：大学生谓之『学生』，同于『小』学生，同于『中』学生。大学生的本质仍在于『学习』，可以用不同的学习方式来帮助自己成长，但不能离其宗-你得不断在学习。\n\n按《原本大学》的说法，大学之道，在明明德，在亲民，在止于至善。知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这『大学』不一定指代我们在读的『大学』，但作为一个成年人，就该有这方面的担当吧。\n按胡适先生的说话，我们要有独立之思想，自由之精神。\n唉，作为一个自私又功利的个体大学生，我其实没有没有那么高尚，我对自己大学的定义是：\n认识自己，认识朋友，认识世界。\n这真是一个无比艰难的过程。\n**# 经验**\n\n&gt; 经验1：认识自己在于你如何给自己定位，是想做A，还是做B。\n我不比别人聪明，这个智商是硬伤，那就该结合自身，发挥特长，将这仅有的一丁点智商用到极致。\n靠几分努力，加几分坚持，慢慢发现你总能打败那些毫不上进的人。而面对那些不能望其项背的牛人，你则必须非常努力，才有可能迎头赶上。\n\n&gt; 经验2：兴趣还真是个最好的老师。\n人生短暂仅有几十年，怎么个过法，我可不想听天由命。毕业后，三分之一的时间在职场，三分之一的时间在家庭，还三分之一的时间在","html":"<p>今天晚上UC俱乐部开了个分享会，难得停下来倾听别人的成长，几分感触。\nWT 分享了ACM竞赛的经验，现在保送到新加坡国立大学硕博连读5年，真是艳羡，不能望其项背。 <br />\nSZ  分享了Android的开发的体会，而我则给大家介绍了『前端』这个新词汇。</p>\n\n<p>说长也不长，说短亦不短，转眼现在已经大三。\n好像一直在瞎忙，忙得忘记停下来回头看看自己遇到了哪些坎，忘记停下来总结总结自己的教训。</p>\n\n<p>这篇文，就算是给自己一个安慰吧。\n<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\" alt=\"\" title=\"Screen Shot 2013-11-03 at 11.16.04 PM\" /></a><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\">\n</a>\n<strong># 教训</strong></p>\n\n<p>&gt; 教训1：大学生谓之『大』，异于『小』学生，异于『中』学生。\n大学生该有『大』的风范，该有高等教育背景下的专业素养，比如：你应该用你的专业视觉去剖析社会现象，而非做盲目从众的五毛党。</p>\n\n<p>&gt; 教训2：大学生谓之『学生』，同于『小』学生，同于『中』学生。大学生的本质仍在于『学习』，可以用不同的学习方式来帮助自己成长，但不能离其宗-你得不断在学习。</p>\n\n<p>按《原本大学》的说法，大学之道，在明明德，在亲民，在止于至善。知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这『大学』不一定指代我们在读的『大学』，但作为一个成年人，就该有这方面的担当吧。\n按胡适先生的说话，我们要有独立之思想，自由之精神。\n唉，作为一个自私又功利的个体大学生，我其实没有没有那么高尚，我对自己大学的定义是：\n认识自己，认识朋友，认识世界。\n这真是一个无比艰难的过程。\n<strong># 经验</strong></p>\n\n<p>&gt; 经验1：认识自己在于你如何给自己定位，是想做A，还是做B。\n我不比别人聪明，这个智商是硬伤，那就该结合自身，发挥特长，将这仅有的一丁点智商用到极致。\n靠几分努力，加几分坚持，慢慢发现你总能打败那些毫不上进的人。而面对那些不能望其项背的牛人，你则必须非常努力，才有可能迎头赶上。</p>\n\n<p>&gt; 经验2：兴趣还真是个最好的老师。\n人生短暂仅有几十年，怎么个过法，我可不想听天由命。毕业后，三分之一的时间在职场，三分之一的时间在家庭，还三分之一的时间在</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1383520829000,"created_by":1,"updated_at":1383520829000,"updated_by":1,"published_at":1383520829000,"published_by":1},{"id":561,"uuid":"9bb7f754-bdc3-4e08-a3b7-e086369e67d5","title":"天酬勤·笨先飞","slug":"tian-chou-qin-ben-xian-fei","markdown":"\n\n[![](http://www.laispace.com/wp-content/uploads/2013/05/images.jpg \"images\")](http://www.laispace.com/wp-content/uploads/2013/05/images.jpg)\n\n&nbsp;\n\n天道酬勤，一直坚信这个道理。\n\n笨鸟先飞，一直坚持这个姿态。\n\n我一直在模仿理想中的自己，却从未超越过。\n\n也许，这就是动力。\n\n&nbsp;\n\n&nbsp;\n\n我二十一了。\n\n昨天凌晨零点，@大花 一句准时的「生日快乐」把我吓到，因为我真忘了。\n\n弱冠已过，责任更多。我不想阐述自己的家境去获取支持，只想尽快获得一股力量，在日后能维护这篇支离破碎。\n\n希望不再增悲。\n\n&nbsp;\n\n我二十一了。\n\n今天晚上十点，我刚从北校回到宿舍，收到几条生日祝福的短信，想想，就这么过了。\n\n青春将逝，年华不悔。我真希望自己的努力付出能早日获得回报，让我有份信心能承起一些担当。\n\n希望如愿以偿。\n\n&nbsp;\n\n我二十一了。\n\n我还一无所有，我仍一无所获，我仍一无所知，我仍是一直笨鸟。\n\n但，我一直在坚持，坚持一个信仰。\n\n等我羽翼丰满，我再亮英姿。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg \"1260ef9e6a7g215\")](http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg)","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/images.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/images.jpg\" alt=\"\" title=\"images\" /></a></p>\n\n<p>&nbsp;</p>\n\n<p>天道酬勤，一直坚信这个道理。</p>\n\n<p>笨鸟先飞，一直坚持这个姿态。</p>\n\n<p>我一直在模仿理想中的自己，却从未超越过。</p>\n\n<p>也许，这就是动力。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>我二十一了。</p>\n\n<p>昨天凌晨零点，@大花 一句准时的「生日快乐」把我吓到，因为我真忘了。</p>\n\n<p>弱冠已过，责任更多。我不想阐述自己的家境去获取支持，只想尽快获得一股力量，在日后能维护这篇支离破碎。</p>\n\n<p>希望不再增悲。</p>\n\n<p>&nbsp;</p>\n\n<p>我二十一了。</p>\n\n<p>今天晚上十点，我刚从北校回到宿舍，收到几条生日祝福的短信，想想，就这么过了。</p>\n\n<p>青春将逝，年华不悔。我真希望自己的努力付出能早日获得回报，让我有份信心能承起一些担当。</p>\n\n<p>希望如愿以偿。</p>\n\n<p>&nbsp;</p>\n\n<p>我二十一了。</p>\n\n<p>我还一无所有，我仍一无所获，我仍一无所知，我仍是一直笨鸟。</p>\n\n<p>但，我一直在坚持，坚持一个信仰。</p>\n\n<p>等我羽翼丰满，我再亮英姿。</p>\n\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg\" alt=\"\" title=\"1260ef9e6a7g215\" /></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1367713339000,"created_by":1,"updated_at":1367713339000,"updated_by":1,"published_at":1367713339000,"published_by":1},{"id":562,"uuid":"fb8f6979-18b3-4f9e-90c6-d9fc7d3ddc33","title":"小赖的职业生涯规划书","slug":"xiao-lai-de-zhi-ye-sheng-ya-gui-hua-shu","markdown":"\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg \"200x200\")](http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg)\n\n真实姓名：**XXX**\n\n昵    称：赖小赖\n\n就读学校：SCUT\n\nE - m a i l：545183877@qq.com\n\n新浪微博：@[赖小赖小赖](http://weibo.com/laiqingsheng)\n\n个人网站：[laispace.com ](http://www.laispace.com/)\n\n**引言**\n\n个人拙见：深深痛恨于形式主义，不写花俏的词汇凑字数，发自内心写此职业规划书。\n\n**第一章**** ****认识自我**\n\n**1.****个人基本情况**\n\n我来自广东某山区偏远农村，考上SCUT可非易事，踏入华园，深感“人才济济，我是草根”，但坚信“我不能改变世界，但能改变自己。”，从大一便开始了对自身理解的探索。\n\n我坚持认为大学是培养学生三观的摇篮和确定职业方向的象牙塔，大学更该注重于通识教育的发展，而非沿袭应试教育的弊端，对于教导，该因材施材，此为大环境。\n\n对我而言，我没有读研的计划，我认为我该尽早积极探索自身兴趣、主动学习完善知识体系并最终建立职业规划。以下为职业探索。\n\n**2.****职业探索**\n\n2.1**大一上**：\n\n泡馆、上网阅览书籍、资讯，得知自己不适合做科学研究，无读研计划；\n\n2.2**大一下**：\n\n发现对网络工程师感兴趣，自学网络知识，遇到瓶颈失去兴趣；\n\n2.3**大二上**：\n\n发现对Web前端有浓厚兴趣，自行摸索相关技术，激发了热情甚至是职业向往。\n\n**3.****职业定位**\n\n十几年的教育我接受了填鸭式学习，读小学为了读初中、读初中为了上高中、读高中为了考大学，考上大学不知做什么。所以有了前文谈到“人才济济，我是草根”的心态。\n\n直到考上大学，拥有了充裕的时间去思考自己，拥有了自由去探索各方面的兴趣，最终我初步确定了自己的人生规划，而<span style=\"text-decoration: underline;\">职业规划只能算是人生规划的子集</span>，但囿于此文重心为职业生涯规划，还是着重谈自己对职业规划的理解罢。\n\n3.1 坚持摄影的兴趣，因为累了倦了出去走一走拍一拍感叹感叹，对于我是一种极其有效的放松方式；\n\n3.2 坚持打网球以及长跑，功利地说“运动是为了学习”，而对我而言这是生命不可或缺，对职业发展而言，高强度的工作亟需硬朗的身体作为本钱（接下来我会谈到我所选行业的水很深）；\n\n3.3 坚持摸索Web前端技术，在学好专业知识的前提下，提早获取该行业的资讯，根据发展趋势、工作要求来确定自己学习的方向。\n\n也就是说，目前**我的职业定位为：****Web****前端工程师**。3.3中之所以说是“摸索”前端，是因为我觉得对于我这种乳臭未干的弱冠90后，深不知复杂社会与安稳校园的鸿沟，深不知在不断的尝试之后又会产生怎么的兴趣（这兴趣兴许会让自己产生新的职业定位呢？），<span style=\"text-decoration: underline;\">大学毕业之前，该对自己有一份清醒的认识，但到现在为止，我还没有，所以还需要探索、尝试。</span>\n\n** **\n\n** **\n\n**第二章**** ****职业生涯条件分析**\n\n**1.****职业描述**\n\n       我所说的Web前端，对大多数人而言定是陌生的，因为事实上这个职业在中国兴起的时间并没有超过五年，也就是说它的发展前景不可小觑。\n\n       引用百度百科对Web前端工程师的描述：\n\n       Web[前端开发工程师](http://baike.baidu.com/view/4227693.htm)是一个很新的职业，在国内乃至国际上真正开始受到重视的时间不超过5年。Web前端开发是从网页制作演变而来的，名称上有很明显的时代特征···\n\n随着[Web 2.0](http://baike.baidu.com/view/8240.htm)概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。XHTML+CSS布局、DHTML和Ajax像一阵旋风，铺天盖地席卷而来，包括<span style=\"text-decoration: underline;\">新浪、搜狐、网易、腾讯、淘宝等在内的各种规模的</span><span style=\"text-decoration: underline;\">IT</span><span style=\"text-decoration: underline;\">企业都对自己的网站进行了重构···</span>\n\n随着人们对用户体验的要求越来越高，前端开发的技术难度越来越大，Web[前端开发工程师](http://baike.baidu.com/view/4227693.htm)这一职业终于从设计和制作不分的局面中独立出来。\n\n在技能方面，豆瓣工程师张克军前辈认为前端工程师该掌握的技能如图：\n\n该图涉及计算机领域的专业词汇较多，我一言以蔽之：\n\n**Web****前端行业，所需掌握的技能非常之多且复杂。**\n\n国内大公司感叹于招不到好的前端，也说明这个职业的人才缺口之大。\n\n** **\n\n**2.****职业兴趣**\n\n除了前端行业具有很大的发展前景以外，更重要的是我在这个领域内发现了浓厚的兴趣。与其说职业定位，不如说是兴趣的挖掘。建立在兴趣基础上的职业，其乐无穷。\n\n前端工程师可谓是设计师中的工程师，工程师中的设计师。从大公司渴求前端人才的情况来看，Web前端开发的水可谓是很深，但对我而言，我喜欢新奇更喜欢挑战。\n\n**3.****个人特质与职业价值观**\n\n**3.1****个人特质**\n\n我性格外向、喜欢户外运动并自信沟通能力强，这正符合前端工程师前要与交互设计师沟通，后要和后台工程师沟通的要求，除前端技能外，沟通能力同样重要；\n\n我喜爱互联网、对新技术有热情，这正符合前端工程师需要有极强的应变能力，快速学习新出现的技术，持续创新；\n\n**3.2 ****职业价值观**\n\n我谈不上职业价值观，因为我还没有真正涉足这个行业，没有参与一个产品的开发，但坚信的一点是：**Web****前端需要程序员的严谨、设计师的眼光。**这成为我在学习过程中该注重培养的素养。\n\n引用豆瓣资深前端工程师张克军前辈的描述：\n\nweb产品交互越来越复杂，用户使用体验和网站前端性能优化，这些都需要专业的前端工程师来解决。另外，在项目中还要弥补设计师在交互设计上的不足，前端工程师在开发过程中起着重要的承上启下的作用。一两个前端工程师就可以让整个开发并行起来，让设计到实现的转换更顺利。明智的公司应该贮备前端工程师资源。\n\n**我对这个职业价值观的理解是：掌握技术，并处在用户体验的最前沿。**\n\n**4.****家庭、学校、社会、职业环境分析**\n\n**4.1****家庭环境**\n\n父母是农民，家庭里没有从事互联网相关职业的人，仅此。\n\n**4.2 ****学校环境**\n\n根据调查，目前没有中国高校开设了前端开发相关的课程，大学生要学相关技术，纯属自行摸索自学，也就是说，若自学有道学有所成，将非常具备竞争力。\n\n**4.3 ****社会环境**\n\n社会上的IT公司对新兴技术（如HTML5/CSS3）的追捧，意味着前端工程师难求的局面\n\n**4.4 ****职业环境**\n\n如4.2所言，目前高校没有开设相关课程，相关行业内的前端工程师多为转行的技术人员，但如前文所言，前端工程师需要具备编写代码的能力同时需要一定的审美观，这是大多数转型做前端的程序员所不具备的，也正是大公司很难找到好前端的原因之一。\n\n**第三章**** ****职业目标的定位和分解组合**\n\n我的职业目标定位为前端工程师，但这不是一蹴而就的事情，需要不断地摸索和付出。\n\n为了实现毕业能进理想的IT公司深造，我计划如下：\n\n**1.****大一**：购买自己的域名，上线自己的独立博客，记录前端学习的轨迹，如[来思碑](http://www.laispace.com/)\n\n（前端面试的加分项之一为被面试者拥有记录前端技术并时常维护的独立博客）；\n\n**2.****大二**：不断把握最新资讯，学习并记录一些前端练习在博客上；\n\n**3.****大三**：进一步学习并形成知识体系，找团队做完整的项目，给[简历](laispace.github.io/resume.html \"小赖的简历\")添色；\n\n**4.****大四**：做好简历，找实习进行实践，提高技能；\n\n**第四章**** ****具体执行计划**\n\n职业定位后执行计划的大致步骤如第三章，具体细化到每一天，无非就是利用闲暇时间多看书，多练习：\n\n**1.****看书**<del></del>\n\n**2.****练习**，不断实践，在实践中加强对理论的理解，记录在 [来思碑博客](http://www.laispace.com/)；\n\n**3.****借鉴**，跟进行业资讯，订阅牛人博客，在他人经验的基础上多家模仿以增加自己的经验，将好的书单好的建议收藏加以学习，记录在个人 [笔记本Evernote](http://evernote.com/intl/zh-cn/) 上\n\n**第五章**** ****评估调整**\n\n对于评估调整，我的做法是，我会将这篇文章发布在[我的博客](http://www.laispace.com/)上，时刻鞭策自己执行计划，敦促自己不断学习。\n\n**结束语**\n\n       这是职业生涯规划课上的一次作业，旨在让我们学生根据自身情况写一份规划书，我百度了一下，发现大部分规划书都写得工工整整各种排版很花俏，目录也很严肃，但最后我想，这种规划书是拿来交作业而不是拿来执行的吧？\n\n**变化不在计划中，真正需要的是不断地学习进而总结经验以知晓下一步的学习方向。视野广了，学什么都知道有哪些套路了。**\n\n拿我自己做例子，一开始写个简单的网页都要半天，但如今看了不少的博客不少的文章，知晓了前端开发这行业的发展情况，对自己有了大体的规划，就没必要浮躁了，只需要静下心来，按着笔记本里的书单，一本一本地看，看完不断练习，接着搜集各种公司关于该行业的面试题，对着面试题目不断地查缺补漏，然后，美美的写个网页版的简历，投了！\n\n呵呵，看似简单，实则道路曲折行路难啊，我需要不断地纠正学习轨迹，不断地发奋学习才是。","html":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg\" alt=\"\" title=\"200x200\" /></a></p>\n\n<p>真实姓名：<strong>XXX</strong></p>\n\n<p>昵    称：赖小赖</p>\n\n<p>就读学校：SCUT</p>\n\n<p>E - m a i l：545183877@qq.com</p>\n\n<p>新浪微博：@<a href=\"http://weibo.com/laiqingsheng\">赖小赖小赖</a></p>\n\n<p>个人网站：<a href=\"http://www.laispace.com/\">laispace.com </a></p>\n\n<p><strong>引言</strong></p>\n\n<p>个人拙见：深深痛恨于形式主义，不写花俏的词汇凑字数，发自内心写此职业规划书。</p>\n\n<p><strong>第一章<em>*</strong> <strong></em>*认识自我</strong></p>\n\n<p><strong>1.<em>*</strong>个人基本情况</em>*</p>\n\n<p>我来自广东某山区偏远农村，考上SCUT可非易事，踏入华园，深感“人才济济，我是草根”，但坚信“我不能改变世界，但能改变自己。”，从大一便开始了对自身理解的探索。</p>\n\n<p>我坚持认为大学是培养学生三观的摇篮和确定职业方向的象牙塔，大学更该注重于通识教育的发展，而非沿袭应试教育的弊端，对于教导，该因材施材，此为大环境。</p>\n\n<p>对我而言，我没有读研的计划，我认为我该尽早积极探索自身兴趣、主动学习完善知识体系并最终建立职业规划。以下为职业探索。</p>\n\n<p><strong>2.<em>*</strong>职业探索</em>*</p>\n\n<p>2.1<strong>大一上</strong>：</p>\n\n<p>泡馆、上网阅览书籍、资讯，得知自己不适合做科学研究，无读研计划；</p>\n\n<p>2.2<strong>大一下</strong>：</p>\n\n<p>发现对网络工程师感兴趣，自学网络知识，遇到瓶颈失去兴趣；</p>\n\n<p>2.3<strong>大二上</strong>：</p>\n\n<p>发现对Web前端有浓厚兴趣，自行摸索相关技术，激发了热情甚至是职业向往。</p>\n\n<p><strong>3.<em>*</strong>职业定位</em>*</p>\n\n<p>十几年的教育我接受了填鸭式学习，读小学为了读初中、读初中为了上高中、读高中为了考大学，考上大学不知做什么。所以有了前文谈到“人才济济，我是草根”的心态。</p>\n\n<p>直到考上大学，拥有了充裕的时间去思考自己，拥有了自由去探索各方面的兴趣，最终我初步确定了自己的人生规划，而<span style=\"text-decoration: underline;\">职业规划只能算是人生规划的子集</span>，但囿于此文重心为职业生涯规划，还是着重谈自己对职业规划的理解罢。</p>\n\n<p>3.1 坚持摄影的兴趣，因为累了倦了出去走一走拍一拍感叹感叹，对于我是一种极其有效的放松方式；</p>\n\n<p>3.2 坚持打网球以及长跑，功利地说“运动是为了学习”，而对我而言这是生命不可或缺，对职业发展而言，高强度的工作亟需硬朗的身体作为本钱（接下来我会谈到我所选行业的水很深）；</p>\n\n<p>3.3 坚持摸索Web前端技术，在学好专业知识的前提下，提早获取该行业的资讯，根据发展趋势、工作要求来确定自己学习的方向。</p>\n\n<p>也就是说，目前<strong>我的职业定位为：<em>*</strong>Web<strong></em>*前端工程师</strong>。3.3中之所以说是“摸索”前端，是因为我觉得对于我这种乳臭未干的弱冠90后，深不知复杂社会与安稳校园的鸿沟，深不知在不断的尝试之后又会产生怎么的兴趣（这兴趣兴许会让自己产生新的职业定位呢？），<span style=\"text-decoration: underline;\">大学毕业之前，该对自己有一份清醒的认识，但到现在为止，我还没有，所以还需要探索、尝试。</span></p>\n\n<p><em>* *</em></p>\n\n<p><em>* *</em></p>\n\n<p><strong>第二章<em>*</strong> <strong></em>*职业生涯条件分析</strong></p>\n\n<p><strong>1.<em>*</strong>职业描述</em>*</p>\n\n<p>       我所说的Web前端，对大多数人而言定是陌生的，因为事实上这个职业在中国兴起的时间并没有超过五年，也就是说它的发展前景不可小觑。</p>\n\n<p>       引用百度百科对Web前端工程师的描述：</p>\n\n<p>       Web<a href=\"http://baike.baidu.com/view/4227693.htm\">前端开发工程师</a>是一个很新的职业，在国内乃至国际上真正开始受到重视的时间不超过5年。Web前端开发是从网页制作演变而来的，名称上有很明显的时代特征···</p>\n\n<p>随着<a href=\"http://baike.baidu.com/view/8240.htm\">Web 2.0</a>概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。XHTML+CSS布局、DHTML和Ajax像一阵旋风，铺天盖地席卷而来，包括<span style=\"text-decoration: underline;\">新浪、搜狐、网易、腾讯、淘宝等在内的各种规模的</span><span style=\"text-decoration: underline;\">IT</span><span style=\"text-decoration: underline;\">企业都对自己的网站进行了重构···</span></p>\n\n<p>随着人们对用户体验的要求越来越高，前端开发的技术难度越来越大，Web<a href=\"http://baike.baidu.com/view/4227693.htm\">前端开发工程师</a>这一职业终于从设计和制作不分的局面中独立出来。</p>\n\n<p>在技能方面，豆瓣工程师张克军前辈认为前端工程师该掌握的技能如图：</p>\n\n<p>该图涉及计算机领域的专业词汇较多，我一言以蔽之：</p>\n\n<p><strong>Web<em>*</strong>前端行业，所需掌握的技能非常之多且复杂。</em>*</p>\n\n<p>国内大公司感叹于招不到好的前端，也说明这个职业的人才缺口之大。</p>\n\n<p><em>* *</em></p>\n\n<p><strong>2.<em>*</strong>职业兴趣</em>*</p>\n\n<p>除了前端行业具有很大的发展前景以外，更重要的是我在这个领域内发现了浓厚的兴趣。与其说职业定位，不如说是兴趣的挖掘。建立在兴趣基础上的职业，其乐无穷。</p>\n\n<p>前端工程师可谓是设计师中的工程师，工程师中的设计师。从大公司渴求前端人才的情况来看，Web前端开发的水可谓是很深，但对我而言，我喜欢新奇更喜欢挑战。</p>\n\n<p><strong>3.<em>*</strong>个人特质与职业价值观</em>*</p>\n\n<p><strong>3.1<em>*</strong>个人特质</em>*</p>\n\n<p>我性格外向、喜欢户外运动并自信沟通能力强，这正符合前端工程师前要与交互设计师沟通，后要和后台工程师沟通的要求，除前端技能外，沟通能力同样重要；</p>\n\n<p>我喜爱互联网、对新技术有热情，这正符合前端工程师需要有极强的应变能力，快速学习新出现的技术，持续创新；</p>\n\n<p><strong>3.2 <em>*</strong>职业价值观</em>*</p>\n\n<p>我谈不上职业价值观，因为我还没有真正涉足这个行业，没有参与一个产品的开发，但坚信的一点是：<strong>Web<em>*</strong>前端需要程序员的严谨、设计师的眼光。</em>*这成为我在学习过程中该注重培养的素养。</p>\n\n<p>引用豆瓣资深前端工程师张克军前辈的描述：</p>\n\n<p>web产品交互越来越复杂，用户使用体验和网站前端性能优化，这些都需要专业的前端工程师来解决。另外，在项目中还要弥补设计师在交互设计上的不足，前端工程师在开发过程中起着重要的承上启下的作用。一两个前端工程师就可以让整个开发并行起来，让设计到实现的转换更顺利。明智的公司应该贮备前端工程师资源。</p>\n\n<p><strong>我对这个职业价值观的理解是：掌握技术，并处在用户体验的最前沿。</strong></p>\n\n<p><strong>4.<em>*</strong>家庭、学校、社会、职业环境分析</em>*</p>\n\n<p><strong>4.1<em>*</strong>家庭环境</em>*</p>\n\n<p>父母是农民，家庭里没有从事互联网相关职业的人，仅此。</p>\n\n<p><strong>4.2 <em>*</strong>学校环境</em>*</p>\n\n<p>根据调查，目前没有中国高校开设了前端开发相关的课程，大学生要学相关技术，纯属自行摸索自学，也就是说，若自学有道学有所成，将非常具备竞争力。</p>\n\n<p><strong>4.3 <em>*</strong>社会环境</em>*</p>\n\n<p>社会上的IT公司对新兴技术（如HTML5/CSS3）的追捧，意味着前端工程师难求的局面</p>\n\n<p><strong>4.4 <em>*</strong>职业环境</em>*</p>\n\n<p>如4.2所言，目前高校没有开设相关课程，相关行业内的前端工程师多为转行的技术人员，但如前文所言，前端工程师需要具备编写代码的能力同时需要一定的审美观，这是大多数转型做前端的程序员所不具备的，也正是大公司很难找到好前端的原因之一。</p>\n\n<p><strong>第三章<em>*</strong> <strong></em>*职业目标的定位和分解组合</strong></p>\n\n<p>我的职业目标定位为前端工程师，但这不是一蹴而就的事情，需要不断地摸索和付出。</p>\n\n<p>为了实现毕业能进理想的IT公司深造，我计划如下：</p>\n\n<p><strong>1.<em>*</strong>大一</em>*：购买自己的域名，上线自己的独立博客，记录前端学习的轨迹，如<a href=\"http://www.laispace.com/\">来思碑</a></p>\n\n<p>（前端面试的加分项之一为被面试者拥有记录前端技术并时常维护的独立博客）；</p>\n\n<p><strong>2.<em>*</strong>大二</em>*：不断把握最新资讯，学习并记录一些前端练习在博客上；</p>\n\n<p><strong>3.<em>*</strong>大三</em>*：进一步学习并形成知识体系，找团队做完整的项目，给<a href=\"laispace.github.io/resume.html\" title=\"小赖的简历\">简历</a>添色；</p>\n\n<p><strong>4.<em>*</strong>大四</em>*：做好简历，找实习进行实践，提高技能；</p>\n\n<p><strong>第四章<em>*</strong> <strong></em>*具体执行计划</strong></p>\n\n<p>职业定位后执行计划的大致步骤如第三章，具体细化到每一天，无非就是利用闲暇时间多看书，多练习：</p>\n\n<p><strong>1.<em>*</strong>看书</em>*<del></del></p>\n\n<p><strong>2.<em>*</strong>练习</em>*，不断实践，在实践中加强对理论的理解，记录在 <a href=\"http://www.laispace.com/\">来思碑博客</a>；</p>\n\n<p><strong>3.<em>*</strong>借鉴</em>*，跟进行业资讯，订阅牛人博客，在他人经验的基础上多家模仿以增加自己的经验，将好的书单好的建议收藏加以学习，记录在个人 <a href=\"http://evernote.com/intl/zh-cn/\">笔记本Evernote</a> 上</p>\n\n<p><strong>第五章<em>*</strong> <strong></em>*评估调整</strong></p>\n\n<p>对于评估调整，我的做法是，我会将这篇文章发布在<a href=\"http://www.laispace.com/\">我的博客</a>上，时刻鞭策自己执行计划，敦促自己不断学习。</p>\n\n<p><strong>结束语</strong></p>\n\n<p>       这是职业生涯规划课上的一次作业，旨在让我们学生根据自身情况写一份规划书，我百度了一下，发现大部分规划书都写得工工整整各种排版很花俏，目录也很严肃，但最后我想，这种规划书是拿来交作业而不是拿来执行的吧？</p>\n\n<p><strong>变化不在计划中，真正需要的是不断地学习进而总结经验以知晓下一步的学习方向。视野广了，学什么都知道有哪些套路了。</strong></p>\n\n<p>拿我自己做例子，一开始写个简单的网页都要半天，但如今看了不少的博客不少的文章，知晓了前端开发这行业的发展情况，对自己有了大体的规划，就没必要浮躁了，只需要静下心来，按着笔记本里的书单，一本一本地看，看完不断练习，接着搜集各种公司关于该行业的面试题，对着面试题目不断地查缺补漏，然后，美美的写个网页版的简历，投了！</p>\n\n<p>呵呵，看似简单，实则道路曲折行路难啊，我需要不断地纠正学习轨迹，不断地发奋学习才是。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1355169145000,"created_by":1,"updated_at":1355169145000,"updated_by":1,"published_at":1355169145000,"published_by":1},{"id":563,"uuid":"b08b7fc1-1476-44fc-8c74-08c42d867788","title":"常用字符集和编码格式","slug":"chang-yong-zi-fu-ji-he-bian-ma-ge-shi","markdown":"\n\n\n# 常用字符集和编码\n\n-  ASCII 美国信息交换标准代码\n\n编码规则： 7位表示一个字符，共128个字符\n\n缺点：只能显示26个拉丁字母、阿拉伯数字和英文标点符号\n\n- EASCII 欧洲扩展字符集\n\n编码规则：8位表示一个字符，共256个字符\n\n缺点：虽解决了部分西欧语言的字符显示问题，但对其他更多的语言依然无力\n\n- GB2312/GB2312-80 等中文字符集\n\n编码规则：把127号的字符取消掉（即EASCII），两个大于128的字符连在一起表示一个汉字，高字节从 0xA1 到 0xF7, 低字节从 0xA1 到 0xFE\n\n- GBK 中文字符集\n\n微软对 GB2312-80 进行扩充后制定了 GBK 编码。\n\n- Unicode 统一字符集\n\n包含超过十万个字符，让电脑能够解析世界上数十种语言。\n\n编码规则：使用4个字节的数字来表达字母、符号、文字。\n\nUnicode 指的是字符集，而 UTF-32, UTF-16, UTF-8 则说的是编码方案。\n\n- UTF-32 \n\n编码规则：用上述 Unicode 的4字节的数字来表达字母、符号、文字\n\n- UTF-16\n\n编码规则：\n\t\n\t若字符编码 U 小于 0x10000, 也就是小于十进制的 65535，则使用2个字节表示；\n \t\n\t若字符编码 U 大于 0x10000, 也就是大于十进制的 65535，则使用4个字节表示。\n\n- UTF-8 \n\n是针对对 Unicode 的可变长度字符编码，可表示 Unicode 中任何字符，且编码中第一个字节与 ASCII 兼容。\n\n编码规则是使用1到4个字节为每个字符编码：\n\t\n\t128个 US-ASCII 字符只需用1个字节编码，从 U+0000 到 U+007F\n\t\n\t带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文等，则使用第2个字节编码，从 U+0080 到 U+07FF\n\n\t其他基本多文中平面中的字符则使用3个字节编码\n\n\t其他极少辅助平面中的字符则使用4个字节编码\n\n\n\n\n","html":"<h1 id=\"\">常用字符集和编码</h1>\n\n<ul>\n<li>ASCII 美国信息交换标准代码</li>\n</ul>\n\n<p>编码规则： 7位表示一个字符，共128个字符</p>\n\n<p>缺点：只能显示26个拉丁字母、阿拉伯数字和英文标点符号</p>\n\n<ul>\n<li>EASCII 欧洲扩展字符集</li>\n</ul>\n\n<p>编码规则：8位表示一个字符，共256个字符</p>\n\n<p>缺点：虽解决了部分西欧语言的字符显示问题，但对其他更多的语言依然无力</p>\n\n<ul>\n<li>GB2312/GB2312-80 等中文字符集</li>\n</ul>\n\n<p>编码规则：把127号的字符取消掉（即EASCII），两个大于128的字符连在一起表示一个汉字，高字节从 0xA1 到 0xF7, 低字节从 0xA1 到 0xFE</p>\n\n<ul>\n<li>GBK 中文字符集</li>\n</ul>\n\n<p>微软对 GB2312-80 进行扩充后制定了 GBK 编码。</p>\n\n<ul>\n<li>Unicode 统一字符集</li>\n</ul>\n\n<p>包含超过十万个字符，让电脑能够解析世界上数十种语言。</p>\n\n<p>编码规则：使用4个字节的数字来表达字母、符号、文字。</p>\n\n<p>Unicode 指的是字符集，而 UTF-32, UTF-16, UTF-8 则说的是编码方案。</p>\n\n<ul>\n<li>UTF-32 </li>\n</ul>\n\n<p>编码规则：用上述 Unicode 的4字节的数字来表达字母、符号、文字</p>\n\n<ul>\n<li>UTF-16</li>\n</ul>\n\n<p>编码规则：</p>\n\n<pre><code>若字符编码 U 小于 0x10000, 也就是小于十进制的 65535，则使用2个字节表示；\n\n若字符编码 U 大于 0x10000, 也就是大于十进制的 65535，则使用4个字节表示。\n</code></pre>\n\n<ul>\n<li>UTF-8 </li>\n</ul>\n\n<p>是针对对 Unicode 的可变长度字符编码，可表示 Unicode 中任何字符，且编码中第一个字节与 ASCII 兼容。</p>\n\n<p>编码规则是使用1到4个字节为每个字符编码：</p>\n\n<pre><code>128个 US-ASCII 字符只需用1个字节编码，从 U+0000 到 U+007F\n\n带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文等，则使用第2个字节编码，从 U+0080 到 U+07FF\n\n其他基本多文中平面中的字符则使用3个字节编码\n\n其他极少辅助平面中的字符则使用4个字节编码\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1417260342000,"created_by":1,"updated_at":1417260342000,"updated_by":1,"published_at":1417260342000,"published_by":1},{"id":564,"uuid":"571a9f96-79ad-42e9-8b71-c7cb3822dc47","title":"慎用text-indent的负值","slug":"shen-yong-text-indentde-fu-zhi","markdown":"\n\n为了语义化，我们可能会利用图片替换文字的方式来给我们的站点增色，举个栗子：\n            \n            <p>文字文字</p>\n\n            p {\n                text-indent: -2500px;        // 小，在高分辨率宽屏下文字隐藏失败\n                //text-indent: -99999px;     // 大，但可能存在性能问题，甚至被搜索引擎屏蔽\n                background: url(logo.png);\n            }\n            \n  这段代码中我们希望隐藏文字，提升 SEO，所以使用 logo.png 这个图片进行替换，这时会对文字设置一个负缩进值。\n  \n  这里的 -2500px 在以前基本可以解决隐藏文字的问题，但目前发现高分辨率浏览器下这个值已经在浏览器可视范围内了，造成文字隐藏失败的问题。\n  \n  而如果将这个值设置为更大，如 -99999px 时，又会造成浏览器的性能问题：浏览器需要生成一个宽度为 99999px 的盒模型，所以也要限制这个值的大小。\n  \n  还有人指出，不少人滥用这个属性为了提升 SEO ，而搜索引擎可能会反过来屏蔽这里的文字。\n  \n  除此之外，在从右到左读的语言环境中，这个负值可能会造成很长的横向滚动条，所以可以添加 direction 规则来避免：\n\n             p {\n                text-indent: -9999px; // 万一日后用户屏幕宽度达到1万肿么办？（这好像不可能。。。）\n                background: url(logo.png);\n                direction: ltr; // 设置为从左到右读的方向，避免 rtl 语言环境下出现横向滚动条\n            }\n                        \n 一个比较好的可选方案：\n\n            p { \n                text-indent: 100%; \n                white-space: nowrap; \n                overflow: hidden; \n                background: url(logo.png);\n            }\n\n 参考链接：\n \n - [Disallow negative text indent](https://github.com/CSSLint/csslint/wiki/disallow-negative-text-indent)\n - [Stop Using the text-indent:-9999px CSS Trick](http://luigimontanez.com/2010/stop-using-text-indent-css-trick/)\n - [CSS Image Replacement](http://css-tricks.com/examples/ImageReplacement/)","html":"<p>为了语义化，我们可能会利用图片替换文字的方式来给我们的站点增色，举个栗子：</p>\n\n<pre><code>        &lt;p&gt;文字文字&lt;/p&gt;\n\n        p {\n            text-indent: -2500px;        // 小，在高分辨率宽屏下文字隐藏失败\n            //text-indent: -99999px;     // 大，但可能存在性能问题，甚至被搜索引擎屏蔽\n            background: url(logo.png);\n        }\n</code></pre>\n\n<p>这段代码中我们希望隐藏文字，提升 SEO，所以使用 logo.png 这个图片进行替换，这时会对文字设置一个负缩进值。</p>\n\n<p>这里的 -2500px 在以前基本可以解决隐藏文字的问题，但目前发现高分辨率浏览器下这个值已经在浏览器可视范围内了，造成文字隐藏失败的问题。</p>\n\n<p>而如果将这个值设置为更大，如 -99999px 时，又会造成浏览器的性能问题：浏览器需要生成一个宽度为 99999px 的盒模型，所以也要限制这个值的大小。</p>\n\n<p>还有人指出，不少人滥用这个属性为了提升 SEO ，而搜索引擎可能会反过来屏蔽这里的文字。</p>\n\n<p>除此之外，在从右到左读的语言环境中，这个负值可能会造成很长的横向滚动条，所以可以添加 direction 规则来避免：</p>\n\n<pre><code>         p {\n            text-indent: -9999px; // 万一日后用户屏幕宽度达到1万肿么办？（这好像不可能。。。）\n            background: url(logo.png);\n            direction: ltr; // 设置为从左到右读的方向，避免 rtl 语言环境下出现横向滚动条\n        }\n</code></pre>\n\n<p>一个比较好的可选方案：</p>\n\n<pre><code>        p { \n            text-indent: 100%; \n            white-space: nowrap; \n            overflow: hidden; \n            background: url(logo.png);\n        }\n</code></pre>\n\n<p>参考链接：</p>\n\n<ul>\n<li><a href=\"https://github.com/CSSLint/csslint/wiki/disallow-negative-text-indent\">Disallow negative text indent</a></li>\n<li><a href=\"http://luigimontanez.com/2010/stop-using-text-indent-css-trick/\">Stop Using the text-indent:-9999px CSS Trick</a></li>\n<li><a href=\"http://css-tricks.com/examples/ImageReplacement/\">CSS Image Replacement</a></li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1411658102000,"created_by":1,"updated_at":1411658102000,"updated_by":1,"published_at":1411658102000,"published_by":1},{"id":565,"uuid":"5d51bb84-c1ae-4d86-8333-cda60f99c56c","title":"正则表达式","slug":"zheng-ze-biao-da-shi","markdown":"\n\n先来几个栗子：\n\t\t\t\t\n\t\t// \\b 表示匹配一个位置：单词开头或结尾\n\t\t\\bhi\\b\t\t//=> hi\n\n\t\t// . 匹配除换行符以外的任意字符\n\t\t// * 匹配多次\n\t\t// .* 匹配任意数量的不包含换行的字符\n\t\t\\bhi\\b.*\\bLucy\\b\t//=> hi i love you Lucy\t\t\n\t\n\t\t// \\d 匹配一位数字\n\t\t// {2} 匹配2次\n\t\t0\\d{2}-\\d{8}   //=> 086-13800138000\n\t\t\n\t\t// \\s 匹配任意的空白符，包括空格、制表符、换行符、中文全角空格\n\t\t// \\w 匹配字母或数字或下划线或汉字\n\t\t\\ba\\w*\\b\t//=> ahdh256hvc\n\t\t\n\t\t// + 匹配一次或多次，注意与 * 的区别（匹配多次）\n\t\t// \\d+ 匹配1个或多个连续的数字\n\t\t\\d+\t\t//=> 4 或 465435\n\t\t\\d*\t\t//=> 465435\n\t\t\n\t\t// ^ 匹配字符串的开始\n\t\t// $ 匹配字符串的结束\n\t\t^\\d{5,12}$ \t\t//=> 匹配5-12位的数字\n\t\t\n\t\t// [] 匹配里边的值\n\t\t[aeiou] \t//=> 匹配 a e i o u\n\t\t[0-9]\t\t//=> 与 \\d 同义\n\t\t\n\t\t// | 表示分支\n\t\t0\\d{2}-\\d{}8|0\\d{3}-\\d{7}\t=> 匹配 010-12345678 或 0102-1234567\n\t\t\n\t\t// () 表示分组\n\t\t(\\d{1,3}\\.){3}\\d{1,3}\t//=> 匹配一个IP，如 12.345.67.89\n\t\t// 以上会匹配不合法的IP，如 256.777.888.999\n\t\t\n\t\t// 大写字母 或 [^xxxx] 表示反义\n\t\t\\S+\t\t\t//=> 匹配不包含空白符的字符串\n\t\t<lai[^>]+>\t//=> 匹配 <laispace>\n\t\t\n\t\t// (?=exp) 零宽度正预测先行断言，即自身出现的位置后面能匹配 exp\n\t\t\\b\\w+(?=ing\\b) //=> 查找 I'm reading a book 时匹配 read\n\t\t\n\t\t// (?<=exp)零宽度正回顾后发断言，即自身出现的位置前面能匹配 exp\n\t\t(?<=\\bre)\\w+ //=> 查找 I'm reading a book 时匹配 ading\n\t\t\n\t\t// (?!exp)负向零宽断言，即此位置的后面不能匹配 exp\n\t\t\\d{3}(?!\\d)\t\t//=> 匹配三个数字，但这三个数字后不能是数字，如 123abcd\n\t\t\n\t\t// (?<!exp)零宽度负回顾后发断言，即此位置的前面不能匹配 exp\n\t\t(?<![a-z])\\d{7}\t\t//=> 匹配前面不是小写字母的七位数字\n\n<!-- more -->\t\t\n\n\n元字符\n\t\n\t.\t\t匹配除换行符以外的任意字符\n\t\\w\t\t匹配字母或数字或下划线或汉字\n\t\\s\t\t匹配任意的空白符\n\t\\d\t\t匹配数字\n\t\\b\t\t匹配单词的开始或结束\n\t^\t\t匹配字符串的开始\n\t$\t\t匹配字符串的结束\n\n反义\n\n\t\\W\t匹配任意不是字母，数字，下划线，汉字的字符\n\t\\S\t匹配任意不是空白符的字符\n\t\\D\t匹配任意非数字的字符\n\t\\B\t匹配不是单词开头或结束的位置\n\t[^x]\t匹配除了x以外的任意字符\n\t[^aeiou]\t匹配除了aeiou这几个字母以外的任意字符\t\n\n重复\t\n\t\n\t*\t\t重复零次或更多次\n\t+\t\t重复一次或更多次\n\t?\t\t重复零次或一次\n\t{n}\t\t重复n次\n\t{n,}\t重复n次或更多次\n\t{n,m}\t重复n到m次\t\n\n懒惰\n\n\t*?\t重复任意次，但尽可能少重复\n\t+?\t重复1次或更多次，但尽可能少重复\n\t??\t重复0次或1次，但尽可能少重复\n\t{n,m}?\t重复n到m次，但尽可能少重复\n\t{n,}?\t重复n次以上，但尽可能少重复\t\n\n\t\n\t\n### 参考链接\n\n- [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm#mission)\n\n- [Regular Expressions Quick Start](http://www.regular-expressions.info/quickstart.html)\t\n- [http://refiddle.com/](http://refiddle.com/)\t\n\n\t\t\n\t\t","html":"<p>先来几个栗子：</p>\n\n<pre><code>    // \\b 表示匹配一个位置：单词开头或结尾\n    \\bhi\\b      //=&gt; hi\n\n    // . 匹配除换行符以外的任意字符\n    // * 匹配多次\n    // .* 匹配任意数量的不包含换行的字符\n    \\bhi\\b.*\\bLucy\\b    //=&gt; hi i love you Lucy     \n\n    // \\d 匹配一位数字\n    // {2} 匹配2次\n    0\\d{2}-\\d{8}   //=&gt; 086-13800138000\n\n    // \\s 匹配任意的空白符，包括空格、制表符、换行符、中文全角空格\n    // \\w 匹配字母或数字或下划线或汉字\n    \\ba\\w*\\b    //=&gt; ahdh256hvc\n\n    // + 匹配一次或多次，注意与 * 的区别（匹配多次）\n    // \\d+ 匹配1个或多个连续的数字\n    \\d+     //=&gt; 4 或 465435\n    \\d*     //=&gt; 465435\n\n    // ^ 匹配字符串的开始\n    // $ 匹配字符串的结束\n    ^\\d{5,12}$         //=&gt; 匹配5-12位的数字\n\n    // [] 匹配里边的值\n    [aeiou]     //=&gt; 匹配 a e i o u\n    [0-9]       //=&gt; 与 \\d 同义\n\n    // | 表示分支\n    0\\d{2}-\\d{}8|0\\d{3}-\\d{7}   =&gt; 匹配 010-12345678 或 0102-1234567\n\n    // () 表示分组\n    (\\d{1,3}\\.){3}\\d{1,3}   //=&gt; 匹配一个IP，如 12.345.67.89\n    // 以上会匹配不合法的IP，如 256.777.888.999\n\n    // 大写字母 或 [^xxxx] 表示反义\n    \\S+         //=&gt; 匹配不包含空白符的字符串\n    &lt;lai[^&gt;]+&gt;  //=&gt; 匹配 &lt;laispace&gt;\n\n    // (?=exp) 零宽度正预测先行断言，即自身出现的位置后面能匹配 exp\n    \\b\\w+(?=ing\\b) //=&gt; 查找 I'm reading a book 时匹配 read\n\n    // (?&lt;=exp)零宽度正回顾后发断言，即自身出现的位置前面能匹配 exp\n    (?&lt;=\\bre)\\w+ //=&gt; 查找 I'm reading a book 时匹配 ading\n\n    // (?!exp)负向零宽断言，即此位置的后面不能匹配 exp\n    \\d{3}(?!\\d)     //=&gt; 匹配三个数字，但这三个数字后不能是数字，如 123abcd\n\n    // (?&lt;!exp)零宽度负回顾后发断言，即此位置的前面不能匹配 exp\n    (?&lt;![a-z])\\d{7}     //=&gt; 匹配前面不是小写字母的七位数字\n</code></pre>\n\n<!-- more -->        \n\n<p>元字符</p>\n\n<pre><code>.       匹配除换行符以外的任意字符\n\\w      匹配字母或数字或下划线或汉字\n\\s      匹配任意的空白符\n\\d      匹配数字\n\\b      匹配单词的开始或结束\n^       匹配字符串的开始\n$      匹配字符串的结束\n</code></pre>\n\n<p>反义</p>\n\n<pre><code>\\W  匹配任意不是字母，数字，下划线，汉字的字符\n\\S  匹配任意不是空白符的字符\n\\D  匹配任意非数字的字符\n\\B  匹配不是单词开头或结束的位置\n[^x]    匹配除了x以外的任意字符\n[^aeiou]    匹配除了aeiou这几个字母以外的任意字符   \n</code></pre>\n\n<p>重复    </p>\n\n<pre><code>*       重复零次或更多次\n+       重复一次或更多次\n?       重复零次或一次\n{n}     重复n次\n{n,}    重复n次或更多次\n{n,m}   重复n到m次  \n</code></pre>\n\n<p>懒惰</p>\n\n<pre><code>*?  重复任意次，但尽可能少重复\n+?  重复1次或更多次，但尽可能少重复\n??  重复0次或1次，但尽可能少重复\n{n,m}?  重复n到m次，但尽可能少重复\n{n,}?   重复n次以上，但尽可能少重复  \n</code></pre>\n\n<h3 id=\"\">参考链接</h3>\n\n<ul>\n<li><p><a href=\"http://deerchao.net/tutorials/regex/regex.htm#mission\">正则表达式30分钟入门教程</a></p></li>\n<li><p><a href=\"http://www.regular-expressions.info/quickstart.html\">Regular Expressions Quick Start</a>    </p></li>\n<li><a href=\"http://refiddle.com/\">http://refiddle.com/</a>    </li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405636528000,"created_by":1,"updated_at":1405636528000,"updated_by":1,"published_at":1405636528000,"published_by":1},{"id":566,"uuid":"46dc56ce-0dcf-4990-bc14-0549a8dbe4ae","title":"用MySQLdb包连接数据库","slug":"yong-mysqldbbao-lian-jie-shu-ju-ku","markdown":"\n\n捣鼓捣鼓，跨过好多坑终于在Mac上配置好了开发环境，开始学Python啦！\n今天学习的是Python连接数据库，安装了python-mysql包后，使用它自带的一些方法就可以连接了：\n[python]\n#!/usr/bin/python\n# -*- coding: utf-8 -*- \nimport sys\nimport MySQLdb\n\ndb = None\n\ntry:\n    # 连接数据库\n    db=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n    cursor = db.cursor()\n\n    # 执行一个查询\n    cursor.execute(&quot;SELECT VERSION()&quot;)\n    data = cursor.fetchone()\n    # 显示数据库的版本\n    print &quot;Database version: %s&quot; % data\n\n    # 创建表user(id,name) 并插入数据\n    cursor.execute(&quot;CREATE TABLE IF NOT EXISTS user(id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30))&quot;)\n    cursor.execute(&quot;INSERT INTO user(name) VALUES('user1')&quot;)\n    cursor.execute(&quot;INSERT INTO user(name) VALUES('user2')&quot;)\n    # commit 后数据才会真正添加到数据表中！\n    db.commit()\n\n    # 更新数据\n    cursor.execute(&quot;UPDATE user SET name = %s WHERE id = %s&quot;,(&quot;xiaolai&quot; , 2));\n\n    # 获取数据并遍历\n    cursor.execute(&quot;SELECT * FROM user&quot;);\n    # 获取描述信息\n    desc = cursor.description\n    print &quot;描述信息：&quot;, desc\n    # 打印表头\n    print &quot;%s %s&quot; % (desc[0][0],desc[1][0])\n\n    # 获取结果数\n    count = cursor.rowcount\n    for i in range(count):\n        row = cursor.fetchone()\n        # 每一个都是一个元组\n        print row[0], row[1]\n\nfinally:\n    # 记得要关闭！\n    if db:\n        db.close()\n[/python]\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png \"屏幕快照 2013-09-27 下午3.08.46\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png)","html":"<p>捣鼓捣鼓，跨过好多坑终于在Mac上配置好了开发环境，开始学Python啦！\n今天学习的是Python连接数据库，安装了python-mysql包后，使用它自带的一些方法就可以连接了：\n[python]</p>\n\n<h1 id=\"usrbinpython\">!/usr/bin/python</h1>\n\n<h1 id=\"codingutf8\">-<em>- coding: utf-8 -</em>-</h1>\n\n<p>import sys <br />\nimport MySQLdb</p>\n\n<p>db = None</p>\n\n<p>try: <br />\n    # 连接数据库\n    db=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix<em>socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix</em>socket \n    cursor = db.cursor()</p>\n\n<pre><code># 执行一个查询\ncursor.execute(&amp;quot;SELECT VERSION()&amp;quot;)\ndata = cursor.fetchone()\n# 显示数据库的版本\nprint &amp;quot;Database version: %s&amp;quot; % data\n\n# 创建表user(id,name) 并插入数据\ncursor.execute(&amp;quot;CREATE TABLE IF NOT EXISTS user(id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30))&amp;quot;)\ncursor.execute(&amp;quot;INSERT INTO user(name) VALUES('user1')&amp;quot;)\ncursor.execute(&amp;quot;INSERT INTO user(name) VALUES('user2')&amp;quot;)\n# commit 后数据才会真正添加到数据表中！\ndb.commit()\n\n# 更新数据\ncursor.execute(&amp;quot;UPDATE user SET name = %s WHERE id = %s&amp;quot;,(&amp;quot;xiaolai&amp;quot; , 2));\n\n# 获取数据并遍历\ncursor.execute(&amp;quot;SELECT * FROM user&amp;quot;);\n# 获取描述信息\ndesc = cursor.description\nprint &amp;quot;描述信息：&amp;quot;, desc\n# 打印表头\nprint &amp;quot;%s %s&amp;quot; % (desc[0][0],desc[1][0])\n\n# 获取结果数\ncount = cursor.rowcount\nfor i in range(count):\n    row = cursor.fetchone()\n    # 每一个都是一个元组\n    print row[0], row[1]\n</code></pre>\n\n<p>finally: <br />\n    # 记得要关闭！\n    if db:\n        db.close()\n[/python]\n<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png\" alt=\"\" title=\"屏幕快照 2013-09-27 下午3.08.46\" /></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1380294700000,"created_by":1,"updated_at":1380294700000,"updated_by":1,"published_at":1380294700000,"published_by":1},{"id":567,"uuid":"ab6b4f62-bda8-4979-a7de-fa2ffa240df3","title":"移动 Web 开发技巧","slug":"mobile-developement-tips","markdown":"\r\n\r\n\r\n## Fiddler 篇\r\n-  使用Fiddler 快速 bugfix 的办法\r\n\r\n线上出一个小问题时, 定位到具体某一个文件比如 online.js\r\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\r\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~\r\n\r\n- 调试 iOS 端真机环境页面\r\n\r\n用 Chrome 模拟器并不能百分百模拟真机.\r\n\r\n用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.\r\n\r\n用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \r\n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.\r\n\r\n想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.\r\n\r\n用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.\r\n","html":"<h2 id=\"fiddler\">Fiddler 篇</h2>\n\n<ul>\n<li>使用Fiddler 快速 bugfix 的办法</li>\n</ul>\n\n<p>线上出一个小问题时, 定位到具体某一个文件比如 online.js\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~</p>\n\n<ul>\n<li>调试 iOS 端真机环境页面</li>\n</ul>\n\n<p>用 Chrome 模拟器并不能百分百模拟真机.</p>\n\n<p>用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.</p>\n\n<p>用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.</p>\n\n<p>想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.</p>\n\n<p>用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1418912962000,"created_by":1,"updated_at":1418912962000,"updated_by":1,"published_at":1418912962000,"published_by":1},{"id":568,"uuid":"8c9bb45f-6205-4092-bce4-9ffe3f781414","title":"第二通懒觉引发的心里革命","slug":"di-er-tong-lan-jue-yin-fa-de-xin-li-ge-ming","markdown":"\n\n现在是下午两点，人在图书馆五楼，小憩刚醒。\n<div>       翻开上学期的日志，发现自己已判若两人。\n...此处省略几百字埋怨的话语...\n我想做自己喜欢做的事，去读自己喜欢读的书，但却不想被禁锢在如此我不喜欢的体制内。而对于我这么一个只能呐喊之后又卑微地服从的人而言，在这，不说活的光彩，但得保证生存。这意味着我起码得花一半的时间去做我不想做的事--尽管我不知道做完之后能获得什么，然后花一半的时间去追求自己想要的。但想我太过于贪婪，也就远追赶不上能力高于自己并花上所有时间去做这些事的人","html":"<p>现在是下午两点，人在图书馆五楼，小憩刚醒。\n<div>       翻开上学期的日志，发现自己已判若两人。 <br />\n...此处省略几百字埋怨的话语...\n我想做自己喜欢做的事，去读自己喜欢读的书，但却不想被禁锢在如此我不喜欢的体制内。而对于我这么一个只能呐喊之后又卑微地服从的人而言，在这，不说活的光彩，但得保证生存。这意味着我起码得花一半的时间去做我不想做的事--尽管我不知道做完之后能获得什么，然后花一半的时间去追求自己想要的。但想我太过于贪婪，也就远追赶不上能力高于自己并花上所有时间去做这些事的人</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1338478873000,"created_by":1,"updated_at":1338478873000,"updated_by":1,"published_at":1338478873000,"published_by":1},{"id":569,"uuid":"c41ea9f1-39e2-436e-bc2a-a3896adae959","title":"绝对有惊喜！！！","slug":"jue-dui-you-liang-xi","markdown":"\n\nCSS3-animation动画的捣鼓，进去玩玩O(∩_∩)O~绝对有惊喜。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/04/2013-04-09_201523.jpg \"2013-04-09_201523\")](http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html)\n\n[<span style=\"color: #888888;\">Demo</span>](http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html)","html":"<p>CSS3-animation动画的捣鼓，进去玩玩O(∩_∩)O~绝对有惊喜。</p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/04/2013-04-09_201523.jpg\" alt=\"\" title=\"2013-04-09_201523\" /></a></p>\n\n<p><a href=\"http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html\"><span style=\"color: #888888;\">Demo</span></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1365539280000,"created_by":1,"updated_at":1365539280000,"updated_by":1,"published_at":1365539280000,"published_by":1},{"id":570,"uuid":"958d86c0-1dd5-4652-9d6c-3f8ea8a6f6fb","title":"编写爬虫会使用到的一些模块","slug":"node-spider-modules","markdown":"\n\n\n- request 模块\n\n    用于简化HTTP请求\n\n- cheerio 模块\n\n    jquery core 的子集，实现了与DOM操作无关的API\n\n- async 模块\n\n    用于简化异步代码的编写\n\n- debug 模块\n\n    用于显示调试信息\n\n- cron 模块\n\n    用于定时执行任务\n\n- child_process API\n\n    用于启动新的进程\n\n- pm2 模块\n\n    用于自动重启程序\n\n\n- uncaughException 处理错误\n\n    process.on('uncaughtException', function (err) {\n    \tconsole.error('uncaughtException: ', err.stack);\n    })\n    \n<!-- more -->\n\t\t\n### 参考资料\n\n1. [request模块](https://www.npmjs.org/package/request)\n2. [cheerio模块](https://www.npmjs.org/package/cheerio)\n3. [async模块](https://www.npmjs.org/package/async)\n4. [debug模块](https://www.npmjs.org/package/debug)\n5. [child_process](http://nodejs.org/api/child_process.html)\n6. [pm2](https://www.npmjs.org/package/pm2)\n7. [uncaughtException](http://nodejs.org/api/process.html#process_event_uncaughtexception)\n\n\n\n\n\n","html":"<ul>\n<li><p>request 模块</p>\n\n<p>用于简化HTTP请求</p></li>\n<li><p>cheerio 模块</p>\n\n<p>jquery core 的子集，实现了与DOM操作无关的API</p></li>\n<li><p>async 模块</p>\n\n<p>用于简化异步代码的编写</p></li>\n<li><p>debug 模块</p>\n\n<p>用于显示调试信息</p></li>\n<li><p>cron 模块</p>\n\n<p>用于定时执行任务</p></li>\n<li><p>child_process API</p>\n\n<p>用于启动新的进程</p></li>\n<li><p>pm2 模块</p>\n\n<p>用于自动重启程序</p></li>\n<li><p>uncaughException 处理错误</p>\n\n<p>process.on('uncaughtException', function (err) {\n    console.error('uncaughtException: ', err.stack);\n})</p></li>\n</ul>\n\n<!-- more -->\n\n<h3 id=\"\">参考资料</h3>\n\n<ol>\n<li><a href=\"https://www.npmjs.org/package/request\">request模块</a>  </li>\n<li><a href=\"https://www.npmjs.org/package/cheerio\">cheerio模块</a>  </li>\n<li><a href=\"https://www.npmjs.org/package/async\">async模块</a>  </li>\n<li><a href=\"https://www.npmjs.org/package/debug\">debug模块</a>  </li>\n<li><a href=\"http://nodejs.org/api/child_process.html\">child_process</a>  </li>\n<li><a href=\"https://www.npmjs.org/package/pm2\">pm2</a>  </li>\n<li><a href=\"http://nodejs.org/api/process.html#process_event_uncaughtexception\">uncaughtException</a></li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400867694000,"created_by":1,"updated_at":1400867694000,"updated_by":1,"published_at":1400867694000,"published_by":1},{"id":571,"uuid":"6bfce331-cbf1-4dec-a6aa-64967b6625eb","title":"读书笔记-程序员的思维修炼","slug":"du-shu-bi-ji-cheng-xu-yuan-de-si-wei-xiu-lian","markdown":"\n\n> @小赖：这是《程序员的思维训练》随记，含个人理解。\n\n## 新手到专家的五个阶段\n\n1. 新手\n2. 高级新手\n3. 胜人者\n4. 精通者\n5. 专家\n\n> 经验：技术促进了思维的转变\n\n\n<!-- more -->\n\n### 1.新手\n\n> Novices need recipes.\n\n新手需要的是一份指令清单：当X发生时，执行Y。\n\n新手的问题是，处于某情景时，不知道哪条规则是最相关的，往往会不知所措。\n\n规则只会让你启程，不会让你走得更远。\n\n\n### 2.高级新手\n\n> Advanced beginers don't want the big picture.\n\n高级新手不想要全局思维。\n\n高级新手开始摆脱固定的规则。\n\n高级新手需要快速获取信息，在正确的情景中采纳建议。\n\n高级新手的问题是虽可以独立尝试任务，但仍难以解决问题。\n\n\n### 3.胜任者\n\n> Competents can troubleshoot.\n\n胜任者能够解决问题。\n\n胜任者能建立问题的概念模型并有效使用。\n\n胜任者开始寻求和运用专家建议并有效利用。\n\n胜任者的问题是没有足够能力反思和自我纠正。\n\n\n### 4.精通者\n\n> Proficient practitioners can self-correct.\n\n精通者能够自我纠正，并学习他人经验，阅读案例研究，从故事中认真学习。\n\n精通者有全局思维，寻找更大的概念框架。\n\n精通者知道哪里最可能出错，有足够的经验知道下一步会发生什么。\n\n精通者能有效运用设计模式。\n\n\n### 5.专家\n\n> Experts work from intuition.\n\n> Intuition and pattern matching replace explicit knowledge.\n\n专家根据直觉工作，专家的直觉和模式识别能力已经超越了他们显性的知识。\n\n专家不断寻找更好的方式去做事。\n\n专家知道哪些细节无关紧要，哪些细节至关重要，擅长做有针对性的特征匹配。\n\n专家有丰富经验并在恰当情景中合理运用这些经验。\n\n\n> 当你在某个领域不是很擅长时，你更可能以为自己是专家，因此，你意识不到更好的方法和实践存在。\n\n> 一旦你成为了专家，你才会意识到自己知道的是那么少。\n\n\n正确评估自己：提高个人技能层次，从而提高自我认知能力\n\n\n### 十年成就专家\n\n> 专注、坚持，一万小时。\n\n- 有一个明确定义的任务\n- 任务可行但有挑战性\n- 任务环境可提供大量反馈以便采取行动\n- 提供重复犯错和纠错的机会\n\n\n\n## 我们在自己行业中可以做些什么\n\n### 1.通过模仿并创新来成长\n\n> \"I was just following orders\" doesn't work.\n\n只是执行命令是无用的。 \n\n通过观察和模仿来学习：模仿 -> 吸收 -> 创新\n\n在项目中坚持实践尽可能多的现有技能。 \n\n\n### 2.在实践中保持技能\n\n> Winners don't carry losers.\n\n优胜者不会帮扶失败者。\n\n保持实践以维持专家水平，以找到一个有意义有价值的职业生涯。 \n\n\n\n\n\n\n\n\n","html":"<blockquote>\n  <p>@小赖：这是《程序员的思维训练》随记，含个人理解。</p>\n</blockquote>\n\n<h2 id=\"\">新手到专家的五个阶段</h2>\n\n<ol>\n<li>新手  </li>\n<li>高级新手  </li>\n<li>胜人者  </li>\n<li>精通者  </li>\n<li>专家</li>\n</ol>\n\n<blockquote>\n  <p>经验：技术促进了思维的转变</p>\n</blockquote>\n\n<!-- more -->\n\n<h3 id=\"1\">1.新手</h3>\n\n<blockquote>\n  <p>Novices need recipes.</p>\n</blockquote>\n\n<p>新手需要的是一份指令清单：当X发生时，执行Y。</p>\n\n<p>新手的问题是，处于某情景时，不知道哪条规则是最相关的，往往会不知所措。</p>\n\n<p>规则只会让你启程，不会让你走得更远。</p>\n\n<h3 id=\"2\">2.高级新手</h3>\n\n<blockquote>\n  <p>Advanced beginers don't want the big picture.</p>\n</blockquote>\n\n<p>高级新手不想要全局思维。</p>\n\n<p>高级新手开始摆脱固定的规则。</p>\n\n<p>高级新手需要快速获取信息，在正确的情景中采纳建议。</p>\n\n<p>高级新手的问题是虽可以独立尝试任务，但仍难以解决问题。</p>\n\n<h3 id=\"3\">3.胜任者</h3>\n\n<blockquote>\n  <p>Competents can troubleshoot.</p>\n</blockquote>\n\n<p>胜任者能够解决问题。</p>\n\n<p>胜任者能建立问题的概念模型并有效使用。</p>\n\n<p>胜任者开始寻求和运用专家建议并有效利用。</p>\n\n<p>胜任者的问题是没有足够能力反思和自我纠正。</p>\n\n<h3 id=\"4\">4.精通者</h3>\n\n<blockquote>\n  <p>Proficient practitioners can self-correct.</p>\n</blockquote>\n\n<p>精通者能够自我纠正，并学习他人经验，阅读案例研究，从故事中认真学习。</p>\n\n<p>精通者有全局思维，寻找更大的概念框架。</p>\n\n<p>精通者知道哪里最可能出错，有足够的经验知道下一步会发生什么。</p>\n\n<p>精通者能有效运用设计模式。</p>\n\n<h3 id=\"5\">5.专家</h3>\n\n<blockquote>\n  <p>Experts work from intuition.</p>\n  \n  <p>Intuition and pattern matching replace explicit knowledge.</p>\n</blockquote>\n\n<p>专家根据直觉工作，专家的直觉和模式识别能力已经超越了他们显性的知识。</p>\n\n<p>专家不断寻找更好的方式去做事。</p>\n\n<p>专家知道哪些细节无关紧要，哪些细节至关重要，擅长做有针对性的特征匹配。</p>\n\n<p>专家有丰富经验并在恰当情景中合理运用这些经验。</p>\n\n<blockquote>\n  <p>当你在某个领域不是很擅长时，你更可能以为自己是专家，因此，你意识不到更好的方法和实践存在。</p>\n  \n  <p>一旦你成为了专家，你才会意识到自己知道的是那么少。</p>\n</blockquote>\n\n<p>正确评估自己：提高个人技能层次，从而提高自我认知能力</p>\n\n<h3 id=\"\">十年成就专家</h3>\n\n<blockquote>\n  <p>专注、坚持，一万小时。</p>\n</blockquote>\n\n<ul>\n<li>有一个明确定义的任务</li>\n<li>任务可行但有挑战性</li>\n<li>任务环境可提供大量反馈以便采取行动</li>\n<li>提供重复犯错和纠错的机会</li>\n</ul>\n\n<h2 id=\"\">我们在自己行业中可以做些什么</h2>\n\n<h3 id=\"1\">1.通过模仿并创新来成长</h3>\n\n<blockquote>\n  <p>\"I was just following orders\" doesn't work.</p>\n</blockquote>\n\n<p>只是执行命令是无用的。 </p>\n\n<p>通过观察和模仿来学习：模仿 -> 吸收 -> 创新</p>\n\n<p>在项目中坚持实践尽可能多的现有技能。 </p>\n\n<h3 id=\"2\">2.在实践中保持技能</h3>\n\n<blockquote>\n  <p>Winners don't carry losers.</p>\n</blockquote>\n\n<p>优胜者不会帮扶失败者。</p>\n\n<p>保持实践以维持专家水平，以找到一个有意义有价值的职业生涯。 </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400874548000,"created_by":1,"updated_at":1400874548000,"updated_by":1,"published_at":1400874548000,"published_by":1},{"id":572,"uuid":"d17c5a25-6ed7-40e1-8642-2c147c227c41","title":"阻止元素被选中及清除选中的方法","slug":"prevent-element-being-selected","markdown":"\n\n有时候，我们希望阻止用户选中我们指定区域的文字或内容。\n\n举个栗子，有时候用户在一个区域执行频繁的点击操作，一不小心傲娇地点多了，就会选中当前区域的内容。\n\n再举个栗子，制作轮播组件的时候，点击下一页，若点击的快的话，浏览器会识别为双击。\n\n双击的默认效果是选中整片区域，这时候轮播图组件就会被表示忧郁的蓝色幕布盖住，多忧桑啊~\n\n![](http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%951.jpg)\n\n你看，这妹子多赞啊，可是你一紧张就乱点下一张的话，就变成酱紫了：\n\n![](http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%952.jpg)\n\n不过别怕，给这个现代化浏览器说好了咱不要这种忧桑色调就可以了：\n\n```\n.pretty-girl {\n    -webkit-user-select: none;     \n}\n```\n\n可是！可是！不是每个浏览器都可以不忧桑！！！那就只能请脚本大王出山了。\n\n# 阻止选中\n\n有时候，我们需要禁止用户选中一些文本区域，这时候可以直接通过让 onselectstart 事件 return false 来实现。\n\n## 使用 JS 阻止整个网页的内容被选中\n\n```\ndocument.body.onselectstart = function () { \n    return false; \n};\n\n// 或\ndocument.body.onmousedown = function () { \n    return false; \n}\n```\n\n## 阻止特定区域的内容被选中\n```\nvar elem = document.getElementById('elemId');\nelem.onselectstart = function () {\n    return false;\n};\n```\n\n## 使用 CSS 控制样式阻止内容被选中\n\n仅支持非 IE10 以下的浏览器。IE9 以下请使用 onselectstart=\"return false;\" 的方式来实现。\n```\n.unselect {\n    -webkit-user-select: none; \n    -moz-user-select: none;    \n    -khtml-user-select: none;  \n    -ms-user-select: none;    \n    \n    /* 以下两个属性目前并未支持，写在这里为了减少风险 */\n    -o-user-select: none;\n    user-select: none;  \n}\n```\n\nuser-select: auto;  => 用户可以选中元素中的内容\n\nuser-select: none; => 用户不可选中元素中的内容\n\nuser-select: text;  => 用户可以选中元素中的文字\n\n目前这个 user-select 兼容 Chrome 6+、Firefox、IE 10+、Opera 15+、Safari 3.1+。\n\n需要注意的是，这个 user-select 还带浏览器厂商前缀，意味着她们还是非标准的，将来可能会改变。在生产环境中要慎用。\n\n# 清除选中\n\n有时候用户选中文字进行复制后，我们使用手动的方式进行选中的清除。\n\n## 使用 JS 清除选中\n\n```\nfunction clearSelections () {\n    if (window.getSelector) {\n        // 获取选中\n        var selection = window.getSelection();\n        // 清除选中\n        selection.removeAllRanges();\n    } else if (document.selection && document.selection.empty) {\n       // 兼容 IE8 以下，但 IE9+ 以上同样可用\n        document.selection.empty();\n        // 或使用 clear() 方法\n        // document.selection.clear();\n    }       \n}\n```\n\n## 使用 CSS 清除选中\n\n不考虑低版本 IE 的情况下，我们简单给选中元素添加以上 .unselect 的样式即可。\n\n### 参考链接\n[MDN user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select)\n\n","html":"<p>有时候，我们希望阻止用户选中我们指定区域的文字或内容。</p>\n\n<p>举个栗子，有时候用户在一个区域执行频繁的点击操作，一不小心傲娇地点多了，就会选中当前区域的内容。</p>\n\n<p>再举个栗子，制作轮播组件的时候，点击下一页，若点击的快的话，浏览器会识别为双击。</p>\n\n<p>双击的默认效果是选中整片区域，这时候轮播图组件就会被表示忧郁的蓝色幕布盖住，多忧桑啊~</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%951.jpg\" alt=\"\" /></p>\n\n<p>你看，这妹子多赞啊，可是你一紧张就乱点下一张的话，就变成酱紫了：</p>\n\n<p><img src=\"http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%952.jpg\" alt=\"\" /></p>\n\n<p>不过别怕，给这个现代化浏览器说好了咱不要这种忧桑色调就可以了：</p>\n\n<pre><code>.pretty-girl {\n    -webkit-user-select: none;     \n}\n</code></pre>\n\n<p>可是！可是！不是每个浏览器都可以不忧桑！！！那就只能请脚本大王出山了。</p>\n\n<h1 id=\"\">阻止选中</h1>\n\n<p>有时候，我们需要禁止用户选中一些文本区域，这时候可以直接通过让 onselectstart 事件 return false 来实现。</p>\n\n<h2 id=\"js\">使用 JS 阻止整个网页的内容被选中</h2>\n\n<pre><code>document.body.onselectstart = function () {  \n    return false; \n};\n\n// 或\ndocument.body.onmousedown = function () {  \n    return false; \n}\n</code></pre>\n\n<h2 id=\"\">阻止特定区域的内容被选中</h2>\n\n<pre><code>var elem = document.getElementById('elemId');  \nelem.onselectstart = function () {  \n    return false;\n};\n</code></pre>\n\n<h2 id=\"css\">使用 CSS 控制样式阻止内容被选中</h2>\n\n<p>仅支持非 IE10 以下的浏览器。IE9 以下请使用 onselectstart=\"return false;\" 的方式来实现。</p>\n\n<pre><code>.unselect {\n    -webkit-user-select: none; \n    -moz-user-select: none;    \n    -khtml-user-select: none;  \n    -ms-user-select: none;    \n\n    /* 以下两个属性目前并未支持，写在这里为了减少风险 */\n    -o-user-select: none;\n    user-select: none;  \n}\n</code></pre>\n\n<p>user-select: auto;  => 用户可以选中元素中的内容</p>\n\n<p>user-select: none; => 用户不可选中元素中的内容</p>\n\n<p>user-select: text;  => 用户可以选中元素中的文字</p>\n\n<p>目前这个 user-select 兼容 Chrome 6+、Firefox、IE 10+、Opera 15+、Safari 3.1+。</p>\n\n<p>需要注意的是，这个 user-select 还带浏览器厂商前缀，意味着她们还是非标准的，将来可能会改变。在生产环境中要慎用。</p>\n\n<h1 id=\"\">清除选中</h1>\n\n<p>有时候用户选中文字进行复制后，我们使用手动的方式进行选中的清除。</p>\n\n<h2 id=\"js\">使用 JS 清除选中</h2>\n\n<pre><code>function clearSelections () {  \n    if (window.getSelector) {\n        // 获取选中\n        var selection = window.getSelection();\n        // 清除选中\n        selection.removeAllRanges();\n    } else if (document.selection &amp;&amp; document.selection.empty) {\n       // 兼容 IE8 以下，但 IE9+ 以上同样可用\n        document.selection.empty();\n        // 或使用 clear() 方法\n        // document.selection.clear();\n    }       \n}\n</code></pre>\n\n<h2 id=\"css\">使用 CSS 清除选中</h2>\n\n<p>不考虑低版本 IE 的情况下，我们简单给选中元素添加以上 .unselect 的样式即可。</p>\n\n<h3 id=\"\">参考链接</h3>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\">MDN user-select</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1407865374000,"created_by":1,"updated_at":1407865374000,"updated_by":1,"published_at":1407865374000,"published_by":1},{"id":575,"uuid":"2cacd704-4be8-4ecb-ae4f-85af334907b2","title":"关于我","slug":"about","markdown":"```\nvar me = {\n\tname: '赖小赖',\n    age: 18,\n    location: ShenZhen\n};\n```","html":"<pre><code>var me = {  \n    name: '赖小赖',\n    age: 18,\n    location: ShenZhen\n};\n</code></pre>","image":"","featured":0,"page":1,"status":"published","language":"en_US","meta_title":"赖小赖","meta_description":"A handsome boy.","author_id":1,"created_at":1426237579823,"created_by":1,"updated_at":1440777707468,"updated_by":1,"published_at":1426237757952,"published_by":1},{"id":576,"uuid":"35ebe36f-f616-4b10-86e3-3841a9e4bf2c","title":"VPS 捣鼓小记","slug":"vps-notes","markdown":"> 不作死就不会死， 不捣鼓就不会活 -- via 菲利克斯·肖恩莱特\n\n什么是作死？作死就是不懂原理乱写代码，不懂环境乱配，不懂工具乱用，打掉一个 bug 再怀上一个 bug，伤元气瞎折腾。\n\n什么是捣鼓？捣鼓和作死相反，在解决问题时力求寻因导果，既能解决问题，又能学到新知识拓展新视野。\n\n在最近折腾 VPS 的时候，我就不断在作死，才捣鼓出了新乐趣，写下来和大家分享一下。\n\n作为一个没有服务器端编程经验的小前端，为何要去折腾 VPS 呢？因为能学到很多东西啊，举几个栗子:\n\n- 搭建个博客写点文章啊\n\n- 既然搭建博客了，那要搞域名啊、CDN啊、加缓存啊、打补丁啊、流量分析啊、性能分析啊、写主题啊、优化访问速度啊、提高 SEO 啊\n\n- 搭建个 VPN/shadowsock 配个代理锻炼锻炼身体又能科学上网啊，还可能省点钱啊\n\n- 哎呀好多操作都是 Linux 还是纯命令行操作的，能学到不少 Linux 知识啊\n\n- 女朋友不陪你折腾你还可以折腾 VPS 啊\n\n# 从购买一个 VPS 开始\n\n要过情人节，首先你得上淘宝买个不会漏气的女朋友。\n\n同理，你想折腾 VPS 你得买个靠谱的服务器。\n\n比如，你想访问速度快一些，可以选择购买腾讯云或阿里云提供的服务器；如果你想更自由一些，可以选择国外 Linode 或者 DigitalOcean 等提供的服务器。选择腾讯云可以使用[我们的推荐链接](http://www.qcloud.com/redirect.php?redirect=1001&cps_key=50b46969b6fa53f1334070ccf5a941d0), 选择 Linode 则可以使用[这个链接](https://www.linode.com/?r=e815823fd4ebad47aef51ae07250b626d30b7f40)。腾讯云最低配只需 65块，Linode最低配也只需要10美金，具体的配置和价格，可以自己去仔细对比下。\n\n好了，有了充气娃娃，噢不，是服务器，我们就可以放心地上了。\n\n使用 ssh 进行登录，假定服务提供商给你的 IP 是 11.22.33.44, 帐号是 root, 密码是 passwd：\n\n```\n$ ssh root@11.22.33.44\n```\n\n输入密码，第一次登录后建立公钥，我们就和成功上到了服务器。\n\n接着要怎么玩呢？什么姿势舒服就怎么玩嘛。\n\n好了，文章到此结束，我回家找女朋友了。\n\n------------我是回家的分界线------------\n\n快递还没到，我先上一下 VPS 玩一玩好了。\n\n# 快速实战，试手 VPS 迁移\n\n哎呀~ 想起不少人吐槽过我们团队的 [博客](http://www.alloyteam.com/) 打开速度太慢了，都超过了 12 秒，这怎么能忍？\n\n没办法，忍辱负重，我只能趁女朋友还没到之前，快速优化一下（希望 12 秒内可以解决）。\n\n嗯，先分析下博客为什么访问那么慢？\n\n1. 服务器在国外，国内连接过去太远了！\n\n2. 使用的是 Wordpress 程序，安装了不少冗余插件！\n\n3. HTTP 请求数量太多了，就和女生上厕所一样，得排队才能完啊！\n\n4. Google Analytics 等一些服务器已经被墙！\n\n5. 用户上传图片太大，没有经过压缩处理！\n\n好吧，那我们就先进行初步的优化。\n\n# VPS 数据迁移\n\n服务器搬家到国内，也就是 Linode 别人家搬回自己家腾讯云，得带上老老少少一家人：\n\n- 网站代码\n\n- Nginx 配置\n\n- 数据库数据\n\n嗯，学到的第一个 linux 终于派上了用场，将这些数据打包：\n\n```\n// tar 将文件进行打包\n// -c 表示创建归档\n// -z 表示使用 gzip 压缩\n// -v 表示打包时显示进度\n// -f 指定压缩后的文件名，如 all.tar.gz \n$ tar -czvf  all.tar.gz /path/to/sites  /path/to/nginx.conf /path/to/database\n```\n好了，数据量不小，打包后的文件非常大，问题就来了，选哪个交通工具呢？\n\n- wget 或 curl 简单便携\n\n- ftp          也是简单便携\n\n- scp          加密传输\n\n- rsync        增量传输 \n\n- dropbox      中转传输 \n\nwget 或 curl 和 ftp 下载的方式很简单。\n\nscp 和 rsync下载的方式是加密传输，也常用于两个主机之间进行复制文件（需要先建立 ssh 连接）。\n\nscp 使用加密进行传输，可以在两个主机中进行复制：\n\n```\n// 先登录 A 主机后，将 B 主机 11.22.33.44 上的 /home/data/ 复制到 A 主机下的 /home/data/\n// -r 表示遍历复制目录下的所有文件\n$ scp -r root@11.22.33.44:/home/data/ /home/data/ \n// 若为建立 ssh 连接，则输入后需要输入 A 主机的登录密码\n```\n\nrsync 传输也加密，但能将文件夹、文件等的权限等信息也保存下来，采用流式传输，同时是一种增量备份的算法在支持，效率较高：\n\n```\n// 先登录 A 主机后，将 B 主机 11.22.33.44 上的 /home/data/ 复制到 A 主机下的 /home/data/\n// -a 表示使用归档模式，保持所有文件属性\n// -v 表示显示传输进度\n// -r 表示遍历复制目录下的所有文件\n// -z 表示进行压缩处理\n// -e 指定一些端口信息\n$ rsync -avrz -e 'ssh -p 22' root@115.159.49.126:/home/data  /home/data/\n```\n\n嗯，小结一下：\n\n- 对于单次传输来看，可以使用 wget/curl/ftp;\n\n- 对于重要数据，可以使用 scp 来传输;\n\n- 如果有日常备份的需要，可以使用 rsync 来传输（增量备份）;\n\n然后，在这次搬家中，这些工具都没什么卵用，腾讯云和 Linode 就像情侣，终究输给了距离：国内外物理距离太远了，都只有几K/s的传输速度，说什么距离不是问题山盟海誓爱你加密都没用。\n\n感情出现危机，自然就需要云备胎作为支持。\n\n也就是使用 Dropbox 或百度云进行中转。\n\n[Dropbox](https://www.dropbox.com/developers/apps) 服务器也在国外，果真是和 Linode 近水楼台先得月，传输速度高达 5M/s, 正当腾讯云准备好一切将一家老少迎接回家时，却又被判了死刑：Dropbox 再高再帅再快也在墙外啊，门不当户不对你们不可以结婚！这时候还有个 [bypy](https://github.com/houtianze/bypy) 的百度云第三方接口可以舒缓下情绪，可这个接口非官方支持，不确定是否可靠，不可作为长期的备份方案，我也无力再爱，所以也没再出轨。\n\n这个故事告诉我们，生活就是如此无奈，我们活在别人界定的环境里，不让你玩你就是不能玩！\n\n等到我们下一代出生时，他们已然不知道这世界上有谷歌、推特、脸书，只有我们知道我们自由的圈子越来越小。\n\n扯远了，回到正题。\n\n既然数据已经在了 Dropbox 中转区，数据搬迁也是一次性的，索性就停止了作死，使用 sftp 将压缩包下载到了本地，同样再使用 sftp 将数据上传到了新服务器上。\n\n# VPS 环境搭建与恢复\n\n接着的事情就简单了，新服务器上恢复环境。\n\n- 安装好所需要的工具（如 Nginx/Mysql/PHP/Git 等)\n\n```\n$ apt-get install nginx mysql-server mysql-client php5-fpm\n```\n\n- 配置好所需要的用户和权限\n\n添加用户：\n\n```\n// 添加新用户 laixiaolai\n$ useradd laixiaolai\n// 给新用户设置密码\n$ passwd ***********\n```\n\n添加用户组：\n\n```\n$ groupadd handsomeboys\n// 将 laixiaolai 加入这个用户组\n$ usermod -G handsomeboys laixiaolai\n```\n\n设置一些目录的归属：\n\n```\n// 授予 laixiaolai 一个池塘\n$ chown -R laixiaolai:handsomeboys /data/girlpool\n```\n\n有趣吧，在 linux VPS 下，自己掌控用户和权限的感觉，好像我这一匹野马拥有了一个草原呐~\n\n- 恢复数据库备份\n\n不同数据库自有不同的恢复指令，简单举 mysql 做个栗子：\n\n```\n// 将 dump_girls_db.sql 这个数据库备份，导入到本机 localhost 的 girls_db 数据库中\n// -h 表示主机名\n// -u 表示用户名，注意这里是 mysql 的用户名而不是 VPS 服务器的用户名\n// -p 表示输入密码\n$ mysql -hlocalhost -uroot -p girls_db < dump_girls_db.sql\n```\n\n- 启动所需要的服务\n\n启动各种服务\n\n```\n// 启动各种程序\n$ service nginx start\n$ service php5-fpm start\n$ service mysql\n// 重启和关闭类似\n// service nginx stop\n```\n\n作死点：注意新旧机子的系统差异，以及新旧软件的配置差异，比如 ubuntu 系统上装的是 php5-fpm 而在 cent 系统中可能就是 php-fpm，不同系统或者不同版本软件安装后，默认用户、权限可能也不一致。\n所以，出了问题应该这么排查：\n\n- 需要的依赖都装完了么\n\n- 需要的软件都启动正常么，如 $ service nginx status 查看 Nginx 是否运行正常\n\n- 启动程序的用户和用户组对么，如 $ chown -R userA:group1 /data/ 将 /data/ 的拥有权赋予 group1 用户组中的用户 userA \n\n- 程序对特定的目录或文件有足够的权限么，如 $ chmod 777 autobackup.sh 给这个 shell 执行权限\n\n- 知道怎么看各种错误日志么，如 $ tail /var/log/nginx/nginx_error.log 查看 nginx 的错误日志\n\n到了这里，一家老少都搬回了国内安顿好了，这时候就可以开启下一步了：改善他们的生活。\n\n# 博客服务器简单优化\n\n把玩博客只是把玩 VPS 的一个小部分，这里就简单介绍下基于 Wordpress 程序的博客优化过程：\n\n- 删除冗余插件，这个没得说了，清理冗余的不靠谱的插件\n\n- 批量压缩图片等静态资源文件，配合 gulp/grunt 插件使用即可，或使用 wordpress 插件\n\n- 静态资源 CDN 化，迁移到腾讯云 CDN 上，减轻 HTTP 请求压缩，加快访问速度\n\n- 开启数据库级别的缓存\n\n- 开启 PHP 程序级别的缓存\n\n- 使用 wp-super-cache 插件开启静态页面生成\n\n经过简单处理后，博客访问速度大大提升了，当然，还可以继续优化下去。\n\n常访问我们 [博客](http://www.alloyteam.com) 的朋友，这时候应该能感觉到访问速度有提升吧？欢迎关注我们团队的博文分享。\n\n# VPS 数据要备份备份备份！\n\n不怕一万就怕万一，有数据备份习惯的人总是不会吃亏，这和要有备胎是一样的道理。\n\n需要备份的数据和之前说过要迁移的数据是差不多的，而备份和迁移的区别在于：\n\n- 备份需要定期进行\n\n- 备份可能需要保留多版本\n\n- 备份存在多个物理机上最好（异地容灾）\n\n- 备份有时候需要实时备份（增量传输）\n\n- 及时删除冗余备份\n\n- 备份应该切片，方便快速恢复\n\n那么，可选的方式是怎样的呢？\n\n- 完整物理机全盘备份，这个需要服务器提供商支持（Linode 支持，而国内云都暂不支持）\n\n- 使用 ftp 定时备份，需要时可以手动进行（手动肯定不如自动）\n\n- 使用 rsync 增量安全备份，可以设置多个物理机分时备份（异地容灾）\n\n- 使用 Dropbox（Dropbox 官方 API 提供，但被墙）\n\n- 使用 cron + git 的方式定时备份（自定义 cron 定时任务，加上 git 打标签进行版本管理）\n\n最优方式是 rsync/cron+git 啦，rsync 不再赘述，介绍下 cron+git 方式吧。\n\n# cron 自动执行定时任务\n\n举个栗子，我想要备份一个文件 /data/sites/laiblog/content/data/ghost.db：\n\n要使用 Git 将数据进行自动备份，先编写 /data/sites/laiblog/autobackup.sh 脚本\n\n```\n#!/bin/sh\n# PATH=/opt/someApp/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n# 获取当前时间\nDATE_ALL=`date +%Y-%m-%d_%H.%M.%S`\n# 切换到 git 项目目录\ncd /data/sites/laiblog/\n# 备份这个 ghost.db 文件\n# 注意要指定绝对路径，因为测试时你使用相对路径自然是能执行成功\n# 但 cron 执行这个 shell 时，所在的目录和你测试时可能不一致，导致找不到路径\n# 添加文件修改\ngit add /data/sites/laiblog/content/data/ghost.db\ngit commit -m \"自动备份\"\n// 推送要远程仓库备份\ngit push\n# 用时间戳打 tag 并推送到仓库，方便找到这个版本\n# v$DATE_ALL 表示以时间为 tag\ngit tag -a v$DATE_ALL -m 'auto backup'\ngit push origin v$DATE_ALL:v$DATE_ALL\n```\n\n注意要设置这个文件为可执行模式：\n\n```\n$ chmod 755 /data/sites/laiblog/autobackup.sh\n```\n\n再使用 crontab 设置定时任务\n\n```\n// 编辑 crontab 任务\n$ crontab -e\n```\n\n接着在打开的文件中添加：\n\n```\n# 格式是：m    h    dom   mon   dow   command\n# 即     分钟 小时  日期  月份   周几   命令\n# dom  是 day of month\n# mon  是 month\n# dow  是 day of week\n# 如以下：每天凌晨 4 点 59 分执行 autobackup.sh 的脚本\n# 2> 表示将错误输出到 crontab-autobackup.log 中，调试时有用\n59 4 * * * /data/sites/laiblog/autobackup.sh 2> /data/sites/laiblog/crontab-autobackup.log\n```\n\n注意这个 autoback.sh 脚本使用 git push 时并没有输入帐号密码，是因为设置了全局使用 ssh 连接 git 仓库的方式。\n\n# 免输入帐号密码使用 git pull/push\n\n使用你的邮箱生成密钥/公钥：\n\n```\n$ ssh-keygen -t rsa -b 4096 -C \"your_email@gmail.com\"\n```\n\n生成后打开 ssh-agent:\n\n```\n$ eval \"$(ssh-agent -s)\"\n```\n\n将公钥添加到 ssh-agent 中：\n\n```\nssh-add ~/.ssh/id_rsa\n```\n\n复制生成的公钥：\n\n```\n$ pbcopy < ~/.ssh/id_rsa.pub\n```\n\n将公钥添加到 git 仓库的（如 github 的添加地址为：https://github.com/settings/ssh）\n\n修改远程仓库的 url 为 ssh 方式，如：\n\n```\n$ git remote set-url origin git@github.com:yourUserName/yourProjectRepo.git \n```\n\n这么一来，就不用每次 git pull/push 都要输入帐号密码了。\n\n\n\n# 使用 VPS 做梯子科学上网？\n\n对于想`饭强`锻炼身体科学上网的方法，如果你买的是国外 VPS 比如 [Linode](https://www.linode.com/?r=e815823fd4ebad47aef51ae07250b626d30b7f40)，就可以这么干。\n\n## 安装 pptpd 搭建 VPN\n\n按 [这个教程](https://help.ubuntu.com/community/PPTPServer) 走就行了。\n\n注意，在mac上配置 vpn，要把 Send all traffic over VPN connection 勾选上，否则无法正常使用。\n\n设置 mac 在断线后自动重连可参考 [这段脚本](http://lifehacker.com/5932886/force-mac-os-x-to-automatically-reconnect-to-vpn)\n\n买个 VPS 搭建个 VPN，其实就省去买 VPN 的钱啦~ 设置多个帐号密码，多用户共享也是爽歪歪~\n\n## 安装 shadowsocks\n\n除了使用 pptpd 搭建 VPN，还可以使用 shadowsocks 进行科学上网，更快更便捷，谁用谁知道！\n\n首先在 VPS 上安装服务端：\n\n```\n$ sudo apt-get install python-pip\n$ pip install shadowsocks\n// 注意以下的 PORT 和 PASSWORD 自定义。\n$ ssserver -p PORT -k PASSWORD -m rc4-md5 -d start \n```\n\n如果你是用 mac 的话，安装客户端。\n\n下载 http://shadowsocks.org/en/index.html\n\n设置：\n\n```\n服务器地址为 VPS 的 id，\n端口为上面设定的  PORT，\n密码为上面设定的 PASSWORD，\n加密方式为上面设定的  rc4-md5\n```\n\n然后就可以科学上网了。\n\n以上设置了一个 PORT 和 PASSWARD 也就只是单用户上网，如果设置多用户的话，维护 /etc/shadowsocks.json：\n```\n{\n    \"server\":\"VPS服务器的IP\",\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         // 设置多个用户\n         \"9000\":\"PASSWORD9000\",\n         \"9001\":\"PASSWORD9001\",\n         \"9002\":\"PASSWORD9002\",\n         \"9003\":\"PASSWORD9003\",\n         \"9004\":\"PASSWORD9004\"\n    },\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",\n    \"fast_open\": false\n}\n```\n\n额，最近 ss 的作者被约谈了，日后还能不能用也是未知也是难。。。\n\n# VPS 折腾总结\n\n- 不作死就不会死，Linux 中用户和权限相关的知识非常重要，这往往决定了程序是否能够正常运行以及服务器是否安全。\n\n- 边折腾边学习，掌握问题背后的原因。\n\n- 学习到很好有趣的命令，比如：\n\n```\n// 查看硬盘（剩余）空间\n$ df -h \n\n// 查看文件夹占用空间\n// -d 表示计算 1 层目录，利用这个我们可以从根目录开始执行这个指令，层层下去查看到底是哪里占用了太多空间以瘦身\n$ du -h -d 1\n\n// 查看特定文件并计算数量\n// find ./ 表示在当前目录开始查找\n// -name \"*.png\" 表示查找以 .png 为后缀的文件\n// | 是 *nix 中流式传输的思想，意为将前面程序的输出结果，当作后续程序的输入源\n// wc -l 表示计算数量，并将其列出\n$ find ./ -name \"*.png\" | wc -l\n```\n\n","html":"<blockquote>\n  <p>不作死就不会死， 不捣鼓就不会活 -- via 菲利克斯·肖恩莱特</p>\n</blockquote>\n\n<p>什么是作死？作死就是不懂原理乱写代码，不懂环境乱配，不懂工具乱用，打掉一个 bug 再怀上一个 bug，伤元气瞎折腾。</p>\n\n<p>什么是捣鼓？捣鼓和作死相反，在解决问题时力求寻因导果，既能解决问题，又能学到新知识拓展新视野。</p>\n\n<p>在最近折腾 VPS 的时候，我就不断在作死，才捣鼓出了新乐趣，写下来和大家分享一下。</p>\n\n<p>作为一个没有服务器端编程经验的小前端，为何要去折腾 VPS 呢？因为能学到很多东西啊，举几个栗子:</p>\n\n<ul>\n<li><p>搭建个博客写点文章啊</p></li>\n<li><p>既然搭建博客了，那要搞域名啊、CDN啊、加缓存啊、打补丁啊、流量分析啊、性能分析啊、写主题啊、优化访问速度啊、提高 SEO 啊</p></li>\n<li><p>搭建个 VPN/shadowsock 配个代理锻炼锻炼身体又能科学上网啊，还可能省点钱啊</p></li>\n<li><p>哎呀好多操作都是 Linux 还是纯命令行操作的，能学到不少 Linux 知识啊</p></li>\n<li><p>女朋友不陪你折腾你还可以折腾 VPS 啊</p></li>\n</ul>\n\n<h1 id=\"vps\">从购买一个 VPS 开始</h1>\n\n<p>要过情人节，首先你得上淘宝买个不会漏气的女朋友。</p>\n\n<p>同理，你想折腾 VPS 你得买个靠谱的服务器。</p>\n\n<p>比如，你想访问速度快一些，可以选择购买腾讯云或阿里云提供的服务器；如果你想更自由一些，可以选择国外 Linode 或者 DigitalOcean 等提供的服务器。选择腾讯云可以使用<a href=\"http://www.qcloud.com/redirect.php?redirect=1001&amp;cps_key=50b46969b6fa53f1334070ccf5a941d0\">我们的推荐链接</a>, 选择 Linode 则可以使用<a href=\"https://www.linode.com/?r=e815823fd4ebad47aef51ae07250b626d30b7f40\">这个链接</a>。腾讯云最低配只需 65块，Linode最低配也只需要10美金，具体的配置和价格，可以自己去仔细对比下。</p>\n\n<p>好了，有了充气娃娃，噢不，是服务器，我们就可以放心地上了。</p>\n\n<p>使用 ssh 进行登录，假定服务提供商给你的 IP 是 11.22.33.44, 帐号是 root, 密码是 passwd：</p>\n\n<pre><code>$ ssh root@11.22.33.44\n</code></pre>\n\n<p>输入密码，第一次登录后建立公钥，我们就和成功上到了服务器。</p>\n\n<p>接着要怎么玩呢？什么姿势舒服就怎么玩嘛。</p>\n\n<p>好了，文章到此结束，我回家找女朋友了。</p>\n\n<p>------------我是回家的分界线------------</p>\n\n<p>快递还没到，我先上一下 VPS 玩一玩好了。</p>\n\n<h1 id=\"vps\">快速实战，试手 VPS 迁移</h1>\n\n<p>哎呀~ 想起不少人吐槽过我们团队的 <a href=\"http://www.alloyteam.com/\">博客</a> 打开速度太慢了，都超过了 12 秒，这怎么能忍？</p>\n\n<p>没办法，忍辱负重，我只能趁女朋友还没到之前，快速优化一下（希望 12 秒内可以解决）。</p>\n\n<p>嗯，先分析下博客为什么访问那么慢？</p>\n\n<ol>\n<li><p>服务器在国外，国内连接过去太远了！</p></li>\n<li><p>使用的是 Wordpress 程序，安装了不少冗余插件！</p></li>\n<li><p>HTTP 请求数量太多了，就和女生上厕所一样，得排队才能完啊！</p></li>\n<li><p>Google Analytics 等一些服务器已经被墙！</p></li>\n<li><p>用户上传图片太大，没有经过压缩处理！</p></li>\n</ol>\n\n<p>好吧，那我们就先进行初步的优化。</p>\n\n<h1 id=\"vps\">VPS 数据迁移</h1>\n\n<p>服务器搬家到国内，也就是 Linode 别人家搬回自己家腾讯云，得带上老老少少一家人：</p>\n\n<ul>\n<li><p>网站代码</p></li>\n<li><p>Nginx 配置</p></li>\n<li><p>数据库数据</p></li>\n</ul>\n\n<p>嗯，学到的第一个 linux 终于派上了用场，将这些数据打包：</p>\n\n<pre><code>// tar 将文件进行打包\n// -c 表示创建归档\n// -z 表示使用 gzip 压缩\n// -v 表示打包时显示进度\n// -f 指定压缩后的文件名，如 all.tar.gz \n$ tar -czvf  all.tar.gz /path/to/sites  /path/to/nginx.conf /path/to/database\n</code></pre>\n\n<p>好了，数据量不小，打包后的文件非常大，问题就来了，选哪个交通工具呢？</p>\n\n<ul>\n<li><p>wget 或 curl 简单便携</p></li>\n<li><p>ftp          也是简单便携</p></li>\n<li><p>scp          加密传输</p></li>\n<li><p>rsync        增量传输 </p></li>\n<li><p>dropbox      中转传输 </p></li>\n</ul>\n\n<p>wget 或 curl 和 ftp 下载的方式很简单。</p>\n\n<p>scp 和 rsync下载的方式是加密传输，也常用于两个主机之间进行复制文件（需要先建立 ssh 连接）。</p>\n\n<p>scp 使用加密进行传输，可以在两个主机中进行复制：</p>\n\n<pre><code>// 先登录 A 主机后，将 B 主机 11.22.33.44 上的 /home/data/ 复制到 A 主机下的 /home/data/\n// -r 表示遍历复制目录下的所有文件\n$ scp -r root@11.22.33.44:/home/data/ /home/data/ \n// 若为建立 ssh 连接，则输入后需要输入 A 主机的登录密码\n</code></pre>\n\n<p>rsync 传输也加密，但能将文件夹、文件等的权限等信息也保存下来，采用流式传输，同时是一种增量备份的算法在支持，效率较高：</p>\n\n<pre><code>// 先登录 A 主机后，将 B 主机 11.22.33.44 上的 /home/data/ 复制到 A 主机下的 /home/data/\n// -a 表示使用归档模式，保持所有文件属性\n// -v 表示显示传输进度\n// -r 表示遍历复制目录下的所有文件\n// -z 表示进行压缩处理\n// -e 指定一些端口信息\n$ rsync -avrz -e 'ssh -p 22' root@115.159.49.126:/home/data  /home/data/\n</code></pre>\n\n<p>嗯，小结一下：</p>\n\n<ul>\n<li><p>对于单次传输来看，可以使用 wget/curl/ftp;</p></li>\n<li><p>对于重要数据，可以使用 scp 来传输;</p></li>\n<li><p>如果有日常备份的需要，可以使用 rsync 来传输（增量备份）;</p></li>\n</ul>\n\n<p>然后，在这次搬家中，这些工具都没什么卵用，腾讯云和 Linode 就像情侣，终究输给了距离：国内外物理距离太远了，都只有几K/s的传输速度，说什么距离不是问题山盟海誓爱你加密都没用。</p>\n\n<p>感情出现危机，自然就需要云备胎作为支持。</p>\n\n<p>也就是使用 Dropbox 或百度云进行中转。</p>\n\n<p><a href=\"https://www.dropbox.com/developers/apps\">Dropbox</a> 服务器也在国外，果真是和 Linode 近水楼台先得月，传输速度高达 5M/s, 正当腾讯云准备好一切将一家老少迎接回家时，却又被判了死刑：Dropbox 再高再帅再快也在墙外啊，门不当户不对你们不可以结婚！这时候还有个 <a href=\"https://github.com/houtianze/bypy\">bypy</a> 的百度云第三方接口可以舒缓下情绪，可这个接口非官方支持，不确定是否可靠，不可作为长期的备份方案，我也无力再爱，所以也没再出轨。</p>\n\n<p>这个故事告诉我们，生活就是如此无奈，我们活在别人界定的环境里，不让你玩你就是不能玩！</p>\n\n<p>等到我们下一代出生时，他们已然不知道这世界上有谷歌、推特、脸书，只有我们知道我们自由的圈子越来越小。</p>\n\n<p>扯远了，回到正题。</p>\n\n<p>既然数据已经在了 Dropbox 中转区，数据搬迁也是一次性的，索性就停止了作死，使用 sftp 将压缩包下载到了本地，同样再使用 sftp 将数据上传到了新服务器上。</p>\n\n<h1 id=\"vps\">VPS 环境搭建与恢复</h1>\n\n<p>接着的事情就简单了，新服务器上恢复环境。</p>\n\n<ul>\n<li>安装好所需要的工具（如 Nginx/Mysql/PHP/Git 等)</li>\n</ul>\n\n<pre><code>$ apt-get install nginx mysql-server mysql-client php5-fpm\n</code></pre>\n\n<ul>\n<li>配置好所需要的用户和权限</li>\n</ul>\n\n<p>添加用户：</p>\n\n<pre><code>// 添加新用户 laixiaolai\n$ useradd laixiaolai\n// 给新用户设置密码\n$ passwd ***********\n</code></pre>\n\n<p>添加用户组：</p>\n\n<pre><code>$ groupadd handsomeboys\n// 将 laixiaolai 加入这个用户组\n$ usermod -G handsomeboys laixiaolai\n</code></pre>\n\n<p>设置一些目录的归属：</p>\n\n<pre><code>// 授予 laixiaolai 一个池塘\n$ chown -R laixiaolai:handsomeboys /data/girlpool\n</code></pre>\n\n<p>有趣吧，在 linux VPS 下，自己掌控用户和权限的感觉，好像我这一匹野马拥有了一个草原呐~</p>\n\n<ul>\n<li>恢复数据库备份</li>\n</ul>\n\n<p>不同数据库自有不同的恢复指令，简单举 mysql 做个栗子：</p>\n\n<pre><code>// 将 dump_girls_db.sql 这个数据库备份，导入到本机 localhost 的 girls_db 数据库中\n// -h 表示主机名\n// -u 表示用户名，注意这里是 mysql 的用户名而不是 VPS 服务器的用户名\n// -p 表示输入密码\n$ mysql -hlocalhost -uroot -p girls_db &lt; dump_girls_db.sql\n</code></pre>\n\n<ul>\n<li>启动所需要的服务</li>\n</ul>\n\n<p>启动各种服务</p>\n\n<pre><code>// 启动各种程序\n$ service nginx start\n$ service php5-fpm start\n$ service mysql\n// 重启和关闭类似\n// service nginx stop\n</code></pre>\n\n<p>作死点：注意新旧机子的系统差异，以及新旧软件的配置差异，比如 ubuntu 系统上装的是 php5-fpm 而在 cent 系统中可能就是 php-fpm，不同系统或者不同版本软件安装后，默认用户、权限可能也不一致。\n所以，出了问题应该这么排查：</p>\n\n<ul>\n<li><p>需要的依赖都装完了么</p></li>\n<li><p>需要的软件都启动正常么，如 $ service nginx status 查看 Nginx 是否运行正常</p></li>\n<li><p>启动程序的用户和用户组对么，如 $ chown -R userA:group1 /data/ 将 /data/ 的拥有权赋予 group1 用户组中的用户 userA </p></li>\n<li><p>程序对特定的目录或文件有足够的权限么，如 $ chmod 777 autobackup.sh 给这个 shell 执行权限</p></li>\n<li><p>知道怎么看各种错误日志么，如 $ tail /var/log/nginx/nginx_error.log 查看 nginx 的错误日志</p></li>\n</ul>\n\n<p>到了这里，一家老少都搬回了国内安顿好了，这时候就可以开启下一步了：改善他们的生活。</p>\n\n<h1 id=\"\">博客服务器简单优化</h1>\n\n<p>把玩博客只是把玩 VPS 的一个小部分，这里就简单介绍下基于 Wordpress 程序的博客优化过程：</p>\n\n<ul>\n<li><p>删除冗余插件，这个没得说了，清理冗余的不靠谱的插件</p></li>\n<li><p>批量压缩图片等静态资源文件，配合 gulp/grunt 插件使用即可，或使用 wordpress 插件</p></li>\n<li><p>静态资源 CDN 化，迁移到腾讯云 CDN 上，减轻 HTTP 请求压缩，加快访问速度</p></li>\n<li><p>开启数据库级别的缓存</p></li>\n<li><p>开启 PHP 程序级别的缓存</p></li>\n<li><p>使用 wp-super-cache 插件开启静态页面生成</p></li>\n</ul>\n\n<p>经过简单处理后，博客访问速度大大提升了，当然，还可以继续优化下去。</p>\n\n<p>常访问我们 <a href=\"http://www.alloyteam.com\">博客</a> 的朋友，这时候应该能感觉到访问速度有提升吧？欢迎关注我们团队的博文分享。</p>\n\n<h1 id=\"vps\">VPS 数据要备份备份备份！</h1>\n\n<p>不怕一万就怕万一，有数据备份习惯的人总是不会吃亏，这和要有备胎是一样的道理。</p>\n\n<p>需要备份的数据和之前说过要迁移的数据是差不多的，而备份和迁移的区别在于：</p>\n\n<ul>\n<li><p>备份需要定期进行</p></li>\n<li><p>备份可能需要保留多版本</p></li>\n<li><p>备份存在多个物理机上最好（异地容灾）</p></li>\n<li><p>备份有时候需要实时备份（增量传输）</p></li>\n<li><p>及时删除冗余备份</p></li>\n<li><p>备份应该切片，方便快速恢复</p></li>\n</ul>\n\n<p>那么，可选的方式是怎样的呢？</p>\n\n<ul>\n<li><p>完整物理机全盘备份，这个需要服务器提供商支持（Linode 支持，而国内云都暂不支持）</p></li>\n<li><p>使用 ftp 定时备份，需要时可以手动进行（手动肯定不如自动）</p></li>\n<li><p>使用 rsync 增量安全备份，可以设置多个物理机分时备份（异地容灾）</p></li>\n<li><p>使用 Dropbox（Dropbox 官方 API 提供，但被墙）</p></li>\n<li><p>使用 cron + git 的方式定时备份（自定义 cron 定时任务，加上 git 打标签进行版本管理）</p></li>\n</ul>\n\n<p>最优方式是 rsync/cron+git 啦，rsync 不再赘述，介绍下 cron+git 方式吧。</p>\n\n<h1 id=\"cron\">cron 自动执行定时任务</h1>\n\n<p>举个栗子，我想要备份一个文件 /data/sites/laiblog/content/data/ghost.db：</p>\n\n<p>要使用 Git 将数据进行自动备份，先编写 /data/sites/laiblog/autobackup.sh 脚本</p>\n\n<pre><code>#!/bin/sh\n# PATH=/opt/someApp/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n# 获取当前时间\nDATE_ALL=`date +%Y-%m-%d_%H.%M.%S`  \n# 切换到 git 项目目录\ncd /data/sites/laiblog/  \n# 备份这个 ghost.db 文件\n# 注意要指定绝对路径，因为测试时你使用相对路径自然是能执行成功\n# 但 cron 执行这个 shell 时，所在的目录和你测试时可能不一致，导致找不到路径\n# 添加文件修改\ngit add /data/sites/laiblog/content/data/ghost.db  \ngit commit -m \"自动备份\"  \n// 推送要远程仓库备份\ngit push  \n# 用时间戳打 tag 并推送到仓库，方便找到这个版本\n# v$DATE_ALL 表示以时间为 tag\ngit tag -a v$DATE_ALL -m 'auto backup'  \ngit push origin v$DATE_ALL:v$DATE_ALL  \n</code></pre>\n\n<p>注意要设置这个文件为可执行模式：</p>\n\n<pre><code>$ chmod 755 /data/sites/laiblog/autobackup.sh\n</code></pre>\n\n<p>再使用 crontab 设置定时任务</p>\n\n<pre><code>// 编辑 crontab 任务\n$ crontab -e\n</code></pre>\n\n<p>接着在打开的文件中添加：</p>\n\n<pre><code># 格式是：m    h    dom   mon   dow   command\n# 即     分钟 小时  日期  月份   周几   命令\n# dom  是 day of month\n# mon  是 month\n# dow  是 day of week\n# 如以下：每天凌晨 4 点 59 分执行 autobackup.sh 的脚本\n# 2&gt; 表示将错误输出到 crontab-autobackup.log 中，调试时有用\n59 4 * * * /data/sites/laiblog/autobackup.sh 2&gt; /data/sites/laiblog/crontab-autobackup.log  \n</code></pre>\n\n<p>注意这个 autoback.sh 脚本使用 git push 时并没有输入帐号密码，是因为设置了全局使用 ssh 连接 git 仓库的方式。</p>\n\n<h1 id=\"gitpullpush\">免输入帐号密码使用 git pull/push</h1>\n\n<p>使用你的邮箱生成密钥/公钥：</p>\n\n<pre><code>$ ssh-keygen -t rsa -b 4096 -C \"your_email@gmail.com\"\n</code></pre>\n\n<p>生成后打开 ssh-agent:</p>\n\n<pre><code>$ eval \"$(ssh-agent -s)\"\n</code></pre>\n\n<p>将公钥添加到 ssh-agent 中：</p>\n\n<pre><code>ssh-add ~/.ssh/id_rsa  \n</code></pre>\n\n<p>复制生成的公钥：</p>\n\n<pre><code>$ pbcopy &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n\n<p>将公钥添加到 git 仓库的（如 github 的添加地址为：<a href=\"https://github.com/settings/ssh）\">https://github.com/settings/ssh）</a></p>\n\n<p>修改远程仓库的 url 为 ssh 方式，如：</p>\n\n<pre><code>$ git remote set-url origin git@github.com:yourUserName/yourProjectRepo.git \n</code></pre>\n\n<p>这么一来，就不用每次 git pull/push 都要输入帐号密码了。</p>\n\n<h1 id=\"vps\">使用 VPS 做梯子科学上网？</h1>\n\n<p>对于想<code>饭强</code>锻炼身体科学上网的方法，如果你买的是国外 VPS 比如 <a href=\"https://www.linode.com/?r=e815823fd4ebad47aef51ae07250b626d30b7f40\">Linode</a>，就可以这么干。</p>\n\n<h2 id=\"pptpdvpn\">安装 pptpd 搭建 VPN</h2>\n\n<p>按 <a href=\"https://help.ubuntu.com/community/PPTPServer\">这个教程</a> 走就行了。</p>\n\n<p>注意，在mac上配置 vpn，要把 Send all traffic over VPN connection 勾选上，否则无法正常使用。</p>\n\n<p>设置 mac 在断线后自动重连可参考 <a href=\"http://lifehacker.com/5932886/force-mac-os-x-to-automatically-reconnect-to-vpn\">这段脚本</a></p>\n\n<p>买个 VPS 搭建个 VPN，其实就省去买 VPN 的钱啦~ 设置多个帐号密码，多用户共享也是爽歪歪~</p>\n\n<h2 id=\"shadowsocks\">安装 shadowsocks</h2>\n\n<p>除了使用 pptpd 搭建 VPN，还可以使用 shadowsocks 进行科学上网，更快更便捷，谁用谁知道！</p>\n\n<p>首先在 VPS 上安装服务端：</p>\n\n<pre><code>$ sudo apt-get install python-pip\n$ pip install shadowsocks\n// 注意以下的 PORT 和 PASSWORD 自定义。\n$ ssserver -p PORT -k PASSWORD -m rc4-md5 -d start \n</code></pre>\n\n<p>如果你是用 mac 的话，安装客户端。</p>\n\n<p>下载 <a href=\"http://shadowsocks.org/en/index.html\">http://shadowsocks.org/en/index.html</a></p>\n\n<p>设置：</p>\n\n<pre><code>服务器地址为 VPS 的 id，\n端口为上面设定的  PORT，\n密码为上面设定的 PASSWORD，\n加密方式为上面设定的  rc4-md5\n</code></pre>\n\n<p>然后就可以科学上网了。</p>\n\n<p>以上设置了一个 PORT 和 PASSWARD 也就只是单用户上网，如果设置多用户的话，维护 /etc/shadowsocks.json：</p>\n\n<pre><code>{\n    \"server\":\"VPS服务器的IP\",\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         // 设置多个用户\n         \"9000\":\"PASSWORD9000\",\n         \"9001\":\"PASSWORD9001\",\n         \"9002\":\"PASSWORD9002\",\n         \"9003\":\"PASSWORD9003\",\n         \"9004\":\"PASSWORD9004\"\n    },\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",\n    \"fast_open\": false\n}\n</code></pre>\n\n<p>额，最近 ss 的作者被约谈了，日后还能不能用也是未知也是难。。。</p>\n\n<h1 id=\"vps\">VPS 折腾总结</h1>\n\n<ul>\n<li><p>不作死就不会死，Linux 中用户和权限相关的知识非常重要，这往往决定了程序是否能够正常运行以及服务器是否安全。</p></li>\n<li><p>边折腾边学习，掌握问题背后的原因。</p></li>\n<li><p>学习到很好有趣的命令，比如：</p></li>\n</ul>\n\n<pre><code>// 查看硬盘（剩余）空间\n$ df -h \n\n// 查看文件夹占用空间\n// -d 表示计算 1 层目录，利用这个我们可以从根目录开始执行这个指令，层层下去查看到底是哪里占用了太多空间以瘦身\n$ du -h -d 1\n\n// 查看特定文件并计算数量\n// find ./ 表示在当前目录开始查找\n// -name \"*.png\" 表示查找以 .png 为后缀的文件\n// | 是 *nix 中流式传输的思想，意为将前面程序的输出结果，当作后续程序的输入源\n// wc -l 表示计算数量，并将其列出\n$ find ./ -name \"*.png\" | wc -l\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"VPS 折腾小计，安装 LEMP，数据迁移，博客优化，VPN 搭建，Shadowsocks 搭建","author_id":1,"created_at":1427526316551,"created_by":1,"updated_at":1440258136380,"updated_by":1,"published_at":1440255960000,"published_by":1},{"id":577,"uuid":"bb29c7e8-3250-4bcd-a600-5a960765f7f4","title":"React 初探","slug":"react-explore","markdown":"## React 简单介绍\n\n### 先说 React 与 React Native\n\n他们是真的亲戚，可不像 Java 和 Javascript 一样。\n\n其实第一次看到 React 的语法我是拒绝的，因为这么丑的写法，你不能让我写我就写。\n\n但当我发现 React Native 横空出世后，它学习一次到处运行的理念非常诱人。React Native 可以写出原生体验的 iOS/Android 应用？那不就多了一门装逼技能？所以我们调研小组试了一下，感觉 \"Duang\" 一下，很爽很舒服。写 React Native 需要两门基础技能：React 语法 和 iOS 基础知识。\n\n很爽很舒服，索性就研究一下，算是入门。\n了解之后发现，React 真是有另一番天地，值得学习。\n\n接下来总结以下我对 React 的理解，分享给大家。\n\n至于 React Native，有机会再好好探究下。\n\n这部分废话太多，喜欢实战的可以直接看代码部分。\n\n> React 是 Facebook 出品的一套颠覆式的前端开发类库。\n\n为什么说它是颠覆式的呢？\n\n### 内存维护虚拟 DOM\n\n对于传统的 DOM 维护，我们的步骤可能是：\n\n    1. 初始化 DOM 结构\n    2. 从服务器获取新数据\n    3. 使用新数据更新局部 DOM\n    4. 绑定各种事件\n\n首先，我们操作 DOM 是最昂贵的开销，对于 需要反复更新 DOM 的网页，无疑是噩梦。其次，对 DOM 局部的更新以及事件绑定加大了维护的难度。\n\n而 React 引入了一个全新的概念：虚拟 DOM。\n\n虚拟 DOM 是躺在内存里的一种特殊的结构，我们可以理解为这是真实 DOM 在内存里的映射。\n\n除了结构上的映射外，这个虚拟的 DOM 还包括了渲染\n真实所需要的数据以及事件绑定。\n\n### 全量更新真实 DOM\n\n虚拟 DOM 在创建时，首先是使用 JSX 的语法生成一个真实 DOM 树的映射，其次是从服务器端拉取远程数据，接着注入到这个虚拟 DOM 树中，同时绑定事件。\n\n好了，有了虚拟 DOM、数据、事件，万事俱备。\n\n接下来，调用 render() 方法一次性渲染出真实的 DOM，然后全量插入到网页中。\n\n虚拟 DOM 静静地躺在内存里，等待数据更新。\n\n新数据来临，调用 setState() 方法更新数据到虚拟 DOM 中，然后自动调用 render() 再一次性渲染出真实的 DOM ，然后全量更新到网页中。\n\n    一个虚拟 DOM，对应一个真实 DOM\n    一份数据更新，重新生成虚拟 DOM ，全量更新真实 DOM\n\n就这么简单。\n除了带来性能上的提升之外，很显然这种写法简化了我们维护 DOM 的成本 -- 我们只需要维护一份数据。\n\n### 只是 View，可配合其他类库使用\n\n可以看到，React 里最重要的概念有虚拟 DOM、单向数据注入（虚拟 DOM 到真实 DOM）。\n这里并没有引入太多其他的东西，所以我对 React 的理解是一个类库，而非框架。\n如果要使用 MVC、MVVM 等技术的吧，完全可以把 React 当做其中的 V,即 View, 配合其他类库使用。\n\n### 组件化\n\n我虽然是个前端菜鸟，但日观天象也是能嗅到下一代 Web 将是组件化、组件复用共享的时代。\n\nReact 编写起来，就是编写一个个的组件。\n\n我对一个 React 组件的理解是：\n\n    - 模板 HTML (JSX 语法格式)\n    - 样式 CSS  (还是独立的样式文件)\n    - 交互 JS   (与HTML一起，揉和到 JSX 语法中)\n\n以上三者可以打包复用，甚至是无缝接入，我脚得它就可能是未来了。\n\nHTML 与 JS 使用 JSX 语法糅合到一起的方式是见仁见智，恐怕会引起战争。\n\n我刚接触到 JSX 的时候，一开口也是『我*，好丑』。\n\n但慢慢地却发现，这种方式一开始写起来别扭，但用得却很爽。\n\n\n接下来，我通过编写一个简单的应用来入门 React。\n\n看完如果大呼不过瘾，建议直飞 React 官方看文档，那才是宝藏！\n\n## React 简单示例\n\n示例代码放置在 [demo/](https://github.com/laispace/react-explore/tree/master/demo)目录下，每个文件夹为一个独立的示例。\n\n先看下这个 demo 最终的样子吧：\n\n[demo - 速度与激情](http://laispace.github.io/react-explore/demo/events/index.html)\n\n每个示例的入口文件 index.html 结构大体相同：\n\n```\n<!-- React 真实 DOM 将会插入到这里 -->\n<div id=\"demo\"></div>\n\n<!-- 引入 React -->\n<script src=\"../../bower_components/react/react.js\"></script>\n<!-- 引入 JSX 语法格式转换器 -->\n<script src=\"../../bower_components/react/JSXTransformer.js\"></script>\n\n<!-- 注意：script 需要注明 type 为 text/jsx 以指定这是一个 JSX 语法格式 -->\n<script type=\"text/jsx\" src=\"demo.js\"></script>\n</body>\n```\n\n\n### 渲染一个虚拟 DOM 为真实 DOM\n\n使用 render() 方法生成真实 DOM 并插入到网页中。\n```\n// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        return (\n            <div className=\"component-hello\">\n                <h1 className=\"hello-title\">Hello React</h1>\n                <p  className=\"hello-desc\">React 初探</p>\n                <div className=\"hello-movies\">\n                    <p2>我喜欢的电影</p2>\n                    <ul>\n                        <li className=\"movie-item\">\n                            <span className=\"movie-name\">速度与激情7</span>\n                            -\n                            <span className=\"movie-date\">2015</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\nReact.render(<DemoComponent />, document.getElementById('demo'));\n```\n\n[在线演示 demo/render](http://laispace.github.io/react-explore/demo/render/)\n\n[示例代码 demo/render](https://github.com/laispace/react-explore/tree/master/demo/render/)\n\n### 设置初始数据\n\n第一次渲染真实 DOM 时将使用 getInitialState() 返回的数据。\n```\n// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({\n    // getInitialState 中返回的值将会作为数据的默认值\n    getInitialState: function () {\n        return {\n            title: '我喜欢的电影',\n            movies: [\n                {\n                    id: 7,\n                    name: '速度与激情7',\n                    date: 2015\n                },\n                {\n                    id: 6,\n                    name: '速度与激情6',\n                    date: 2013\n                }\n            ]\n        }\n    },\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        var movies = this.state.movies.map(function (movie) {\n            return (\n                <li className=\"movie-item\" key={movie.id}>\n                    <span className=\"movie-name\">{movie.name}</span>\n                    -\n                    <span className=\"movie-date\">{movie.date}</span>\n                </li>\n            )\n        });\n\n        return (\n            <div className=\"component-hello\">\n                <h1 className=\"hello-title\">Hello React</h1>\n                <p  className=\"hello-desc\">React 初探</p>\n\n                <div className=\"hello-movies\">\n                    <p2>{title}</p2>\n                    <ul>{movies}</ul>\n                </div>\n            </div>\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\nReact.render(<DemoComponent />, document.getElementById('demo'));\n\n```\n\n[在线演示 demo/get-initial-state](http://laispace.github.io/react-explore/demo/get-initial-state/)\n\n[示例代码 demo/get-initial-state](https://github.com/laispace/react-explore/tree/master/demo/get-initial-state/)\n\n### 动态更新数据\n\n第二次更新渲染真实 DOM 时将使用 setState() 设置的数据。\n```\n// 使用 componentDidMount 在组件初始化后执行一些操作\n    componentDidMount: function () {\n        // 拉取远程数据\n        // 开启假数据服务器：\n        // cd fake-server && npm install && node index.js\n        this.fetchData();\n    },\n\n    // 使用自定义的 fetchData 方法从远程服务器获取数据\n    fetchData: function () {\n        var self = this;\n        // 发起 ajax 获取到数据后调用 setState 方法更新组件的数据\n        var url = '../../fake-data/movies.json';\n        $.getJSON(url, function (movies) {\n            // 本地模拟返回太快了，模拟一下网络延迟\n            setTimeout(function() {\n                self.setState({\n                    movies: movies\n                });\n            }, 2000);\n        });\n    },\n```\n\n[在线演示 demo/set-state](http://laispace.github.io/react-explore/demo/set-state/)\n\n[示例代码 demo/set-state](https://github.com/laispace/react-explore/tree/master/demo/set-state/)\n\n### 绑定事件\n\n绑定事件时，我们可以使用 ref=\"name\" 属性对一个 DOM 节点进行标记，同时可以通过 React.findDOMNode(this.refs.name) 获取到这个节点的原生 DOM。\n\n```\n// 使用 render 方法自动渲染 DOM\n    render: function () {\n        var self = this;\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        var movies = this.state.movies.map(function (movie) {\n            return (\n                <li className=\"movie-item\" key={movie.id}>\n                    <span className=\"movie-name\">{movie.name}</span>\n                    -\n                    <span className=\"movie-date\">{movie.date}</span>\n                    <a href=\"#\" onClick={self.onRemove.bind(null, movie)}>删除</a>\n                </li>\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            <div className=\"component-hello\">\n                <h1 className=\"hello-title\">Hello React</h1>\n                <p  className=\"hello-desc\">React 初探</p>\n\n                <div className=\"hello-movies\">\n                    <p2>{title}</p2>\n                    <form onSubmit={this.onAdd}>\n                        {/* 注意这里指定 ref 属性，然后我们就可以使用 this.refs.xxx 访问到 */}\n                        <input type=\"text\" ref=\"name\" placehlder=\"输入你喜欢的电影\"/>\n                        <input type=\"text\" ref=\"date\" placeholder=\"上映时间\"/>\n                        <input type=\"submit\" value=\"提交\"/>\n                    </form>\n                    <ul>{movies}</ul>\n                    {this.state.loading ? <div>大家好我是菊花, 我现在在转</div> : null}\n                </div>\n            </div>\n        )\n    }\n```\n\n```\nonRemove: function (movie) {\n        var id = movie.id;\n        console.log(movie)\n        // 删除这个 item\n        var movies = this.state.movies;\n        var len = movies.length;\n        var index = -1;\n        for(var i = 0; i < len; i++) {\n            var _movie = movies[i];\n            if (_movie.id === id) {\n                index = i;\n                break;\n            }\n        }\n        if (index > 0) {\n            movies.splice(index, 1);\n            this.setState({\n                movies: movies\n            });\n        }\n    },\n\n    onAdd: function (e) {\n        e.preventDefault();\n        var refs = this.refs;\n        var refName = React.findDOMNode(refs.name);\n        var refDate = React.findDOMNode(refs.date);\n        if (refName.value === '') {\n            alert('请输入电影名');\n            return;\n        } else if (refDate === '') {\n            alert('请输入上映时间');\n            return;\n        }\n        var movie = {\n            // 使用 findDOMNode 获取到原生的 DOM 对象\n            name: refName.value,\n            date: refDate.value,\n            id: Date.now() // 粗暴地以时间数字作为随机 id\n        };\n\n        var movies = this.state.movies;\n        movies.push(movie);\n        this.setState(movies);\n\n        refName.value = '';\n        refDate.value = '';\n    },\n```\n\n[在线演示 demo/events](http://laispace.github.io/react-explore/demo/events/)\n\n[示例代码 demo/events](https://github.com/laispace/react-explore/tree/master/demo/events/)\n\n### 多组件与组件嵌套\n\n一个组件就包含了 JSX 模板、数据维护、事件绑定的话，代码量已经够多了，这时候可以采用 AMD/CMD 的方式，将组件进行更细粒度的划分，可以以文件即组件的方式来编写，这里就不上 demo 了。\n\n### 组件间通信\n\n在 React 中，数据流是单向的，且组件之间可以嵌套，我们可以通过对最顶层组件传递属性方式，向下层组件传送数据。\n\n- 嵌套组件间，使用 this.props  属性向下传递数据\n\n- 独立组件之间，自行维护数据则需要自行维护一个全局数据存储，或者使用发布订阅地方式通知数据的更新。\n\n全局数据存储怎么做呢？可以理解为不同的组件获取的数据源一致，在组件的外部维护这个数据集合，或者干脆直接从服务器端获取。\n\n有人会说了，这样很不方便。\n\n但我觉得，既然是一个组件，那就配套有获取组件所需数据的方式，独立组件间有很强的数据依赖时，要么使用上述方式，要么可以简单粗暴，将独立组件用一个顶层组件包裹起来，转化为嵌套组件的关系，即可数据互通。\n```\n// 将子组件抽离出来\nvar LiWrapper = React.createClass({\n    render: function () {\n        // 使用 this.props 获得传入组件的数据\n        var movie = this.props.movie;\n        return (\n            <li>{/* ... */}</li>\n        )\n    }\n});\n\n// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({\n    // 使用 getInitialState 的返回值作为数据的默认值\n    getInitialState: function () {\n      // ...\n    },\n\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var movies = this.state.movies.map(function (movie) {\n            return (\n               <LiWrapper movie={movie}/>\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            <div className=\"component-hello\">\n                {/* ... */}\n                <div className=\"hello-movies\">\n                    <ul>{movies}</ul>\n                </div>\n            </div>\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\n// 在使用组件时传入 movies 数据\nvar movies = [// ...];\nReact.render(<DemoComponent movies={movies}/>, document.getElementById('demo'));\n```\n\n[在线演示 demo/comunications](http://laispace.github.io/react-explore/demo/comunications/index1.html)\n\n[示例代码 demo/comunications](https://github.com/laispace/react-explore/tree/master/demo/comunications/)\n\n## 打造丝滑的构建 使用 ES6  + gulp + webpack\n\nES6 和 gulp 的话就不多介绍啦。\n\nwebpack 是一款新生的前端构建工具，兼容 AMD/CMD 等写法，支持 Browser 和 Node 端共享代码，在浏览器端可以像写 Node 一样方便的进行模块化的划分。\n\n在这里主要用 webpack 的两个插件：\n\n- 使用 jsx-loader 这个插件支持 jsx 语法解析\n\n- 使用 esx-loader 这个插件支持 es6 语法解析\n\n来看下简单目录结构：\n\n- js/main.js 为入口文件，引入了两个组件。\n\n```\nvar React = require('react');\n\nvar MovieListComponent = require('./components/movie-list');\nvar HelloMessageComponent = require('./components/hello');\n\nvar movies = [\n    {\n        id: 5,\n        name: '速度与激情5',\n        date: 2011\n    },\n    {\n        id: 4,\n        name: '速度与激情4',\n        date: 2009\n    }\n];\n\nvar wording = '保罗';\n\nvar MainComponent = React.createClass({\n    render: function () {\n        return (\n            <div className=\"component-hello\">\n                <HelloMessageComponent name={wording}/>\n                <MovieListComponent movies={movies} />\n            </div>\n        )\n    }\n});\n\nReact.render(<MainComponent />, document.getElementById('demo'));\n\n```\n- js/components/movie-list.js 组件为 JSX 语法编写\n\n```\nvar React = require('react');\n\n// 引入子组件\nvar MovieComponent = require('./movie');\n\n// 使用 React.createClass 创建一个组件\nvar MovieListComponent = React.createClass({\n    // 使用 getInitialState 的返回值作为数据的默认值\n    getInitialState: function () {\n        return {\n            loading: true,\n            title: '我喜欢的电影',\n            // 注意这里将 外部传入的数据赋值给了 this.state\n            movies: []\n        }\n    },\n\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        // this.props 用于从组件外部传入数据\n        var movies = this.props.movies;\n        movies = movies.map(function (movie) {\n            return (\n                <MovieComponent movie={movie}/>\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            <ul>{movies}</ul>\n        )\n    }\n});\n\nmodule.exports = MovieListComponent;\n```\n- js/components/hello.js 组件为 ES6 + JSX 语法编写\n\n```\nvar React = require('react');\n\nclass HelloComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {wording: '你好呀, '};\n    }\n    render() {\n        return <div>{this.state.wording} {this.props.name}</div>;\n    }\n}\n\nmodule.exports = HelloComponent;\n\n```\n- webpack.config.js 指定 jsx-loader 和 es6-loader\n\n```\nmodule.exports = {\n    entry: ['./js/main.js'],\n    output: {\n        path: __dirname,\n        filename: 'js/bundle.js'\n    },\n    module: {\n        loaders: [\n            { test: /\\.js$/, loader: 'es6-loader' },\n            { test: /\\.js$/, loader: 'jsx-loader' }\n        ]\n    }\n};\n```\n\n- gulpfile.js 在这里配置 webpack 任务，启动文件监听\n\n```\nvar gulp = require('gulp');\nvar livereload = require('gulp-livereload');\nvar webpack = require(\"gulp-webpack\");\n\nvar webpackConfig = require('./webpack.config');\n\ngulp.task(\"webpack\", function() {\n    return gulp.src('./js/main.js')\n        .pipe(webpack(webpackConfig))\n        .pipe(gulp.dest('.'));\n});\n\ngulp.task('watch', function() {\n    livereload.listen();\n    gulp.watch(['js/**/*.js', '!js/bundle.js'], ['webpack']);\n});\n\ngulp.task('default', [\n    'webpack',\n    'watch'\n]);\n```\n\n- index.html 示例页面，引入 webpack 打包后的 js/bundle.js\n```\n<!-- React 真实 DOM 将会插入到这里 -->\n<div id=\"demo\"></div>\n<script src=\"./js/bundle.js\"></script>\n```\n\n在 js/main.js 中引入两个不同的组件，然后在 webpack.config.js 中指定编译 JSX 和 ES6 的 loader 工具，使用 gulp 监听 js/ 中文件变化，自动编译出的 js/bundle.js 将被 index.html 引用。\n\n嗯，再在 webpack 中加入各种你喜欢的 loader，在 gulp 中加上各种 css、js、img 的处理任务，编写代码，自动重新编译，纵享丝滑。\n\n[示例代码](https://github.com/laispace/react-explore/tree/master/demo/webpack/)\n\n## 零碎总结\n\n文章到这里应该就算结束了，接下来是一些在学习过程中记下来的几个小点，也分享给大家。\n\n### 简单理解 JSX 语法\n\nJSX 把 JS 和 HTML 糅合起来了，这么理解是不是感觉比较简单：\n\n> 遇到 {} 包裹的是 JS，遇到 <> 包裹的是 HTML\n\n### render() 中 返回的的 JSX 模板需要一个根元素包裹起来\n\n比如：\n```\n// 错误的写法\nvar MyComponent = React.createClass({\n    render: function () {\n        return (\n            <h1>速度与激情7</h1>\n            <p>致敬保罗</p>\n        )\n    }\n});\n```\n应该写成：\n```\n// 正确的写法\nvar MyComponent = React.createClass({\n    render: function () {\n        return (\n            <div>\n                <h1>速度与激情7</h1>\n                <p>致敬保罗</p>\n            </div>\n        )\n    }\n});\n```\n\n### 几个重要方法\n\n- render() 返回的是一系列嵌套的组件\nthis.props 获取父组件传递给子组件的数据\nthis.setState({data: data}); 用于动态更新状态，设置数据（设置后UI会自动刷新）\n- getInitialState() 在整个组件的生命周期中只会执行一次，用于初始化数据\n- componentDidMount 会在 render 后自动调用，用于异步获取数据，更新数据\n\n### 操作数据的流程\n1. gitInitialState() 初始化数据\n2. render() 渲染初始化数据\n3. componentDidMount() 异步获取数据\n4. setState() 更新数据\n\n\n### 理解一个组件的状态转换\n每一个组件都可以理解为有一个简单的状态机。\n\n调用 setState(data, callback) 后，data 将会混入 this.state 中，数据得到了更新，render() 就会被调用，UI 就能被更新。\n\n\n\n### 组件之间如何通信\n```\n<Parent><Child /></Parent>\n```\n父组件可以获取到子组件：this.props.children\n\n### render() 永远不要手动调用\n\nrender() 在 React 创建时会调用一次，在数据更新时调用 setState() 方法则会继续调用它来更新网页中的真实 DOM。\n\n### 使用 getInitial() 设置默认值\n\n这个方法返回的值会在组件初始化第一次调用 render() 时就被使用\n\n### class 是关键字，改用 className\n\n```\n// 错误的写法\nvar MyComponent = React.createClass({\n    render: function () {\n        return (\n            <div class=\"movie\">\n                <h1>速度与激情7</h1>\n                <p>致敬保罗</p>\n            </div>\n        )\n    }\n});\n```\n应该写成：\n```\n// 正确的写法\nvar MyComponent = React.createClass({\n    render: function () {\n        return (\n            <div className=\"movie\">\n                <h1>速度与激情7</h1>\n                <p>致敬保罗</p>\n            </div>\n        )\n    }\n});\n```\n\n### 组件名大写，不然不被识别\n\n```\n// 错误的写法\nvar myComponent = React.createClass({\n    render: function () {\n        return (\n            <div class=\"movie\">\n                <h1>速度与激情7</h1>\n                <p>致敬保罗</p>\n            </div>\n        )\n    }\n});\n\nReact.render(<myComponent />, document.getElementById('demo'));\n\n```\n应该写成：\n```\n// 正确的写法\nvar MyComponent = React.createClass({\n    render: function () {\n        return (\n            <div className=\"movie\">\n                <h1>速度与激情7</h1>\n                <p>致敬保罗</p>\n            </div>\n        )\n    }\n});\n\nReact.render(<MyComponent />, document.getElementById('demo'));\n```\n\n### 怎么隐藏或显示菊花\n```\nvar MyComponent = React.createClass({\n    getInitial: function () {\n        loading: true\n    },\n    showLoading: function () {\n        this.setState({loading: true})\n    },\n    hideLoading: function () {\n        this.setState({loading: false})\n    },\n    render: function () {\n        return (\n            {\n                this.state.loading ?\n                <div>大家好我是菊花，我在转</div>\n                :\n                null\n            }\n        )\n    }\n});\n```\n\n### 插入原生的 HTML 片段的方式\n\nReact 会为我们过滤 XSS，要让一段 HTML 片段直接显示出来，需要这样：\n\n```\n<div dangerouslySetInnerHTML={{__html: 'First &middot; Second'}} />\n```\n\n### 让 React 支持移动触摸实践\n```\nReact.initializeTouchEvents(true);\n```\n\n### 处理表单\n表单因为会因用户交互而变化，所以有特定的一些属性\n\n- input 和 textarea 组件具有 value\n- input[type=checkbox] 和 input[type=radio] 具有 checked\n- option 具有 selected，如果要支持多选，可以传入数组：\n```\n<select multiple={true} value={['B', 'C']}>\n```\n表单项具有 onChange 事件\n\n注意如果这么写：\n```\nrender: function() {\n    return <input type=\"text\" value=\"Hello!\" />;\n  }\n```\n那每次 render 的时候 input 的 value 都会被重置为 \"Hello!\"，所以需要这么控制：\n```\ngetInitialState: function() {\n    return {value: 'Hello!'};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function() {\n    var value = this.state.value;\n    return <input type=\"text\" value={value} onChange={this.handleChange} />;\n  }\n```\n利用这点，可以无缝地接入一些验证规则，比如限制文字为 140 字：\n```\nhandleChange: function(event) {\n   this.setState({value: event.target.value.substr(0, 140)});\n }\n```\n如果不想这么被控制呢？那就在返回 input 的时候，不要设置 value 属性，这样随着用户输入，value 不会被重置：\n```\n render: function() {\n    return <input type=\"text\" />;\n  }\n ```\n也可以设置默认值：\n```\nrender: function() {\n    return <input type=\"text\" defaultValue=\"Hello!\" />;\n  }\n```\n除了 `defaultValue` 之外，还支持 `defaultChecked`\n\n### 理解虚拟 DOM\nReact 会在内存里维护一个代表 DOM  的结构，调用\nrender 方法时才生成真正的 DOM 插入到网页中。\n\n\n### 理解组件的生命周期\n\n一个组件的声明周期可以理解为三个阶段：\n\n1. mounting     组件正在插入到 DOM 中\n2. updating     组件正在重新注入新数据后更新到 DOM 中\n3. unmounting 组件从 DOM 中移除\n\n\n#### mounting 阶段\n\n- getInitialState() 被调用，返回原始数据\n\n- componentWillMount() 在组件 mounting 前调用\n\n- componentDidMount() 在组件 mounting 完成后调用\n\n#### updating 阶段\n\n- componentWillReceiveProps(nextProps) 在接收到新的 props 时调用\n- shouldComponentUpdate(nextProps, nextState) 在组件需要更新 DOM 时调用，若这个函数返回 false 则告诉 React 不要更新\n- componentWillUpdate(nextProps, nextState) 在更新发生时调用，可以在这里调用 this.steState() 刷新数据\n- componentDidUpdate(prevProps, prevState) 在更新完成后调用\n\n#### unmounting 阶段\n- componentWillUnmount() 在组件移除时被调用，在这里可以对数据进行清理\n\n### 强制使用数据更新组件\nforceUpdate() 强制使用数据更新组件，而不用调用 this.setState()\n\n### 获取原生 DOM 元素\n`React.findDOMNode(component)` 返回原生的 DOM 元素\n注意要获取原生的 DOM 元素，必须在 render 被调用， 真正的 DOM 已经被插入到页面中时。\n\n\n### 理解 refs\n\n可以把 refs 理解为我们在 HTML 中的id，用于定位到指定的组件。\n```\n<form onSubmit={this.onAdd}>\n    {/* 注意这里指定 ref 属性，然后我们就可以使用 this.refs.xxx 访问到 */}\n    <input type=\"text\" ref=\"name\" placehlder=\"输入你喜欢的电影\"/>\n    <input type=\"text\" ref=\"date\" placeholder=\"上映时间\"/>\n    <input type=\"submit\" value=\"提交\"/>\n</form>\n```\n\nref 属性可以是一个回调函数而不是名字，这个回调会在组件 mounted 后被调用。回调函数使用被引用的组件作为参数。\n```\n<input ref={ function(component){ React.findDOMNode(component).focus();} } />\n```\n注意不要在 render 方法中访问  refs 属性。\n\n\n\n\n\n\n\n","html":"<h2 id=\"react\">React 简单介绍</h2>\n\n<h3 id=\"reactreactnative\">先说 React 与 React Native</h3>\n\n<p>他们是真的亲戚，可不像 Java 和 Javascript 一样。</p>\n\n<p>其实第一次看到 React 的语法我是拒绝的，因为这么丑的写法，你不能让我写我就写。</p>\n\n<p>但当我发现 React Native 横空出世后，它学习一次到处运行的理念非常诱人。React Native 可以写出原生体验的 iOS/Android 应用？那不就多了一门装逼技能？所以我们调研小组试了一下，感觉 \"Duang\" 一下，很爽很舒服。写 React Native 需要两门基础技能：React 语法 和 iOS 基础知识。</p>\n\n<p>很爽很舒服，索性就研究一下，算是入门。\n了解之后发现，React 真是有另一番天地，值得学习。</p>\n\n<p>接下来总结以下我对 React 的理解，分享给大家。</p>\n\n<p>至于 React Native，有机会再好好探究下。</p>\n\n<p>这部分废话太多，喜欢实战的可以直接看代码部分。</p>\n\n<blockquote>\n  <p>React 是 Facebook 出品的一套颠覆式的前端开发类库。</p>\n</blockquote>\n\n<p>为什么说它是颠覆式的呢？</p>\n\n<h3 id=\"dom\">内存维护虚拟 DOM</h3>\n\n<p>对于传统的 DOM 维护，我们的步骤可能是：</p>\n\n<pre><code>1. 初始化 DOM 结构\n2. 从服务器获取新数据\n3. 使用新数据更新局部 DOM\n4. 绑定各种事件\n</code></pre>\n\n<p>首先，我们操作 DOM 是最昂贵的开销，对于 需要反复更新 DOM 的网页，无疑是噩梦。其次，对 DOM 局部的更新以及事件绑定加大了维护的难度。</p>\n\n<p>而 React 引入了一个全新的概念：虚拟 DOM。</p>\n\n<p>虚拟 DOM 是躺在内存里的一种特殊的结构，我们可以理解为这是真实 DOM 在内存里的映射。</p>\n\n<p>除了结构上的映射外，这个虚拟的 DOM 还包括了渲染\n真实所需要的数据以及事件绑定。</p>\n\n<h3 id=\"dom\">全量更新真实 DOM</h3>\n\n<p>虚拟 DOM 在创建时，首先是使用 JSX 的语法生成一个真实 DOM 树的映射，其次是从服务器端拉取远程数据，接着注入到这个虚拟 DOM 树中，同时绑定事件。</p>\n\n<p>好了，有了虚拟 DOM、数据、事件，万事俱备。</p>\n\n<p>接下来，调用 render() 方法一次性渲染出真实的 DOM，然后全量插入到网页中。</p>\n\n<p>虚拟 DOM 静静地躺在内存里，等待数据更新。</p>\n\n<p>新数据来临，调用 setState() 方法更新数据到虚拟 DOM 中，然后自动调用 render() 再一次性渲染出真实的 DOM ，然后全量更新到网页中。</p>\n\n<pre><code>一个虚拟 DOM，对应一个真实 DOM\n一份数据更新，重新生成虚拟 DOM ，全量更新真实 DOM\n</code></pre>\n\n<p>就这么简单。\n除了带来性能上的提升之外，很显然这种写法简化了我们维护 DOM 的成本 -- 我们只需要维护一份数据。</p>\n\n<h3 id=\"view\">只是 View，可配合其他类库使用</h3>\n\n<p>可以看到，React 里最重要的概念有虚拟 DOM、单向数据注入（虚拟 DOM 到真实 DOM）。\n这里并没有引入太多其他的东西，所以我对 React 的理解是一个类库，而非框架。\n如果要使用 MVC、MVVM 等技术的吧，完全可以把 React 当做其中的 V,即 View, 配合其他类库使用。</p>\n\n<h3 id=\"\">组件化</h3>\n\n<p>我虽然是个前端菜鸟，但日观天象也是能嗅到下一代 Web 将是组件化、组件复用共享的时代。</p>\n\n<p>React 编写起来，就是编写一个个的组件。</p>\n\n<p>我对一个 React 组件的理解是：</p>\n\n<pre><code>- 模板 HTML (JSX 语法格式)\n- 样式 CSS  (还是独立的样式文件)\n- 交互 JS   (与HTML一起，揉和到 JSX 语法中)\n</code></pre>\n\n<p>以上三者可以打包复用，甚至是无缝接入，我脚得它就可能是未来了。</p>\n\n<p>HTML 与 JS 使用 JSX 语法糅合到一起的方式是见仁见智，恐怕会引起战争。</p>\n\n<p>我刚接触到 JSX 的时候，一开口也是『我*，好丑』。</p>\n\n<p>但慢慢地却发现，这种方式一开始写起来别扭，但用得却很爽。</p>\n\n<p>接下来，我通过编写一个简单的应用来入门 React。</p>\n\n<p>看完如果大呼不过瘾，建议直飞 React 官方看文档，那才是宝藏！</p>\n\n<h2 id=\"react\">React 简单示例</h2>\n\n<p>示例代码放置在 <a href=\"https://github.com/laispace/react-explore/tree/master/demo\">demo/</a>目录下，每个文件夹为一个独立的示例。</p>\n\n<p>先看下这个 demo 最终的样子吧：</p>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/events/index.html\">demo - 速度与激情</a></p>\n\n<p>每个示例的入口文件 index.html 结构大体相同：</p>\n\n<pre><code>&lt;!-- React 真实 DOM 将会插入到这里 --&gt;  \n&lt;div id=\"demo\"&gt;&lt;/div&gt;\n\n&lt;!-- 引入 React --&gt;  \n&lt;script src=\"../../bower_components/react/react.js\"&gt;&lt;/script&gt;  \n&lt;!-- 引入 JSX 语法格式转换器 --&gt;  \n&lt;script src=\"../../bower_components/react/JSXTransformer.js\"&gt;&lt;/script&gt;\n\n&lt;!-- 注意：script 需要注明 type 为 text/jsx 以指定这是一个 JSX 语法格式 --&gt;  \n&lt;script type=\"text/jsx\" src=\"demo.js\"&gt;&lt;/script&gt;  \n&lt;/body&gt;  \n</code></pre>\n\n<h3 id=\"domdom\">渲染一个虚拟 DOM 为真实 DOM</h3>\n\n<p>使用 render() 方法生成真实 DOM 并插入到网页中。</p>\n\n<pre><code>// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({  \n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        return (\n            &lt;div className=\"component-hello\"&gt;\n                &lt;h1 className=\"hello-title\"&gt;Hello React&lt;/h1&gt;\n                &lt;p  className=\"hello-desc\"&gt;React 初探&lt;/p&gt;\n                &lt;div className=\"hello-movies\"&gt;\n                    &lt;p2&gt;我喜欢的电影&lt;/p2&gt;\n                    &lt;ul&gt;\n                        &lt;li className=\"movie-item\"&gt;\n                            &lt;span className=\"movie-name\"&gt;速度与激情7&lt;/span&gt;\n                            -\n                            &lt;span className=\"movie-date\"&gt;2015&lt;/span&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\nReact.render(&lt;DemoComponent /&gt;, document.getElementById('demo'));  \n</code></pre>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/render/\">在线演示 demo/render</a></p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/render/\">示例代码 demo/render</a></p>\n\n<h3 id=\"\">设置初始数据</h3>\n\n<p>第一次渲染真实 DOM 时将使用 getInitialState() 返回的数据。</p>\n\n<pre><code>// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({  \n    // getInitialState 中返回的值将会作为数据的默认值\n    getInitialState: function () {\n        return {\n            title: '我喜欢的电影',\n            movies: [\n                {\n                    id: 7,\n                    name: '速度与激情7',\n                    date: 2015\n                },\n                {\n                    id: 6,\n                    name: '速度与激情6',\n                    date: 2013\n                }\n            ]\n        }\n    },\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        var movies = this.state.movies.map(function (movie) {\n            return (\n                &lt;li className=\"movie-item\" key={movie.id}&gt;\n                    &lt;span className=\"movie-name\"&gt;{movie.name}&lt;/span&gt;\n                    -\n                    &lt;span className=\"movie-date\"&gt;{movie.date}&lt;/span&gt;\n                &lt;/li&gt;\n            )\n        });\n\n        return (\n            &lt;div className=\"component-hello\"&gt;\n                &lt;h1 className=\"hello-title\"&gt;Hello React&lt;/h1&gt;\n                &lt;p  className=\"hello-desc\"&gt;React 初探&lt;/p&gt;\n\n                &lt;div className=\"hello-movies\"&gt;\n                    &lt;p2&gt;{title}&lt;/p2&gt;\n                    &lt;ul&gt;{movies}&lt;/ul&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\nReact.render(&lt;DemoComponent /&gt;, document.getElementById('demo'));\n</code></pre>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/get-initial-state/\">在线演示 demo/get-initial-state</a></p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/get-initial-state/\">示例代码 demo/get-initial-state</a></p>\n\n<h3 id=\"\">动态更新数据</h3>\n\n<p>第二次更新渲染真实 DOM 时将使用 setState() 设置的数据。</p>\n\n<pre><code>// 使用 componentDidMount 在组件初始化后执行一些操作\n    componentDidMount: function () {\n        // 拉取远程数据\n        // 开启假数据服务器：\n        // cd fake-server &amp;&amp; npm install &amp;&amp; node index.js\n        this.fetchData();\n    },\n\n    // 使用自定义的 fetchData 方法从远程服务器获取数据\n    fetchData: function () {\n        var self = this;\n        // 发起 ajax 获取到数据后调用 setState 方法更新组件的数据\n        var url = '../../fake-data/movies.json';\n        $.getJSON(url, function (movies) {\n            // 本地模拟返回太快了，模拟一下网络延迟\n            setTimeout(function() {\n                self.setState({\n                    movies: movies\n                });\n            }, 2000);\n        });\n    },\n</code></pre>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/set-state/\">在线演示 demo/set-state</a></p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/set-state/\">示例代码 demo/set-state</a></p>\n\n<h3 id=\"\">绑定事件</h3>\n\n<p>绑定事件时，我们可以使用 ref=\"name\" 属性对一个 DOM 节点进行标记，同时可以通过 React.findDOMNode(this.refs.name) 获取到这个节点的原生 DOM。</p>\n\n<pre><code>// 使用 render 方法自动渲染 DOM\n    render: function () {\n        var self = this;\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        var movies = this.state.movies.map(function (movie) {\n            return (\n                &lt;li className=\"movie-item\" key={movie.id}&gt;\n                    &lt;span className=\"movie-name\"&gt;{movie.name}&lt;/span&gt;\n                    -\n                    &lt;span className=\"movie-date\"&gt;{movie.date}&lt;/span&gt;\n                    &lt;a href=\"#\" onClick={self.onRemove.bind(null, movie)}&gt;删除&lt;/a&gt;\n                &lt;/li&gt;\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            &lt;div className=\"component-hello\"&gt;\n                &lt;h1 className=\"hello-title\"&gt;Hello React&lt;/h1&gt;\n                &lt;p  className=\"hello-desc\"&gt;React 初探&lt;/p&gt;\n\n                &lt;div className=\"hello-movies\"&gt;\n                    &lt;p2&gt;{title}&lt;/p2&gt;\n                    &lt;form onSubmit={this.onAdd}&gt;\n                        {/* 注意这里指定 ref 属性，然后我们就可以使用 this.refs.xxx 访问到 */}\n                        &lt;input type=\"text\" ref=\"name\" placehlder=\"输入你喜欢的电影\"/&gt;\n                        &lt;input type=\"text\" ref=\"date\" placeholder=\"上映时间\"/&gt;\n                        &lt;input type=\"submit\" value=\"提交\"/&gt;\n                    &lt;/form&gt;\n                    &lt;ul&gt;{movies}&lt;/ul&gt;\n                    {this.state.loading ? &lt;div&gt;大家好我是菊花, 我现在在转&lt;/div&gt; : null}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n    }\n</code></pre>\n\n<pre><code>onRemove: function (movie) {  \n        var id = movie.id;\n        console.log(movie)\n        // 删除这个 item\n        var movies = this.state.movies;\n        var len = movies.length;\n        var index = -1;\n        for(var i = 0; i &lt; len; i++) {\n            var _movie = movies[i];\n            if (_movie.id === id) {\n                index = i;\n                break;\n            }\n        }\n        if (index &gt; 0) {\n            movies.splice(index, 1);\n            this.setState({\n                movies: movies\n            });\n        }\n    },\n\n    onAdd: function (e) {\n        e.preventDefault();\n        var refs = this.refs;\n        var refName = React.findDOMNode(refs.name);\n        var refDate = React.findDOMNode(refs.date);\n        if (refName.value === '') {\n            alert('请输入电影名');\n            return;\n        } else if (refDate === '') {\n            alert('请输入上映时间');\n            return;\n        }\n        var movie = {\n            // 使用 findDOMNode 获取到原生的 DOM 对象\n            name: refName.value,\n            date: refDate.value,\n            id: Date.now() // 粗暴地以时间数字作为随机 id\n        };\n\n        var movies = this.state.movies;\n        movies.push(movie);\n        this.setState(movies);\n\n        refName.value = '';\n        refDate.value = '';\n    },\n</code></pre>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/events/\">在线演示 demo/events</a></p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/events/\">示例代码 demo/events</a></p>\n\n<h3 id=\"\">多组件与组件嵌套</h3>\n\n<p>一个组件就包含了 JSX 模板、数据维护、事件绑定的话，代码量已经够多了，这时候可以采用 AMD/CMD 的方式，将组件进行更细粒度的划分，可以以文件即组件的方式来编写，这里就不上 demo 了。</p>\n\n<h3 id=\"\">组件间通信</h3>\n\n<p>在 React 中，数据流是单向的，且组件之间可以嵌套，我们可以通过对最顶层组件传递属性方式，向下层组件传送数据。</p>\n\n<ul>\n<li><p>嵌套组件间，使用 this.props  属性向下传递数据</p></li>\n<li><p>独立组件之间，自行维护数据则需要自行维护一个全局数据存储，或者使用发布订阅地方式通知数据的更新。</p></li>\n</ul>\n\n<p>全局数据存储怎么做呢？可以理解为不同的组件获取的数据源一致，在组件的外部维护这个数据集合，或者干脆直接从服务器端获取。</p>\n\n<p>有人会说了，这样很不方便。</p>\n\n<p>但我觉得，既然是一个组件，那就配套有获取组件所需数据的方式，独立组件间有很强的数据依赖时，要么使用上述方式，要么可以简单粗暴，将独立组件用一个顶层组件包裹起来，转化为嵌套组件的关系，即可数据互通。</p>\n\n<pre><code>// 将子组件抽离出来\nvar LiWrapper = React.createClass({  \n    render: function () {\n        // 使用 this.props 获得传入组件的数据\n        var movie = this.props.movie;\n        return (\n            &lt;li&gt;{/* ... */}&lt;/li&gt;\n        )\n    }\n});\n\n// 使用 React.createClass 创建一个组件\nvar DemoComponent = React.createClass({  \n    // 使用 getInitialState 的返回值作为数据的默认值\n    getInitialState: function () {\n      // ...\n    },\n\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var movies = this.state.movies.map(function (movie) {\n            return (\n               &lt;LiWrapper movie={movie}/&gt;\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            &lt;div className=\"component-hello\"&gt;\n                {/* ... */}\n                &lt;div className=\"hello-movies\"&gt;\n                    &lt;ul&gt;{movies}&lt;/ul&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n// 将组件插入到网页中指定的位置\n// 在使用组件时传入 movies 数据\nvar movies = [// ...];  \nReact.render(&lt;DemoComponent movies={movies}/&gt;, document.getElementById('demo'));  \n</code></pre>\n\n<p><a href=\"http://laispace.github.io/react-explore/demo/comunications/index1.html\">在线演示 demo/comunications</a></p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/comunications/\">示例代码 demo/comunications</a></p>\n\n<h2 id=\"es6gulpwebpack\">打造丝滑的构建 使用 ES6  + gulp + webpack</h2>\n\n<p>ES6 和 gulp 的话就不多介绍啦。</p>\n\n<p>webpack 是一款新生的前端构建工具，兼容 AMD/CMD 等写法，支持 Browser 和 Node 端共享代码，在浏览器端可以像写 Node 一样方便的进行模块化的划分。</p>\n\n<p>在这里主要用 webpack 的两个插件：</p>\n\n<ul>\n<li><p>使用 jsx-loader 这个插件支持 jsx 语法解析</p></li>\n<li><p>使用 esx-loader 这个插件支持 es6 语法解析</p></li>\n</ul>\n\n<p>来看下简单目录结构：</p>\n\n<ul>\n<li>js/main.js 为入口文件，引入了两个组件。</li>\n</ul>\n\n<pre><code>var React = require('react');\n\nvar MovieListComponent = require('./components/movie-list');  \nvar HelloMessageComponent = require('./components/hello');\n\nvar movies = [  \n    {\n        id: 5,\n        name: '速度与激情5',\n        date: 2011\n    },\n    {\n        id: 4,\n        name: '速度与激情4',\n        date: 2009\n    }\n];\n\nvar wording = '保罗';\n\nvar MainComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div className=\"component-hello\"&gt;\n                &lt;HelloMessageComponent name={wording}/&gt;\n                &lt;MovieListComponent movies={movies} /&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\nReact.render(&lt;MainComponent /&gt;, document.getElementById('demo'));\n</code></pre>\n\n<ul>\n<li>js/components/movie-list.js 组件为 JSX 语法编写</li>\n</ul>\n\n<pre><code>var React = require('react');\n\n// 引入子组件\nvar MovieComponent = require('./movie');\n\n// 使用 React.createClass 创建一个组件\nvar MovieListComponent = React.createClass({  \n    // 使用 getInitialState 的返回值作为数据的默认值\n    getInitialState: function () {\n        return {\n            loading: true,\n            title: '我喜欢的电影',\n            // 注意这里将 外部传入的数据赋值给了 this.state\n            movies: []\n        }\n    },\n\n    // 使用 render 方法自动渲染 DOM\n    render: function () {\n        // this.state 用于存储数据\n        var title  = this.state.title;\n        // this.props 用于从组件外部传入数据\n        var movies = this.props.movies;\n        movies = movies.map(function (movie) {\n            return (\n                &lt;MovieComponent movie={movie}/&gt;\n            )\n        }.bind(this));// 注意这里 bind(this) 修正了上下文\n\n        return (\n            &lt;ul&gt;{movies}&lt;/ul&gt;\n        )\n    }\n});\n\nmodule.exports = MovieListComponent;  \n</code></pre>\n\n<ul>\n<li>js/components/hello.js 组件为 ES6 + JSX 语法编写</li>\n</ul>\n\n<pre><code>var React = require('react');\n\nclass HelloComponent extends React.Component {  \n    constructor(props) {\n        super(props);\n        this.state = {wording: '你好呀, '};\n    }\n    render() {\n        return &lt;div&gt;{this.state.wording} {this.props.name}&lt;/div&gt;;\n    }\n}\n\nmodule.exports = HelloComponent;\n</code></pre>\n\n<ul>\n<li>webpack.config.js 指定 jsx-loader 和 es6-loader</li>\n</ul>\n\n<pre><code>module.exports = {  \n    entry: ['./js/main.js'],\n    output: {\n        path: __dirname,\n        filename: 'js/bundle.js'\n    },\n    module: {\n        loaders: [\n            { test: /\\.js$/, loader: 'es6-loader' },\n            { test: /\\.js$/, loader: 'jsx-loader' }\n        ]\n    }\n};\n</code></pre>\n\n<ul>\n<li>gulpfile.js 在这里配置 webpack 任务，启动文件监听</li>\n</ul>\n\n<pre><code>var gulp = require('gulp');  \nvar livereload = require('gulp-livereload');  \nvar webpack = require(\"gulp-webpack\");\n\nvar webpackConfig = require('./webpack.config');\n\ngulp.task(\"webpack\", function() {  \n    return gulp.src('./js/main.js')\n        .pipe(webpack(webpackConfig))\n        .pipe(gulp.dest('.'));\n});\n\ngulp.task('watch', function() {  \n    livereload.listen();\n    gulp.watch(['js/**/*.js', '!js/bundle.js'], ['webpack']);\n});\n\ngulp.task('default', [  \n    'webpack',\n    'watch'\n]);\n</code></pre>\n\n<ul>\n<li>index.html 示例页面，引入 webpack 打包后的 js/bundle.js</li>\n</ul>\n\n<pre><code>&lt;!-- React 真实 DOM 将会插入到这里 --&gt;  \n&lt;div id=\"demo\"&gt;&lt;/div&gt;  \n&lt;script src=\"./js/bundle.js\"&gt;&lt;/script&gt;  \n</code></pre>\n\n<p>在 js/main.js 中引入两个不同的组件，然后在 webpack.config.js 中指定编译 JSX 和 ES6 的 loader 工具，使用 gulp 监听 js/ 中文件变化，自动编译出的 js/bundle.js 将被 index.html 引用。</p>\n\n<p>嗯，再在 webpack 中加入各种你喜欢的 loader，在 gulp 中加上各种 css、js、img 的处理任务，编写代码，自动重新编译，纵享丝滑。</p>\n\n<p><a href=\"https://github.com/laispace/react-explore/tree/master/demo/webpack/\">示例代码</a></p>\n\n<h2 id=\"\">零碎总结</h2>\n\n<p>文章到这里应该就算结束了，接下来是一些在学习过程中记下来的几个小点，也分享给大家。</p>\n\n<h3 id=\"jsx\">简单理解 JSX 语法</h3>\n\n<p>JSX 把 JS 和 HTML 糅合起来了，这么理解是不是感觉比较简单：</p>\n\n<blockquote>\n  <p>遇到 {} 包裹的是 JS，遇到 &lt;> 包裹的是 HTML</p>\n</blockquote>\n\n<h3 id=\"renderjsx\">render() 中 返回的的 JSX 模板需要一个根元素包裹起来</h3>\n\n<p>比如：</p>\n\n<pre><code>// 错误的写法\nvar MyComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;h1&gt;速度与激情7&lt;/h1&gt;\n            &lt;p&gt;致敬保罗&lt;/p&gt;\n        )\n    }\n});\n</code></pre>\n\n<p>应该写成：</p>\n\n<pre><code>// 正确的写法\nvar MyComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div&gt;\n                &lt;h1&gt;速度与激情7&lt;/h1&gt;\n                &lt;p&gt;致敬保罗&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n</code></pre>\n\n<h3 id=\"\">几个重要方法</h3>\n\n<ul>\n<li>render() 返回的是一系列嵌套的组件\nthis.props 获取父组件传递给子组件的数据 <br />\nthis.setState({data: data}); 用于动态更新状态，设置数据（设置后UI会自动刷新）  </li>\n<li>getInitialState() 在整个组件的生命周期中只会执行一次，用于初始化数据</li>\n<li>componentDidMount 会在 render 后自动调用，用于异步获取数据，更新数据</li>\n</ul>\n\n<h3 id=\"\">操作数据的流程</h3>\n\n<ol>\n<li>gitInitialState() 初始化数据  </li>\n<li>render() 渲染初始化数据  </li>\n<li>componentDidMount() 异步获取数据  </li>\n<li>setState() 更新数据</li>\n</ol>\n\n<h3 id=\"\">理解一个组件的状态转换</h3>\n\n<p>每一个组件都可以理解为有一个简单的状态机。</p>\n\n<p>调用 setState(data, callback) 后，data 将会混入 this.state 中，数据得到了更新，render() 就会被调用，UI 就能被更新。</p>\n\n<h3 id=\"\">组件之间如何通信</h3>\n\n<pre><code>&lt;Parent&gt;&lt;Child /&gt;&lt;/Parent&gt;  \n</code></pre>\n\n<p>父组件可以获取到子组件：this.props.children</p>\n\n<h3 id=\"render\">render() 永远不要手动调用</h3>\n\n<p>render() 在 React 创建时会调用一次，在数据更新时调用 setState() 方法则会继续调用它来更新网页中的真实 DOM。</p>\n\n<h3 id=\"getinitial\">使用 getInitial() 设置默认值</h3>\n\n<p>这个方法返回的值会在组件初始化第一次调用 render() 时就被使用</p>\n\n<h3 id=\"classclassname\">class 是关键字，改用 className</h3>\n\n<pre><code>// 错误的写法\nvar MyComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div class=\"movie\"&gt;\n                &lt;h1&gt;速度与激情7&lt;/h1&gt;\n                &lt;p&gt;致敬保罗&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n</code></pre>\n\n<p>应该写成：</p>\n\n<pre><code>// 正确的写法\nvar MyComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div className=\"movie\"&gt;\n                &lt;h1&gt;速度与激情7&lt;/h1&gt;\n                &lt;p&gt;致敬保罗&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n</code></pre>\n\n<h3 id=\"\">组件名大写，不然不被识别</h3>\n\n<pre><code>// 错误的写法\nvar myComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div class=\"movie\"&gt;\n                &lt;h1&gt;速度与激情7&lt;/h1&gt;\n                &lt;p&gt;致敬保罗&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\nReact.render(&lt;myComponent /&gt;, document.getElementById('demo'));\n</code></pre>\n\n<p>应该写成：</p>\n\n<pre><code>// 正确的写法\nvar MyComponent = React.createClass({  \n    render: function () {\n        return (\n            &lt;div className=\"movie\"&gt;\n                &lt;h1&gt;速度与激情7&lt;/h1&gt;\n                &lt;p&gt;致敬保罗&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\nReact.render(&lt;MyComponent /&gt;, document.getElementById('demo'));  \n</code></pre>\n\n<h3 id=\"\">怎么隐藏或显示菊花</h3>\n\n<pre><code>var MyComponent = React.createClass({  \n    getInitial: function () {\n        loading: true\n    },\n    showLoading: function () {\n        this.setState({loading: true})\n    },\n    hideLoading: function () {\n        this.setState({loading: false})\n    },\n    render: function () {\n        return (\n            {\n                this.state.loading ?\n                &lt;div&gt;大家好我是菊花，我在转&lt;/div&gt;\n                :\n                null\n            }\n        )\n    }\n});\n</code></pre>\n\n<h3 id=\"html\">插入原生的 HTML 片段的方式</h3>\n\n<p>React 会为我们过滤 XSS，要让一段 HTML 片段直接显示出来，需要这样：</p>\n\n<pre><code>&lt;div dangerouslySetInnerHTML={{__html: 'First &amp;middot; Second'}} /&gt;  \n</code></pre>\n\n<h3 id=\"react\">让 React 支持移动触摸实践</h3>\n\n<pre><code>React.initializeTouchEvents(true);  \n</code></pre>\n\n<h3 id=\"\">处理表单</h3>\n\n<p>表单因为会因用户交互而变化，所以有特定的一些属性</p>\n\n<ul>\n<li>input 和 textarea 组件具有 value</li>\n<li>input[type=checkbox] 和 input[type=radio] 具有 checked</li>\n<li>option 具有 selected，如果要支持多选，可以传入数组：</li>\n</ul>\n\n<pre><code>&lt;select multiple={true} value={['B', 'C']}&gt;  \n</code></pre>\n\n<p>表单项具有 onChange 事件</p>\n\n<p>注意如果这么写：</p>\n\n<pre><code>render: function() {  \n    return &lt;input type=\"text\" value=\"Hello!\" /&gt;;\n  }\n</code></pre>\n\n<p>那每次 render 的时候 input 的 value 都会被重置为 \"Hello!\"，所以需要这么控制：</p>\n\n<pre><code>getInitialState: function() {  \n    return {value: 'Hello!'};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function() {\n    var value = this.state.value;\n    return &lt;input type=\"text\" value={value} onChange={this.handleChange} /&gt;;\n  }\n</code></pre>\n\n<p>利用这点，可以无缝地接入一些验证规则，比如限制文字为 140 字：</p>\n\n<pre><code>handleChange: function(event) {  \n   this.setState({value: event.target.value.substr(0, 140)});\n }\n</code></pre>\n\n<p>如果不想这么被控制呢？那就在返回 input 的时候，不要设置 value 属性，这样随着用户输入，value 不会被重置：</p>\n\n<pre><code> render: function() {\n    return &lt;input type=\"text\" /&gt;;\n  }\n ```\n也可以设置默认值：\n</code></pre>\n\n<p>render: function() { <br />\n    return <input type=\"text\" defaultValue=\"Hello!\" />;\n  }</p>\n\n<pre><code>除了 `defaultValue` 之外，还支持 `defaultChecked`\n\n### 理解虚拟 DOM\nReact 会在内存里维护一个代表 DOM  的结构，调用  \nrender 方法时才生成真正的 DOM 插入到网页中。\n\n\n### 理解组件的生命周期\n\n一个组件的声明周期可以理解为三个阶段：\n\n1. mounting     组件正在插入到 DOM 中  \n2. updating     组件正在重新注入新数据后更新到 DOM 中  \n3. unmounting 组件从 DOM 中移除\n\n\n#### mounting 阶段\n\n- getInitialState() 被调用，返回原始数据\n\n- componentWillMount() 在组件 mounting 前调用\n\n- componentDidMount() 在组件 mounting 完成后调用\n\n#### updating 阶段\n\n- componentWillReceiveProps(nextProps) 在接收到新的 props 时调用\n- shouldComponentUpdate(nextProps, nextState) 在组件需要更新 DOM 时调用，若这个函数返回 false 则告诉 React 不要更新\n- componentWillUpdate(nextProps, nextState) 在更新发生时调用，可以在这里调用 this.steState() 刷新数据\n- componentDidUpdate(prevProps, prevState) 在更新完成后调用\n\n#### unmounting 阶段\n- componentWillUnmount() 在组件移除时被调用，在这里可以对数据进行清理\n\n### 强制使用数据更新组件\nforceUpdate() 强制使用数据更新组件，而不用调用 this.setState()\n\n### 获取原生 DOM 元素\n`React.findDOMNode(component)` 返回原生的 DOM 元素\n注意要获取原生的 DOM 元素，必须在 render 被调用， 真正的 DOM 已经被插入到页面中时。\n\n\n### 理解 refs\n\n可以把 refs 理解为我们在 HTML 中的id，用于定位到指定的组件。\n</code></pre>\n\n<form onSubmit={this.onAdd}>  \n    {/* 注意这里指定 ref 属性，然后我们就可以使用 this.refs.xxx 访问到 */}\n    <input type=\"text\" ref=\"name\" placehlder=\"输入你喜欢的电影\"/>\n    <input type=\"text\" ref=\"date\" placeholder=\"上映时间\"/>\n    <input type=\"submit\" value=\"提交\"/>\n</form>  \n\n<pre><code>ref 属性可以是一个回调函数而不是名字，这个回调会在组件 mounted 后被调用。回调函数使用被引用的组件作为参数。  \n</code></pre>\n\n<p><input ref={ function(component){ React.findDOMNode(component).focus();} } /> <br />\n```\n注意不要在 render 方法中访问  refs 属性。</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429538578930,"created_by":1,"updated_at":1440212337833,"updated_by":1,"published_at":1429538658628,"published_by":1},{"id":579,"uuid":"636912f4-a332-47ca-8e70-6346a870eb30","title":"初探 performance - 监控网页与程序性能","slug":"explore-perormance","markdown":"使用 window.performance 提供了一组精确的数据，经过简单的计算就能得出一些网页性能数据。\n\n配合上报一些客户端浏览器的设备类型等数据，就可以实现简单的统计啦！\n\n额，先看下兼容性如何：[http://caniuse.com/#feat=nav-timing](http://caniuse.com/#feat=nav-timing)\n\n这篇文章中 Demo 的运行环境为最新的 Chrome 的控制台，如果你用的是其他浏览器，自查兼容性哈~\n\n先来看看在 Chrome 浏览器控制台中执行 `window.performance` 会出现什么：\n\n![](/content/images/2015/09/window-performance.jpg)\n\n# 简单解释下 performance 中的属性：\n先看下一个请求发出的整个过程中，各种环节的时间顺序：\n\n![](/content/images/2015/09/resource-timing-overview.png)\n```\n// 获取 performance 数据\nvar performance = {\n    // memory 是非标准属性，只在 Chrome 有\n    // 财富问题：我有多少内存\n    memory: {\n        usedJSHeapSize:  16100000, // JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize\n        totalJSHeapSize: 35100000, // 可使用的内存\n        jsHeapSizeLimit: 793000000 // 内存大小限制\n    },\n\n    //  哲学问题：我从哪里来？\n    navigation: {\n        redirectCount: 0, // 如果有重定向的话，页面通过几次重定向跳转而来\n        type: 0           // 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）\n                          // 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面\n                          // 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）\n                          // 255 即 TYPE_UNDEFINED    非以上方式进入的页面\n    },\n\n    timing: {\n        // 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等\n        navigationStart: 1441112691935,\n\n        // 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0\n        unloadEventStart: 0,\n\n        // 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳\n        unloadEventEnd: 0,\n\n        // 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0 \n        redirectStart: 0,\n\n        // 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0 \n        redirectEnd: 0,\n\n        // 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前\n        fetchStart: 1441112692155,\n\n        // DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n        domainLookupStart: 1441112692155,\n\n        // DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n        domainLookupEnd: 1441112692155,\n\n        // HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等\n        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间\n        connectStart: 1441112692155,\n\n        // HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等\n        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间\n        // 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过\n        connectEnd: 1441112692155,\n\n        // HTTPS 连接开始的时间，如果不是安全连接，则值为 0\n        secureConnectionStart: 0,\n\n        // HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存\n        // 连接错误重连时，这里显示的也是新建立连接的时间\n        requestStart: 1441112692158,\n\n        // HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存\n        responseStart: 1441112692686,\n\n        // HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存\n        responseEnd: 1441112692687,\n\n        // 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件\n        domLoading: 1441112692690,\n\n        // 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件\n        // 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源\n        domInteractive: 1441112693093,\n\n        // DOM 解析完成后，网页内资源加载开始的时间\n        // 在 DOMContentLoaded 事件抛出前发生\n        domContentLoadedEventStart: 1441112693093,\n\n        // DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）\n        domContentLoadedEventEnd: 1441112693101,\n\n        // DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件\n        domComplete: 1441112693214,\n\n        // load 事件发送给文档，也即 load 回调函数开始执行的时间\n        // 注意如果没有绑定 load 事件，值为 0\n        loadEventStart: 1441112693214,\n\n        // load 事件的回调函数执行完毕的时间\n        loadEventEnd: 1441112693215\n\n        // 字母顺序\n        // connectEnd: 1441112692155,\n        // connectStart: 1441112692155,\n        // domComplete: 1441112693214,\n        // domContentLoadedEventEnd: 1441112693101,\n        // domContentLoadedEventStart: 1441112693093,\n        // domInteractive: 1441112693093,\n        // domLoading: 1441112692690,\n        // domainLookupEnd: 1441112692155,\n        // domainLookupStart: 1441112692155,\n        // fetchStart: 1441112692155,\n        // loadEventEnd: 1441112693215,\n        // loadEventStart: 1441112693214,\n        // navigationStart: 1441112691935,\n        // redirectEnd: 0,\n        // redirectStart: 0,\n        // requestStart: 1441112692158,\n        // responseEnd: 1441112692687,\n        // responseStart: 1441112692686,\n        // secureConnectionStart: 0,\n        // unloadEventEnd: 0,\n        // unloadEventStart: 0\n    }\n};\n```\n\n具体的含义都在注释里说明了，接下来我们看下能用这些数据做什么？\n\n# 使用 performance.timing 信息简单计算出网页性能数据\n\n在注释中，我用【重要】标注了我个人认为比较有用的数据，用【原因】标注了为啥要重点关注这个数据\n\n```\n// 计算加载时间\nfunction getPerformanceTiming () {\n    var performance = window.performance;\n\n    if (!performance) {\n        // 当前浏览器不支持\n        console.log('你的浏览器不支持 performance 接口');\n        return;\n    }\n\n    var t = performance.timing;\n    var times = {};\n    \n    //【重要】页面加载完成的时间\n    //【原因】这几乎代表了用户等待页面可用的时间\n    times.loadPage = t.loadEventEnd - t.navigationStart;\n\n    //【重要】解析 DOM 树结构的时间\n    //【原因】反省下你的 DOM 树嵌套是不是太多了！\n    times.domReady = t.domComplete - t.responseEnd;\n\n    //【重要】重定向的时间\n    //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com\n    times.redirect = t.redirectEnd - t.redirectStart;\n\n    //【重要】DNS 查询时间\n    //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\n    // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            \n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n\n    //【重要】读取页面第一个字节的时间\n    //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\n    // TTFB 即 Time To First Byte 的意思\n    // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte\n    times.ttfb = t.responseStart - t.navigationStart;\n\n    //【重要】内容加载完成的时间\n    //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？\n    times.request = t.responseEnd - t.requestStart;\n\n    //【重要】执行 onload 回调函数的时间\n    //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\n    times.loadEvent = t.loadEventEnd - t.loadEventStart;\n\n    // DNS 缓存时间\n    times.appcache = t.domainLookupStart - t.fetchStart;\n\n    // 卸载页面的时间\n    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;\n\n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n\n    return times;\n}\n```\n\n# 使用performance.getEntries() 获取所有资源请求的时间数据\n这个函数返回的将是一个数组，包含了页面中所有的 HTTP 请求，这里拿第一个请求 `window.performance.getEntries()[0]` 举例。\n注意 HTTP 请求有可能命中本地缓存，所以请求响应的间隔将非常短\n可以看到，与 performance.timing 对比：\n没有与 DOM 相关的属性：\n\n- navigationStart\n\n- unloadEventStart\n\n- unloadEventEnd\n\n- domLoading\n\n- domInteractive\n\n- domContentLoadedEventStart\n\n- domContentLoadedEventEnd\n\n- domComplete\n\n- loadEventStart\n\n- loadEventEnd\n\n新增属性：\n\n- name\n\n- entryType\n\n- initiatorType\n\n- duration\n\n与 window.performance.timing 中包含的属性就不再介绍了：\n```\nvar entry = {\n    // 资源名称，也是资源的绝对路径\n    name: \"http://cdn.alloyteam.com/wp-content/themes/alloyteam/style.css\",\n    // 资源类型\n    entryType: \"resource\",\n    // 谁发起的请求\n    initiatorType: \"link\", // link 即 <link> 标签\n                           // script 即 <script>\n                           // redirect 即重定向\n    // 加载时间\n    duration: 18.13399999809917,\n   \n    redirectStart: 0,\n    redirectEnd: 0,\n    \n    fetchStart: 424.57699999795295,\n\n    domainLookupStart: 0,\n    domainLookupEnd: 0,\n\n    connectStart: 0,\n    connectEnd: 0,\n\n    secureConnectionStart: 0,\n\n    requestStart: 0,\n\n    responseStart: 0,\n    responseEnd: 442.7109999960521,\n\n    startTime: 424.57699999795295\n};\n```\n\n可以像 `getPerformanceTiming` 获取网页的时间一样，获取某个资源的时间：\n\n```\n// 计算加载时间\nfunction getEntryTiming (entry) {\n    var t = entry;\n    var times = {};\n    \n    // 重定向的时间\n    times.redirect = t.redirectEnd - t.redirectStart;\n\n    // DNS 查询时间\n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n\n    // 内容加载完成的时间\n    times.request = t.responseEnd - t.requestStart;\n\n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n\n    // 挂载 entry 返回\n    times.name = entry.name;\n    times.entryType = entry.entryType;\n    times.initiatorType = entry.initiatorType;\n    times.duration = entry.duration;\n    \n    return times;\n}\n\n// test\n// var entries = window.performance.getEntries();\n// entries.forEach(function (entry) {\n//     var times = getEntryTiming(entry);\n//     console.log(times);\n// });\n```\n\n# 使用 performance.now() 精确计算程序执行时间\n\n`performance.now()` 与 `Date.now()` 不同的是，返回了以微秒（百万分之一秒）为单位的时间，更加精准。\n\n并且与 `Date.now()` 会受系统程序执行阻塞的影响不同，`performance.now()` 的时间是以恒定速率递增的，不受系统时间的影响（系统时间可被人为或软件调整）。\n\n注意 `Date.now()` 输出的是 UNIX 时间，即距离 1970 的时间，而 `performance.now()` 输出的是相对于 `performance.timing.navigationStart`(页面初始化) 的时间。\n\n\n使用 `Date.now()` 的差值并非绝对精确，因为计算时间时受系统限制（可能阻塞）。但使用 `performance.now()` 的差值，并不影响我们计算程序执行的精确时间。\n\n```\n// 计算程序执行的精确时间\nfunction getFunctionTimeWithDate (func) {\n    var timeStart = Data.now();\n    \n    // 执行开始\n    func();\n    // 执行结束\n    var timeEnd = Data.now();\n    \n    // 返回执行时间\n    return (timeEnd - timeStart);\n}\nfunction getFunctionTimeWithPerformance (func) {\n    var timeStart = window.performance.now();\n    \n    // 执行开始\n    func();\n    // 执行结束\n    var timeEnd = window.performance.now();\n\n    // 返回执行时间\n    return (timeEnd - timeStart);\n}\n```\n\n# 使用 performance.mark() 也可以精确计算程序执行时间\n使用 `performance.mark()` 标记各种时间戳（就像在地图上打点），保存为各种测量值（测量地图上的点之间的距离），便可以批量地分析这些数据了。\n\n直接上示例代码看注释便明白：\n\n```\nfunction randomFunc (n) {\n    if (!n) {\n        // 生成一个随机数\n        n = ~~(Math.random() * 10000);\n    }\n    var nameStart = 'markStart' + n; \n    var nameEnd   = 'markEnd' + n; \n    // 函数执行前做个标记\n    window.performance.mark(nameStart);\n\n    for (var i = 0; i < n; i++) {\n        // do nothing\n    }\n\n    // 函数执行后再做个标记\n    window.performance.mark(nameEnd);\n\n    // 然后测量这个两个标记间的时间距离，并保存起来\n    var name = 'measureRandomFunc' + n;\n    window.performance.measure(name, nameStart, nameEnd);\n}\n\n// 执行三次看看\nrandomFunc();\nrandomFunc();\n// 指定一个名字\nrandomFunc(888);\n```\n\n```\n// 看下保存起来的标记 mark\nvar marks = window.performance.getEntriesByType('mark');\nconsole.log(marks);\n```\n![](/content/images/2015/09/performance-mark.jpg)\n\n```\n// 看下保存起来的测量 measure\nvar measure = window.performance.getEntriesByType('measure');\nconsole.log(measure);\n```\n![](/content/images/2015/09/performance-treasure.jpg)\n\n```\n// 看下我们自定义的测量\nvar entries = window.performance.getEntriesByName('measureRandomFunc888');\nconsole.log(entries);\n```\n![](/content/images/2015/09/performance-treasure1.jpg)\n\n可以看到，`for` 循环 `measureRandomFunc888` 的时候\n\n结束时间为: 4875.1199999969685 \n\n开始时间为：4875.112999987323\n\n执行时间为：4875.1199999969685 - 4875.112999987323 = 0.00700000964\n\n标记和测量用完了可以清除掉：\n\n```\n// 清除指定标记\nwindow.performance.clearMarks('markStart888');\n// 清除所有标记\nwindow.performance.clearMarks();\n\n// 清除指定测量\nwindow.performance.clearMeasures('measureRandomFunc');\n// 清除所有测量\nwindow.performance.clearMeasures();\n```\n\n当然 `performance.mark()` 只是提供了一些简便的测量方式，比如之前我们测量 domReady 是这么测的：\n```\n// 计算 domReady 时间\nvar t = performance.timing\nvar domReadyTime = t.domComplete - t.responseEnd;\nconsole.log(domReadyTime)\n```\n\n其实就可以写成：\n```\nwindow.performance.measure('domReady','responseEnd' , 'domComplete');\nvar domReadyMeasure = window.performance.getEntriesByName('domReady');\nconsole.log(domReadyMeasure);\n```\n![](/content/images/2015/09/performance-domready.jpg)\n\n# 抛砖引玉：performance 数据能干啥用？\n\n熟悉 Chrome 开发者工具的朋友应该知道：在开发环境下，其实我们自己打开 Chrome 的开发者工具，切换到网络面板，就能很详细的看到网页性能相关的数据。但当我们需要统计分析用户打开我们网页时的性能如何时，我们将 performance 原始信息或通过简单计算后的信息(如上面写到的 `getPerformanceTiming()` 和 `getEntryTiming()`) 上传到服务器，配合其他信息（如 HTTP 请求头信息），就完美啦~","html":"<p>使用 window.performance 提供了一组精确的数据，经过简单的计算就能得出一些网页性能数据。</p>\n\n<p>配合上报一些客户端浏览器的设备类型等数据，就可以实现简单的统计啦！</p>\n\n<p>额，先看下兼容性如何：<a href=\"http://caniuse.com/#feat=nav-timing\">http://caniuse.com/#feat=nav-timing</a></p>\n\n<p>这篇文章中 Demo 的运行环境为最新的 Chrome 的控制台，如果你用的是其他浏览器，自查兼容性哈~</p>\n\n<p>先来看看在 Chrome 浏览器控制台中执行 <code>window.performance</code> 会出现什么：</p>\n\n<p><img src=\"/content/images/2015/09/window-performance.jpg\" alt=\"\" /></p>\n\n<h1 id=\"performance\">简单解释下 performance 中的属性：</h1>\n\n<p>先看下一个请求发出的整个过程中，各种环节的时间顺序：</p>\n\n<p><img src=\"/content/images/2015/09/resource-timing-overview.png\" alt=\"\" /></p>\n\n<pre><code>// 获取 performance 数据\nvar performance = {  \n    // memory 是非标准属性，只在 Chrome 有\n    // 财富问题：我有多少内存\n    memory: {\n        usedJSHeapSize:  16100000, // JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize\n        totalJSHeapSize: 35100000, // 可使用的内存\n        jsHeapSizeLimit: 793000000 // 内存大小限制\n    },\n\n    //  哲学问题：我从哪里来？\n    navigation: {\n        redirectCount: 0, // 如果有重定向的话，页面通过几次重定向跳转而来\n        type: 0           // 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）\n                          // 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面\n                          // 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）\n                          // 255 即 TYPE_UNDEFINED    非以上方式进入的页面\n    },\n\n    timing: {\n        // 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等\n        navigationStart: 1441112691935,\n\n        // 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0\n        unloadEventStart: 0,\n\n        // 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳\n        unloadEventEnd: 0,\n\n        // 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0 \n        redirectStart: 0,\n\n        // 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0 \n        redirectEnd: 0,\n\n        // 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前\n        fetchStart: 1441112692155,\n\n        // DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n        domainLookupStart: 1441112692155,\n\n        // DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n        domainLookupEnd: 1441112692155,\n\n        // HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等\n        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间\n        connectStart: 1441112692155,\n\n        // HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等\n        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间\n        // 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过\n        connectEnd: 1441112692155,\n\n        // HTTPS 连接开始的时间，如果不是安全连接，则值为 0\n        secureConnectionStart: 0,\n\n        // HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存\n        // 连接错误重连时，这里显示的也是新建立连接的时间\n        requestStart: 1441112692158,\n\n        // HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存\n        responseStart: 1441112692686,\n\n        // HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存\n        responseEnd: 1441112692687,\n\n        // 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件\n        domLoading: 1441112692690,\n\n        // 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件\n        // 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源\n        domInteractive: 1441112693093,\n\n        // DOM 解析完成后，网页内资源加载开始的时间\n        // 在 DOMContentLoaded 事件抛出前发生\n        domContentLoadedEventStart: 1441112693093,\n\n        // DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）\n        domContentLoadedEventEnd: 1441112693101,\n\n        // DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件\n        domComplete: 1441112693214,\n\n        // load 事件发送给文档，也即 load 回调函数开始执行的时间\n        // 注意如果没有绑定 load 事件，值为 0\n        loadEventStart: 1441112693214,\n\n        // load 事件的回调函数执行完毕的时间\n        loadEventEnd: 1441112693215\n\n        // 字母顺序\n        // connectEnd: 1441112692155,\n        // connectStart: 1441112692155,\n        // domComplete: 1441112693214,\n        // domContentLoadedEventEnd: 1441112693101,\n        // domContentLoadedEventStart: 1441112693093,\n        // domInteractive: 1441112693093,\n        // domLoading: 1441112692690,\n        // domainLookupEnd: 1441112692155,\n        // domainLookupStart: 1441112692155,\n        // fetchStart: 1441112692155,\n        // loadEventEnd: 1441112693215,\n        // loadEventStart: 1441112693214,\n        // navigationStart: 1441112691935,\n        // redirectEnd: 0,\n        // redirectStart: 0,\n        // requestStart: 1441112692158,\n        // responseEnd: 1441112692687,\n        // responseStart: 1441112692686,\n        // secureConnectionStart: 0,\n        // unloadEventEnd: 0,\n        // unloadEventStart: 0\n    }\n};\n</code></pre>\n\n<p>具体的含义都在注释里说明了，接下来我们看下能用这些数据做什么？</p>\n\n<h1 id=\"performancetiming\">使用 performance.timing 信息简单计算出网页性能数据</h1>\n\n<p>在注释中，我用【重要】标注了我个人认为比较有用的数据，用【原因】标注了为啥要重点关注这个数据</p>\n\n<pre><code>// 计算加载时间\nfunction getPerformanceTiming () {  \n    var performance = window.performance;\n\n    if (!performance) {\n        // 当前浏览器不支持\n        console.log('你的浏览器不支持 performance 接口');\n        return;\n    }\n\n    var t = performance.timing;\n    var times = {};\n\n    //【重要】页面加载完成的时间\n    //【原因】这几乎代表了用户等待页面可用的时间\n    times.loadPage = t.loadEventEnd - t.navigationStart;\n\n    //【重要】解析 DOM 树结构的时间\n    //【原因】反省下你的 DOM 树嵌套是不是太多了！\n    times.domReady = t.domComplete - t.responseEnd;\n\n    //【重要】重定向的时间\n    //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com\n    times.redirect = t.redirectEnd - t.redirectStart;\n\n    //【重要】DNS 查询时间\n    //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\n    // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            \n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n\n    //【重要】读取页面第一个字节的时间\n    //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\n    // TTFB 即 Time To First Byte 的意思\n    // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte\n    times.ttfb = t.responseStart - t.navigationStart;\n\n    //【重要】内容加载完成的时间\n    //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？\n    times.request = t.responseEnd - t.requestStart;\n\n    //【重要】执行 onload 回调函数的时间\n    //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\n    times.loadEvent = t.loadEventEnd - t.loadEventStart;\n\n    // DNS 缓存时间\n    times.appcache = t.domainLookupStart - t.fetchStart;\n\n    // 卸载页面的时间\n    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;\n\n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n\n    return times;\n}\n</code></pre>\n\n<h1 id=\"performancegetentries\">使用performance.getEntries() 获取所有资源请求的时间数据</h1>\n\n<p>这个函数返回的将是一个数组，包含了页面中所有的 HTTP 请求，这里拿第一个请求 <code>window.performance.getEntries()[0]</code> 举例。\n注意 HTTP 请求有可能命中本地缓存，所以请求响应的间隔将非常短\n可以看到，与 performance.timing 对比：\n没有与 DOM 相关的属性：</p>\n\n<ul>\n<li><p>navigationStart</p></li>\n<li><p>unloadEventStart</p></li>\n<li><p>unloadEventEnd</p></li>\n<li><p>domLoading</p></li>\n<li><p>domInteractive</p></li>\n<li><p>domContentLoadedEventStart</p></li>\n<li><p>domContentLoadedEventEnd</p></li>\n<li><p>domComplete</p></li>\n<li><p>loadEventStart</p></li>\n<li><p>loadEventEnd</p></li>\n</ul>\n\n<p>新增属性：</p>\n\n<ul>\n<li><p>name</p></li>\n<li><p>entryType</p></li>\n<li><p>initiatorType</p></li>\n<li><p>duration</p></li>\n</ul>\n\n<p>与 window.performance.timing 中包含的属性就不再介绍了：</p>\n\n<pre><code>var entry = {  \n    // 资源名称，也是资源的绝对路径\n    name: \"http://cdn.alloyteam.com/wp-content/themes/alloyteam/style.css\",\n    // 资源类型\n    entryType: \"resource\",\n    // 谁发起的请求\n    initiatorType: \"link\", // link 即 &lt;link&gt; 标签\n                           // script 即 &lt;script&gt;\n                           // redirect 即重定向\n    // 加载时间\n    duration: 18.13399999809917,\n\n    redirectStart: 0,\n    redirectEnd: 0,\n\n    fetchStart: 424.57699999795295,\n\n    domainLookupStart: 0,\n    domainLookupEnd: 0,\n\n    connectStart: 0,\n    connectEnd: 0,\n\n    secureConnectionStart: 0,\n\n    requestStart: 0,\n\n    responseStart: 0,\n    responseEnd: 442.7109999960521,\n\n    startTime: 424.57699999795295\n};\n</code></pre>\n\n<p>可以像 <code>getPerformanceTiming</code> 获取网页的时间一样，获取某个资源的时间：</p>\n\n<pre><code>// 计算加载时间\nfunction getEntryTiming (entry) {  \n    var t = entry;\n    var times = {};\n\n    // 重定向的时间\n    times.redirect = t.redirectEnd - t.redirectStart;\n\n    // DNS 查询时间\n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n\n    // 内容加载完成的时间\n    times.request = t.responseEnd - t.requestStart;\n\n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n\n    // 挂载 entry 返回\n    times.name = entry.name;\n    times.entryType = entry.entryType;\n    times.initiatorType = entry.initiatorType;\n    times.duration = entry.duration;\n\n    return times;\n}\n\n// test\n// var entries = window.performance.getEntries();\n// entries.forEach(function (entry) {\n//     var times = getEntryTiming(entry);\n//     console.log(times);\n// });\n</code></pre>\n\n<h1 id=\"performancenow\">使用 performance.now() 精确计算程序执行时间</h1>\n\n<p><code>performance.now()</code> 与 <code>Date.now()</code> 不同的是，返回了以微秒（百万分之一秒）为单位的时间，更加精准。</p>\n\n<p>并且与 <code>Date.now()</code> 会受系统程序执行阻塞的影响不同，<code>performance.now()</code> 的时间是以恒定速率递增的，不受系统时间的影响（系统时间可被人为或软件调整）。</p>\n\n<p>注意 <code>Date.now()</code> 输出的是 UNIX 时间，即距离 1970 的时间，而 <code>performance.now()</code> 输出的是相对于 <code>performance.timing.navigationStart</code>(页面初始化) 的时间。</p>\n\n<p>使用 <code>Date.now()</code> 的差值并非绝对精确，因为计算时间时受系统限制（可能阻塞）。但使用 <code>performance.now()</code> 的差值，并不影响我们计算程序执行的精确时间。</p>\n\n<pre><code>// 计算程序执行的精确时间\nfunction getFunctionTimeWithDate (func) {  \n    var timeStart = Data.now();\n\n    // 执行开始\n    func();\n    // 执行结束\n    var timeEnd = Data.now();\n\n    // 返回执行时间\n    return (timeEnd - timeStart);\n}\nfunction getFunctionTimeWithPerformance (func) {  \n    var timeStart = window.performance.now();\n\n    // 执行开始\n    func();\n    // 执行结束\n    var timeEnd = window.performance.now();\n\n    // 返回执行时间\n    return (timeEnd - timeStart);\n}\n</code></pre>\n\n<h1 id=\"performancemark\">使用 performance.mark() 也可以精确计算程序执行时间</h1>\n\n<p>使用 <code>performance.mark()</code> 标记各种时间戳（就像在地图上打点），保存为各种测量值（测量地图上的点之间的距离），便可以批量地分析这些数据了。</p>\n\n<p>直接上示例代码看注释便明白：</p>\n\n<pre><code>function randomFunc (n) {  \n    if (!n) {\n        // 生成一个随机数\n        n = ~~(Math.random() * 10000);\n    }\n    var nameStart = 'markStart' + n; \n    var nameEnd   = 'markEnd' + n; \n    // 函数执行前做个标记\n    window.performance.mark(nameStart);\n\n    for (var i = 0; i &lt; n; i++) {\n        // do nothing\n    }\n\n    // 函数执行后再做个标记\n    window.performance.mark(nameEnd);\n\n    // 然后测量这个两个标记间的时间距离，并保存起来\n    var name = 'measureRandomFunc' + n;\n    window.performance.measure(name, nameStart, nameEnd);\n}\n\n// 执行三次看看\nrandomFunc();  \nrandomFunc();  \n// 指定一个名字\nrandomFunc(888);  \n</code></pre>\n\n<pre><code>// 看下保存起来的标记 mark\nvar marks = window.performance.getEntriesByType('mark');  \nconsole.log(marks);  \n</code></pre>\n\n<p><img src=\"/content/images/2015/09/performance-mark.jpg\" alt=\"\" /></p>\n\n<pre><code>// 看下保存起来的测量 measure\nvar measure = window.performance.getEntriesByType('measure');  \nconsole.log(measure);  \n</code></pre>\n\n<p><img src=\"/content/images/2015/09/performance-treasure.jpg\" alt=\"\" /></p>\n\n<pre><code>// 看下我们自定义的测量\nvar entries = window.performance.getEntriesByName('measureRandomFunc888');  \nconsole.log(entries);  \n</code></pre>\n\n<p><img src=\"/content/images/2015/09/performance-treasure1.jpg\" alt=\"\" /></p>\n\n<p>可以看到，<code>for</code> 循环 <code>measureRandomFunc888</code> 的时候</p>\n\n<p>结束时间为: 4875.1199999969685 </p>\n\n<p>开始时间为：4875.112999987323</p>\n\n<p>执行时间为：4875.1199999969685 - 4875.112999987323 = 0.00700000964</p>\n\n<p>标记和测量用完了可以清除掉：</p>\n\n<pre><code>// 清除指定标记\nwindow.performance.clearMarks('markStart888');  \n// 清除所有标记\nwindow.performance.clearMarks();\n\n// 清除指定测量\nwindow.performance.clearMeasures('measureRandomFunc');  \n// 清除所有测量\nwindow.performance.clearMeasures();  \n</code></pre>\n\n<p>当然 <code>performance.mark()</code> 只是提供了一些简便的测量方式，比如之前我们测量 domReady 是这么测的：</p>\n\n<pre><code>// 计算 domReady 时间\nvar t = performance.timing  \nvar domReadyTime = t.domComplete - t.responseEnd;  \nconsole.log(domReadyTime)  \n</code></pre>\n\n<p>其实就可以写成：</p>\n\n<pre><code>window.performance.measure('domReady','responseEnd' , 'domComplete');  \nvar domReadyMeasure = window.performance.getEntriesByName('domReady');  \nconsole.log(domReadyMeasure);  \n</code></pre>\n\n<p><img src=\"/content/images/2015/09/performance-domready.jpg\" alt=\"\" /></p>\n\n<h1 id=\"performance\">抛砖引玉：performance 数据能干啥用？</h1>\n\n<p>熟悉 Chrome 开发者工具的朋友应该知道：在开发环境下，其实我们自己打开 Chrome 的开发者工具，切换到网络面板，就能很详细的看到网页性能相关的数据。但当我们需要统计分析用户打开我们网页时的性能如何时，我们将 performance 原始信息或通过简单计算后的信息(如上面写到的 <code>getPerformanceTiming()</code> 和 <code>getEntryTiming()</code>) 上传到服务器，配合其他信息（如 HTTP 请求头信息），就完美啦~</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441112443569,"created_by":1,"updated_at":1441264877148,"updated_by":1,"published_at":1441264877151,"published_by":1},{"id":580,"uuid":"54d67f0d-4051-4992-98df-574687e1b6c8","title":"Python 笔记","slug":"python-bi-ji","markdown":"```\n#!/usr/bin/env python\n\n## 解决中文乱码问题\n# -*- coding: utf-8 -*-\n\n## 获取主机名和IPv4地址\nimport socket\nhost_name = socket.gethostname()\nprint '主机名是 %s' %host_name\nip_address = socket.gethostbyname(host_name)\nprint 'IP 地址是 %s' %ip_address\n\n## 获取程序的进程名\nprint '进程名是 %s' %__name__\n\n## 获取远程主机的 IP 地址\nimport socket\nremote_host = 'www.laispace.com'\ntry:\n    print '远程主机 IP 是 %s' %socket.gethostbyname(remote_host)\nexcept socket.error, err_msg:\n    # 如果是不存在的域名则会报错\n    print '%s: %s' %(remote_host, err_msg)   \n\n## 转换 IPV4 地址为其他格式\nimport socket\nfrom binascii import hexlify\nips = ['127.0.0.1', '192.168.0.1']\nfor ip_address in ips:\n    # 转换为32位二进制格式\n    packed_ip_address   = socket.inet_aton(ip_address)\n    # 转换32位二进制格式为点式格式（如 127.0.0.1）\n    # hexlify() 表示以十六进制形式表示二进制数据\n    unpacked_ip_address = socket.inet_ntoa(packed_ip_address)\n    print 'IP 地址是 %s => Packed 后为 %s, Unpacked 后为 %s' %(ip_address, hexlify(packed_ip_address), unpacked_ip_address)   \n\n\n## 通过指定的端口和协议找到服务名\nimport socket\n# 使用 udp 协议\nprint '端口是 %s => 服务名是 %s' %(53, socket.getservbyport(53, 'udp'))\n# 使用 tcp 协议\nprotocol_name = 'tcp'\nports = [80, 25]\nfor port in ports:\n    server_name = socket.getservbyport(port, protocol_name)\n    print '端口是 %s => 服务名是 %s' %(port, server_name)\n\n## 转换主机字节序和网络字节序\n# 函数名中的 n 表示网络，h 表示主机，l 表示长整形，s 表示短整形\nimport socket\ndata = 1234\n# 32-bit\nprint '32-bit转换，原始数据 %s => 长主机字节序列 %s, 网络字节序列 %s' %(data, socket.ntohl(data), socket.htonl(data))\n# 16-bit\nprint '16-bit转换，原始数据 %s => 长主机字节序列 %s, 网络字节序列 %s' %(data, socket.ntohs(data), socket.htons(data))\n\n## 获取/设定 socket 超时时间\nimport socket\n# 先创建一个 socket\n# 第一个蚕食是地址族，第二个参数是套接字类型\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 获取超时\nprint '默认的 socket 超时为 %s' %s.gettimeout()\n# 设置超时\ns.settimeout(100)\nprint '设置 socket 超时为 %s' %s.gettimeout()\n\n## 获取服务器时间\n# ntp 是 Network Time Protocol 网络时间协议\nimport ntplib\nfrom time import ctime\nntp_client = ntplib.NTPClient()\nresponse = ntp_client.request('pool.ntp.org')\nprint ctime(response.tx_time)\n\n```\n","html":"<pre><code>#!/usr/bin/env python\n\n## 解决中文乱码问题\n# -*- coding: utf-8 -*-\n\n## 获取主机名和IPv4地址\nimport socket  \nhost_name = socket.gethostname()  \nprint '主机名是 %s' %host_name  \nip_address = socket.gethostbyname(host_name)  \nprint 'IP 地址是 %s' %ip_address\n\n## 获取程序的进程名\nprint '进程名是 %s' %__name__\n\n## 获取远程主机的 IP 地址\nimport socket  \nremote_host = 'www.laispace.com'  \ntry:  \n    print '远程主机 IP 是 %s' %socket.gethostbyname(remote_host)\nexcept socket.error, err_msg:  \n    # 如果是不存在的域名则会报错\n    print '%s: %s' %(remote_host, err_msg)   \n\n## 转换 IPV4 地址为其他格式\nimport socket  \nfrom binascii import hexlify  \nips = ['127.0.0.1', '192.168.0.1']  \nfor ip_address in ips:  \n    # 转换为32位二进制格式\n    packed_ip_address   = socket.inet_aton(ip_address)\n    # 转换32位二进制格式为点式格式（如 127.0.0.1）\n    # hexlify() 表示以十六进制形式表示二进制数据\n    unpacked_ip_address = socket.inet_ntoa(packed_ip_address)\n    print 'IP 地址是 %s =&gt; Packed 后为 %s, Unpacked 后为 %s' %(ip_address, hexlify(packed_ip_address), unpacked_ip_address)   \n\n\n## 通过指定的端口和协议找到服务名\nimport socket  \n# 使用 udp 协议\nprint '端口是 %s =&gt; 服务名是 %s' %(53, socket.getservbyport(53, 'udp'))  \n# 使用 tcp 协议\nprotocol_name = 'tcp'  \nports = [80, 25]  \nfor port in ports:  \n    server_name = socket.getservbyport(port, protocol_name)\n    print '端口是 %s =&gt; 服务名是 %s' %(port, server_name)\n\n## 转换主机字节序和网络字节序\n# 函数名中的 n 表示网络，h 表示主机，l 表示长整形，s 表示短整形\nimport socket  \ndata = 1234  \n# 32-bit\nprint '32-bit转换，原始数据 %s =&gt; 长主机字节序列 %s, 网络字节序列 %s' %(data, socket.ntohl(data), socket.htonl(data))  \n# 16-bit\nprint '16-bit转换，原始数据 %s =&gt; 长主机字节序列 %s, 网络字节序列 %s' %(data, socket.ntohs(data), socket.htons(data))\n\n## 获取/设定 socket 超时时间\nimport socket  \n# 先创建一个 socket\n# 第一个蚕食是地址族，第二个参数是套接字类型\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  \n# 获取超时\nprint '默认的 socket 超时为 %s' %s.gettimeout()  \n# 设置超时\ns.settimeout(100)  \nprint '设置 socket 超时为 %s' %s.gettimeout()\n\n## 获取服务器时间\n# ntp 是 Network Time Protocol 网络时间协议\nimport ntplib  \nfrom time import ctime  \nntp_client = ntplib.NTPClient()  \nresponse = ntp_client.request('pool.ntp.org')  \nprint ctime(response.tx_time)\n</code></pre>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441377559026,"created_by":1,"updated_at":1442249995392,"updated_by":1,"published_at":null,"published_by":null},{"id":581,"uuid":"72aa25a4-f2c7-4312-8e5e-f34979d22b47","title":"Linux 下忘记 mysql 密码的解决办法","slug":"reset-mysql-password","markdown":"1. 修改MySQL的登录设置： \n\n```\n$ vi /etc/my.cnf \n```\n\n在[mysqld]的段中加上一句：skip-grant-tables \n\n如： \n\n```\n[mysqld] \ndatadir=/var/lib/mysql \nsocket=/var/lib/mysql/mysql.sock \nskip-grant-tables \n```\n2．重新启动 mysqld \n\n```\n$ /etc/init.d/mysqld restart \n```\n\n3．修改MySQL的root密码 \n\n```\n$ /usr/bin/mysql \n```\n\n```\nmysql> USE mysql ; \n```\n\n```\nmysql> UPDATE user SET Password = password ( 'new-password-here' ) WHERE User = 'root' ; \n```\n\n```\nmysql> flush privileges ; \n```\n\n``` \nmysql> quit \n``` \n\n4．取消无密码登录\n\n```\n$ vi /etc/my.cnf \n```\n\n删除刚刚加上的 skip-grant-tables \n \n5．重启 mysqld \n\n```\n$ /etc/init.d/mysqld restart \n```","html":"<ol>\n<li>修改MySQL的登录设置： </li>\n</ol>\n\n<pre><code>$ vi /etc/my.cnf \n</code></pre>\n\n<p>在[mysqld]的段中加上一句：skip-grant-tables </p>\n\n<p>如： </p>\n\n<pre><code>[mysqld] \ndatadir=/var/lib/mysql  \nsocket=/var/lib/mysql/mysql.sock  \nskip-grant-tables  \n</code></pre>\n\n<p>2．重新启动 mysqld </p>\n\n<pre><code>$ /etc/init.d/mysqld restart \n</code></pre>\n\n<p>3．修改MySQL的root密码 </p>\n\n<pre><code>$ /usr/bin/mysql \n</code></pre>\n\n<pre><code>mysql&gt; USE mysql ;  \n</code></pre>\n\n<pre><code>mysql&gt; UPDATE user SET Password = password ( 'new-password-here' ) WHERE User = 'root' ;  \n</code></pre>\n\n<pre><code>mysql&gt; flush privileges ;  \n</code></pre>\n\n<pre><code class=\"language- \">mysql&gt; quit  \n</code></pre>\n\n<p>4．取消无密码登录</p>\n\n<pre><code>$ vi /etc/my.cnf \n</code></pre>\n\n<p>删除刚刚加上的 skip-grant-tables </p>\n\n<p>5．重启 mysqld </p>\n\n<pre><code>$ /etc/init.d/mysqld restart \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441699483663,"created_by":1,"updated_at":1441764224851,"updated_by":1,"published_at":1441763553289,"published_by":1},{"id":582,"uuid":"389ec8f1-b059-4d80-bc5a-38e619912baa","title":"linux 命令 - netstat","slug":"netstat","markdown":"# netstat \n\n`netstat` 是 linux 中列出网络连接信息的一个命令\n\n### netstat -a 查看所有连接\n\n### netstat -at 只列出 TCP 连接\n\n### netstat -au 只列出 UDP 连接\n\n### netstat -an 禁止 DNS 查找\n\n默认情况下，`netstat` 会进行 DNS 反向查询，查出每个 ip 对应的 Host 名字，这样输出信息则很慢。使用 `-n` 参数禁止 DNS 查找，加快输出：\n\n```\n$ netstat -ant\n```\n\n### netstat -tnl 只列出监听中的连接\n\n使用 `-l` 查看正在监听的连接，注意把 `-a` 去掉。\n\n### sudo netstat -ltpe 获取使用这些连接的进程名/用户\n注意要用 `sudo` 权限，才能列出 `root` 用户起的一些连接。\n注意如果加上了 `-n` 参数，则列出的是用户ID，而不是用户名了。\n使用 `-p` 查看进程。\n使用 `-e` 查看用户。\n\n### netstat -s\n\n# 实用命令\n\n## netstat -atnp | grep ESTA 查看激活的连接\n\n## watch -d -n0 \"netstat -atnp | grep ESTA\" 即时输出激活的连接\n\n## sudo netstat -aple | grep ntp 查看 ntp 服务是否开启\n\n","html":"<h1 id=\"netstat\">netstat</h1>\n\n<p><code>netstat</code> 是 linux 中列出网络连接信息的一个命令</p>\n\n<h3 id=\"netstata\">netstat -a 查看所有连接</h3>\n\n<h3 id=\"netstatattcp\">netstat -at 只列出 TCP 连接</h3>\n\n<h3 id=\"netstatauudp\">netstat -au 只列出 UDP 连接</h3>\n\n<h3 id=\"netstatandns\">netstat -an 禁止 DNS 查找</h3>\n\n<p>默认情况下，<code>netstat</code> 会进行 DNS 反向查询，查出每个 ip 对应的 Host 名字，这样输出信息则很慢。使用 <code>-n</code> 参数禁止 DNS 查找，加快输出：</p>\n\n<pre><code>$ netstat -ant\n</code></pre>\n\n<h3 id=\"netstattnl\">netstat -tnl 只列出监听中的连接</h3>\n\n<p>使用 <code>-l</code> 查看正在监听的连接，注意把 <code>-a</code> 去掉。</p>\n\n<h3 id=\"sudonetstatltpe\">sudo netstat -ltpe 获取使用这些连接的进程名/用户</h3>\n\n<p>注意要用 <code>sudo</code> 权限，才能列出 <code>root</code> 用户起的一些连接。\n注意如果加上了 <code>-n</code> 参数，则列出的是用户ID，而不是用户名了。\n使用 <code>-p</code> 查看进程。\n使用 <code>-e</code> 查看用户。</p>\n\n<h3 id=\"netstats\">netstat -s</h3>\n\n<h1 id=\"\">实用命令</h1>\n\n<h2 id=\"netstatatnpgrepesta\">netstat -atnp | grep ESTA 查看激活的连接</h2>\n\n<h2 id=\"watchdn0netstatatnpgrepesta\">watch -d -n0 \"netstat -atnp | grep ESTA\" 即时输出激活的连接</h2>\n\n<h2 id=\"sudonetstataplegrepntpntp\">sudo netstat -aple | grep ntp 查看 ntp 服务是否开启</h2>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441709945781,"created_by":1,"updated_at":1441764186287,"updated_by":1,"published_at":1441709940000,"published_by":1},{"id":583,"uuid":"68855648-f8c7-4b35-8587-c8024b8401f4","title":"python 简单爬虫与反爬虫技巧","slug":"js-shi-xian-python-ji-chu-shu-ju-lei-xing","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442250018207,"created_by":1,"updated_at":1442250165370,"updated_by":1,"published_at":null,"published_by":null},{"id":584,"uuid":"6b3126db-1a62-490b-8af8-428f0b6c4707","title":"Python 标准库 itertools 介绍","slug":"itertools-permutationsabc-3","markdown":"itertools.permutations('ABC', 3)\n\nlist(itertools.product('ABC', '123'))\n函数返回包含两个序列的笛卡尔乘积的迭代器。\n\nlist(itertools.combinations('ABC', 2))\n函数返回包含给定序列的给定长度的所有组合的迭代器\n\ngroups = itertools.groupby(names, len)\n函数接受一个序列和一个key 函数, 并且返回一个生成二元组的迭代器。\n\nlist(itertools.chain(range(0, 3), range(10, 13)))\n\ntuple(zip(characters, guess))\n\n>>> translation_table = {ord('A'): ord('O')}  ①\n>>> translation_table                         ②\n{65: 79}\n>>> 'MARK'.translate(translation_table)       ③\n'MORK'","html":"<p>itertools.permutations('ABC', 3)</p>\n\n<p>list(itertools.product('ABC', '123')) <br />\n函数返回包含两个序列的笛卡尔乘积的迭代器。</p>\n\n<p>list(itertools.combinations('ABC', 2)) <br />\n函数返回包含给定序列的给定长度的所有组合的迭代器</p>\n\n<p>groups = itertools.groupby(names, len) <br />\n函数接受一个序列和一个key 函数, 并且返回一个生成二元组的迭代器。</p>\n\n<p>list(itertools.chain(range(0, 3), range(10, 13)))</p>\n\n<p>tuple(zip(characters, guess))</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>translation<em>table = {ord('A'): ord('O')}  ①\n      translation</em>table                         ②\n      {65: 79}\n      'MARK'.translate(translation_table)       ③\n      'MORK'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442250169684,"created_by":1,"updated_at":1442251563510,"updated_by":1,"published_at":null,"published_by":null},{"id":585,"uuid":"02df96c4-cfb6-441b-b3e8-3420a5ac164e","title":"Python 标准库 subprocess 介绍","slug":"python-biao-zhun-ku-subprocess-jie-shao","markdown":"import subprocess\neval(\"subprocess.getoutput('ls ~')\")\n\nsubprocess 模块允许你执行任何shell命令并以字符串形式获得输出。","html":"<p>import subprocess <br />\neval(\"subprocess.getoutput('ls ~')\")</p>\n\n<p>subprocess 模块允许你执行任何shell命令并以字符串形式获得输出。</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442251868466,"created_by":1,"updated_at":1442252054244,"updated_by":1,"published_at":null,"published_by":null},{"id":586,"uuid":"6abde600-866c-4b11-a971-6285e3a98a9c","title":"Python 爬虫技巧与反爬虫策略","slug":"python-pa-chong-ji-qiao-yu-fan-pa-chong-ce-lue","markdown":"- 超时\n- 代理\n- 403/404/302/400/502/\n- 模拟人类\n- 多线程/多核","html":"<ul>\n<li>超时</li>\n<li>代理</li>\n<li>403/404/302/400/502/</li>\n<li>模拟人类</li>\n<li>多线程/多核</li>\n</ul>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442252170384,"created_by":1,"updated_at":1442252311583,"updated_by":1,"published_at":null,"published_by":null},{"id":587,"uuid":"11986238-d532-4790-a57f-3012d9123315","title":"Python 标准库 unittest 单元测试","slug":"python-biao-zhun-ku-unittest-dan-yuan-ce-shi","markdown":"测试驱动开发 或 tdd。编写测试尚未编写代码的代码。\n\n单元测试是整个以测试为中心的开发策略中的一个重要部分。编写单元测试应该安排在项目的早期，同时要让它随同代码及需求变更一起更新。很多人都坚持测试代码应该先于被测试代码的\n\n在编写代码之前，通过编写单元测试来强迫你使用有用的方式细化你的需求。\n在编写代码时，单元测试可以使你避免过度编码。当所有测试用例通过时，实现的方法就完成了。\n重构代码时，单元测试用例有助于证明新版本的代码跟老版本功能是一致的。\n\n一个测试用例应该可以：\n\n……完全自动运行，而不需要人工干预。单元测试几乎是全自动的。\n……自主判断被测试的方法是通过还是失败，而不需要人工解释结果。\n……独立运行，而不依赖其它测试用例（即使测试的是同样的方法）。即，每一个测试用例都是一个孤岛。\n\nhttp://woodpecker.org.cn/diveintopython3/unit-testing.html","html":"<p>测试驱动开发 或 tdd。编写测试尚未编写代码的代码。</p>\n\n<p>单元测试是整个以测试为中心的开发策略中的一个重要部分。编写单元测试应该安排在项目的早期，同时要让它随同代码及需求变更一起更新。很多人都坚持测试代码应该先于被测试代码的</p>\n\n<p>在编写代码之前，通过编写单元测试来强迫你使用有用的方式细化你的需求。\n在编写代码时，单元测试可以使你避免过度编码。当所有测试用例通过时，实现的方法就完成了。\n重构代码时，单元测试用例有助于证明新版本的代码跟老版本功能是一致的。</p>\n\n<p>一个测试用例应该可以：</p>\n\n<p>……完全自动运行，而不需要人工干预。单元测试几乎是全自动的。\n……自主判断被测试的方法是通过还是失败，而不需要人工解释结果。\n……独立运行，而不依赖其它测试用例（即使测试的是同样的方法）。即，每一个测试用例都是一个孤岛。</p>\n\n<p><a href=\"http://woodpecker.org.cn/diveintopython3/unit-testing.html\">http://woodpecker.org.cn/diveintopython3/unit-testing.html</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442278659545,"created_by":1,"updated_at":1442278832099,"updated_by":1,"published_at":null,"published_by":null},{"id":588,"uuid":"dc890a6b-a415-4a22-886e-4182cc99fafc","title":"Python Beautiful Soup 介绍","slug":"python-beautiful-soup-jie-shao","markdown":"http://www.crummy.com/software/BeautifulSoup/\n\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/","html":"<p><a href=\"http://www.crummy.com/software/BeautifulSoup/\">http://www.crummy.com/software/BeautifulSoup/</a></p>\n\n<p><a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/\">http://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442335379810,"created_by":1,"updated_at":1442335395419,"updated_by":1,"published_at":null,"published_by":null}],"users":[{"id":1,"uuid":"163cfcd9-8cc9-4433-918c-ec659b620c40","name":"laispace","slug":"laispace","password":"$2a$10$ksPcOcFkQB3laHxATZZHs.BMDocVZJew4QvgDuA4Dq1OFPkztjVv.","email":"laixiaolai@foxmail.com","image":"//www.gravatar.com/avatar/6273dc47f9d1bc79de97d5f2f44ad4d1?s=250&d=mm&r=x","cover":null,"bio":"A hard-working guy.","website":"http://laispace.com","location":"China","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1450414378429,"created_at":1421563202487,"created_by":1,"updated_at":1450414378429,"updated_by":1}],"roles":[{"id":1,"uuid":"a1dd7b70-10d2-44be-bb01-3893be798d0b","name":"Administrator","description":"Administrators","created_at":1421563199489,"created_by":1,"updated_at":1421563199489,"updated_by":1},{"id":2,"uuid":"c3cfb715-dc73-41da-ba32-e0e95983b2f9","name":"Editor","description":"Editors","created_at":1421563199490,"created_by":1,"updated_at":1421563199490,"updated_by":1},{"id":3,"uuid":"25381e46-4561-4ea1-9379-d301a98fe08c","name":"Author","description":"Authors","created_at":1421563199490,"created_by":1,"updated_at":1421563199490,"updated_by":1},{"id":4,"uuid":"d208b3dd-f886-495a-b120-18a8d6e82699","name":"Owner","description":"Blog Owner","created_at":1421563199490,"created_by":1,"updated_at":1421563199490,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"e9e6d258-1e6b-439f-8165-8c6215942fd0","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1421563199609,"created_by":1,"updated_at":1421563199609,"updated_by":1},{"id":2,"uuid":"efcdd993-aade-4b06-b01f-34a6cbfc5111","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1421563199623,"created_by":1,"updated_at":1421563199623,"updated_by":1},{"id":3,"uuid":"23f10835-c0dd-4d31-9233-c7c0c43baed7","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1421563199629,"created_by":1,"updated_at":1421563199629,"updated_by":1},{"id":4,"uuid":"afe87a2f-cc6d-4492-aecb-6ea88e4284fc","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1421563199636,"created_by":1,"updated_at":1421563199636,"updated_by":1},{"id":5,"uuid":"1317ec4d-568c-42e3-a4e0-32952e189396","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1421563199655,"created_by":1,"updated_at":1421563199655,"updated_by":1},{"id":6,"uuid":"235db4db-4d1d-45d0-b96d-cdcd1df53d2c","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1421563199661,"created_by":1,"updated_at":1421563199661,"updated_by":1},{"id":7,"uuid":"67f23423-83e6-4acf-b884-3a3b40575379","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1421563199665,"created_by":1,"updated_at":1421563199665,"updated_by":1},{"id":8,"uuid":"147820bc-8655-4a29-b2b7-2f8e7570e7c1","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1421563199671,"created_by":1,"updated_at":1421563199671,"updated_by":1},{"id":9,"uuid":"68cf57f7-1891-474f-894b-658ed5949f69","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1421563199679,"created_by":1,"updated_at":1421563199679,"updated_by":1},{"id":10,"uuid":"136a5b65-a5a1-45bd-b720-5688585adf96","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1421563199686,"created_by":1,"updated_at":1421563199686,"updated_by":1},{"id":11,"uuid":"db8cd79d-e4cc-40c0-9f34-09b6bca6708d","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1421563199694,"created_by":1,"updated_at":1421563199694,"updated_by":1},{"id":12,"uuid":"23096060-690d-4c35-addd-5c01604d3a76","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1421563199698,"created_by":1,"updated_at":1421563199698,"updated_by":1},{"id":13,"uuid":"f90c2149-e1f1-40ab-9a4c-a6b481ef1421","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1421563199704,"created_by":1,"updated_at":1421563199704,"updated_by":1},{"id":14,"uuid":"391b1a35-619d-4c28-b398-f1c2d82b17ca","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1421563199708,"created_by":1,"updated_at":1421563199708,"updated_by":1},{"id":15,"uuid":"7d6d2bed-0011-4125-9d5a-0ada70a652b4","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1421563199722,"created_by":1,"updated_at":1421563199722,"updated_by":1},{"id":16,"uuid":"663f6b1b-9f9a-49c5-94e3-b78a875e8a1f","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1421563199786,"created_by":1,"updated_at":1421563199786,"updated_by":1},{"id":17,"uuid":"43ed483c-cd35-4449-ac26-810f25d5932c","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1421563199791,"created_by":1,"updated_at":1421563199791,"updated_by":1},{"id":18,"uuid":"70bebce8-1230-4222-b51e-bc2e5b832c54","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1421563199802,"created_by":1,"updated_at":1421563199802,"updated_by":1},{"id":19,"uuid":"a561f256-c666-4b9f-b01a-e0acdebffc9a","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1421563199816,"created_by":1,"updated_at":1421563199816,"updated_by":1},{"id":20,"uuid":"d420f0be-fb5a-439a-b713-51ec5627e872","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1421563199820,"created_by":1,"updated_at":1421563199820,"updated_by":1},{"id":21,"uuid":"41cd49c6-f3b9-4820-b368-03c12ad41c58","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1421563199825,"created_by":1,"updated_at":1421563199825,"updated_by":1},{"id":22,"uuid":"4044d47b-ba6d-44dd-a4ab-e1d669be3ec1","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1421563199830,"created_by":1,"updated_at":1421563199830,"updated_by":1},{"id":23,"uuid":"226e2f8d-27ef-40d2-85e1-1419a63517ee","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1421563199834,"created_by":1,"updated_at":1421563199834,"updated_by":1},{"id":24,"uuid":"d057422c-c86a-4631-b759-0498f13977c6","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1421563199842,"created_by":1,"updated_at":1421563199842,"updated_by":1},{"id":25,"uuid":"36229121-efac-4d85-8839-39072132cd45","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1421563199847,"created_by":1,"updated_at":1421563199847,"updated_by":1},{"id":26,"uuid":"fd7fb30f-0ceb-46d5-840c-9fa3210ec756","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1421563199853,"created_by":1,"updated_at":1421563199853,"updated_by":1},{"id":27,"uuid":"50a282e2-fca2-4415-8619-d23932b7f408","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1421563199861,"created_by":1,"updated_at":1421563199861,"updated_by":1},{"id":28,"uuid":"d49984b5-17f7-4133-8057-fdd762fa57c1","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1421563199866,"created_by":1,"updated_at":1421563199866,"updated_by":1},{"id":29,"uuid":"46c332df-a558-42fd-a011-0c658788aa98","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1421563199875,"created_by":1,"updated_at":1421563199875,"updated_by":1},{"id":30,"uuid":"50793653-b92a-4eef-aabe-59ea9391a26e","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1421563199880,"created_by":1,"updated_at":1421563199880,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"d454bd1b-9442-48ff-b45a-0c6e089b40d8","key":"databaseVersion","value":"003","type":"core","created_at":1421563202512,"created_by":1,"updated_at":1421563202512,"updated_by":1},{"id":2,"uuid":"4e092f80-5864-4392-972d-2fad7e89ea56","key":"dbHash","value":"f4963383-3333-4d81-aca9-77ab3c2cb267","type":"core","created_at":1421563202519,"created_by":1,"updated_at":1421563202641,"updated_by":1},{"id":3,"uuid":"429ef5c4-6cce-4e39-ace7-f0cbc9b15302","key":"nextUpdateCheck","value":"1452878259","type":"core","created_at":1421563202519,"created_by":1,"updated_at":1452791859351,"updated_by":1},{"id":4,"uuid":"ec358025-fb1d-4baa-ac86-25c3c439076e","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1421563202519,"created_by":1,"updated_at":1452791859354,"updated_by":1},{"id":5,"uuid":"76a117b0-3082-4405-9fe4-9336cd7472f7","key":"title","value":"LaiSpace - 来思碑","type":"blog","created_at":1421563202520,"created_by":1,"updated_at":1447997227725,"updated_by":1},{"id":6,"uuid":"1655e179-cfa3-481d-a6cf-31d2a39d364e","key":"description","value":"天酬勤，笨先飞。","type":"blog","created_at":1421563202520,"created_by":1,"updated_at":1447997227727,"updated_by":1},{"id":7,"uuid":"07e98861-cb1c-4882-9cde-a2e96e264a26","key":"email","value":"laixiaolai@foxmail.com","type":"blog","created_at":1421563202520,"created_by":1,"updated_at":1447997227727,"updated_by":1},{"id":8,"uuid":"b120aa2b-6132-41aa-94f0-d32df91235b8","key":"logo","value":"","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227729,"updated_by":1},{"id":9,"uuid":"98bb3200-5ae8-4360-97ba-5be4f2684636","key":"cover","value":"","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227730,"updated_by":1},{"id":10,"uuid":"a79470ab-ccc7-493b-a12a-4f02a3583315","key":"defaultLang","value":"en_US","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227730,"updated_by":1},{"id":11,"uuid":"368fae69-0c6b-4f95-9a54-bef1c197f9ba","key":"postsPerPage","value":"30","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227732,"updated_by":1},{"id":12,"uuid":"e27dfe1b-673b-47e8-a730-0ddad0fdbf3d","key":"forceI18n","value":"true","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227732,"updated_by":1},{"id":13,"uuid":"7a356b0c-e8b1-48d2-ac7a-c7eac13e6900","key":"permalinks","value":"/:slug/","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227733,"updated_by":1},{"id":14,"uuid":"6cda0b47-0126-4f82-85fd-a5e131e94b83","key":"ghost_head","value":"","type":"blog","created_at":1421563202521,"created_by":1,"updated_at":1447997227736,"updated_by":1},{"id":15,"uuid":"1c443375-b906-4618-b2d4-bc7a81b4afb9","key":"ghost_foot","value":"","type":"blog","created_at":1421563202522,"created_by":1,"updated_at":1447997227737,"updated_by":1},{"id":16,"uuid":"674815d4-2cec-4249-89e2-7b66aad9b87e","key":"labs","value":"{\"codeInjectionUI\":true}","type":"blog","created_at":1421563202522,"created_by":1,"updated_at":1447997227738,"updated_by":1},{"id":17,"uuid":"fca0fdd0-24ad-499e-931e-5c5f100061f1","key":"activeApps","value":"[]","type":"app","created_at":1421563202522,"created_by":1,"updated_at":1421563202522,"updated_by":1},{"id":18,"uuid":"1e440ef3-8cd8-4acb-be53-676015f32bf3","key":"installedApps","value":"[]","type":"app","created_at":1421563202522,"created_by":1,"updated_at":1450280831867,"updated_by":1},{"id":19,"uuid":"8e8223fa-d25e-4bbb-a1f1-6ef7fa02034c","key":"activeTheme","value":"lai","type":"theme","created_at":1421563202522,"created_by":1,"updated_at":1447997227735,"updated_by":1},{"id":20,"uuid":"7acce710-09eb-48ae-896a-bfad469224f0","key":"navigation","value":"[{\"label\":\"主页\",\"url\":\"/\"},{\"label\":\"关于\",\"url\":\"/about/\"}]","type":"blog","created_at":1425032226568,"created_by":1,"updated_at":1447997227740,"updated_by":1},{"id":21,"uuid":"0a710141-50c0-443c-bafc-1c3351520380","key":"isPrivate","value":"false","type":"blog","created_at":1440161451955,"created_by":1,"updated_at":1447997227740,"updated_by":1},{"id":22,"uuid":"70d98e2a-94a5-40c9-8df8-d57dd6ce945f","key":"password","value":"lumuma532","type":"blog","created_at":1440161451956,"created_by":1,"updated_at":1447997227742,"updated_by":1}],"tags":[{"id":204,"uuid":"bc8b3002-4398-464b-a8d6-7a7da62ac795","name":"css3","slug":"css3","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046412,"created_by":1,"updated_at":1421584046412,"updated_by":1},{"id":205,"uuid":"08d741be-a6b6-4b4a-9497-0eaa22fa2869","name":"最佳实践","slug":"zui-jia-shi-jian","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046418,"created_by":1,"updated_at":1421584046418,"updated_by":1},{"id":206,"uuid":"f604e3bb-ff75-4634-b244-8fafac33401c","name":"碎片","slug":"sui-pian","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046421,"created_by":1,"updated_at":1421584046421,"updated_by":1},{"id":207,"uuid":"663c38bd-4a2f-408c-bb13-6c6a7ac6c0fe","name":"cookies","slug":"cookies","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046426,"created_by":1,"updated_at":1421584046426,"updated_by":1},{"id":208,"uuid":"7a3f4536-cbd0-4b47-a0a3-75a40ed46bda","name":"git","slug":"git","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046429,"created_by":1,"updated_at":1421584046429,"updated_by":1},{"id":209,"uuid":"b2adb7b9-a055-4c06-b6a4-cca7d97ab8e5","name":"goagent","slug":"goagent","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046436,"created_by":1,"updated_at":1421584046436,"updated_by":1},{"id":210,"uuid":"d06bd775-b6e1-495f-acb8-b2a790113d71","name":"websocket","slug":"websocket","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046439,"created_by":1,"updated_at":1421584046439,"updated_by":1},{"id":211,"uuid":"3cdc7e7a-b9a6-4117-8e81-ef638abb26ed","name":"flex","slug":"flex","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046443,"created_by":1,"updated_at":1421584046443,"updated_by":1},{"id":212,"uuid":"d394e279-3b40-48a9-a75c-354820fc5b81","name":"html5","slug":"html5","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046447,"created_by":1,"updated_at":1421584046447,"updated_by":1},{"id":213,"uuid":"3541657b-f65c-4519-a3ed-cdbba61a37ea","name":"jquery","slug":"jquery","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046453,"created_by":1,"updated_at":1421584046453,"updated_by":1},{"id":214,"uuid":"f8273b8c-0fe0-4c34-b36c-981e9a7b8cd4","name":"json","slug":"json","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046457,"created_by":1,"updated_at":1421584046457,"updated_by":1},{"id":215,"uuid":"af97833a-b534-4609-b39f-bd9b753a5673","name":"javascript","slug":"javascript","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046460,"created_by":1,"updated_at":1421584046460,"updated_by":1},{"id":216,"uuid":"f93f7943-35d2-4bee-93eb-5aef047c9bac","name":"async","slug":"async","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046465,"created_by":1,"updated_at":1421584046465,"updated_by":1},{"id":217,"uuid":"ab22f708-32d2-4be7-9f96-71f36f2fcddf","name":"闭包","slug":"bi-bao","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046469,"created_by":1,"updated_at":1421584046469,"updated_by":1},{"id":218,"uuid":"5af9090e-c624-47fc-aa79-d37aad23ab1b","name":"mysql","slug":"mysql","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046473,"created_by":1,"updated_at":1421584046473,"updated_by":1},{"id":219,"uuid":"7c125eff-3071-45f8-927f-49ce613453e2","name":"meta","slug":"meta","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046476,"created_by":1,"updated_at":1421584046476,"updated_by":1},{"id":220,"uuid":"9b13d669-39bc-488b-a416-eaeb8bd71e81","name":"mongodb","slug":"mongodb","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046480,"created_by":1,"updated_at":1421584046480,"updated_by":1},{"id":221,"uuid":"17919eca-06ac-4b25-9af8-ab3d999f0711","name":"socket","slug":"socket","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046484,"created_by":1,"updated_at":1421584046484,"updated_by":1},{"id":222,"uuid":"9bedeff8-809a-47aa-ae40-88e74564a2c4","name":"debug","slug":"debug","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046488,"created_by":1,"updated_at":1421584046488,"updated_by":1},{"id":223,"uuid":"da1ce084-e009-4b6b-a65d-766f5c223821","name":"dns","slug":"dns","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046508,"created_by":1,"updated_at":1421584046508,"updated_by":1},{"id":224,"uuid":"6230b39c-948b-46ff-bf5a-232f1fc9c5b4","name":"spider","slug":"spider","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046537,"created_by":1,"updated_at":1421584046537,"updated_by":1},{"id":225,"uuid":"f17ce131-321c-4f02-971b-10b871c03b0e","name":"node","slug":"node","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046555,"created_by":1,"updated_at":1421584046555,"updated_by":1},{"id":226,"uuid":"bbb11254-279e-41ae-a78e-4c7b018f0a0a","name":"fs","slug":"fs","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046573,"created_by":1,"updated_at":1421584046573,"updated_by":1},{"id":227,"uuid":"99872bb6-525a-4240-8594-72dc1a9dfc1d","name":"NPM","slug":"npm","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046590,"created_by":1,"updated_at":1421584046590,"updated_by":1},{"id":228,"uuid":"29637060-8a78-4409-a46c-60274313e9b7","name":"stream","slug":"stream","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046610,"created_by":1,"updated_at":1421584046610,"updated_by":1},{"id":229,"uuid":"c453e391-4126-4960-9ef8-8410e2b9eef8","name":"Phonegap","slug":"phonegap","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046628,"created_by":1,"updated_at":1421584046628,"updated_by":1},{"id":230,"uuid":"8e85a2aa-ff6b-43dd-adc6-73a155ecc0ab","name":"vm","slug":"vm","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046635,"created_by":1,"updated_at":1421584046635,"updated_by":1},{"id":231,"uuid":"fa8a3dcb-8c79-49bc-b744-c82f9f63f27f","name":"worker","slug":"worker","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046638,"created_by":1,"updated_at":1421584046638,"updated_by":1},{"id":232,"uuid":"2efb336c-45a6-4e55-af63-610a92b07917","name":"ajax","slug":"ajax","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046642,"created_by":1,"updated_at":1421584046642,"updated_by":1},{"id":233,"uuid":"03a03441-bbd0-48f9-9cc2-bf26c6d9613a","name":"bytewiser","slug":"bytewiser","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046645,"created_by":1,"updated_at":1421584046645,"updated_by":1},{"id":234,"uuid":"07fc07db-9d65-45c2-b627-0fe7b888a555","name":"express","slug":"express","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046652,"created_by":1,"updated_at":1421584046652,"updated_by":1},{"id":235,"uuid":"d50dbbdd-4841-4c3e-af72-e5598e0c7e6a","name":"grunt","slug":"grunt","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046658,"created_by":1,"updated_at":1421584046658,"updated_by":1},{"id":236,"uuid":"00cf5e72-2f52-445d-8cda-57412e791640","name":"fileupload","slug":"fileupload","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046662,"created_by":1,"updated_at":1421584046662,"updated_by":1},{"id":237,"uuid":"a906bc3a-c733-41d6-a1f0-7fcffe048f0c","name":"Notification","slug":"notification","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046666,"created_by":1,"updated_at":1421584046666,"updated_by":1},{"id":238,"uuid":"780710bd-3d5b-412b-b008-c47d68e966cf","name":"lodash","slug":"lodash","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046670,"created_by":1,"updated_at":1421584046670,"updated_by":1},{"id":239,"uuid":"6a00f5b3-0aab-4fa7-9647-ef9d8d3a56d5","name":"moment","slug":"moment","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046674,"created_by":1,"updated_at":1421584046674,"updated_by":1},{"id":240,"uuid":"123ce08c-9dac-48fb-966a-862cff9c33ae","name":"buffer","slug":"buffer","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046677,"created_by":1,"updated_at":1421584046677,"updated_by":1},{"id":241,"uuid":"ecd80f8f-2749-4f14-9c6b-3020343a3264","name":"path","slug":"path","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046689,"created_by":1,"updated_at":1421584046689,"updated_by":1},{"id":242,"uuid":"18e43c7a-e2b6-4a65-8e77-9805e81b2dd4","name":"Child_process","slug":"child_process","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046695,"created_by":1,"updated_at":1421584046695,"updated_by":1},{"id":243,"uuid":"36d1515d-32eb-4098-868d-5780884c24a8","name":"Cluster","slug":"cluster","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046699,"created_by":1,"updated_at":1421584046699,"updated_by":1},{"id":244,"uuid":"b8d79543-8a41-4e60-bbce-4c85ebb9b230","name":"Node modules","slug":"node-modules","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046703,"created_by":1,"updated_at":1421584046703,"updated_by":1},{"id":245,"uuid":"0ac2f3ea-1583-4e18-8494-d5582186bb5e","name":"Mongo","slug":"mongo","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046706,"created_by":1,"updated_at":1421584046706,"updated_by":1},{"id":246,"uuid":"3fdf30e8-9a30-41bc-998d-3ac3c6ee592a","name":"Ubuntu","slug":"ubuntu","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046710,"created_by":1,"updated_at":1421584046710,"updated_by":1},{"id":247,"uuid":"b37a3f74-1cca-4f09-b3ea-35ba53c187d5","name":"前端","slug":"qian-duan","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046713,"created_by":1,"updated_at":1421584046713,"updated_by":1},{"id":248,"uuid":"561bcb08-0597-47ae-ad98-dafdf1bb77f2","name":"wordpress","slug":"wordpress","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046717,"created_by":1,"updated_at":1421584046717,"updated_by":1},{"id":249,"uuid":"f8bb5d49-d766-4cb2-83c0-203a58cfc7be","name":"ES6","slug":"es6","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046720,"created_by":1,"updated_at":1421584046720,"updated_by":1},{"id":250,"uuid":"4e53b28d-dadb-4a8e-829f-86a33c641b03","name":"workplace","slug":"workplace","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046727,"created_by":1,"updated_at":1421584046727,"updated_by":1},{"id":251,"uuid":"b15a9a7e-0a17-4139-a822-16529b17990a","name":"filter","slug":"filter","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046732,"created_by":1,"updated_at":1421584046732,"updated_by":1},{"id":252,"uuid":"0c3acd1e-57c0-46a1-8898-a4c0f9cffd8d","name":"blur","slug":"blur","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046739,"created_by":1,"updated_at":1421584046739,"updated_by":1},{"id":253,"uuid":"110f0c78-4a73-4129-8e3a-8c92e1949cfe","name":"FormData","slug":"formdata","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046743,"created_by":1,"updated_at":1421584046743,"updated_by":1},{"id":254,"uuid":"23a55e85-3c1b-45e4-8308-42238c9f5337","name":"net","slug":"net","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046747,"created_by":1,"updated_at":1421584046747,"updated_by":1},{"id":255,"uuid":"aca12117-7245-457d-9b12-d152e52ec576","name":"tcp","slug":"tcp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046751,"created_by":1,"updated_at":1421584046751,"updated_by":1},{"id":256,"uuid":"c49eea80-f21c-40bf-91d8-9d4741161d7f","name":"HTTP","slug":"http","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046754,"created_by":1,"updated_at":1421584046754,"updated_by":1},{"id":257,"uuid":"f76ad232-2b48-4d6d-ae8e-b7fbc8616dcd","name":"HTTPS","slug":"https","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046758,"created_by":1,"updated_at":1421584046758,"updated_by":1},{"id":258,"uuid":"56cf81af-a369-4995-b6d4-bd1257fef854","name":"Tools","slug":"tools","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046761,"created_by":1,"updated_at":1421584046761,"updated_by":1},{"id":259,"uuid":"92d5e9fa-41e4-4f44-ae9e-322a466cf3ff","name":"Notes","slug":"notes","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046765,"created_by":1,"updated_at":1421584046765,"updated_by":1},{"id":260,"uuid":"289a64f9-b0ff-439e-8b92-9094bf26c8e6","name":"职业规划","slug":"zhi-ye-gui-hua","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046769,"created_by":1,"updated_at":1421584046769,"updated_by":1},{"id":261,"uuid":"851ec5a0-68ea-4a30-b9d9-d30741d7529b","name":"python","slug":"python","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046772,"created_by":1,"updated_at":1421584046772,"updated_by":1},{"id":262,"uuid":"84b0f855-763b-4c81-93cb-3d63565c3993","name":"移动开发","slug":"yi-dong-kai-fa","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046776,"created_by":1,"updated_at":1421584046776,"updated_by":1},{"id":263,"uuid":"9fe932c8-675a-4910-ae63-b2aa9d8fd2b9","name":"crawler","slug":"crawler","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046779,"created_by":1,"updated_at":1426238853464,"updated_by":1},{"id":264,"uuid":"c4ef0880-3220-45bc-825b-98c1f0dcaf44","name":"clearSelect","slug":"clearselect","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421584046783,"created_by":1,"updated_at":1421584046783,"updated_by":1},{"id":265,"uuid":"953f9649-125f-4cd9-b44a-81a84fa3472d","name":"nodejs","slug":"nodejs","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421683233377,"created_by":1,"updated_at":1421683233377,"updated_by":1},{"id":266,"uuid":"855990ff-70a4-404d-95c0-19409f4f657f","name":"vps","slug":"vps","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1427526363923,"created_by":1,"updated_at":1427526363923,"updated_by":1},{"id":267,"uuid":"438cf986-9314-41e5-b6e7-0277c180b4cf","name":"react","slug":"react","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1429538658652,"created_by":1,"updated_at":1429538658652,"updated_by":1},{"id":268,"uuid":"4735c95f-c052-4075-a872-2e6cd60f6511","name":"webpack","slug":"webpack","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1429538658673,"created_by":1,"updated_at":1429538658673,"updated_by":1},{"id":269,"uuid":"7dfbc5ac-6847-4cec-91cf-a5c9818055ac","name":"gulp","slug":"gulp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1429538658692,"created_by":1,"updated_at":1429538658692,"updated_by":1},{"id":270,"uuid":"8ab64a7f-ca1e-4079-ad0b-455d9385f485","name":"performance","slug":"performance","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1441264828104,"created_by":1,"updated_at":1441264828104,"updated_by":1}],"posts_tags":[{"id":389,"post_id":484,"tag_id":205},{"id":390,"post_id":483,"tag_id":204},{"id":391,"post_id":485,"tag_id":206},{"id":392,"post_id":486,"tag_id":207},{"id":393,"post_id":487,"tag_id":208},{"id":394,"post_id":488,"tag_id":209},{"id":395,"post_id":489,"tag_id":210},{"id":396,"post_id":490,"tag_id":211},{"id":397,"post_id":491,"tag_id":212},{"id":398,"post_id":492,"tag_id":213},{"id":399,"post_id":493,"tag_id":214},{"id":400,"post_id":494,"tag_id":215},{"id":401,"post_id":495,"tag_id":216},{"id":402,"post_id":496,"tag_id":217},{"id":403,"post_id":497,"tag_id":206},{"id":404,"post_id":500,"tag_id":218},{"id":405,"post_id":501,"tag_id":219},{"id":406,"post_id":502,"tag_id":220},{"id":407,"post_id":503,"tag_id":221},{"id":408,"post_id":504,"tag_id":222},{"id":409,"post_id":505,"tag_id":223},{"id":410,"post_id":506,"tag_id":224},{"id":411,"post_id":507,"tag_id":225},{"id":412,"post_id":507,"tag_id":226},{"id":413,"post_id":508,"tag_id":227},{"id":414,"post_id":509,"tag_id":227},{"id":415,"post_id":510,"tag_id":228},{"id":416,"post_id":511,"tag_id":229},{"id":417,"post_id":514,"tag_id":230},{"id":418,"post_id":515,"tag_id":231},{"id":419,"post_id":516,"tag_id":232},{"id":420,"post_id":517,"tag_id":233},{"id":421,"post_id":518,"tag_id":234},{"id":422,"post_id":519,"tag_id":235},{"id":423,"post_id":520,"tag_id":236},{"id":424,"post_id":521,"tag_id":212},{"id":425,"post_id":521,"tag_id":237},{"id":426,"post_id":522,"tag_id":213},{"id":427,"post_id":523,"tag_id":213},{"id":428,"post_id":524,"tag_id":205},{"id":429,"post_id":525,"tag_id":225},{"id":430,"post_id":527,"tag_id":238},{"id":431,"post_id":528,"tag_id":219},{"id":432,"post_id":529,"tag_id":239},{"id":433,"post_id":530,"tag_id":220},{"id":434,"post_id":531,"tag_id":225},{"id":435,"post_id":532,"tag_id":240},{"id":436,"post_id":533,"tag_id":226},{"id":437,"post_id":533,"tag_id":241},{"id":438,"post_id":534,"tag_id":225},{"id":439,"post_id":535,"tag_id":225},{"id":440,"post_id":535,"tag_id":242},{"id":441,"post_id":535,"tag_id":243},{"id":442,"post_id":536,"tag_id":244},{"id":443,"post_id":537,"tag_id":225},{"id":444,"post_id":537,"tag_id":245},{"id":445,"post_id":537,"tag_id":246},{"id":446,"post_id":538,"tag_id":247},{"id":447,"post_id":539,"tag_id":248},{"id":448,"post_id":542,"tag_id":249},{"id":449,"post_id":543,"tag_id":249},{"id":450,"post_id":544,"tag_id":249},{"id":451,"post_id":545,"tag_id":249},{"id":452,"post_id":546,"tag_id":212},{"id":453,"post_id":549,"tag_id":250},{"id":454,"post_id":550,"tag_id":251},{"id":455,"post_id":550,"tag_id":252},{"id":456,"post_id":551,"tag_id":253},{"id":457,"post_id":552,"tag_id":254},{"id":458,"post_id":552,"tag_id":255},{"id":459,"post_id":554,"tag_id":256},{"id":460,"post_id":554,"tag_id":257},{"id":461,"post_id":556,"tag_id":258},{"id":462,"post_id":556,"tag_id":259},{"id":463,"post_id":562,"tag_id":260},{"id":464,"post_id":566,"tag_id":261},{"id":465,"post_id":567,"tag_id":262},{"id":466,"post_id":570,"tag_id":263},{"id":467,"post_id":571,"tag_id":259},{"id":468,"post_id":572,"tag_id":264},{"id":482,"post_id":577,"tag_id":249},{"id":483,"post_id":577,"tag_id":267},{"id":484,"post_id":577,"tag_id":268},{"id":485,"post_id":577,"tag_id":269},{"id":577,"post_id":576,"tag_id":266},{"id":581,"post_id":579,"tag_id":270},{"id":588,"post_id":581,"tag_id":218},{"id":599,"post_id":584,"tag_id":261},{"id":605,"post_id":587,"tag_id":261}],"apps":[],"app_settings":[],"app_fields":[]}}